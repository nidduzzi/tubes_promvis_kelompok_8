// GENERATED FILE
// DO NOT MODIFY
import 'package:tubes_promvis_kelompok_8/src/types/graphql/scalar.dart';

class Input$Boolean_comparison_exp {
  factory Input$Boolean_comparison_exp({
    bool? $_eq,
    bool? $_gt,
    bool? $_gte,
    List<bool>? $_in,
    bool? $_is_null,
    bool? $_lt,
    bool? $_lte,
    bool? $_neq,
    List<bool>? $_nin,
  }) =>
      Input$Boolean_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$Boolean_comparison_exp._(this._$data);

  factory Input$Boolean_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as bool?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as bool?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as bool?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as bool)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as bool?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as bool?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as bool?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as bool)).toList();
    }
    return Input$Boolean_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  bool? get $_eq => (_$data['_eq'] as bool?);
  bool? get $_gt => (_$data['_gt'] as bool?);
  bool? get $_gte => (_$data['_gte'] as bool?);
  List<bool>? get $_in => (_$data['_in'] as List<bool>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  bool? get $_lt => (_$data['_lt'] as bool?);
  bool? get $_lte => (_$data['_lte'] as bool?);
  bool? get $_neq => (_$data['_neq'] as bool?);
  List<bool>? get $_nin => (_$data['_nin'] as List<bool>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$Boolean_comparison_exp<Input$Boolean_comparison_exp>
      get copyWith => CopyWith$Input$Boolean_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Boolean_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$Boolean_comparison_exp<TRes> {
  factory CopyWith$Input$Boolean_comparison_exp(
    Input$Boolean_comparison_exp instance,
    TRes Function(Input$Boolean_comparison_exp) then,
  ) = _CopyWithImpl$Input$Boolean_comparison_exp;

  factory CopyWith$Input$Boolean_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Boolean_comparison_exp;

  TRes call({
    bool? $_eq,
    bool? $_gt,
    bool? $_gte,
    List<bool>? $_in,
    bool? $_is_null,
    bool? $_lt,
    bool? $_lte,
    bool? $_neq,
    List<bool>? $_nin,
  });
}

class _CopyWithImpl$Input$Boolean_comparison_exp<TRes>
    implements CopyWith$Input$Boolean_comparison_exp<TRes> {
  _CopyWithImpl$Input$Boolean_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$Boolean_comparison_exp _instance;

  final TRes Function(Input$Boolean_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$Boolean_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as bool?),
        if ($_gt != _undefined) '_gt': ($_gt as bool?),
        if ($_gte != _undefined) '_gte': ($_gte as bool?),
        if ($_in != _undefined) '_in': ($_in as List<bool>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as bool?),
        if ($_lte != _undefined) '_lte': ($_lte as bool?),
        if ($_neq != _undefined) '_neq': ($_neq as bool?),
        if ($_nin != _undefined) '_nin': ($_nin as List<bool>?),
      }));
}

class _CopyWithStubImpl$Input$Boolean_comparison_exp<TRes>
    implements CopyWith$Input$Boolean_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$Boolean_comparison_exp(this._res);

  TRes _res;

  call({
    bool? $_eq,
    bool? $_gt,
    bool? $_gte,
    List<bool>? $_in,
    bool? $_is_null,
    bool? $_lt,
    bool? $_lte,
    bool? $_neq,
    List<bool>? $_nin,
  }) =>
      _res;
}

class Input$Int_comparison_exp {
  factory Input$Int_comparison_exp({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      Input$Int_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$Int_comparison_exp._(this._$data);

  factory Input$Int_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as int?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as int?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as int?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as int?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as int?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as int?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    return Input$Int_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get $_eq => (_$data['_eq'] as int?);
  int? get $_gt => (_$data['_gt'] as int?);
  int? get $_gte => (_$data['_gte'] as int?);
  List<int>? get $_in => (_$data['_in'] as List<int>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  int? get $_lt => (_$data['_lt'] as int?);
  int? get $_lte => (_$data['_lte'] as int?);
  int? get $_neq => (_$data['_neq'] as int?);
  List<int>? get $_nin => (_$data['_nin'] as List<int>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$Int_comparison_exp<Input$Int_comparison_exp> get copyWith =>
      CopyWith$Input$Int_comparison_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$Int_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$Int_comparison_exp<TRes> {
  factory CopyWith$Input$Int_comparison_exp(
    Input$Int_comparison_exp instance,
    TRes Function(Input$Int_comparison_exp) then,
  ) = _CopyWithImpl$Input$Int_comparison_exp;

  factory CopyWith$Input$Int_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$Int_comparison_exp;

  TRes call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  });
}

class _CopyWithImpl$Input$Int_comparison_exp<TRes>
    implements CopyWith$Input$Int_comparison_exp<TRes> {
  _CopyWithImpl$Input$Int_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$Int_comparison_exp _instance;

  final TRes Function(Input$Int_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$Int_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as int?),
        if ($_gt != _undefined) '_gt': ($_gt as int?),
        if ($_gte != _undefined) '_gte': ($_gte as int?),
        if ($_in != _undefined) '_in': ($_in as List<int>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as int?),
        if ($_lte != _undefined) '_lte': ($_lte as int?),
        if ($_neq != _undefined) '_neq': ($_neq as int?),
        if ($_nin != _undefined) '_nin': ($_nin as List<int>?),
      }));
}

class _CopyWithStubImpl$Input$Int_comparison_exp<TRes>
    implements CopyWith$Input$Int_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$Int_comparison_exp(this._res);

  TRes _res;

  call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      _res;
}

class Input$String_comparison_exp {
  factory Input$String_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    String? $_ilike,
    List<String>? $_in,
    String? $_iregex,
    bool? $_is_null,
    String? $_like,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    String? $_nilike,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nlike,
    String? $_nregex,
    String? $_nsimilar,
    String? $_regex,
    String? $_similar,
  }) =>
      Input$String_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_ilike != null) r'_ilike': $_ilike,
        if ($_in != null) r'_in': $_in,
        if ($_iregex != null) r'_iregex': $_iregex,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_like != null) r'_like': $_like,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nilike != null) r'_nilike': $_nilike,
        if ($_nin != null) r'_nin': $_nin,
        if ($_niregex != null) r'_niregex': $_niregex,
        if ($_nlike != null) r'_nlike': $_nlike,
        if ($_nregex != null) r'_nregex': $_nregex,
        if ($_nsimilar != null) r'_nsimilar': $_nsimilar,
        if ($_regex != null) r'_regex': $_regex,
        if ($_similar != null) r'_similar': $_similar,
      });

  Input$String_comparison_exp._(this._$data);

  factory Input$String_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_ilike')) {
      final l$$_ilike = data['_ilike'];
      result$data['_ilike'] = (l$$_ilike as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_iregex')) {
      final l$$_iregex = data['_iregex'];
      result$data['_iregex'] = (l$$_iregex as String?);
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_like')) {
      final l$$_like = data['_like'];
      result$data['_like'] = (l$$_like as String?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nilike')) {
      final l$$_nilike = data['_nilike'];
      result$data['_nilike'] = (l$$_nilike as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_niregex')) {
      final l$$_niregex = data['_niregex'];
      result$data['_niregex'] = (l$$_niregex as String?);
    }
    if (data.containsKey('_nlike')) {
      final l$$_nlike = data['_nlike'];
      result$data['_nlike'] = (l$$_nlike as String?);
    }
    if (data.containsKey('_nregex')) {
      final l$$_nregex = data['_nregex'];
      result$data['_nregex'] = (l$$_nregex as String?);
    }
    if (data.containsKey('_nsimilar')) {
      final l$$_nsimilar = data['_nsimilar'];
      result$data['_nsimilar'] = (l$$_nsimilar as String?);
    }
    if (data.containsKey('_regex')) {
      final l$$_regex = data['_regex'];
      result$data['_regex'] = (l$$_regex as String?);
    }
    if (data.containsKey('_similar')) {
      final l$$_similar = data['_similar'];
      result$data['_similar'] = (l$$_similar as String?);
    }
    return Input$String_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  String? get $_ilike => (_$data['_ilike'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  String? get $_iregex => (_$data['_iregex'] as String?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_like => (_$data['_like'] as String?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  String? get $_nilike => (_$data['_nilike'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  String? get $_niregex => (_$data['_niregex'] as String?);
  String? get $_nlike => (_$data['_nlike'] as String?);
  String? get $_nregex => (_$data['_nregex'] as String?);
  String? get $_nsimilar => (_$data['_nsimilar'] as String?);
  String? get $_regex => (_$data['_regex'] as String?);
  String? get $_similar => (_$data['_similar'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_ilike')) {
      final l$$_ilike = $_ilike;
      result$data['_ilike'] = l$$_ilike;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_iregex')) {
      final l$$_iregex = $_iregex;
      result$data['_iregex'] = l$$_iregex;
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_like')) {
      final l$$_like = $_like;
      result$data['_like'] = l$$_like;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nilike')) {
      final l$$_nilike = $_nilike;
      result$data['_nilike'] = l$$_nilike;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    if (_$data.containsKey('_niregex')) {
      final l$$_niregex = $_niregex;
      result$data['_niregex'] = l$$_niregex;
    }
    if (_$data.containsKey('_nlike')) {
      final l$$_nlike = $_nlike;
      result$data['_nlike'] = l$$_nlike;
    }
    if (_$data.containsKey('_nregex')) {
      final l$$_nregex = $_nregex;
      result$data['_nregex'] = l$$_nregex;
    }
    if (_$data.containsKey('_nsimilar')) {
      final l$$_nsimilar = $_nsimilar;
      result$data['_nsimilar'] = l$$_nsimilar;
    }
    if (_$data.containsKey('_regex')) {
      final l$$_regex = $_regex;
      result$data['_regex'] = l$$_regex;
    }
    if (_$data.containsKey('_similar')) {
      final l$$_similar = $_similar;
      result$data['_similar'] = l$$_similar;
    }
    return result$data;
  }

  CopyWith$Input$String_comparison_exp<Input$String_comparison_exp>
      get copyWith => CopyWith$Input$String_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$String_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_ilike = $_ilike;
    final lOther$$_ilike = other.$_ilike;
    if (_$data.containsKey('_ilike') != other._$data.containsKey('_ilike')) {
      return false;
    }
    if (l$$_ilike != lOther$$_ilike) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_iregex = $_iregex;
    final lOther$$_iregex = other.$_iregex;
    if (_$data.containsKey('_iregex') != other._$data.containsKey('_iregex')) {
      return false;
    }
    if (l$$_iregex != lOther$$_iregex) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_like = $_like;
    final lOther$$_like = other.$_like;
    if (_$data.containsKey('_like') != other._$data.containsKey('_like')) {
      return false;
    }
    if (l$$_like != lOther$$_like) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nilike = $_nilike;
    final lOther$$_nilike = other.$_nilike;
    if (_$data.containsKey('_nilike') != other._$data.containsKey('_nilike')) {
      return false;
    }
    if (l$$_nilike != lOther$$_nilike) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    final l$$_niregex = $_niregex;
    final lOther$$_niregex = other.$_niregex;
    if (_$data.containsKey('_niregex') !=
        other._$data.containsKey('_niregex')) {
      return false;
    }
    if (l$$_niregex != lOther$$_niregex) {
      return false;
    }
    final l$$_nlike = $_nlike;
    final lOther$$_nlike = other.$_nlike;
    if (_$data.containsKey('_nlike') != other._$data.containsKey('_nlike')) {
      return false;
    }
    if (l$$_nlike != lOther$$_nlike) {
      return false;
    }
    final l$$_nregex = $_nregex;
    final lOther$$_nregex = other.$_nregex;
    if (_$data.containsKey('_nregex') != other._$data.containsKey('_nregex')) {
      return false;
    }
    if (l$$_nregex != lOther$$_nregex) {
      return false;
    }
    final l$$_nsimilar = $_nsimilar;
    final lOther$$_nsimilar = other.$_nsimilar;
    if (_$data.containsKey('_nsimilar') !=
        other._$data.containsKey('_nsimilar')) {
      return false;
    }
    if (l$$_nsimilar != lOther$$_nsimilar) {
      return false;
    }
    final l$$_regex = $_regex;
    final lOther$$_regex = other.$_regex;
    if (_$data.containsKey('_regex') != other._$data.containsKey('_regex')) {
      return false;
    }
    if (l$$_regex != lOther$$_regex) {
      return false;
    }
    final l$$_similar = $_similar;
    final lOther$$_similar = other.$_similar;
    if (_$data.containsKey('_similar') !=
        other._$data.containsKey('_similar')) {
      return false;
    }
    if (l$$_similar != lOther$$_similar) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_ilike = $_ilike;
    final l$$_in = $_in;
    final l$$_iregex = $_iregex;
    final l$$_is_null = $_is_null;
    final l$$_like = $_like;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nilike = $_nilike;
    final l$$_nin = $_nin;
    final l$$_niregex = $_niregex;
    final l$$_nlike = $_nlike;
    final l$$_nregex = $_nregex;
    final l$$_nsimilar = $_nsimilar;
    final l$$_regex = $_regex;
    final l$$_similar = $_similar;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_ilike') ? l$$_ilike : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_iregex') ? l$$_iregex : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_like') ? l$$_like : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nilike') ? l$$_nilike : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
      _$data.containsKey('_niregex') ? l$$_niregex : const {},
      _$data.containsKey('_nlike') ? l$$_nlike : const {},
      _$data.containsKey('_nregex') ? l$$_nregex : const {},
      _$data.containsKey('_nsimilar') ? l$$_nsimilar : const {},
      _$data.containsKey('_regex') ? l$$_regex : const {},
      _$data.containsKey('_similar') ? l$$_similar : const {},
    ]);
  }
}

abstract class CopyWith$Input$String_comparison_exp<TRes> {
  factory CopyWith$Input$String_comparison_exp(
    Input$String_comparison_exp instance,
    TRes Function(Input$String_comparison_exp) then,
  ) = _CopyWithImpl$Input$String_comparison_exp;

  factory CopyWith$Input$String_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$String_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    String? $_ilike,
    List<String>? $_in,
    String? $_iregex,
    bool? $_is_null,
    String? $_like,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    String? $_nilike,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nlike,
    String? $_nregex,
    String? $_nsimilar,
    String? $_regex,
    String? $_similar,
  });
}

class _CopyWithImpl$Input$String_comparison_exp<TRes>
    implements CopyWith$Input$String_comparison_exp<TRes> {
  _CopyWithImpl$Input$String_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$String_comparison_exp _instance;

  final TRes Function(Input$String_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_ilike = _undefined,
    Object? $_in = _undefined,
    Object? $_iregex = _undefined,
    Object? $_is_null = _undefined,
    Object? $_like = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nilike = _undefined,
    Object? $_nin = _undefined,
    Object? $_niregex = _undefined,
    Object? $_nlike = _undefined,
    Object? $_nregex = _undefined,
    Object? $_nsimilar = _undefined,
    Object? $_regex = _undefined,
    Object? $_similar = _undefined,
  }) =>
      _then(Input$String_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_ilike != _undefined) '_ilike': ($_ilike as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_iregex != _undefined) '_iregex': ($_iregex as String?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_like != _undefined) '_like': ($_like as String?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nilike != _undefined) '_nilike': ($_nilike as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
        if ($_niregex != _undefined) '_niregex': ($_niregex as String?),
        if ($_nlike != _undefined) '_nlike': ($_nlike as String?),
        if ($_nregex != _undefined) '_nregex': ($_nregex as String?),
        if ($_nsimilar != _undefined) '_nsimilar': ($_nsimilar as String?),
        if ($_regex != _undefined) '_regex': ($_regex as String?),
        if ($_similar != _undefined) '_similar': ($_similar as String?),
      }));
}

class _CopyWithStubImpl$Input$String_comparison_exp<TRes>
    implements CopyWith$Input$String_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$String_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    String? $_ilike,
    List<String>? $_in,
    String? $_iregex,
    bool? $_is_null,
    String? $_like,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    String? $_nilike,
    List<String>? $_nin,
    String? $_niregex,
    String? $_nlike,
    String? $_nregex,
    String? $_nsimilar,
    String? $_regex,
    String? $_similar,
  }) =>
      _res;
}

class Input$authProviderRequests_append_input {
  factory Input$authProviderRequests_append_input({JSONB? options}) =>
      Input$authProviderRequests_append_input._({
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_append_input._(this._$data);

  factory Input$authProviderRequests_append_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] =
          l$options == null ? null : jsonbFromJson(l$options);
    }
    return Input$authProviderRequests_append_input._(result$data);
  }

  Map<String, dynamic> _$data;

  JSONB? get options => (_$data['options'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] =
          l$options == null ? null : jsonbToJson(l$options);
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_append_input<
          Input$authProviderRequests_append_input>
      get copyWith => CopyWith$Input$authProviderRequests_append_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_append_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$options = options;
    return Object.hashAll(
        [_$data.containsKey('options') ? l$options : const {}]);
  }
}

abstract class CopyWith$Input$authProviderRequests_append_input<TRes> {
  factory CopyWith$Input$authProviderRequests_append_input(
    Input$authProviderRequests_append_input instance,
    TRes Function(Input$authProviderRequests_append_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_append_input;

  factory CopyWith$Input$authProviderRequests_append_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_append_input;

  TRes call({JSONB? options});
}

class _CopyWithImpl$Input$authProviderRequests_append_input<TRes>
    implements CopyWith$Input$authProviderRequests_append_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_append_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_append_input _instance;

  final TRes Function(Input$authProviderRequests_append_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? options = _undefined}) =>
      _then(Input$authProviderRequests_append_input._({
        ..._instance._$data,
        if (options != _undefined) 'options': (options as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_append_input<TRes>
    implements CopyWith$Input$authProviderRequests_append_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_append_input(this._res);

  TRes _res;

  call({JSONB? options}) => _res;
}

class Input$authProviderRequests_bool_exp {
  factory Input$authProviderRequests_bool_exp({
    List<Input$authProviderRequests_bool_exp>? $_and,
    Input$authProviderRequests_bool_exp? $_not,
    List<Input$authProviderRequests_bool_exp>? $_or,
    Input$uuid_comparison_exp? id,
    Input$jsonb_comparison_exp? options,
  }) =>
      Input$authProviderRequests_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (id != null) r'id': id,
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_bool_exp._(this._$data);

  factory Input$authProviderRequests_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$authProviderRequests_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authProviderRequests_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$authProviderRequests_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$uuid_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] = l$options == null
          ? null
          : Input$jsonb_comparison_exp.fromJson(
              (l$options as Map<String, dynamic>));
    }
    return Input$authProviderRequests_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authProviderRequests_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authProviderRequests_bool_exp>?);
  Input$authProviderRequests_bool_exp? get $_not =>
      (_$data['_not'] as Input$authProviderRequests_bool_exp?);
  List<Input$authProviderRequests_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authProviderRequests_bool_exp>?);
  Input$uuid_comparison_exp? get id =>
      (_$data['id'] as Input$uuid_comparison_exp?);
  Input$jsonb_comparison_exp? get options =>
      (_$data['options'] as Input$jsonb_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] = l$options?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_bool_exp<
          Input$authProviderRequests_bool_exp>
      get copyWith => CopyWith$Input$authProviderRequests_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$id = id;
    final l$options = options;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('options') ? l$options : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_bool_exp<TRes> {
  factory CopyWith$Input$authProviderRequests_bool_exp(
    Input$authProviderRequests_bool_exp instance,
    TRes Function(Input$authProviderRequests_bool_exp) then,
  ) = _CopyWithImpl$Input$authProviderRequests_bool_exp;

  factory CopyWith$Input$authProviderRequests_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_bool_exp;

  TRes call({
    List<Input$authProviderRequests_bool_exp>? $_and,
    Input$authProviderRequests_bool_exp? $_not,
    List<Input$authProviderRequests_bool_exp>? $_or,
    Input$uuid_comparison_exp? id,
    Input$jsonb_comparison_exp? options,
  });
  TRes $_and(
      Iterable<Input$authProviderRequests_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authProviderRequests_bool_exp<
                      Input$authProviderRequests_bool_exp>>?)
          _fn);
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authProviderRequests_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authProviderRequests_bool_exp<
                      Input$authProviderRequests_bool_exp>>?)
          _fn);
  CopyWith$Input$uuid_comparison_exp<TRes> get id;
  CopyWith$Input$jsonb_comparison_exp<TRes> get options;
}

class _CopyWithImpl$Input$authProviderRequests_bool_exp<TRes>
    implements CopyWith$Input$authProviderRequests_bool_exp<TRes> {
  _CopyWithImpl$Input$authProviderRequests_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_bool_exp _instance;

  final TRes Function(Input$authProviderRequests_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? id = _undefined,
    Object? options = _undefined,
  }) =>
      _then(Input$authProviderRequests_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authProviderRequests_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$authProviderRequests_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authProviderRequests_bool_exp>?),
        if (id != _undefined) 'id': (id as Input$uuid_comparison_exp?),
        if (options != _undefined)
          'options': (options as Input$jsonb_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$authProviderRequests_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authProviderRequests_bool_exp<
                          Input$authProviderRequests_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$authProviderRequests_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authProviderRequests_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authProviderRequests_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authProviderRequests_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authProviderRequests_bool_exp<
                          Input$authProviderRequests_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$authProviderRequests_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$uuid_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$jsonb_comparison_exp<TRes> get options {
    final local$options = _instance.options;
    return local$options == null
        ? CopyWith$Input$jsonb_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$jsonb_comparison_exp(
            local$options, (e) => call(options: e));
  }
}

class _CopyWithStubImpl$Input$authProviderRequests_bool_exp<TRes>
    implements CopyWith$Input$authProviderRequests_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authProviderRequests_bool_exp>? $_and,
    Input$authProviderRequests_bool_exp? $_not,
    List<Input$authProviderRequests_bool_exp>? $_or,
    Input$uuid_comparison_exp? id,
    Input$jsonb_comparison_exp? options,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get $_not =>
      CopyWith$Input$authProviderRequests_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$uuid_comparison_exp<TRes> get id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$jsonb_comparison_exp<TRes> get options =>
      CopyWith$Input$jsonb_comparison_exp.stub(_res);
}

class Input$authProviderRequests_delete_at_path_input {
  factory Input$authProviderRequests_delete_at_path_input(
          {List<String>? options}) =>
      Input$authProviderRequests_delete_at_path_input._({
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_delete_at_path_input._(this._$data);

  factory Input$authProviderRequests_delete_at_path_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] =
          (l$options as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$authProviderRequests_delete_at_path_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<String>? get options => (_$data['options'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] = l$options?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_delete_at_path_input<
          Input$authProviderRequests_delete_at_path_input>
      get copyWith => CopyWith$Input$authProviderRequests_delete_at_path_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_delete_at_path_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != null && lOther$options != null) {
      if (l$options.length != lOther$options.length) {
        return false;
      }
      for (int i = 0; i < l$options.length; i++) {
        final l$options$entry = l$options[i];
        final lOther$options$entry = lOther$options[i];
        if (l$options$entry != lOther$options$entry) {
          return false;
        }
      }
    } else if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$options = options;
    return Object.hashAll([
      _$data.containsKey('options')
          ? l$options == null
              ? null
              : Object.hashAll(l$options.map((v) => v))
          : const {}
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_delete_at_path_input<TRes> {
  factory CopyWith$Input$authProviderRequests_delete_at_path_input(
    Input$authProviderRequests_delete_at_path_input instance,
    TRes Function(Input$authProviderRequests_delete_at_path_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_delete_at_path_input;

  factory CopyWith$Input$authProviderRequests_delete_at_path_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_delete_at_path_input;

  TRes call({List<String>? options});
}

class _CopyWithImpl$Input$authProviderRequests_delete_at_path_input<TRes>
    implements CopyWith$Input$authProviderRequests_delete_at_path_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_delete_at_path_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_delete_at_path_input _instance;

  final TRes Function(Input$authProviderRequests_delete_at_path_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? options = _undefined}) =>
      _then(Input$authProviderRequests_delete_at_path_input._({
        ..._instance._$data,
        if (options != _undefined) 'options': (options as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_delete_at_path_input<TRes>
    implements CopyWith$Input$authProviderRequests_delete_at_path_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_delete_at_path_input(this._res);

  TRes _res;

  call({List<String>? options}) => _res;
}

class Input$authProviderRequests_delete_elem_input {
  factory Input$authProviderRequests_delete_elem_input({int? options}) =>
      Input$authProviderRequests_delete_elem_input._({
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_delete_elem_input._(this._$data);

  factory Input$authProviderRequests_delete_elem_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] = (l$options as int?);
    }
    return Input$authProviderRequests_delete_elem_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get options => (_$data['options'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] = l$options;
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_delete_elem_input<
          Input$authProviderRequests_delete_elem_input>
      get copyWith => CopyWith$Input$authProviderRequests_delete_elem_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_delete_elem_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$options = options;
    return Object.hashAll(
        [_$data.containsKey('options') ? l$options : const {}]);
  }
}

abstract class CopyWith$Input$authProviderRequests_delete_elem_input<TRes> {
  factory CopyWith$Input$authProviderRequests_delete_elem_input(
    Input$authProviderRequests_delete_elem_input instance,
    TRes Function(Input$authProviderRequests_delete_elem_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_delete_elem_input;

  factory CopyWith$Input$authProviderRequests_delete_elem_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_delete_elem_input;

  TRes call({int? options});
}

class _CopyWithImpl$Input$authProviderRequests_delete_elem_input<TRes>
    implements CopyWith$Input$authProviderRequests_delete_elem_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_delete_elem_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_delete_elem_input _instance;

  final TRes Function(Input$authProviderRequests_delete_elem_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? options = _undefined}) =>
      _then(Input$authProviderRequests_delete_elem_input._({
        ..._instance._$data,
        if (options != _undefined) 'options': (options as int?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_delete_elem_input<TRes>
    implements CopyWith$Input$authProviderRequests_delete_elem_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_delete_elem_input(this._res);

  TRes _res;

  call({int? options}) => _res;
}

class Input$authProviderRequests_delete_key_input {
  factory Input$authProviderRequests_delete_key_input({String? options}) =>
      Input$authProviderRequests_delete_key_input._({
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_delete_key_input._(this._$data);

  factory Input$authProviderRequests_delete_key_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] = (l$options as String?);
    }
    return Input$authProviderRequests_delete_key_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get options => (_$data['options'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] = l$options;
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_delete_key_input<
          Input$authProviderRequests_delete_key_input>
      get copyWith => CopyWith$Input$authProviderRequests_delete_key_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_delete_key_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$options = options;
    return Object.hashAll(
        [_$data.containsKey('options') ? l$options : const {}]);
  }
}

abstract class CopyWith$Input$authProviderRequests_delete_key_input<TRes> {
  factory CopyWith$Input$authProviderRequests_delete_key_input(
    Input$authProviderRequests_delete_key_input instance,
    TRes Function(Input$authProviderRequests_delete_key_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_delete_key_input;

  factory CopyWith$Input$authProviderRequests_delete_key_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_delete_key_input;

  TRes call({String? options});
}

class _CopyWithImpl$Input$authProviderRequests_delete_key_input<TRes>
    implements CopyWith$Input$authProviderRequests_delete_key_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_delete_key_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_delete_key_input _instance;

  final TRes Function(Input$authProviderRequests_delete_key_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? options = _undefined}) =>
      _then(Input$authProviderRequests_delete_key_input._({
        ..._instance._$data,
        if (options != _undefined) 'options': (options as String?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_delete_key_input<TRes>
    implements CopyWith$Input$authProviderRequests_delete_key_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_delete_key_input(this._res);

  TRes _res;

  call({String? options}) => _res;
}

class Input$authProviderRequests_insert_input {
  factory Input$authProviderRequests_insert_input({
    UUID? id,
    JSONB? options,
  }) =>
      Input$authProviderRequests_insert_input._({
        if (id != null) r'id': id,
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_insert_input._(this._$data);

  factory Input$authProviderRequests_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] =
          l$options == null ? null : jsonbFromJson(l$options);
    }
    return Input$authProviderRequests_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID? get id => (_$data['id'] as UUID?);
  JSONB? get options => (_$data['options'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] =
          l$options == null ? null : jsonbToJson(l$options);
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_insert_input<
          Input$authProviderRequests_insert_input>
      get copyWith => CopyWith$Input$authProviderRequests_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$options = options;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('options') ? l$options : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_insert_input<TRes> {
  factory CopyWith$Input$authProviderRequests_insert_input(
    Input$authProviderRequests_insert_input instance,
    TRes Function(Input$authProviderRequests_insert_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_insert_input;

  factory CopyWith$Input$authProviderRequests_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_insert_input;

  TRes call({
    UUID? id,
    JSONB? options,
  });
}

class _CopyWithImpl$Input$authProviderRequests_insert_input<TRes>
    implements CopyWith$Input$authProviderRequests_insert_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_insert_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_insert_input _instance;

  final TRes Function(Input$authProviderRequests_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? options = _undefined,
  }) =>
      _then(Input$authProviderRequests_insert_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as UUID?),
        if (options != _undefined) 'options': (options as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_insert_input<TRes>
    implements CopyWith$Input$authProviderRequests_insert_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_insert_input(this._res);

  TRes _res;

  call({
    UUID? id,
    JSONB? options,
  }) =>
      _res;
}

class Input$authProviderRequests_on_conflict {
  factory Input$authProviderRequests_on_conflict({
    required Enum$authProviderRequests_constraint constraint,
    required List<Enum$authProviderRequests_update_column> update_columns,
    Input$authProviderRequests_bool_exp? where,
  }) =>
      Input$authProviderRequests_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authProviderRequests_on_conflict._(this._$data);

  factory Input$authProviderRequests_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$authProviderRequests_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$authProviderRequests_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authProviderRequests_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authProviderRequests_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authProviderRequests_constraint get constraint =>
      (_$data['constraint'] as Enum$authProviderRequests_constraint);
  List<Enum$authProviderRequests_update_column> get update_columns =>
      (_$data['update_columns']
          as List<Enum$authProviderRequests_update_column>);
  Input$authProviderRequests_bool_exp? get where =>
      (_$data['where'] as Input$authProviderRequests_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$authProviderRequests_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authProviderRequests_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_on_conflict<
          Input$authProviderRequests_on_conflict>
      get copyWith => CopyWith$Input$authProviderRequests_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_on_conflict<TRes> {
  factory CopyWith$Input$authProviderRequests_on_conflict(
    Input$authProviderRequests_on_conflict instance,
    TRes Function(Input$authProviderRequests_on_conflict) then,
  ) = _CopyWithImpl$Input$authProviderRequests_on_conflict;

  factory CopyWith$Input$authProviderRequests_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_on_conflict;

  TRes call({
    Enum$authProviderRequests_constraint? constraint,
    List<Enum$authProviderRequests_update_column>? update_columns,
    Input$authProviderRequests_bool_exp? where,
  });
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authProviderRequests_on_conflict<TRes>
    implements CopyWith$Input$authProviderRequests_on_conflict<TRes> {
  _CopyWithImpl$Input$authProviderRequests_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_on_conflict _instance;

  final TRes Function(Input$authProviderRequests_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authProviderRequests_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authProviderRequests_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$authProviderRequests_update_column>),
        if (where != _undefined)
          'where': (where as Input$authProviderRequests_bool_exp?),
      }));
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authProviderRequests_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authProviderRequests_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authProviderRequests_on_conflict<TRes>
    implements CopyWith$Input$authProviderRequests_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authProviderRequests_constraint? constraint,
    List<Enum$authProviderRequests_update_column>? update_columns,
    Input$authProviderRequests_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get where =>
      CopyWith$Input$authProviderRequests_bool_exp.stub(_res);
}

class Input$authProviderRequests_order_by {
  factory Input$authProviderRequests_order_by({
    Enum$order_by? id,
    Enum$order_by? options,
  }) =>
      Input$authProviderRequests_order_by._({
        if (id != null) r'id': id,
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_order_by._(this._$data);

  factory Input$authProviderRequests_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] = l$options == null
          ? null
          : fromJson$Enum$order_by((l$options as String));
    }
    return Input$authProviderRequests_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get options => (_$data['options'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] =
          l$options == null ? null : toJson$Enum$order_by(l$options);
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_order_by<
          Input$authProviderRequests_order_by>
      get copyWith => CopyWith$Input$authProviderRequests_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$options = options;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('options') ? l$options : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_order_by<TRes> {
  factory CopyWith$Input$authProviderRequests_order_by(
    Input$authProviderRequests_order_by instance,
    TRes Function(Input$authProviderRequests_order_by) then,
  ) = _CopyWithImpl$Input$authProviderRequests_order_by;

  factory CopyWith$Input$authProviderRequests_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_order_by;

  TRes call({
    Enum$order_by? id,
    Enum$order_by? options,
  });
}

class _CopyWithImpl$Input$authProviderRequests_order_by<TRes>
    implements CopyWith$Input$authProviderRequests_order_by<TRes> {
  _CopyWithImpl$Input$authProviderRequests_order_by(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_order_by _instance;

  final TRes Function(Input$authProviderRequests_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? options = _undefined,
  }) =>
      _then(Input$authProviderRequests_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (options != _undefined) 'options': (options as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_order_by<TRes>
    implements CopyWith$Input$authProviderRequests_order_by<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Enum$order_by? options,
  }) =>
      _res;
}

class Input$authProviderRequests_pk_columns_input {
  factory Input$authProviderRequests_pk_columns_input({required UUID id}) =>
      Input$authProviderRequests_pk_columns_input._({
        r'id': id,
      });

  Input$authProviderRequests_pk_columns_input._(this._$data);

  factory Input$authProviderRequests_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = uuidFromJson(l$id);
    return Input$authProviderRequests_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get id => (_$data['id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = uuidToJson(l$id);
    return result$data;
  }

  CopyWith$Input$authProviderRequests_pk_columns_input<
          Input$authProviderRequests_pk_columns_input>
      get copyWith => CopyWith$Input$authProviderRequests_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$authProviderRequests_pk_columns_input<TRes> {
  factory CopyWith$Input$authProviderRequests_pk_columns_input(
    Input$authProviderRequests_pk_columns_input instance,
    TRes Function(Input$authProviderRequests_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_pk_columns_input;

  factory CopyWith$Input$authProviderRequests_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_pk_columns_input;

  TRes call({UUID? id});
}

class _CopyWithImpl$Input$authProviderRequests_pk_columns_input<TRes>
    implements CopyWith$Input$authProviderRequests_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_pk_columns_input _instance;

  final TRes Function(Input$authProviderRequests_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authProviderRequests_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as UUID),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_pk_columns_input<TRes>
    implements CopyWith$Input$authProviderRequests_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_pk_columns_input(this._res);

  TRes _res;

  call({UUID? id}) => _res;
}

class Input$authProviderRequests_prepend_input {
  factory Input$authProviderRequests_prepend_input({JSONB? options}) =>
      Input$authProviderRequests_prepend_input._({
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_prepend_input._(this._$data);

  factory Input$authProviderRequests_prepend_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] =
          l$options == null ? null : jsonbFromJson(l$options);
    }
    return Input$authProviderRequests_prepend_input._(result$data);
  }

  Map<String, dynamic> _$data;

  JSONB? get options => (_$data['options'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] =
          l$options == null ? null : jsonbToJson(l$options);
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_prepend_input<
          Input$authProviderRequests_prepend_input>
      get copyWith => CopyWith$Input$authProviderRequests_prepend_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_prepend_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$options = options;
    return Object.hashAll(
        [_$data.containsKey('options') ? l$options : const {}]);
  }
}

abstract class CopyWith$Input$authProviderRequests_prepend_input<TRes> {
  factory CopyWith$Input$authProviderRequests_prepend_input(
    Input$authProviderRequests_prepend_input instance,
    TRes Function(Input$authProviderRequests_prepend_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_prepend_input;

  factory CopyWith$Input$authProviderRequests_prepend_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_prepend_input;

  TRes call({JSONB? options});
}

class _CopyWithImpl$Input$authProviderRequests_prepend_input<TRes>
    implements CopyWith$Input$authProviderRequests_prepend_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_prepend_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_prepend_input _instance;

  final TRes Function(Input$authProviderRequests_prepend_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? options = _undefined}) =>
      _then(Input$authProviderRequests_prepend_input._({
        ..._instance._$data,
        if (options != _undefined) 'options': (options as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_prepend_input<TRes>
    implements CopyWith$Input$authProviderRequests_prepend_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_prepend_input(this._res);

  TRes _res;

  call({JSONB? options}) => _res;
}

class Input$authProviderRequests_set_input {
  factory Input$authProviderRequests_set_input({
    UUID? id,
    JSONB? options,
  }) =>
      Input$authProviderRequests_set_input._({
        if (id != null) r'id': id,
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_set_input._(this._$data);

  factory Input$authProviderRequests_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] =
          l$options == null ? null : jsonbFromJson(l$options);
    }
    return Input$authProviderRequests_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID? get id => (_$data['id'] as UUID?);
  JSONB? get options => (_$data['options'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] =
          l$options == null ? null : jsonbToJson(l$options);
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_set_input<
          Input$authProviderRequests_set_input>
      get copyWith => CopyWith$Input$authProviderRequests_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$options = options;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('options') ? l$options : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_set_input<TRes> {
  factory CopyWith$Input$authProviderRequests_set_input(
    Input$authProviderRequests_set_input instance,
    TRes Function(Input$authProviderRequests_set_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_set_input;

  factory CopyWith$Input$authProviderRequests_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_set_input;

  TRes call({
    UUID? id,
    JSONB? options,
  });
}

class _CopyWithImpl$Input$authProviderRequests_set_input<TRes>
    implements CopyWith$Input$authProviderRequests_set_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_set_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_set_input _instance;

  final TRes Function(Input$authProviderRequests_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? options = _undefined,
  }) =>
      _then(Input$authProviderRequests_set_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as UUID?),
        if (options != _undefined) 'options': (options as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_set_input<TRes>
    implements CopyWith$Input$authProviderRequests_set_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_set_input(this._res);

  TRes _res;

  call({
    UUID? id,
    JSONB? options,
  }) =>
      _res;
}

class Input$authProviderRequests_stream_cursor_input {
  factory Input$authProviderRequests_stream_cursor_input({
    required Input$authProviderRequests_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authProviderRequests_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authProviderRequests_stream_cursor_input._(this._$data);

  factory Input$authProviderRequests_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authProviderRequests_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authProviderRequests_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authProviderRequests_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$authProviderRequests_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_stream_cursor_input<
          Input$authProviderRequests_stream_cursor_input>
      get copyWith => CopyWith$Input$authProviderRequests_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_stream_cursor_input<TRes> {
  factory CopyWith$Input$authProviderRequests_stream_cursor_input(
    Input$authProviderRequests_stream_cursor_input instance,
    TRes Function(Input$authProviderRequests_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_stream_cursor_input;

  factory CopyWith$Input$authProviderRequests_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_stream_cursor_input;

  TRes call({
    Input$authProviderRequests_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authProviderRequests_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$authProviderRequests_stream_cursor_input<TRes>
    implements CopyWith$Input$authProviderRequests_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_stream_cursor_input _instance;

  final TRes Function(Input$authProviderRequests_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authProviderRequests_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$authProviderRequests_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authProviderRequests_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authProviderRequests_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authProviderRequests_stream_cursor_input<TRes>
    implements CopyWith$Input$authProviderRequests_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authProviderRequests_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authProviderRequests_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$authProviderRequests_stream_cursor_value_input.stub(
              _res);
}

class Input$authProviderRequests_stream_cursor_value_input {
  factory Input$authProviderRequests_stream_cursor_value_input({
    UUID? id,
    JSONB? options,
  }) =>
      Input$authProviderRequests_stream_cursor_value_input._({
        if (id != null) r'id': id,
        if (options != null) r'options': options,
      });

  Input$authProviderRequests_stream_cursor_value_input._(this._$data);

  factory Input$authProviderRequests_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('options')) {
      final l$options = data['options'];
      result$data['options'] =
          l$options == null ? null : jsonbFromJson(l$options);
    }
    return Input$authProviderRequests_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID? get id => (_$data['id'] as UUID?);
  JSONB? get options => (_$data['options'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('options')) {
      final l$options = options;
      result$data['options'] =
          l$options == null ? null : jsonbToJson(l$options);
    }
    return result$data;
  }

  CopyWith$Input$authProviderRequests_stream_cursor_value_input<
          Input$authProviderRequests_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$authProviderRequests_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$options = options;
    final lOther$options = other.options;
    if (_$data.containsKey('options') != other._$data.containsKey('options')) {
      return false;
    }
    if (l$options != lOther$options) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$options = options;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('options') ? l$options : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$authProviderRequests_stream_cursor_value_input(
    Input$authProviderRequests_stream_cursor_value_input instance,
    TRes Function(Input$authProviderRequests_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authProviderRequests_stream_cursor_value_input;

  factory CopyWith$Input$authProviderRequests_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_stream_cursor_value_input;

  TRes call({
    UUID? id,
    JSONB? options,
  });
}

class _CopyWithImpl$Input$authProviderRequests_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$authProviderRequests_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authProviderRequests_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_stream_cursor_value_input _instance;

  final TRes Function(Input$authProviderRequests_stream_cursor_value_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? options = _undefined,
  }) =>
      _then(Input$authProviderRequests_stream_cursor_value_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as UUID?),
        if (options != _undefined) 'options': (options as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$authProviderRequests_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$authProviderRequests_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    UUID? id,
    JSONB? options,
  }) =>
      _res;
}

class Input$authProviderRequests_updates {
  factory Input$authProviderRequests_updates({
    Input$authProviderRequests_append_input? $_append,
    Input$authProviderRequests_delete_at_path_input? $_delete_at_path,
    Input$authProviderRequests_delete_elem_input? $_delete_elem,
    Input$authProviderRequests_delete_key_input? $_delete_key,
    Input$authProviderRequests_prepend_input? $_prepend,
    Input$authProviderRequests_set_input? $_set,
    required Input$authProviderRequests_bool_exp where,
  }) =>
      Input$authProviderRequests_updates._({
        if ($_append != null) r'_append': $_append,
        if ($_delete_at_path != null) r'_delete_at_path': $_delete_at_path,
        if ($_delete_elem != null) r'_delete_elem': $_delete_elem,
        if ($_delete_key != null) r'_delete_key': $_delete_key,
        if ($_prepend != null) r'_prepend': $_prepend,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authProviderRequests_updates._(this._$data);

  factory Input$authProviderRequests_updates.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_append')) {
      final l$$_append = data['_append'];
      result$data['_append'] = l$$_append == null
          ? null
          : Input$authProviderRequests_append_input.fromJson(
              (l$$_append as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = data['_delete_at_path'];
      result$data['_delete_at_path'] = l$$_delete_at_path == null
          ? null
          : Input$authProviderRequests_delete_at_path_input.fromJson(
              (l$$_delete_at_path as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_elem')) {
      final l$$_delete_elem = data['_delete_elem'];
      result$data['_delete_elem'] = l$$_delete_elem == null
          ? null
          : Input$authProviderRequests_delete_elem_input.fromJson(
              (l$$_delete_elem as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_key')) {
      final l$$_delete_key = data['_delete_key'];
      result$data['_delete_key'] = l$$_delete_key == null
          ? null
          : Input$authProviderRequests_delete_key_input.fromJson(
              (l$$_delete_key as Map<String, dynamic>));
    }
    if (data.containsKey('_prepend')) {
      final l$$_prepend = data['_prepend'];
      result$data['_prepend'] = l$$_prepend == null
          ? null
          : Input$authProviderRequests_prepend_input.fromJson(
              (l$$_prepend as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authProviderRequests_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$authProviderRequests_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$authProviderRequests_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authProviderRequests_append_input? get $_append =>
      (_$data['_append'] as Input$authProviderRequests_append_input?);
  Input$authProviderRequests_delete_at_path_input? get $_delete_at_path =>
      (_$data['_delete_at_path']
          as Input$authProviderRequests_delete_at_path_input?);
  Input$authProviderRequests_delete_elem_input? get $_delete_elem =>
      (_$data['_delete_elem'] as Input$authProviderRequests_delete_elem_input?);
  Input$authProviderRequests_delete_key_input? get $_delete_key =>
      (_$data['_delete_key'] as Input$authProviderRequests_delete_key_input?);
  Input$authProviderRequests_prepend_input? get $_prepend =>
      (_$data['_prepend'] as Input$authProviderRequests_prepend_input?);
  Input$authProviderRequests_set_input? get $_set =>
      (_$data['_set'] as Input$authProviderRequests_set_input?);
  Input$authProviderRequests_bool_exp get where =>
      (_$data['where'] as Input$authProviderRequests_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_append')) {
      final l$$_append = $_append;
      result$data['_append'] = l$$_append?.toJson();
    }
    if (_$data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = $_delete_at_path;
      result$data['_delete_at_path'] = l$$_delete_at_path?.toJson();
    }
    if (_$data.containsKey('_delete_elem')) {
      final l$$_delete_elem = $_delete_elem;
      result$data['_delete_elem'] = l$$_delete_elem?.toJson();
    }
    if (_$data.containsKey('_delete_key')) {
      final l$$_delete_key = $_delete_key;
      result$data['_delete_key'] = l$$_delete_key?.toJson();
    }
    if (_$data.containsKey('_prepend')) {
      final l$$_prepend = $_prepend;
      result$data['_prepend'] = l$$_prepend?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authProviderRequests_updates<
          Input$authProviderRequests_updates>
      get copyWith => CopyWith$Input$authProviderRequests_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviderRequests_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_append = $_append;
    final lOther$$_append = other.$_append;
    if (_$data.containsKey('_append') != other._$data.containsKey('_append')) {
      return false;
    }
    if (l$$_append != lOther$$_append) {
      return false;
    }
    final l$$_delete_at_path = $_delete_at_path;
    final lOther$$_delete_at_path = other.$_delete_at_path;
    if (_$data.containsKey('_delete_at_path') !=
        other._$data.containsKey('_delete_at_path')) {
      return false;
    }
    if (l$$_delete_at_path != lOther$$_delete_at_path) {
      return false;
    }
    final l$$_delete_elem = $_delete_elem;
    final lOther$$_delete_elem = other.$_delete_elem;
    if (_$data.containsKey('_delete_elem') !=
        other._$data.containsKey('_delete_elem')) {
      return false;
    }
    if (l$$_delete_elem != lOther$$_delete_elem) {
      return false;
    }
    final l$$_delete_key = $_delete_key;
    final lOther$$_delete_key = other.$_delete_key;
    if (_$data.containsKey('_delete_key') !=
        other._$data.containsKey('_delete_key')) {
      return false;
    }
    if (l$$_delete_key != lOther$$_delete_key) {
      return false;
    }
    final l$$_prepend = $_prepend;
    final lOther$$_prepend = other.$_prepend;
    if (_$data.containsKey('_prepend') !=
        other._$data.containsKey('_prepend')) {
      return false;
    }
    if (l$$_prepend != lOther$$_prepend) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_append = $_append;
    final l$$_delete_at_path = $_delete_at_path;
    final l$$_delete_elem = $_delete_elem;
    final l$$_delete_key = $_delete_key;
    final l$$_prepend = $_prepend;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_append') ? l$$_append : const {},
      _$data.containsKey('_delete_at_path') ? l$$_delete_at_path : const {},
      _$data.containsKey('_delete_elem') ? l$$_delete_elem : const {},
      _$data.containsKey('_delete_key') ? l$$_delete_key : const {},
      _$data.containsKey('_prepend') ? l$$_prepend : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authProviderRequests_updates<TRes> {
  factory CopyWith$Input$authProviderRequests_updates(
    Input$authProviderRequests_updates instance,
    TRes Function(Input$authProviderRequests_updates) then,
  ) = _CopyWithImpl$Input$authProviderRequests_updates;

  factory CopyWith$Input$authProviderRequests_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviderRequests_updates;

  TRes call({
    Input$authProviderRequests_append_input? $_append,
    Input$authProviderRequests_delete_at_path_input? $_delete_at_path,
    Input$authProviderRequests_delete_elem_input? $_delete_elem,
    Input$authProviderRequests_delete_key_input? $_delete_key,
    Input$authProviderRequests_prepend_input? $_prepend,
    Input$authProviderRequests_set_input? $_set,
    Input$authProviderRequests_bool_exp? where,
  });
  CopyWith$Input$authProviderRequests_append_input<TRes> get $_append;
  CopyWith$Input$authProviderRequests_delete_at_path_input<TRes>
      get $_delete_at_path;
  CopyWith$Input$authProviderRequests_delete_elem_input<TRes> get $_delete_elem;
  CopyWith$Input$authProviderRequests_delete_key_input<TRes> get $_delete_key;
  CopyWith$Input$authProviderRequests_prepend_input<TRes> get $_prepend;
  CopyWith$Input$authProviderRequests_set_input<TRes> get $_set;
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authProviderRequests_updates<TRes>
    implements CopyWith$Input$authProviderRequests_updates<TRes> {
  _CopyWithImpl$Input$authProviderRequests_updates(
    this._instance,
    this._then,
  );

  final Input$authProviderRequests_updates _instance;

  final TRes Function(Input$authProviderRequests_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_append = _undefined,
    Object? $_delete_at_path = _undefined,
    Object? $_delete_elem = _undefined,
    Object? $_delete_key = _undefined,
    Object? $_prepend = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authProviderRequests_updates._({
        ..._instance._$data,
        if ($_append != _undefined)
          '_append': ($_append as Input$authProviderRequests_append_input?),
        if ($_delete_at_path != _undefined)
          '_delete_at_path': ($_delete_at_path
              as Input$authProviderRequests_delete_at_path_input?),
        if ($_delete_elem != _undefined)
          '_delete_elem':
              ($_delete_elem as Input$authProviderRequests_delete_elem_input?),
        if ($_delete_key != _undefined)
          '_delete_key':
              ($_delete_key as Input$authProviderRequests_delete_key_input?),
        if ($_prepend != _undefined)
          '_prepend': ($_prepend as Input$authProviderRequests_prepend_input?),
        if ($_set != _undefined)
          '_set': ($_set as Input$authProviderRequests_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authProviderRequests_bool_exp),
      }));
  CopyWith$Input$authProviderRequests_append_input<TRes> get $_append {
    final local$$_append = _instance.$_append;
    return local$$_append == null
        ? CopyWith$Input$authProviderRequests_append_input.stub(
            _then(_instance))
        : CopyWith$Input$authProviderRequests_append_input(
            local$$_append, (e) => call($_append: e));
  }

  CopyWith$Input$authProviderRequests_delete_at_path_input<TRes>
      get $_delete_at_path {
    final local$$_delete_at_path = _instance.$_delete_at_path;
    return local$$_delete_at_path == null
        ? CopyWith$Input$authProviderRequests_delete_at_path_input.stub(
            _then(_instance))
        : CopyWith$Input$authProviderRequests_delete_at_path_input(
            local$$_delete_at_path, (e) => call($_delete_at_path: e));
  }

  CopyWith$Input$authProviderRequests_delete_elem_input<TRes>
      get $_delete_elem {
    final local$$_delete_elem = _instance.$_delete_elem;
    return local$$_delete_elem == null
        ? CopyWith$Input$authProviderRequests_delete_elem_input.stub(
            _then(_instance))
        : CopyWith$Input$authProviderRequests_delete_elem_input(
            local$$_delete_elem, (e) => call($_delete_elem: e));
  }

  CopyWith$Input$authProviderRequests_delete_key_input<TRes> get $_delete_key {
    final local$$_delete_key = _instance.$_delete_key;
    return local$$_delete_key == null
        ? CopyWith$Input$authProviderRequests_delete_key_input.stub(
            _then(_instance))
        : CopyWith$Input$authProviderRequests_delete_key_input(
            local$$_delete_key, (e) => call($_delete_key: e));
  }

  CopyWith$Input$authProviderRequests_prepend_input<TRes> get $_prepend {
    final local$$_prepend = _instance.$_prepend;
    return local$$_prepend == null
        ? CopyWith$Input$authProviderRequests_prepend_input.stub(
            _then(_instance))
        : CopyWith$Input$authProviderRequests_prepend_input(
            local$$_prepend, (e) => call($_prepend: e));
  }

  CopyWith$Input$authProviderRequests_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authProviderRequests_set_input.stub(_then(_instance))
        : CopyWith$Input$authProviderRequests_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authProviderRequests_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authProviderRequests_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authProviderRequests_updates<TRes>
    implements CopyWith$Input$authProviderRequests_updates<TRes> {
  _CopyWithStubImpl$Input$authProviderRequests_updates(this._res);

  TRes _res;

  call({
    Input$authProviderRequests_append_input? $_append,
    Input$authProviderRequests_delete_at_path_input? $_delete_at_path,
    Input$authProviderRequests_delete_elem_input? $_delete_elem,
    Input$authProviderRequests_delete_key_input? $_delete_key,
    Input$authProviderRequests_prepend_input? $_prepend,
    Input$authProviderRequests_set_input? $_set,
    Input$authProviderRequests_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authProviderRequests_append_input<TRes> get $_append =>
      CopyWith$Input$authProviderRequests_append_input.stub(_res);
  CopyWith$Input$authProviderRequests_delete_at_path_input<TRes>
      get $_delete_at_path =>
          CopyWith$Input$authProviderRequests_delete_at_path_input.stub(_res);
  CopyWith$Input$authProviderRequests_delete_elem_input<TRes>
      get $_delete_elem =>
          CopyWith$Input$authProviderRequests_delete_elem_input.stub(_res);
  CopyWith$Input$authProviderRequests_delete_key_input<TRes> get $_delete_key =>
      CopyWith$Input$authProviderRequests_delete_key_input.stub(_res);
  CopyWith$Input$authProviderRequests_prepend_input<TRes> get $_prepend =>
      CopyWith$Input$authProviderRequests_prepend_input.stub(_res);
  CopyWith$Input$authProviderRequests_set_input<TRes> get $_set =>
      CopyWith$Input$authProviderRequests_set_input.stub(_res);
  CopyWith$Input$authProviderRequests_bool_exp<TRes> get where =>
      CopyWith$Input$authProviderRequests_bool_exp.stub(_res);
}

class Input$authProviders_bool_exp {
  factory Input$authProviders_bool_exp({
    List<Input$authProviders_bool_exp>? $_and,
    Input$authProviders_bool_exp? $_not,
    List<Input$authProviders_bool_exp>? $_or,
    Input$String_comparison_exp? id,
    Input$authUserProviders_bool_exp? userProviders,
    Input$authUserProviders_aggregate_bool_exp? userProviders_aggregate,
  }) =>
      Input$authProviders_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (id != null) r'id': id,
        if (userProviders != null) r'userProviders': userProviders,
        if (userProviders_aggregate != null)
          r'userProviders_aggregate': userProviders_aggregate,
      });

  Input$authProviders_bool_exp._(this._$data);

  factory Input$authProviders_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$authProviders_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authProviders_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$authProviders_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('userProviders')) {
      final l$userProviders = data['userProviders'];
      result$data['userProviders'] = l$userProviders == null
          ? null
          : Input$authUserProviders_bool_exp.fromJson(
              (l$userProviders as Map<String, dynamic>));
    }
    if (data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = data['userProviders_aggregate'];
      result$data['userProviders_aggregate'] = l$userProviders_aggregate == null
          ? null
          : Input$authUserProviders_aggregate_bool_exp.fromJson(
              (l$userProviders_aggregate as Map<String, dynamic>));
    }
    return Input$authProviders_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authProviders_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authProviders_bool_exp>?);
  Input$authProviders_bool_exp? get $_not =>
      (_$data['_not'] as Input$authProviders_bool_exp?);
  List<Input$authProviders_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authProviders_bool_exp>?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$authUserProviders_bool_exp? get userProviders =>
      (_$data['userProviders'] as Input$authUserProviders_bool_exp?);
  Input$authUserProviders_aggregate_bool_exp? get userProviders_aggregate =>
      (_$data['userProviders_aggregate']
          as Input$authUserProviders_aggregate_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('userProviders')) {
      final l$userProviders = userProviders;
      result$data['userProviders'] = l$userProviders?.toJson();
    }
    if (_$data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = userProviders_aggregate;
      result$data['userProviders_aggregate'] =
          l$userProviders_aggregate?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authProviders_bool_exp<Input$authProviders_bool_exp>
      get copyWith => CopyWith$Input$authProviders_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$userProviders = userProviders;
    final lOther$userProviders = other.userProviders;
    if (_$data.containsKey('userProviders') !=
        other._$data.containsKey('userProviders')) {
      return false;
    }
    if (l$userProviders != lOther$userProviders) {
      return false;
    }
    final l$userProviders_aggregate = userProviders_aggregate;
    final lOther$userProviders_aggregate = other.userProviders_aggregate;
    if (_$data.containsKey('userProviders_aggregate') !=
        other._$data.containsKey('userProviders_aggregate')) {
      return false;
    }
    if (l$userProviders_aggregate != lOther$userProviders_aggregate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$id = id;
    final l$userProviders = userProviders;
    final l$userProviders_aggregate = userProviders_aggregate;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('userProviders') ? l$userProviders : const {},
      _$data.containsKey('userProviders_aggregate')
          ? l$userProviders_aggregate
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviders_bool_exp<TRes> {
  factory CopyWith$Input$authProviders_bool_exp(
    Input$authProviders_bool_exp instance,
    TRes Function(Input$authProviders_bool_exp) then,
  ) = _CopyWithImpl$Input$authProviders_bool_exp;

  factory CopyWith$Input$authProviders_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_bool_exp;

  TRes call({
    List<Input$authProviders_bool_exp>? $_and,
    Input$authProviders_bool_exp? $_not,
    List<Input$authProviders_bool_exp>? $_or,
    Input$String_comparison_exp? id,
    Input$authUserProviders_bool_exp? userProviders,
    Input$authUserProviders_aggregate_bool_exp? userProviders_aggregate,
  });
  TRes $_and(
      Iterable<Input$authProviders_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authProviders_bool_exp<
                      Input$authProviders_bool_exp>>?)
          _fn);
  CopyWith$Input$authProviders_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authProviders_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authProviders_bool_exp<
                      Input$authProviders_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$authUserProviders_bool_exp<TRes> get userProviders;
  CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes>
      get userProviders_aggregate;
}

class _CopyWithImpl$Input$authProviders_bool_exp<TRes>
    implements CopyWith$Input$authProviders_bool_exp<TRes> {
  _CopyWithImpl$Input$authProviders_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authProviders_bool_exp _instance;

  final TRes Function(Input$authProviders_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? id = _undefined,
    Object? userProviders = _undefined,
    Object? userProviders_aggregate = _undefined,
  }) =>
      _then(Input$authProviders_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authProviders_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$authProviders_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authProviders_bool_exp>?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (userProviders != _undefined)
          'userProviders': (userProviders as Input$authUserProviders_bool_exp?),
        if (userProviders_aggregate != _undefined)
          'userProviders_aggregate': (userProviders_aggregate
              as Input$authUserProviders_aggregate_bool_exp?),
      }));
  TRes $_and(
          Iterable<Input$authProviders_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authProviders_bool_exp<
                          Input$authProviders_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(
              _instance.$_and?.map((e) => CopyWith$Input$authProviders_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authProviders_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authProviders_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authProviders_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authProviders_bool_exp<
                          Input$authProviders_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(
              _instance.$_or?.map((e) => CopyWith$Input$authProviders_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$authUserProviders_bool_exp<TRes> get userProviders {
    final local$userProviders = _instance.userProviders;
    return local$userProviders == null
        ? CopyWith$Input$authUserProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_bool_exp(
            local$userProviders, (e) => call(userProviders: e));
  }

  CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes>
      get userProviders_aggregate {
    final local$userProviders_aggregate = _instance.userProviders_aggregate;
    return local$userProviders_aggregate == null
        ? CopyWith$Input$authUserProviders_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$authUserProviders_aggregate_bool_exp(
            local$userProviders_aggregate,
            (e) => call(userProviders_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$authProviders_bool_exp<TRes>
    implements CopyWith$Input$authProviders_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authProviders_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authProviders_bool_exp>? $_and,
    Input$authProviders_bool_exp? $_not,
    List<Input$authProviders_bool_exp>? $_or,
    Input$String_comparison_exp? id,
    Input$authUserProviders_bool_exp? userProviders,
    Input$authUserProviders_aggregate_bool_exp? userProviders_aggregate,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authProviders_bool_exp<TRes> get $_not =>
      CopyWith$Input$authProviders_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$authUserProviders_bool_exp<TRes> get userProviders =>
      CopyWith$Input$authUserProviders_bool_exp.stub(_res);
  CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes>
      get userProviders_aggregate =>
          CopyWith$Input$authUserProviders_aggregate_bool_exp.stub(_res);
}

class Input$authProviders_insert_input {
  factory Input$authProviders_insert_input({
    String? id,
    Input$authUserProviders_arr_rel_insert_input? userProviders,
  }) =>
      Input$authProviders_insert_input._({
        if (id != null) r'id': id,
        if (userProviders != null) r'userProviders': userProviders,
      });

  Input$authProviders_insert_input._(this._$data);

  factory Input$authProviders_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('userProviders')) {
      final l$userProviders = data['userProviders'];
      result$data['userProviders'] = l$userProviders == null
          ? null
          : Input$authUserProviders_arr_rel_insert_input.fromJson(
              (l$userProviders as Map<String, dynamic>));
    }
    return Input$authProviders_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get id => (_$data['id'] as String?);
  Input$authUserProviders_arr_rel_insert_input? get userProviders =>
      (_$data['userProviders']
          as Input$authUserProviders_arr_rel_insert_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('userProviders')) {
      final l$userProviders = userProviders;
      result$data['userProviders'] = l$userProviders?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authProviders_insert_input<Input$authProviders_insert_input>
      get copyWith => CopyWith$Input$authProviders_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$userProviders = userProviders;
    final lOther$userProviders = other.userProviders;
    if (_$data.containsKey('userProviders') !=
        other._$data.containsKey('userProviders')) {
      return false;
    }
    if (l$userProviders != lOther$userProviders) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$userProviders = userProviders;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('userProviders') ? l$userProviders : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviders_insert_input<TRes> {
  factory CopyWith$Input$authProviders_insert_input(
    Input$authProviders_insert_input instance,
    TRes Function(Input$authProviders_insert_input) then,
  ) = _CopyWithImpl$Input$authProviders_insert_input;

  factory CopyWith$Input$authProviders_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_insert_input;

  TRes call({
    String? id,
    Input$authUserProviders_arr_rel_insert_input? userProviders,
  });
  CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes> get userProviders;
}

class _CopyWithImpl$Input$authProviders_insert_input<TRes>
    implements CopyWith$Input$authProviders_insert_input<TRes> {
  _CopyWithImpl$Input$authProviders_insert_input(
    this._instance,
    this._then,
  );

  final Input$authProviders_insert_input _instance;

  final TRes Function(Input$authProviders_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? userProviders = _undefined,
  }) =>
      _then(Input$authProviders_insert_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as String?),
        if (userProviders != _undefined)
          'userProviders':
              (userProviders as Input$authUserProviders_arr_rel_insert_input?),
      }));
  CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes>
      get userProviders {
    final local$userProviders = _instance.userProviders;
    return local$userProviders == null
        ? CopyWith$Input$authUserProviders_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authUserProviders_arr_rel_insert_input(
            local$userProviders, (e) => call(userProviders: e));
  }
}

class _CopyWithStubImpl$Input$authProviders_insert_input<TRes>
    implements CopyWith$Input$authProviders_insert_input<TRes> {
  _CopyWithStubImpl$Input$authProviders_insert_input(this._res);

  TRes _res;

  call({
    String? id,
    Input$authUserProviders_arr_rel_insert_input? userProviders,
  }) =>
      _res;
  CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes>
      get userProviders =>
          CopyWith$Input$authUserProviders_arr_rel_insert_input.stub(_res);
}

class Input$authProviders_obj_rel_insert_input {
  factory Input$authProviders_obj_rel_insert_input({
    required Input$authProviders_insert_input data,
    Input$authProviders_on_conflict? on_conflict,
  }) =>
      Input$authProviders_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$authProviders_obj_rel_insert_input._(this._$data);

  factory Input$authProviders_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = Input$authProviders_insert_input.fromJson(
        (l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$authProviders_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$authProviders_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authProviders_insert_input get data =>
      (_$data['data'] as Input$authProviders_insert_input);
  Input$authProviders_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$authProviders_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authProviders_obj_rel_insert_input<
          Input$authProviders_obj_rel_insert_input>
      get copyWith => CopyWith$Input$authProviders_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviders_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$authProviders_obj_rel_insert_input(
    Input$authProviders_obj_rel_insert_input instance,
    TRes Function(Input$authProviders_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$authProviders_obj_rel_insert_input;

  factory CopyWith$Input$authProviders_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_obj_rel_insert_input;

  TRes call({
    Input$authProviders_insert_input? data,
    Input$authProviders_on_conflict? on_conflict,
  });
  CopyWith$Input$authProviders_insert_input<TRes> get data;
  CopyWith$Input$authProviders_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$authProviders_obj_rel_insert_input<TRes>
    implements CopyWith$Input$authProviders_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$authProviders_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$authProviders_obj_rel_insert_input _instance;

  final TRes Function(Input$authProviders_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$authProviders_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$authProviders_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$authProviders_on_conflict?),
      }));
  CopyWith$Input$authProviders_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$authProviders_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$authProviders_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$authProviders_on_conflict.stub(_then(_instance))
        : CopyWith$Input$authProviders_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$authProviders_obj_rel_insert_input<TRes>
    implements CopyWith$Input$authProviders_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$authProviders_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$authProviders_insert_input? data,
    Input$authProviders_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$authProviders_insert_input<TRes> get data =>
      CopyWith$Input$authProviders_insert_input.stub(_res);
  CopyWith$Input$authProviders_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$authProviders_on_conflict.stub(_res);
}

class Input$authProviders_on_conflict {
  factory Input$authProviders_on_conflict({
    required Enum$authProviders_constraint constraint,
    required List<Enum$authProviders_update_column> update_columns,
    Input$authProviders_bool_exp? where,
  }) =>
      Input$authProviders_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authProviders_on_conflict._(this._$data);

  factory Input$authProviders_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$authProviders_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$authProviders_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authProviders_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authProviders_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authProviders_constraint get constraint =>
      (_$data['constraint'] as Enum$authProviders_constraint);
  List<Enum$authProviders_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$authProviders_update_column>);
  Input$authProviders_bool_exp? get where =>
      (_$data['where'] as Input$authProviders_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$authProviders_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authProviders_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authProviders_on_conflict<Input$authProviders_on_conflict>
      get copyWith => CopyWith$Input$authProviders_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviders_on_conflict<TRes> {
  factory CopyWith$Input$authProviders_on_conflict(
    Input$authProviders_on_conflict instance,
    TRes Function(Input$authProviders_on_conflict) then,
  ) = _CopyWithImpl$Input$authProviders_on_conflict;

  factory CopyWith$Input$authProviders_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_on_conflict;

  TRes call({
    Enum$authProviders_constraint? constraint,
    List<Enum$authProviders_update_column>? update_columns,
    Input$authProviders_bool_exp? where,
  });
  CopyWith$Input$authProviders_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authProviders_on_conflict<TRes>
    implements CopyWith$Input$authProviders_on_conflict<TRes> {
  _CopyWithImpl$Input$authProviders_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authProviders_on_conflict _instance;

  final TRes Function(Input$authProviders_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authProviders_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authProviders_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$authProviders_update_column>),
        if (where != _undefined)
          'where': (where as Input$authProviders_bool_exp?),
      }));
  CopyWith$Input$authProviders_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authProviders_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authProviders_on_conflict<TRes>
    implements CopyWith$Input$authProviders_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authProviders_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authProviders_constraint? constraint,
    List<Enum$authProviders_update_column>? update_columns,
    Input$authProviders_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authProviders_bool_exp<TRes> get where =>
      CopyWith$Input$authProviders_bool_exp.stub(_res);
}

class Input$authProviders_order_by {
  factory Input$authProviders_order_by({
    Enum$order_by? id,
    Input$authUserProviders_aggregate_order_by? userProviders_aggregate,
  }) =>
      Input$authProviders_order_by._({
        if (id != null) r'id': id,
        if (userProviders_aggregate != null)
          r'userProviders_aggregate': userProviders_aggregate,
      });

  Input$authProviders_order_by._(this._$data);

  factory Input$authProviders_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = data['userProviders_aggregate'];
      result$data['userProviders_aggregate'] = l$userProviders_aggregate == null
          ? null
          : Input$authUserProviders_aggregate_order_by.fromJson(
              (l$userProviders_aggregate as Map<String, dynamic>));
    }
    return Input$authProviders_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Input$authUserProviders_aggregate_order_by? get userProviders_aggregate =>
      (_$data['userProviders_aggregate']
          as Input$authUserProviders_aggregate_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = userProviders_aggregate;
      result$data['userProviders_aggregate'] =
          l$userProviders_aggregate?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authProviders_order_by<Input$authProviders_order_by>
      get copyWith => CopyWith$Input$authProviders_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$userProviders_aggregate = userProviders_aggregate;
    final lOther$userProviders_aggregate = other.userProviders_aggregate;
    if (_$data.containsKey('userProviders_aggregate') !=
        other._$data.containsKey('userProviders_aggregate')) {
      return false;
    }
    if (l$userProviders_aggregate != lOther$userProviders_aggregate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$userProviders_aggregate = userProviders_aggregate;
    return Object.hashAll([
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('userProviders_aggregate')
          ? l$userProviders_aggregate
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviders_order_by<TRes> {
  factory CopyWith$Input$authProviders_order_by(
    Input$authProviders_order_by instance,
    TRes Function(Input$authProviders_order_by) then,
  ) = _CopyWithImpl$Input$authProviders_order_by;

  factory CopyWith$Input$authProviders_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_order_by;

  TRes call({
    Enum$order_by? id,
    Input$authUserProviders_aggregate_order_by? userProviders_aggregate,
  });
  CopyWith$Input$authUserProviders_aggregate_order_by<TRes>
      get userProviders_aggregate;
}

class _CopyWithImpl$Input$authProviders_order_by<TRes>
    implements CopyWith$Input$authProviders_order_by<TRes> {
  _CopyWithImpl$Input$authProviders_order_by(
    this._instance,
    this._then,
  );

  final Input$authProviders_order_by _instance;

  final TRes Function(Input$authProviders_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? userProviders_aggregate = _undefined,
  }) =>
      _then(Input$authProviders_order_by._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (userProviders_aggregate != _undefined)
          'userProviders_aggregate': (userProviders_aggregate
              as Input$authUserProviders_aggregate_order_by?),
      }));
  CopyWith$Input$authUserProviders_aggregate_order_by<TRes>
      get userProviders_aggregate {
    final local$userProviders_aggregate = _instance.userProviders_aggregate;
    return local$userProviders_aggregate == null
        ? CopyWith$Input$authUserProviders_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserProviders_aggregate_order_by(
            local$userProviders_aggregate,
            (e) => call(userProviders_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$authProviders_order_by<TRes>
    implements CopyWith$Input$authProviders_order_by<TRes> {
  _CopyWithStubImpl$Input$authProviders_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? id,
    Input$authUserProviders_aggregate_order_by? userProviders_aggregate,
  }) =>
      _res;
  CopyWith$Input$authUserProviders_aggregate_order_by<TRes>
      get userProviders_aggregate =>
          CopyWith$Input$authUserProviders_aggregate_order_by.stub(_res);
}

class Input$authProviders_pk_columns_input {
  factory Input$authProviders_pk_columns_input({required String id}) =>
      Input$authProviders_pk_columns_input._({
        r'id': id,
      });

  Input$authProviders_pk_columns_input._(this._$data);

  factory Input$authProviders_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$authProviders_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$authProviders_pk_columns_input<
          Input$authProviders_pk_columns_input>
      get copyWith => CopyWith$Input$authProviders_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$authProviders_pk_columns_input<TRes> {
  factory CopyWith$Input$authProviders_pk_columns_input(
    Input$authProviders_pk_columns_input instance,
    TRes Function(Input$authProviders_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authProviders_pk_columns_input;

  factory CopyWith$Input$authProviders_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$authProviders_pk_columns_input<TRes>
    implements CopyWith$Input$authProviders_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authProviders_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authProviders_pk_columns_input _instance;

  final TRes Function(Input$authProviders_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authProviders_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$authProviders_pk_columns_input<TRes>
    implements CopyWith$Input$authProviders_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authProviders_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$authProviders_set_input {
  factory Input$authProviders_set_input({String? id}) =>
      Input$authProviders_set_input._({
        if (id != null) r'id': id,
      });

  Input$authProviders_set_input._(this._$data);

  factory Input$authProviders_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    return Input$authProviders_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get id => (_$data['id'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    return result$data;
  }

  CopyWith$Input$authProviders_set_input<Input$authProviders_set_input>
      get copyWith => CopyWith$Input$authProviders_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([_$data.containsKey('id') ? l$id : const {}]);
  }
}

abstract class CopyWith$Input$authProviders_set_input<TRes> {
  factory CopyWith$Input$authProviders_set_input(
    Input$authProviders_set_input instance,
    TRes Function(Input$authProviders_set_input) then,
  ) = _CopyWithImpl$Input$authProviders_set_input;

  factory CopyWith$Input$authProviders_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_set_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$authProviders_set_input<TRes>
    implements CopyWith$Input$authProviders_set_input<TRes> {
  _CopyWithImpl$Input$authProviders_set_input(
    this._instance,
    this._then,
  );

  final Input$authProviders_set_input _instance;

  final TRes Function(Input$authProviders_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authProviders_set_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as String?),
      }));
}

class _CopyWithStubImpl$Input$authProviders_set_input<TRes>
    implements CopyWith$Input$authProviders_set_input<TRes> {
  _CopyWithStubImpl$Input$authProviders_set_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$authProviders_stream_cursor_input {
  factory Input$authProviders_stream_cursor_input({
    required Input$authProviders_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authProviders_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authProviders_stream_cursor_input._(this._$data);

  factory Input$authProviders_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authProviders_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authProviders_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authProviders_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$authProviders_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authProviders_stream_cursor_input<
          Input$authProviders_stream_cursor_input>
      get copyWith => CopyWith$Input$authProviders_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authProviders_stream_cursor_input<TRes> {
  factory CopyWith$Input$authProviders_stream_cursor_input(
    Input$authProviders_stream_cursor_input instance,
    TRes Function(Input$authProviders_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authProviders_stream_cursor_input;

  factory CopyWith$Input$authProviders_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_stream_cursor_input;

  TRes call({
    Input$authProviders_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authProviders_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$authProviders_stream_cursor_input<TRes>
    implements CopyWith$Input$authProviders_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authProviders_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authProviders_stream_cursor_input _instance;

  final TRes Function(Input$authProviders_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authProviders_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$authProviders_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authProviders_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authProviders_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authProviders_stream_cursor_input<TRes>
    implements CopyWith$Input$authProviders_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authProviders_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authProviders_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authProviders_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$authProviders_stream_cursor_value_input.stub(_res);
}

class Input$authProviders_stream_cursor_value_input {
  factory Input$authProviders_stream_cursor_value_input({String? id}) =>
      Input$authProviders_stream_cursor_value_input._({
        if (id != null) r'id': id,
      });

  Input$authProviders_stream_cursor_value_input._(this._$data);

  factory Input$authProviders_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    return Input$authProviders_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get id => (_$data['id'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    return result$data;
  }

  CopyWith$Input$authProviders_stream_cursor_value_input<
          Input$authProviders_stream_cursor_value_input>
      get copyWith => CopyWith$Input$authProviders_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([_$data.containsKey('id') ? l$id : const {}]);
  }
}

abstract class CopyWith$Input$authProviders_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$authProviders_stream_cursor_value_input(
    Input$authProviders_stream_cursor_value_input instance,
    TRes Function(Input$authProviders_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authProviders_stream_cursor_value_input;

  factory CopyWith$Input$authProviders_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authProviders_stream_cursor_value_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$authProviders_stream_cursor_value_input<TRes>
    implements CopyWith$Input$authProviders_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authProviders_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authProviders_stream_cursor_value_input _instance;

  final TRes Function(Input$authProviders_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authProviders_stream_cursor_value_input._({
        ..._instance._$data,
        if (id != _undefined) 'id': (id as String?),
      }));
}

class _CopyWithStubImpl$Input$authProviders_stream_cursor_value_input<TRes>
    implements CopyWith$Input$authProviders_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authProviders_stream_cursor_value_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$authProviders_updates {
  factory Input$authProviders_updates({
    Input$authProviders_set_input? $_set,
    required Input$authProviders_bool_exp where,
  }) =>
      Input$authProviders_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authProviders_updates._(this._$data);

  factory Input$authProviders_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authProviders_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$authProviders_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$authProviders_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authProviders_set_input? get $_set =>
      (_$data['_set'] as Input$authProviders_set_input?);
  Input$authProviders_bool_exp get where =>
      (_$data['where'] as Input$authProviders_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authProviders_updates<Input$authProviders_updates>
      get copyWith => CopyWith$Input$authProviders_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authProviders_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authProviders_updates<TRes> {
  factory CopyWith$Input$authProviders_updates(
    Input$authProviders_updates instance,
    TRes Function(Input$authProviders_updates) then,
  ) = _CopyWithImpl$Input$authProviders_updates;

  factory CopyWith$Input$authProviders_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authProviders_updates;

  TRes call({
    Input$authProviders_set_input? $_set,
    Input$authProviders_bool_exp? where,
  });
  CopyWith$Input$authProviders_set_input<TRes> get $_set;
  CopyWith$Input$authProviders_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authProviders_updates<TRes>
    implements CopyWith$Input$authProviders_updates<TRes> {
  _CopyWithImpl$Input$authProviders_updates(
    this._instance,
    this._then,
  );

  final Input$authProviders_updates _instance;

  final TRes Function(Input$authProviders_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authProviders_updates._({
        ..._instance._$data,
        if ($_set != _undefined)
          '_set': ($_set as Input$authProviders_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authProviders_bool_exp),
      }));
  CopyWith$Input$authProviders_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authProviders_set_input.stub(_then(_instance))
        : CopyWith$Input$authProviders_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authProviders_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authProviders_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authProviders_updates<TRes>
    implements CopyWith$Input$authProviders_updates<TRes> {
  _CopyWithStubImpl$Input$authProviders_updates(this._res);

  TRes _res;

  call({
    Input$authProviders_set_input? $_set,
    Input$authProviders_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authProviders_set_input<TRes> get $_set =>
      CopyWith$Input$authProviders_set_input.stub(_res);
  CopyWith$Input$authProviders_bool_exp<TRes> get where =>
      CopyWith$Input$authProviders_bool_exp.stub(_res);
}

class Input$authRefreshTokenTypes_bool_exp {
  factory Input$authRefreshTokenTypes_bool_exp({
    List<Input$authRefreshTokenTypes_bool_exp>? $_and,
    Input$authRefreshTokenTypes_bool_exp? $_not,
    List<Input$authRefreshTokenTypes_bool_exp>? $_or,
    Input$String_comparison_exp? comment,
    Input$authRefreshTokens_bool_exp? refreshTokens,
    Input$authRefreshTokens_aggregate_bool_exp? refreshTokens_aggregate,
    Input$String_comparison_exp? value,
  }) =>
      Input$authRefreshTokenTypes_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (comment != null) r'comment': comment,
        if (refreshTokens != null) r'refreshTokens': refreshTokens,
        if (refreshTokens_aggregate != null)
          r'refreshTokens_aggregate': refreshTokens_aggregate,
        if (value != null) r'value': value,
      });

  Input$authRefreshTokenTypes_bool_exp._(this._$data);

  factory Input$authRefreshTokenTypes_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$authRefreshTokenTypes_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authRefreshTokenTypes_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$authRefreshTokenTypes_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('comment')) {
      final l$comment = data['comment'];
      result$data['comment'] = l$comment == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$comment as Map<String, dynamic>));
    }
    if (data.containsKey('refreshTokens')) {
      final l$refreshTokens = data['refreshTokens'];
      result$data['refreshTokens'] = l$refreshTokens == null
          ? null
          : Input$authRefreshTokens_bool_exp.fromJson(
              (l$refreshTokens as Map<String, dynamic>));
    }
    if (data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = data['refreshTokens_aggregate'];
      result$data['refreshTokens_aggregate'] = l$refreshTokens_aggregate == null
          ? null
          : Input$authRefreshTokens_aggregate_bool_exp.fromJson(
              (l$refreshTokens_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('value')) {
      final l$value = data['value'];
      result$data['value'] = l$value == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$value as Map<String, dynamic>));
    }
    return Input$authRefreshTokenTypes_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authRefreshTokenTypes_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authRefreshTokenTypes_bool_exp>?);
  Input$authRefreshTokenTypes_bool_exp? get $_not =>
      (_$data['_not'] as Input$authRefreshTokenTypes_bool_exp?);
  List<Input$authRefreshTokenTypes_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authRefreshTokenTypes_bool_exp>?);
  Input$String_comparison_exp? get comment =>
      (_$data['comment'] as Input$String_comparison_exp?);
  Input$authRefreshTokens_bool_exp? get refreshTokens =>
      (_$data['refreshTokens'] as Input$authRefreshTokens_bool_exp?);
  Input$authRefreshTokens_aggregate_bool_exp? get refreshTokens_aggregate =>
      (_$data['refreshTokens_aggregate']
          as Input$authRefreshTokens_aggregate_bool_exp?);
  Input$String_comparison_exp? get value =>
      (_$data['value'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('comment')) {
      final l$comment = comment;
      result$data['comment'] = l$comment?.toJson();
    }
    if (_$data.containsKey('refreshTokens')) {
      final l$refreshTokens = refreshTokens;
      result$data['refreshTokens'] = l$refreshTokens?.toJson();
    }
    if (_$data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = refreshTokens_aggregate;
      result$data['refreshTokens_aggregate'] =
          l$refreshTokens_aggregate?.toJson();
    }
    if (_$data.containsKey('value')) {
      final l$value = value;
      result$data['value'] = l$value?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_bool_exp<
          Input$authRefreshTokenTypes_bool_exp>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$comment = comment;
    final lOther$comment = other.comment;
    if (_$data.containsKey('comment') != other._$data.containsKey('comment')) {
      return false;
    }
    if (l$comment != lOther$comment) {
      return false;
    }
    final l$refreshTokens = refreshTokens;
    final lOther$refreshTokens = other.refreshTokens;
    if (_$data.containsKey('refreshTokens') !=
        other._$data.containsKey('refreshTokens')) {
      return false;
    }
    if (l$refreshTokens != lOther$refreshTokens) {
      return false;
    }
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final lOther$refreshTokens_aggregate = other.refreshTokens_aggregate;
    if (_$data.containsKey('refreshTokens_aggregate') !=
        other._$data.containsKey('refreshTokens_aggregate')) {
      return false;
    }
    if (l$refreshTokens_aggregate != lOther$refreshTokens_aggregate) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (_$data.containsKey('value') != other._$data.containsKey('value')) {
      return false;
    }
    if (l$value != lOther$value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$comment = comment;
    final l$refreshTokens = refreshTokens;
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final l$value = value;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('comment') ? l$comment : const {},
      _$data.containsKey('refreshTokens') ? l$refreshTokens : const {},
      _$data.containsKey('refreshTokens_aggregate')
          ? l$refreshTokens_aggregate
          : const {},
      _$data.containsKey('value') ? l$value : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_bool_exp(
    Input$authRefreshTokenTypes_bool_exp instance,
    TRes Function(Input$authRefreshTokenTypes_bool_exp) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_bool_exp;

  factory CopyWith$Input$authRefreshTokenTypes_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_bool_exp;

  TRes call({
    List<Input$authRefreshTokenTypes_bool_exp>? $_and,
    Input$authRefreshTokenTypes_bool_exp? $_not,
    List<Input$authRefreshTokenTypes_bool_exp>? $_or,
    Input$String_comparison_exp? comment,
    Input$authRefreshTokens_bool_exp? refreshTokens,
    Input$authRefreshTokens_aggregate_bool_exp? refreshTokens_aggregate,
    Input$String_comparison_exp? value,
  });
  TRes $_and(
      Iterable<Input$authRefreshTokenTypes_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authRefreshTokenTypes_bool_exp<
                      Input$authRefreshTokenTypes_bool_exp>>?)
          _fn);
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authRefreshTokenTypes_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authRefreshTokenTypes_bool_exp<
                      Input$authRefreshTokenTypes_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get comment;
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get refreshTokens;
  CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes>
      get refreshTokens_aggregate;
  CopyWith$Input$String_comparison_exp<TRes> get value;
}

class _CopyWithImpl$Input$authRefreshTokenTypes_bool_exp<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_bool_exp _instance;

  final TRes Function(Input$authRefreshTokenTypes_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? comment = _undefined,
    Object? refreshTokens = _undefined,
    Object? refreshTokens_aggregate = _undefined,
    Object? value = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authRefreshTokenTypes_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$authRefreshTokenTypes_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authRefreshTokenTypes_bool_exp>?),
        if (comment != _undefined)
          'comment': (comment as Input$String_comparison_exp?),
        if (refreshTokens != _undefined)
          'refreshTokens': (refreshTokens as Input$authRefreshTokens_bool_exp?),
        if (refreshTokens_aggregate != _undefined)
          'refreshTokens_aggregate': (refreshTokens_aggregate
              as Input$authRefreshTokens_aggregate_bool_exp?),
        if (value != _undefined)
          'value': (value as Input$String_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$authRefreshTokenTypes_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authRefreshTokenTypes_bool_exp<
                          Input$authRefreshTokenTypes_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$authRefreshTokenTypes_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authRefreshTokenTypes_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokenTypes_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authRefreshTokenTypes_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authRefreshTokenTypes_bool_exp<
                          Input$authRefreshTokenTypes_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$authRefreshTokenTypes_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get comment {
    final local$comment = _instance.comment;
    return local$comment == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$comment, (e) => call(comment: e));
  }

  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get refreshTokens {
    final local$refreshTokens = _instance.refreshTokens;
    return local$refreshTokens == null
        ? CopyWith$Input$authRefreshTokens_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_bool_exp(
            local$refreshTokens, (e) => call(refreshTokens: e));
  }

  CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes>
      get refreshTokens_aggregate {
    final local$refreshTokens_aggregate = _instance.refreshTokens_aggregate;
    return local$refreshTokens_aggregate == null
        ? CopyWith$Input$authRefreshTokens_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_aggregate_bool_exp(
            local$refreshTokens_aggregate,
            (e) => call(refreshTokens_aggregate: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get value {
    final local$value = _instance.value;
    return local$value == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$value, (e) => call(value: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_bool_exp<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authRefreshTokenTypes_bool_exp>? $_and,
    Input$authRefreshTokenTypes_bool_exp? $_not,
    List<Input$authRefreshTokenTypes_bool_exp>? $_or,
    Input$String_comparison_exp? comment,
    Input$authRefreshTokens_bool_exp? refreshTokens,
    Input$authRefreshTokens_aggregate_bool_exp? refreshTokens_aggregate,
    Input$String_comparison_exp? value,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get $_not =>
      CopyWith$Input$authRefreshTokenTypes_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get comment =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get refreshTokens =>
      CopyWith$Input$authRefreshTokens_bool_exp.stub(_res);
  CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes>
      get refreshTokens_aggregate =>
          CopyWith$Input$authRefreshTokens_aggregate_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get value =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$authRefreshTokenTypes_enum_comparison_exp {
  factory Input$authRefreshTokenTypes_enum_comparison_exp({
    Enum$authRefreshTokenTypes_enum? $_eq,
    List<Enum$authRefreshTokenTypes_enum>? $_in,
    bool? $_is_null,
    Enum$authRefreshTokenTypes_enum? $_neq,
    List<Enum$authRefreshTokenTypes_enum>? $_nin,
  }) =>
      Input$authRefreshTokenTypes_enum_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$authRefreshTokenTypes_enum_comparison_exp._(this._$data);

  factory Input$authRefreshTokenTypes_enum_comparison_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = l$$_eq == null
          ? null
          : fromJson$Enum$authRefreshTokenTypes_enum((l$$_eq as String));
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] = (l$$_in as List<dynamic>?)
          ?.map((e) => fromJson$Enum$authRefreshTokenTypes_enum((e as String)))
          .toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = l$$_neq == null
          ? null
          : fromJson$Enum$authRefreshTokenTypes_enum((l$$_neq as String));
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] = (l$$_nin as List<dynamic>?)
          ?.map((e) => fromJson$Enum$authRefreshTokenTypes_enum((e as String)))
          .toList();
    }
    return Input$authRefreshTokenTypes_enum_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authRefreshTokenTypes_enum? get $_eq =>
      (_$data['_eq'] as Enum$authRefreshTokenTypes_enum?);
  List<Enum$authRefreshTokenTypes_enum>? get $_in =>
      (_$data['_in'] as List<Enum$authRefreshTokenTypes_enum>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  Enum$authRefreshTokenTypes_enum? get $_neq =>
      (_$data['_neq'] as Enum$authRefreshTokenTypes_enum?);
  List<Enum$authRefreshTokenTypes_enum>? get $_nin =>
      (_$data['_nin'] as List<Enum$authRefreshTokenTypes_enum>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq == null
          ? null
          : toJson$Enum$authRefreshTokenTypes_enum(l$$_eq);
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in
          ?.map((e) => toJson$Enum$authRefreshTokenTypes_enum(e))
          .toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq == null
          ? null
          : toJson$Enum$authRefreshTokenTypes_enum(l$$_neq);
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin
          ?.map((e) => toJson$Enum$authRefreshTokenTypes_enum(e))
          .toList();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp<
          Input$authRefreshTokenTypes_enum_comparison_exp>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_enum_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp(
    Input$authRefreshTokenTypes_enum_comparison_exp instance,
    TRes Function(Input$authRefreshTokenTypes_enum_comparison_exp) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_enum_comparison_exp;

  factory CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_enum_comparison_exp;

  TRes call({
    Enum$authRefreshTokenTypes_enum? $_eq,
    List<Enum$authRefreshTokenTypes_enum>? $_in,
    bool? $_is_null,
    Enum$authRefreshTokenTypes_enum? $_neq,
    List<Enum$authRefreshTokenTypes_enum>? $_nin,
  });
}

class _CopyWithImpl$Input$authRefreshTokenTypes_enum_comparison_exp<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_enum_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_enum_comparison_exp _instance;

  final TRes Function(Input$authRefreshTokenTypes_enum_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_enum_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined)
          '_eq': ($_eq as Enum$authRefreshTokenTypes_enum?),
        if ($_in != _undefined)
          '_in': ($_in as List<Enum$authRefreshTokenTypes_enum>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_neq != _undefined)
          '_neq': ($_neq as Enum$authRefreshTokenTypes_enum?),
        if ($_nin != _undefined)
          '_nin': ($_nin as List<Enum$authRefreshTokenTypes_enum>?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_enum_comparison_exp<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_enum_comparison_exp(this._res);

  TRes _res;

  call({
    Enum$authRefreshTokenTypes_enum? $_eq,
    List<Enum$authRefreshTokenTypes_enum>? $_in,
    bool? $_is_null,
    Enum$authRefreshTokenTypes_enum? $_neq,
    List<Enum$authRefreshTokenTypes_enum>? $_nin,
  }) =>
      _res;
}

class Input$authRefreshTokenTypes_insert_input {
  factory Input$authRefreshTokenTypes_insert_input({
    String? comment,
    Input$authRefreshTokens_arr_rel_insert_input? refreshTokens,
    String? value,
  }) =>
      Input$authRefreshTokenTypes_insert_input._({
        if (comment != null) r'comment': comment,
        if (refreshTokens != null) r'refreshTokens': refreshTokens,
        if (value != null) r'value': value,
      });

  Input$authRefreshTokenTypes_insert_input._(this._$data);

  factory Input$authRefreshTokenTypes_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('comment')) {
      final l$comment = data['comment'];
      result$data['comment'] = (l$comment as String?);
    }
    if (data.containsKey('refreshTokens')) {
      final l$refreshTokens = data['refreshTokens'];
      result$data['refreshTokens'] = l$refreshTokens == null
          ? null
          : Input$authRefreshTokens_arr_rel_insert_input.fromJson(
              (l$refreshTokens as Map<String, dynamic>));
    }
    if (data.containsKey('value')) {
      final l$value = data['value'];
      result$data['value'] = (l$value as String?);
    }
    return Input$authRefreshTokenTypes_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get comment => (_$data['comment'] as String?);
  Input$authRefreshTokens_arr_rel_insert_input? get refreshTokens =>
      (_$data['refreshTokens']
          as Input$authRefreshTokens_arr_rel_insert_input?);
  String? get value => (_$data['value'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('comment')) {
      final l$comment = comment;
      result$data['comment'] = l$comment;
    }
    if (_$data.containsKey('refreshTokens')) {
      final l$refreshTokens = refreshTokens;
      result$data['refreshTokens'] = l$refreshTokens?.toJson();
    }
    if (_$data.containsKey('value')) {
      final l$value = value;
      result$data['value'] = l$value;
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_insert_input<
          Input$authRefreshTokenTypes_insert_input>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$comment = comment;
    final lOther$comment = other.comment;
    if (_$data.containsKey('comment') != other._$data.containsKey('comment')) {
      return false;
    }
    if (l$comment != lOther$comment) {
      return false;
    }
    final l$refreshTokens = refreshTokens;
    final lOther$refreshTokens = other.refreshTokens;
    if (_$data.containsKey('refreshTokens') !=
        other._$data.containsKey('refreshTokens')) {
      return false;
    }
    if (l$refreshTokens != lOther$refreshTokens) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (_$data.containsKey('value') != other._$data.containsKey('value')) {
      return false;
    }
    if (l$value != lOther$value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$comment = comment;
    final l$refreshTokens = refreshTokens;
    final l$value = value;
    return Object.hashAll([
      _$data.containsKey('comment') ? l$comment : const {},
      _$data.containsKey('refreshTokens') ? l$refreshTokens : const {},
      _$data.containsKey('value') ? l$value : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_insert_input<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_insert_input(
    Input$authRefreshTokenTypes_insert_input instance,
    TRes Function(Input$authRefreshTokenTypes_insert_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_insert_input;

  factory CopyWith$Input$authRefreshTokenTypes_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_insert_input;

  TRes call({
    String? comment,
    Input$authRefreshTokens_arr_rel_insert_input? refreshTokens,
    String? value,
  });
  CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes> get refreshTokens;
}

class _CopyWithImpl$Input$authRefreshTokenTypes_insert_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_insert_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_insert_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_insert_input _instance;

  final TRes Function(Input$authRefreshTokenTypes_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? comment = _undefined,
    Object? refreshTokens = _undefined,
    Object? value = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_insert_input._({
        ..._instance._$data,
        if (comment != _undefined) 'comment': (comment as String?),
        if (refreshTokens != _undefined)
          'refreshTokens':
              (refreshTokens as Input$authRefreshTokens_arr_rel_insert_input?),
        if (value != _undefined) 'value': (value as String?),
      }));
  CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes>
      get refreshTokens {
    final local$refreshTokens = _instance.refreshTokens;
    return local$refreshTokens == null
        ? CopyWith$Input$authRefreshTokens_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_arr_rel_insert_input(
            local$refreshTokens, (e) => call(refreshTokens: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_insert_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_insert_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_insert_input(this._res);

  TRes _res;

  call({
    String? comment,
    Input$authRefreshTokens_arr_rel_insert_input? refreshTokens,
    String? value,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes>
      get refreshTokens =>
          CopyWith$Input$authRefreshTokens_arr_rel_insert_input.stub(_res);
}

class Input$authRefreshTokenTypes_on_conflict {
  factory Input$authRefreshTokenTypes_on_conflict({
    required Enum$authRefreshTokenTypes_constraint constraint,
    required List<Enum$authRefreshTokenTypes_update_column> update_columns,
    Input$authRefreshTokenTypes_bool_exp? where,
  }) =>
      Input$authRefreshTokenTypes_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authRefreshTokenTypes_on_conflict._(this._$data);

  factory Input$authRefreshTokenTypes_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] = fromJson$Enum$authRefreshTokenTypes_constraint(
        (l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$authRefreshTokenTypes_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authRefreshTokenTypes_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authRefreshTokenTypes_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authRefreshTokenTypes_constraint get constraint =>
      (_$data['constraint'] as Enum$authRefreshTokenTypes_constraint);
  List<Enum$authRefreshTokenTypes_update_column> get update_columns =>
      (_$data['update_columns']
          as List<Enum$authRefreshTokenTypes_update_column>);
  Input$authRefreshTokenTypes_bool_exp? get where =>
      (_$data['where'] as Input$authRefreshTokenTypes_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$authRefreshTokenTypes_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authRefreshTokenTypes_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_on_conflict<
          Input$authRefreshTokenTypes_on_conflict>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_on_conflict<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_on_conflict(
    Input$authRefreshTokenTypes_on_conflict instance,
    TRes Function(Input$authRefreshTokenTypes_on_conflict) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_on_conflict;

  factory CopyWith$Input$authRefreshTokenTypes_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_on_conflict;

  TRes call({
    Enum$authRefreshTokenTypes_constraint? constraint,
    List<Enum$authRefreshTokenTypes_update_column>? update_columns,
    Input$authRefreshTokenTypes_bool_exp? where,
  });
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authRefreshTokenTypes_on_conflict<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_on_conflict<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_on_conflict _instance;

  final TRes Function(Input$authRefreshTokenTypes_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authRefreshTokenTypes_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns
              as List<Enum$authRefreshTokenTypes_update_column>),
        if (where != _undefined)
          'where': (where as Input$authRefreshTokenTypes_bool_exp?),
      }));
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authRefreshTokenTypes_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokenTypes_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_on_conflict<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authRefreshTokenTypes_constraint? constraint,
    List<Enum$authRefreshTokenTypes_update_column>? update_columns,
    Input$authRefreshTokenTypes_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get where =>
      CopyWith$Input$authRefreshTokenTypes_bool_exp.stub(_res);
}

class Input$authRefreshTokenTypes_order_by {
  factory Input$authRefreshTokenTypes_order_by({
    Enum$order_by? comment,
    Input$authRefreshTokens_aggregate_order_by? refreshTokens_aggregate,
    Enum$order_by? value,
  }) =>
      Input$authRefreshTokenTypes_order_by._({
        if (comment != null) r'comment': comment,
        if (refreshTokens_aggregate != null)
          r'refreshTokens_aggregate': refreshTokens_aggregate,
        if (value != null) r'value': value,
      });

  Input$authRefreshTokenTypes_order_by._(this._$data);

  factory Input$authRefreshTokenTypes_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('comment')) {
      final l$comment = data['comment'];
      result$data['comment'] = l$comment == null
          ? null
          : fromJson$Enum$order_by((l$comment as String));
    }
    if (data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = data['refreshTokens_aggregate'];
      result$data['refreshTokens_aggregate'] = l$refreshTokens_aggregate == null
          ? null
          : Input$authRefreshTokens_aggregate_order_by.fromJson(
              (l$refreshTokens_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('value')) {
      final l$value = data['value'];
      result$data['value'] =
          l$value == null ? null : fromJson$Enum$order_by((l$value as String));
    }
    return Input$authRefreshTokenTypes_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get comment => (_$data['comment'] as Enum$order_by?);
  Input$authRefreshTokens_aggregate_order_by? get refreshTokens_aggregate =>
      (_$data['refreshTokens_aggregate']
          as Input$authRefreshTokens_aggregate_order_by?);
  Enum$order_by? get value => (_$data['value'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('comment')) {
      final l$comment = comment;
      result$data['comment'] =
          l$comment == null ? null : toJson$Enum$order_by(l$comment);
    }
    if (_$data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = refreshTokens_aggregate;
      result$data['refreshTokens_aggregate'] =
          l$refreshTokens_aggregate?.toJson();
    }
    if (_$data.containsKey('value')) {
      final l$value = value;
      result$data['value'] =
          l$value == null ? null : toJson$Enum$order_by(l$value);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_order_by<
          Input$authRefreshTokenTypes_order_by>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$comment = comment;
    final lOther$comment = other.comment;
    if (_$data.containsKey('comment') != other._$data.containsKey('comment')) {
      return false;
    }
    if (l$comment != lOther$comment) {
      return false;
    }
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final lOther$refreshTokens_aggregate = other.refreshTokens_aggregate;
    if (_$data.containsKey('refreshTokens_aggregate') !=
        other._$data.containsKey('refreshTokens_aggregate')) {
      return false;
    }
    if (l$refreshTokens_aggregate != lOther$refreshTokens_aggregate) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (_$data.containsKey('value') != other._$data.containsKey('value')) {
      return false;
    }
    if (l$value != lOther$value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$comment = comment;
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final l$value = value;
    return Object.hashAll([
      _$data.containsKey('comment') ? l$comment : const {},
      _$data.containsKey('refreshTokens_aggregate')
          ? l$refreshTokens_aggregate
          : const {},
      _$data.containsKey('value') ? l$value : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_order_by<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_order_by(
    Input$authRefreshTokenTypes_order_by instance,
    TRes Function(Input$authRefreshTokenTypes_order_by) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_order_by;

  factory CopyWith$Input$authRefreshTokenTypes_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_order_by;

  TRes call({
    Enum$order_by? comment,
    Input$authRefreshTokens_aggregate_order_by? refreshTokens_aggregate,
    Enum$order_by? value,
  });
  CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes>
      get refreshTokens_aggregate;
}

class _CopyWithImpl$Input$authRefreshTokenTypes_order_by<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_order_by<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_order_by(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_order_by _instance;

  final TRes Function(Input$authRefreshTokenTypes_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? comment = _undefined,
    Object? refreshTokens_aggregate = _undefined,
    Object? value = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_order_by._({
        ..._instance._$data,
        if (comment != _undefined) 'comment': (comment as Enum$order_by?),
        if (refreshTokens_aggregate != _undefined)
          'refreshTokens_aggregate': (refreshTokens_aggregate
              as Input$authRefreshTokens_aggregate_order_by?),
        if (value != _undefined) 'value': (value as Enum$order_by?),
      }));
  CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes>
      get refreshTokens_aggregate {
    final local$refreshTokens_aggregate = _instance.refreshTokens_aggregate;
    return local$refreshTokens_aggregate == null
        ? CopyWith$Input$authRefreshTokens_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_aggregate_order_by(
            local$refreshTokens_aggregate,
            (e) => call(refreshTokens_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_order_by<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_order_by<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? comment,
    Input$authRefreshTokens_aggregate_order_by? refreshTokens_aggregate,
    Enum$order_by? value,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes>
      get refreshTokens_aggregate =>
          CopyWith$Input$authRefreshTokens_aggregate_order_by.stub(_res);
}

class Input$authRefreshTokenTypes_pk_columns_input {
  factory Input$authRefreshTokenTypes_pk_columns_input(
          {required String value}) =>
      Input$authRefreshTokenTypes_pk_columns_input._({
        r'value': value,
      });

  Input$authRefreshTokenTypes_pk_columns_input._(this._$data);

  factory Input$authRefreshTokenTypes_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$value = data['value'];
    result$data['value'] = (l$value as String);
    return Input$authRefreshTokenTypes_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get value => (_$data['value'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$value = value;
    result$data['value'] = l$value;
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_pk_columns_input<
          Input$authRefreshTokenTypes_pk_columns_input>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (l$value != lOther$value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$value = value;
    return Object.hashAll([l$value]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_pk_columns_input<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_pk_columns_input(
    Input$authRefreshTokenTypes_pk_columns_input instance,
    TRes Function(Input$authRefreshTokenTypes_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_pk_columns_input;

  factory CopyWith$Input$authRefreshTokenTypes_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_pk_columns_input;

  TRes call({String? value});
}

class _CopyWithImpl$Input$authRefreshTokenTypes_pk_columns_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_pk_columns_input _instance;

  final TRes Function(Input$authRefreshTokenTypes_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? value = _undefined}) =>
      _then(Input$authRefreshTokenTypes_pk_columns_input._({
        ..._instance._$data,
        if (value != _undefined && value != null) 'value': (value as String),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_pk_columns_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_pk_columns_input(this._res);

  TRes _res;

  call({String? value}) => _res;
}

class Input$authRefreshTokenTypes_set_input {
  factory Input$authRefreshTokenTypes_set_input({
    String? comment,
    String? value,
  }) =>
      Input$authRefreshTokenTypes_set_input._({
        if (comment != null) r'comment': comment,
        if (value != null) r'value': value,
      });

  Input$authRefreshTokenTypes_set_input._(this._$data);

  factory Input$authRefreshTokenTypes_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('comment')) {
      final l$comment = data['comment'];
      result$data['comment'] = (l$comment as String?);
    }
    if (data.containsKey('value')) {
      final l$value = data['value'];
      result$data['value'] = (l$value as String?);
    }
    return Input$authRefreshTokenTypes_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get comment => (_$data['comment'] as String?);
  String? get value => (_$data['value'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('comment')) {
      final l$comment = comment;
      result$data['comment'] = l$comment;
    }
    if (_$data.containsKey('value')) {
      final l$value = value;
      result$data['value'] = l$value;
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_set_input<
          Input$authRefreshTokenTypes_set_input>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$comment = comment;
    final lOther$comment = other.comment;
    if (_$data.containsKey('comment') != other._$data.containsKey('comment')) {
      return false;
    }
    if (l$comment != lOther$comment) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (_$data.containsKey('value') != other._$data.containsKey('value')) {
      return false;
    }
    if (l$value != lOther$value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$comment = comment;
    final l$value = value;
    return Object.hashAll([
      _$data.containsKey('comment') ? l$comment : const {},
      _$data.containsKey('value') ? l$value : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_set_input<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_set_input(
    Input$authRefreshTokenTypes_set_input instance,
    TRes Function(Input$authRefreshTokenTypes_set_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_set_input;

  factory CopyWith$Input$authRefreshTokenTypes_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_set_input;

  TRes call({
    String? comment,
    String? value,
  });
}

class _CopyWithImpl$Input$authRefreshTokenTypes_set_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_set_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_set_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_set_input _instance;

  final TRes Function(Input$authRefreshTokenTypes_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? comment = _undefined,
    Object? value = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_set_input._({
        ..._instance._$data,
        if (comment != _undefined) 'comment': (comment as String?),
        if (value != _undefined) 'value': (value as String?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_set_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_set_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_set_input(this._res);

  TRes _res;

  call({
    String? comment,
    String? value,
  }) =>
      _res;
}

class Input$authRefreshTokenTypes_stream_cursor_input {
  factory Input$authRefreshTokenTypes_stream_cursor_input({
    required Input$authRefreshTokenTypes_stream_cursor_value_input
        initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authRefreshTokenTypes_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authRefreshTokenTypes_stream_cursor_input._(this._$data);

  factory Input$authRefreshTokenTypes_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authRefreshTokenTypes_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authRefreshTokenTypes_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRefreshTokenTypes_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$authRefreshTokenTypes_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_stream_cursor_input<
          Input$authRefreshTokenTypes_stream_cursor_input>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_stream_cursor_input<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_stream_cursor_input(
    Input$authRefreshTokenTypes_stream_cursor_input instance,
    TRes Function(Input$authRefreshTokenTypes_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_stream_cursor_input;

  factory CopyWith$Input$authRefreshTokenTypes_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_stream_cursor_input;

  TRes call({
    Input$authRefreshTokenTypes_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$authRefreshTokenTypes_stream_cursor_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_stream_cursor_input _instance;

  final TRes Function(Input$authRefreshTokenTypes_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$authRefreshTokenTypes_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_stream_cursor_input<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authRefreshTokenTypes_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input.stub(
              _res);
}

class Input$authRefreshTokenTypes_stream_cursor_value_input {
  factory Input$authRefreshTokenTypes_stream_cursor_value_input({
    String? comment,
    String? value,
  }) =>
      Input$authRefreshTokenTypes_stream_cursor_value_input._({
        if (comment != null) r'comment': comment,
        if (value != null) r'value': value,
      });

  Input$authRefreshTokenTypes_stream_cursor_value_input._(this._$data);

  factory Input$authRefreshTokenTypes_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('comment')) {
      final l$comment = data['comment'];
      result$data['comment'] = (l$comment as String?);
    }
    if (data.containsKey('value')) {
      final l$value = data['value'];
      result$data['value'] = (l$value as String?);
    }
    return Input$authRefreshTokenTypes_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get comment => (_$data['comment'] as String?);
  String? get value => (_$data['value'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('comment')) {
      final l$comment = comment;
      result$data['comment'] = l$comment;
    }
    if (_$data.containsKey('value')) {
      final l$value = value;
      result$data['value'] = l$value;
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input<
          Input$authRefreshTokenTypes_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$comment = comment;
    final lOther$comment = other.comment;
    if (_$data.containsKey('comment') != other._$data.containsKey('comment')) {
      return false;
    }
    if (l$comment != lOther$comment) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (_$data.containsKey('value') != other._$data.containsKey('value')) {
      return false;
    }
    if (l$value != lOther$value) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$comment = comment;
    final l$value = value;
    return Object.hashAll([
      _$data.containsKey('comment') ? l$comment : const {},
      _$data.containsKey('value') ? l$value : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input(
    Input$authRefreshTokenTypes_stream_cursor_value_input instance,
    TRes Function(Input$authRefreshTokenTypes_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_stream_cursor_value_input;

  factory CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_stream_cursor_value_input;

  TRes call({
    String? comment,
    String? value,
  });
}

class _CopyWithImpl$Input$authRefreshTokenTypes_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_stream_cursor_value_input _instance;

  final TRes Function(Input$authRefreshTokenTypes_stream_cursor_value_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? comment = _undefined,
    Object? value = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_stream_cursor_value_input._({
        ..._instance._$data,
        if (comment != _undefined) 'comment': (comment as String?),
        if (value != _undefined) 'value': (value as String?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$authRefreshTokenTypes_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    String? comment,
    String? value,
  }) =>
      _res;
}

class Input$authRefreshTokenTypes_updates {
  factory Input$authRefreshTokenTypes_updates({
    Input$authRefreshTokenTypes_set_input? $_set,
    required Input$authRefreshTokenTypes_bool_exp where,
  }) =>
      Input$authRefreshTokenTypes_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authRefreshTokenTypes_updates._(this._$data);

  factory Input$authRefreshTokenTypes_updates.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authRefreshTokenTypes_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$authRefreshTokenTypes_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$authRefreshTokenTypes_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRefreshTokenTypes_set_input? get $_set =>
      (_$data['_set'] as Input$authRefreshTokenTypes_set_input?);
  Input$authRefreshTokenTypes_bool_exp get where =>
      (_$data['where'] as Input$authRefreshTokenTypes_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authRefreshTokenTypes_updates<
          Input$authRefreshTokenTypes_updates>
      get copyWith => CopyWith$Input$authRefreshTokenTypes_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokenTypes_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokenTypes_updates<TRes> {
  factory CopyWith$Input$authRefreshTokenTypes_updates(
    Input$authRefreshTokenTypes_updates instance,
    TRes Function(Input$authRefreshTokenTypes_updates) then,
  ) = _CopyWithImpl$Input$authRefreshTokenTypes_updates;

  factory CopyWith$Input$authRefreshTokenTypes_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokenTypes_updates;

  TRes call({
    Input$authRefreshTokenTypes_set_input? $_set,
    Input$authRefreshTokenTypes_bool_exp? where,
  });
  CopyWith$Input$authRefreshTokenTypes_set_input<TRes> get $_set;
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authRefreshTokenTypes_updates<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_updates<TRes> {
  _CopyWithImpl$Input$authRefreshTokenTypes_updates(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokenTypes_updates _instance;

  final TRes Function(Input$authRefreshTokenTypes_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authRefreshTokenTypes_updates._({
        ..._instance._$data,
        if ($_set != _undefined)
          '_set': ($_set as Input$authRefreshTokenTypes_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authRefreshTokenTypes_bool_exp),
      }));
  CopyWith$Input$authRefreshTokenTypes_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authRefreshTokenTypes_set_input.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokenTypes_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authRefreshTokenTypes_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokenTypes_updates<TRes>
    implements CopyWith$Input$authRefreshTokenTypes_updates<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokenTypes_updates(this._res);

  TRes _res;

  call({
    Input$authRefreshTokenTypes_set_input? $_set,
    Input$authRefreshTokenTypes_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokenTypes_set_input<TRes> get $_set =>
      CopyWith$Input$authRefreshTokenTypes_set_input.stub(_res);
  CopyWith$Input$authRefreshTokenTypes_bool_exp<TRes> get where =>
      CopyWith$Input$authRefreshTokenTypes_bool_exp.stub(_res);
}

class Input$authRefreshTokens_aggregate_bool_exp {
  factory Input$authRefreshTokens_aggregate_bool_exp(
          {Input$authRefreshTokens_aggregate_bool_exp_count? count}) =>
      Input$authRefreshTokens_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$authRefreshTokens_aggregate_bool_exp._(this._$data);

  factory Input$authRefreshTokens_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$authRefreshTokens_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$authRefreshTokens_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRefreshTokens_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$authRefreshTokens_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_aggregate_bool_exp<
          Input$authRefreshTokens_aggregate_bool_exp>
      get copyWith => CopyWith$Input$authRefreshTokens_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$authRefreshTokens_aggregate_bool_exp(
    Input$authRefreshTokens_aggregate_bool_exp instance,
    TRes Function(Input$authRefreshTokens_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_aggregate_bool_exp;

  factory CopyWith$Input$authRefreshTokens_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_aggregate_bool_exp;

  TRes call({Input$authRefreshTokens_aggregate_bool_exp_count? count});
  CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$authRefreshTokens_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_aggregate_bool_exp _instance;

  final TRes Function(Input$authRefreshTokens_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$authRefreshTokens_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$authRefreshTokens_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$authRefreshTokens_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count.stub(_res);
}

class Input$authRefreshTokens_aggregate_bool_exp_count {
  factory Input$authRefreshTokens_aggregate_bool_exp_count({
    List<Enum$authRefreshTokens_select_column>? arguments,
    bool? distinct,
    Input$authRefreshTokens_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$authRefreshTokens_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$authRefreshTokens_aggregate_bool_exp_count._(this._$data);

  factory Input$authRefreshTokens_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) =>
              fromJson$Enum$authRefreshTokens_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$authRefreshTokens_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$authRefreshTokens_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$authRefreshTokens_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$authRefreshTokens_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$authRefreshTokens_bool_exp? get filter =>
      (_$data['filter'] as Input$authRefreshTokens_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$authRefreshTokens_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count<
          Input$authRefreshTokens_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count(
    Input$authRefreshTokens_aggregate_bool_exp_count instance,
    TRes Function(Input$authRefreshTokens_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_aggregate_bool_exp_count;

  factory CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_aggregate_bool_exp_count;

  TRes call({
    List<Enum$authRefreshTokens_select_column>? arguments,
    bool? distinct,
    Input$authRefreshTokens_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$authRefreshTokens_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_aggregate_bool_exp_count _instance;

  final TRes Function(Input$authRefreshTokens_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$authRefreshTokens_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments':
              (arguments as List<Enum$authRefreshTokens_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$authRefreshTokens_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$authRefreshTokens_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$authRefreshTokens_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$authRefreshTokens_select_column>? arguments,
    bool? distinct,
    Input$authRefreshTokens_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get filter =>
      CopyWith$Input$authRefreshTokens_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$authRefreshTokens_aggregate_order_by {
  factory Input$authRefreshTokens_aggregate_order_by({
    Enum$order_by? count,
    Input$authRefreshTokens_max_order_by? max,
    Input$authRefreshTokens_min_order_by? min,
  }) =>
      Input$authRefreshTokens_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$authRefreshTokens_aggregate_order_by._(this._$data);

  factory Input$authRefreshTokens_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$authRefreshTokens_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$authRefreshTokens_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$authRefreshTokens_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$authRefreshTokens_max_order_by? get max =>
      (_$data['max'] as Input$authRefreshTokens_max_order_by?);
  Input$authRefreshTokens_min_order_by? get min =>
      (_$data['min'] as Input$authRefreshTokens_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_aggregate_order_by<
          Input$authRefreshTokens_aggregate_order_by>
      get copyWith => CopyWith$Input$authRefreshTokens_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes> {
  factory CopyWith$Input$authRefreshTokens_aggregate_order_by(
    Input$authRefreshTokens_aggregate_order_by instance,
    TRes Function(Input$authRefreshTokens_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_aggregate_order_by;

  factory CopyWith$Input$authRefreshTokens_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$authRefreshTokens_max_order_by? max,
    Input$authRefreshTokens_min_order_by? min,
  });
  CopyWith$Input$authRefreshTokens_max_order_by<TRes> get max;
  CopyWith$Input$authRefreshTokens_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$authRefreshTokens_aggregate_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_aggregate_order_by _instance;

  final TRes Function(Input$authRefreshTokens_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$authRefreshTokens_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$authRefreshTokens_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$authRefreshTokens_min_order_by?),
      }));
  CopyWith$Input$authRefreshTokens_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$authRefreshTokens_max_order_by.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$authRefreshTokens_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$authRefreshTokens_min_order_by.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_aggregate_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$authRefreshTokens_max_order_by? max,
    Input$authRefreshTokens_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokens_max_order_by<TRes> get max =>
      CopyWith$Input$authRefreshTokens_max_order_by.stub(_res);
  CopyWith$Input$authRefreshTokens_min_order_by<TRes> get min =>
      CopyWith$Input$authRefreshTokens_min_order_by.stub(_res);
}

class Input$authRefreshTokens_append_input {
  factory Input$authRefreshTokens_append_input({JSONB? metadata}) =>
      Input$authRefreshTokens_append_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$authRefreshTokens_append_input._(this._$data);

  factory Input$authRefreshTokens_append_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    return Input$authRefreshTokens_append_input._(result$data);
  }

  Map<String, dynamic> _$data;

  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_append_input<
          Input$authRefreshTokens_append_input>
      get copyWith => CopyWith$Input$authRefreshTokens_append_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_append_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_append_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_append_input(
    Input$authRefreshTokens_append_input instance,
    TRes Function(Input$authRefreshTokens_append_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_append_input;

  factory CopyWith$Input$authRefreshTokens_append_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_append_input;

  TRes call({JSONB? metadata});
}

class _CopyWithImpl$Input$authRefreshTokens_append_input<TRes>
    implements CopyWith$Input$authRefreshTokens_append_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_append_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_append_input _instance;

  final TRes Function(Input$authRefreshTokens_append_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$authRefreshTokens_append_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_append_input<TRes>
    implements CopyWith$Input$authRefreshTokens_append_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_append_input(this._res);

  TRes _res;

  call({JSONB? metadata}) => _res;
}

class Input$authRefreshTokens_arr_rel_insert_input {
  factory Input$authRefreshTokens_arr_rel_insert_input({
    required List<Input$authRefreshTokens_insert_input> data,
    Input$authRefreshTokens_on_conflict? on_conflict,
  }) =>
      Input$authRefreshTokens_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$authRefreshTokens_arr_rel_insert_input._(this._$data);

  factory Input$authRefreshTokens_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$authRefreshTokens_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$authRefreshTokens_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$authRefreshTokens_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authRefreshTokens_insert_input> get data =>
      (_$data['data'] as List<Input$authRefreshTokens_insert_input>);
  Input$authRefreshTokens_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$authRefreshTokens_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_arr_rel_insert_input<
          Input$authRefreshTokens_arr_rel_insert_input>
      get copyWith => CopyWith$Input$authRefreshTokens_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_arr_rel_insert_input(
    Input$authRefreshTokens_arr_rel_insert_input instance,
    TRes Function(Input$authRefreshTokens_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_arr_rel_insert_input;

  factory CopyWith$Input$authRefreshTokens_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_arr_rel_insert_input;

  TRes call({
    List<Input$authRefreshTokens_insert_input>? data,
    Input$authRefreshTokens_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$authRefreshTokens_insert_input> Function(
              Iterable<
                  CopyWith$Input$authRefreshTokens_insert_input<
                      Input$authRefreshTokens_insert_input>>)
          _fn);
  CopyWith$Input$authRefreshTokens_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$authRefreshTokens_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_arr_rel_insert_input _instance;

  final TRes Function(Input$authRefreshTokens_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$authRefreshTokens_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$authRefreshTokens_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$authRefreshTokens_on_conflict?),
      }));
  TRes data(
          Iterable<Input$authRefreshTokens_insert_input> Function(
                  Iterable<
                      CopyWith$Input$authRefreshTokens_insert_input<
                          Input$authRefreshTokens_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data
              .map((e) => CopyWith$Input$authRefreshTokens_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$authRefreshTokens_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$authRefreshTokens_on_conflict.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$authRefreshTokens_insert_input>? data,
    Input$authRefreshTokens_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$authRefreshTokens_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$authRefreshTokens_on_conflict.stub(_res);
}

class Input$authRefreshTokens_bool_exp {
  factory Input$authRefreshTokens_bool_exp({
    List<Input$authRefreshTokens_bool_exp>? $_and,
    Input$authRefreshTokens_bool_exp? $_not,
    List<Input$authRefreshTokens_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? createdAt,
    Input$timestamptz_comparison_exp? expiresAt,
    Input$uuid_comparison_exp? id,
    Input$jsonb_comparison_exp? metadata,
    Input$String_comparison_exp? refreshTokenHash,
    Input$authRefreshTokenTypes_enum_comparison_exp? type,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      Input$authRefreshTokens_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (createdAt != null) r'createdAt': createdAt,
        if (expiresAt != null) r'expiresAt': expiresAt,
        if (id != null) r'id': id,
        if (metadata != null) r'metadata': metadata,
        if (refreshTokenHash != null) r'refreshTokenHash': refreshTokenHash,
        if (type != null) r'type': type,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authRefreshTokens_bool_exp._(this._$data);

  factory Input$authRefreshTokens_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$authRefreshTokens_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authRefreshTokens_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$authRefreshTokens_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$createdAt as Map<String, dynamic>));
    }
    if (data.containsKey('expiresAt')) {
      final l$expiresAt = data['expiresAt'];
      result$data['expiresAt'] = l$expiresAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$expiresAt as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$uuid_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = l$metadata == null
          ? null
          : Input$jsonb_comparison_exp.fromJson(
              (l$metadata as Map<String, dynamic>));
    }
    if (data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = data['refreshTokenHash'];
      result$data['refreshTokenHash'] = l$refreshTokenHash == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$refreshTokenHash as Map<String, dynamic>));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : Input$authRefreshTokenTypes_enum_comparison_exp.fromJson(
              (l$type as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$userId as Map<String, dynamic>));
    }
    return Input$authRefreshTokens_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authRefreshTokens_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authRefreshTokens_bool_exp>?);
  Input$authRefreshTokens_bool_exp? get $_not =>
      (_$data['_not'] as Input$authRefreshTokens_bool_exp?);
  List<Input$authRefreshTokens_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authRefreshTokens_bool_exp>?);
  Input$timestamptz_comparison_exp? get createdAt =>
      (_$data['createdAt'] as Input$timestamptz_comparison_exp?);
  Input$timestamptz_comparison_exp? get expiresAt =>
      (_$data['expiresAt'] as Input$timestamptz_comparison_exp?);
  Input$uuid_comparison_exp? get id =>
      (_$data['id'] as Input$uuid_comparison_exp?);
  Input$jsonb_comparison_exp? get metadata =>
      (_$data['metadata'] as Input$jsonb_comparison_exp?);
  Input$String_comparison_exp? get refreshTokenHash =>
      (_$data['refreshTokenHash'] as Input$String_comparison_exp?);
  Input$authRefreshTokenTypes_enum_comparison_exp? get type =>
      (_$data['type'] as Input$authRefreshTokenTypes_enum_comparison_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get userId =>
      (_$data['userId'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toJson();
    }
    if (_$data.containsKey('expiresAt')) {
      final l$expiresAt = expiresAt;
      result$data['expiresAt'] = l$expiresAt?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata?.toJson();
    }
    if (_$data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = refreshTokenHash;
      result$data['refreshTokenHash'] = l$refreshTokenHash?.toJson();
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_bool_exp<Input$authRefreshTokens_bool_exp>
      get copyWith => CopyWith$Input$authRefreshTokens_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (_$data.containsKey('expiresAt') !=
        other._$data.containsKey('expiresAt')) {
      return false;
    }
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$refreshTokenHash = refreshTokenHash;
    final lOther$refreshTokenHash = other.refreshTokenHash;
    if (_$data.containsKey('refreshTokenHash') !=
        other._$data.containsKey('refreshTokenHash')) {
      return false;
    }
    if (l$refreshTokenHash != lOther$refreshTokenHash) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$createdAt = createdAt;
    final l$expiresAt = expiresAt;
    final l$id = id;
    final l$metadata = metadata;
    final l$refreshTokenHash = refreshTokenHash;
    final l$type = type;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('expiresAt') ? l$expiresAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('refreshTokenHash') ? l$refreshTokenHash : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_bool_exp<TRes> {
  factory CopyWith$Input$authRefreshTokens_bool_exp(
    Input$authRefreshTokens_bool_exp instance,
    TRes Function(Input$authRefreshTokens_bool_exp) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_bool_exp;

  factory CopyWith$Input$authRefreshTokens_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_bool_exp;

  TRes call({
    List<Input$authRefreshTokens_bool_exp>? $_and,
    Input$authRefreshTokens_bool_exp? $_not,
    List<Input$authRefreshTokens_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? createdAt,
    Input$timestamptz_comparison_exp? expiresAt,
    Input$uuid_comparison_exp? id,
    Input$jsonb_comparison_exp? metadata,
    Input$String_comparison_exp? refreshTokenHash,
    Input$authRefreshTokenTypes_enum_comparison_exp? type,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  });
  TRes $_and(
      Iterable<Input$authRefreshTokens_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authRefreshTokens_bool_exp<
                      Input$authRefreshTokens_bool_exp>>?)
          _fn);
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authRefreshTokens_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authRefreshTokens_bool_exp<
                      Input$authRefreshTokens_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get expiresAt;
  CopyWith$Input$uuid_comparison_exp<TRes> get id;
  CopyWith$Input$jsonb_comparison_exp<TRes> get metadata;
  CopyWith$Input$String_comparison_exp<TRes> get refreshTokenHash;
  CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp<TRes> get type;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get userId;
}

class _CopyWithImpl$Input$authRefreshTokens_bool_exp<TRes>
    implements CopyWith$Input$authRefreshTokens_bool_exp<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_bool_exp _instance;

  final TRes Function(Input$authRefreshTokens_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? createdAt = _undefined,
    Object? expiresAt = _undefined,
    Object? id = _undefined,
    Object? metadata = _undefined,
    Object? refreshTokenHash = _undefined,
    Object? type = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authRefreshTokens_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authRefreshTokens_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$authRefreshTokens_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authRefreshTokens_bool_exp>?),
        if (createdAt != _undefined)
          'createdAt': (createdAt as Input$timestamptz_comparison_exp?),
        if (expiresAt != _undefined)
          'expiresAt': (expiresAt as Input$timestamptz_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$uuid_comparison_exp?),
        if (metadata != _undefined)
          'metadata': (metadata as Input$jsonb_comparison_exp?),
        if (refreshTokenHash != _undefined)
          'refreshTokenHash':
              (refreshTokenHash as Input$String_comparison_exp?),
        if (type != _undefined)
          'type': (type as Input$authRefreshTokenTypes_enum_comparison_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (userId != _undefined)
          'userId': (userId as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$authRefreshTokens_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authRefreshTokens_bool_exp<
                          Input$authRefreshTokens_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$authRefreshTokens_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authRefreshTokens_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authRefreshTokens_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authRefreshTokens_bool_exp<
                          Input$authRefreshTokens_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$authRefreshTokens_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt {
    final local$createdAt = _instance.createdAt;
    return local$createdAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$createdAt, (e) => call(createdAt: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get expiresAt {
    final local$expiresAt = _instance.expiresAt;
    return local$expiresAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$expiresAt, (e) => call(expiresAt: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$jsonb_comparison_exp<TRes> get metadata {
    final local$metadata = _instance.metadata;
    return local$metadata == null
        ? CopyWith$Input$jsonb_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$jsonb_comparison_exp(
            local$metadata, (e) => call(metadata: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get refreshTokenHash {
    final local$refreshTokenHash = _instance.refreshTokenHash;
    return local$refreshTokenHash == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$refreshTokenHash, (e) => call(refreshTokenHash: e));
  }

  CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp<TRes> get type {
    final local$type = _instance.type;
    return local$type == null
        ? CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp(
            local$type, (e) => call(type: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get userId {
    final local$userId = _instance.userId;
    return local$userId == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$userId, (e) => call(userId: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_bool_exp<TRes>
    implements CopyWith$Input$authRefreshTokens_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authRefreshTokens_bool_exp>? $_and,
    Input$authRefreshTokens_bool_exp? $_not,
    List<Input$authRefreshTokens_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? createdAt,
    Input$timestamptz_comparison_exp? expiresAt,
    Input$uuid_comparison_exp? id,
    Input$jsonb_comparison_exp? metadata,
    Input$String_comparison_exp? refreshTokenHash,
    Input$authRefreshTokenTypes_enum_comparison_exp? type,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get $_not =>
      CopyWith$Input$authRefreshTokens_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get expiresAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$jsonb_comparison_exp<TRes> get metadata =>
      CopyWith$Input$jsonb_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get refreshTokenHash =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp<TRes> get type =>
      CopyWith$Input$authRefreshTokenTypes_enum_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get userId =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$authRefreshTokens_delete_at_path_input {
  factory Input$authRefreshTokens_delete_at_path_input(
          {List<String>? metadata}) =>
      Input$authRefreshTokens_delete_at_path_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$authRefreshTokens_delete_at_path_input._(this._$data);

  factory Input$authRefreshTokens_delete_at_path_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          (l$metadata as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$authRefreshTokens_delete_at_path_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<String>? get metadata => (_$data['metadata'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_delete_at_path_input<
          Input$authRefreshTokens_delete_at_path_input>
      get copyWith => CopyWith$Input$authRefreshTokens_delete_at_path_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_delete_at_path_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != null && lOther$metadata != null) {
      if (l$metadata.length != lOther$metadata.length) {
        return false;
      }
      for (int i = 0; i < l$metadata.length; i++) {
        final l$metadata$entry = l$metadata[i];
        final lOther$metadata$entry = lOther$metadata[i];
        if (l$metadata$entry != lOther$metadata$entry) {
          return false;
        }
      }
    } else if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll([
      _$data.containsKey('metadata')
          ? l$metadata == null
              ? null
              : Object.hashAll(l$metadata.map((v) => v))
          : const {}
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_delete_at_path_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_delete_at_path_input(
    Input$authRefreshTokens_delete_at_path_input instance,
    TRes Function(Input$authRefreshTokens_delete_at_path_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_delete_at_path_input;

  factory CopyWith$Input$authRefreshTokens_delete_at_path_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_delete_at_path_input;

  TRes call({List<String>? metadata});
}

class _CopyWithImpl$Input$authRefreshTokens_delete_at_path_input<TRes>
    implements CopyWith$Input$authRefreshTokens_delete_at_path_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_delete_at_path_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_delete_at_path_input _instance;

  final TRes Function(Input$authRefreshTokens_delete_at_path_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$authRefreshTokens_delete_at_path_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_delete_at_path_input<TRes>
    implements CopyWith$Input$authRefreshTokens_delete_at_path_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_delete_at_path_input(this._res);

  TRes _res;

  call({List<String>? metadata}) => _res;
}

class Input$authRefreshTokens_delete_elem_input {
  factory Input$authRefreshTokens_delete_elem_input({int? metadata}) =>
      Input$authRefreshTokens_delete_elem_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$authRefreshTokens_delete_elem_input._(this._$data);

  factory Input$authRefreshTokens_delete_elem_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = (l$metadata as int?);
    }
    return Input$authRefreshTokens_delete_elem_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get metadata => (_$data['metadata'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata;
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_delete_elem_input<
          Input$authRefreshTokens_delete_elem_input>
      get copyWith => CopyWith$Input$authRefreshTokens_delete_elem_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_delete_elem_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_delete_elem_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_delete_elem_input(
    Input$authRefreshTokens_delete_elem_input instance,
    TRes Function(Input$authRefreshTokens_delete_elem_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_delete_elem_input;

  factory CopyWith$Input$authRefreshTokens_delete_elem_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_delete_elem_input;

  TRes call({int? metadata});
}

class _CopyWithImpl$Input$authRefreshTokens_delete_elem_input<TRes>
    implements CopyWith$Input$authRefreshTokens_delete_elem_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_delete_elem_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_delete_elem_input _instance;

  final TRes Function(Input$authRefreshTokens_delete_elem_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$authRefreshTokens_delete_elem_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as int?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_delete_elem_input<TRes>
    implements CopyWith$Input$authRefreshTokens_delete_elem_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_delete_elem_input(this._res);

  TRes _res;

  call({int? metadata}) => _res;
}

class Input$authRefreshTokens_delete_key_input {
  factory Input$authRefreshTokens_delete_key_input({String? metadata}) =>
      Input$authRefreshTokens_delete_key_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$authRefreshTokens_delete_key_input._(this._$data);

  factory Input$authRefreshTokens_delete_key_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = (l$metadata as String?);
    }
    return Input$authRefreshTokens_delete_key_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get metadata => (_$data['metadata'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata;
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_delete_key_input<
          Input$authRefreshTokens_delete_key_input>
      get copyWith => CopyWith$Input$authRefreshTokens_delete_key_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_delete_key_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_delete_key_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_delete_key_input(
    Input$authRefreshTokens_delete_key_input instance,
    TRes Function(Input$authRefreshTokens_delete_key_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_delete_key_input;

  factory CopyWith$Input$authRefreshTokens_delete_key_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_delete_key_input;

  TRes call({String? metadata});
}

class _CopyWithImpl$Input$authRefreshTokens_delete_key_input<TRes>
    implements CopyWith$Input$authRefreshTokens_delete_key_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_delete_key_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_delete_key_input _instance;

  final TRes Function(Input$authRefreshTokens_delete_key_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$authRefreshTokens_delete_key_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as String?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_delete_key_input<TRes>
    implements CopyWith$Input$authRefreshTokens_delete_key_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_delete_key_input(this._res);

  TRes _res;

  call({String? metadata}) => _res;
}

class Input$authRefreshTokens_insert_input {
  factory Input$authRefreshTokens_insert_input({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      Input$authRefreshTokens_insert_input._({
        if (createdAt != null) r'createdAt': createdAt,
        if (expiresAt != null) r'expiresAt': expiresAt,
        if (id != null) r'id': id,
        if (metadata != null) r'metadata': metadata,
        if (refreshTokenHash != null) r'refreshTokenHash': refreshTokenHash,
        if (type != null) r'type': type,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authRefreshTokens_insert_input._(this._$data);

  factory Input$authRefreshTokens_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('expiresAt')) {
      final l$expiresAt = data['expiresAt'];
      result$data['expiresAt'] =
          l$expiresAt == null ? null : DateTime.parse((l$expiresAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    if (data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = data['refreshTokenHash'];
      result$data['refreshTokenHash'] = (l$refreshTokenHash as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : fromJson$Enum$authRefreshTokenTypes_enum((l$type as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authRefreshTokens_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  DateTime? get expiresAt => (_$data['expiresAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  String? get refreshTokenHash => (_$data['refreshTokenHash'] as String?);
  Enum$authRefreshTokenTypes_enum? get type =>
      (_$data['type'] as Enum$authRefreshTokenTypes_enum?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('expiresAt')) {
      final l$expiresAt = expiresAt;
      result$data['expiresAt'] = l$expiresAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    if (_$data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = refreshTokenHash;
      result$data['refreshTokenHash'] = l$refreshTokenHash;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type == null
          ? null
          : toJson$Enum$authRefreshTokenTypes_enum(l$type);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_insert_input<
          Input$authRefreshTokens_insert_input>
      get copyWith => CopyWith$Input$authRefreshTokens_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (_$data.containsKey('expiresAt') !=
        other._$data.containsKey('expiresAt')) {
      return false;
    }
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$refreshTokenHash = refreshTokenHash;
    final lOther$refreshTokenHash = other.refreshTokenHash;
    if (_$data.containsKey('refreshTokenHash') !=
        other._$data.containsKey('refreshTokenHash')) {
      return false;
    }
    if (l$refreshTokenHash != lOther$refreshTokenHash) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$expiresAt = expiresAt;
    final l$id = id;
    final l$metadata = metadata;
    final l$refreshTokenHash = refreshTokenHash;
    final l$type = type;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('expiresAt') ? l$expiresAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('refreshTokenHash') ? l$refreshTokenHash : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_insert_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_insert_input(
    Input$authRefreshTokens_insert_input instance,
    TRes Function(Input$authRefreshTokens_insert_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_insert_input;

  factory CopyWith$Input$authRefreshTokens_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_insert_input;

  TRes call({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  });
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$authRefreshTokens_insert_input<TRes>
    implements CopyWith$Input$authRefreshTokens_insert_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_insert_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_insert_input _instance;

  final TRes Function(Input$authRefreshTokens_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? expiresAt = _undefined,
    Object? id = _undefined,
    Object? metadata = _undefined,
    Object? refreshTokenHash = _undefined,
    Object? type = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authRefreshTokens_insert_input._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (expiresAt != _undefined) 'expiresAt': (expiresAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
        if (refreshTokenHash != _undefined)
          'refreshTokenHash': (refreshTokenHash as String?),
        if (type != _undefined)
          'type': (type as Enum$authRefreshTokenTypes_enum?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_insert_input<TRes>
    implements CopyWith$Input$authRefreshTokens_insert_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_insert_input(this._res);

  TRes _res;

  call({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      _res;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$authRefreshTokens_max_order_by {
  factory Input$authRefreshTokens_max_order_by({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? userId,
  }) =>
      Input$authRefreshTokens_max_order_by._({
        if (createdAt != null) r'createdAt': createdAt,
        if (expiresAt != null) r'expiresAt': expiresAt,
        if (id != null) r'id': id,
        if (refreshTokenHash != null) r'refreshTokenHash': refreshTokenHash,
        if (userId != null) r'userId': userId,
      });

  Input$authRefreshTokens_max_order_by._(this._$data);

  factory Input$authRefreshTokens_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('expiresAt')) {
      final l$expiresAt = data['expiresAt'];
      result$data['expiresAt'] = l$expiresAt == null
          ? null
          : fromJson$Enum$order_by((l$expiresAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = data['refreshTokenHash'];
      result$data['refreshTokenHash'] = l$refreshTokenHash == null
          ? null
          : fromJson$Enum$order_by((l$refreshTokenHash as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authRefreshTokens_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get expiresAt => (_$data['expiresAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get refreshTokenHash =>
      (_$data['refreshTokenHash'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('expiresAt')) {
      final l$expiresAt = expiresAt;
      result$data['expiresAt'] =
          l$expiresAt == null ? null : toJson$Enum$order_by(l$expiresAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = refreshTokenHash;
      result$data['refreshTokenHash'] = l$refreshTokenHash == null
          ? null
          : toJson$Enum$order_by(l$refreshTokenHash);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_max_order_by<
          Input$authRefreshTokens_max_order_by>
      get copyWith => CopyWith$Input$authRefreshTokens_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (_$data.containsKey('expiresAt') !=
        other._$data.containsKey('expiresAt')) {
      return false;
    }
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$refreshTokenHash = refreshTokenHash;
    final lOther$refreshTokenHash = other.refreshTokenHash;
    if (_$data.containsKey('refreshTokenHash') !=
        other._$data.containsKey('refreshTokenHash')) {
      return false;
    }
    if (l$refreshTokenHash != lOther$refreshTokenHash) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$expiresAt = expiresAt;
    final l$id = id;
    final l$refreshTokenHash = refreshTokenHash;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('expiresAt') ? l$expiresAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('refreshTokenHash') ? l$refreshTokenHash : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_max_order_by<TRes> {
  factory CopyWith$Input$authRefreshTokens_max_order_by(
    Input$authRefreshTokens_max_order_by instance,
    TRes Function(Input$authRefreshTokens_max_order_by) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_max_order_by;

  factory CopyWith$Input$authRefreshTokens_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_max_order_by;

  TRes call({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authRefreshTokens_max_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_max_order_by<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_max_order_by(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_max_order_by _instance;

  final TRes Function(Input$authRefreshTokens_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? expiresAt = _undefined,
    Object? id = _undefined,
    Object? refreshTokenHash = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authRefreshTokens_max_order_by._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (expiresAt != _undefined) 'expiresAt': (expiresAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (refreshTokenHash != _undefined)
          'refreshTokenHash': (refreshTokenHash as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_max_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_max_order_by<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authRefreshTokens_min_order_by {
  factory Input$authRefreshTokens_min_order_by({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? userId,
  }) =>
      Input$authRefreshTokens_min_order_by._({
        if (createdAt != null) r'createdAt': createdAt,
        if (expiresAt != null) r'expiresAt': expiresAt,
        if (id != null) r'id': id,
        if (refreshTokenHash != null) r'refreshTokenHash': refreshTokenHash,
        if (userId != null) r'userId': userId,
      });

  Input$authRefreshTokens_min_order_by._(this._$data);

  factory Input$authRefreshTokens_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('expiresAt')) {
      final l$expiresAt = data['expiresAt'];
      result$data['expiresAt'] = l$expiresAt == null
          ? null
          : fromJson$Enum$order_by((l$expiresAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = data['refreshTokenHash'];
      result$data['refreshTokenHash'] = l$refreshTokenHash == null
          ? null
          : fromJson$Enum$order_by((l$refreshTokenHash as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authRefreshTokens_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get expiresAt => (_$data['expiresAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get refreshTokenHash =>
      (_$data['refreshTokenHash'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('expiresAt')) {
      final l$expiresAt = expiresAt;
      result$data['expiresAt'] =
          l$expiresAt == null ? null : toJson$Enum$order_by(l$expiresAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = refreshTokenHash;
      result$data['refreshTokenHash'] = l$refreshTokenHash == null
          ? null
          : toJson$Enum$order_by(l$refreshTokenHash);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_min_order_by<
          Input$authRefreshTokens_min_order_by>
      get copyWith => CopyWith$Input$authRefreshTokens_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (_$data.containsKey('expiresAt') !=
        other._$data.containsKey('expiresAt')) {
      return false;
    }
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$refreshTokenHash = refreshTokenHash;
    final lOther$refreshTokenHash = other.refreshTokenHash;
    if (_$data.containsKey('refreshTokenHash') !=
        other._$data.containsKey('refreshTokenHash')) {
      return false;
    }
    if (l$refreshTokenHash != lOther$refreshTokenHash) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$expiresAt = expiresAt;
    final l$id = id;
    final l$refreshTokenHash = refreshTokenHash;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('expiresAt') ? l$expiresAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('refreshTokenHash') ? l$refreshTokenHash : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_min_order_by<TRes> {
  factory CopyWith$Input$authRefreshTokens_min_order_by(
    Input$authRefreshTokens_min_order_by instance,
    TRes Function(Input$authRefreshTokens_min_order_by) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_min_order_by;

  factory CopyWith$Input$authRefreshTokens_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_min_order_by;

  TRes call({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authRefreshTokens_min_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_min_order_by<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_min_order_by(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_min_order_by _instance;

  final TRes Function(Input$authRefreshTokens_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? expiresAt = _undefined,
    Object? id = _undefined,
    Object? refreshTokenHash = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authRefreshTokens_min_order_by._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (expiresAt != _undefined) 'expiresAt': (expiresAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (refreshTokenHash != _undefined)
          'refreshTokenHash': (refreshTokenHash as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_min_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_min_order_by<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authRefreshTokens_on_conflict {
  factory Input$authRefreshTokens_on_conflict({
    required Enum$authRefreshTokens_constraint constraint,
    required List<Enum$authRefreshTokens_update_column> update_columns,
    Input$authRefreshTokens_bool_exp? where,
  }) =>
      Input$authRefreshTokens_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authRefreshTokens_on_conflict._(this._$data);

  factory Input$authRefreshTokens_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$authRefreshTokens_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map(
            (e) => fromJson$Enum$authRefreshTokens_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authRefreshTokens_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authRefreshTokens_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authRefreshTokens_constraint get constraint =>
      (_$data['constraint'] as Enum$authRefreshTokens_constraint);
  List<Enum$authRefreshTokens_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$authRefreshTokens_update_column>);
  Input$authRefreshTokens_bool_exp? get where =>
      (_$data['where'] as Input$authRefreshTokens_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$authRefreshTokens_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authRefreshTokens_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_on_conflict<
          Input$authRefreshTokens_on_conflict>
      get copyWith => CopyWith$Input$authRefreshTokens_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_on_conflict<TRes> {
  factory CopyWith$Input$authRefreshTokens_on_conflict(
    Input$authRefreshTokens_on_conflict instance,
    TRes Function(Input$authRefreshTokens_on_conflict) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_on_conflict;

  factory CopyWith$Input$authRefreshTokens_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_on_conflict;

  TRes call({
    Enum$authRefreshTokens_constraint? constraint,
    List<Enum$authRefreshTokens_update_column>? update_columns,
    Input$authRefreshTokens_bool_exp? where,
  });
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authRefreshTokens_on_conflict<TRes>
    implements CopyWith$Input$authRefreshTokens_on_conflict<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_on_conflict _instance;

  final TRes Function(Input$authRefreshTokens_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authRefreshTokens_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authRefreshTokens_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$authRefreshTokens_update_column>),
        if (where != _undefined)
          'where': (where as Input$authRefreshTokens_bool_exp?),
      }));
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authRefreshTokens_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_on_conflict<TRes>
    implements CopyWith$Input$authRefreshTokens_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authRefreshTokens_constraint? constraint,
    List<Enum$authRefreshTokens_update_column>? update_columns,
    Input$authRefreshTokens_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get where =>
      CopyWith$Input$authRefreshTokens_bool_exp.stub(_res);
}

class Input$authRefreshTokens_order_by {
  factory Input$authRefreshTokens_order_by({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? metadata,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? type,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      Input$authRefreshTokens_order_by._({
        if (createdAt != null) r'createdAt': createdAt,
        if (expiresAt != null) r'expiresAt': expiresAt,
        if (id != null) r'id': id,
        if (metadata != null) r'metadata': metadata,
        if (refreshTokenHash != null) r'refreshTokenHash': refreshTokenHash,
        if (type != null) r'type': type,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authRefreshTokens_order_by._(this._$data);

  factory Input$authRefreshTokens_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('expiresAt')) {
      final l$expiresAt = data['expiresAt'];
      result$data['expiresAt'] = l$expiresAt == null
          ? null
          : fromJson$Enum$order_by((l$expiresAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = l$metadata == null
          ? null
          : fromJson$Enum$order_by((l$metadata as String));
    }
    if (data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = data['refreshTokenHash'];
      result$data['refreshTokenHash'] = l$refreshTokenHash == null
          ? null
          : fromJson$Enum$order_by((l$refreshTokenHash as String));
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] =
          l$type == null ? null : fromJson$Enum$order_by((l$type as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authRefreshTokens_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get expiresAt => (_$data['expiresAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get metadata => (_$data['metadata'] as Enum$order_by?);
  Enum$order_by? get refreshTokenHash =>
      (_$data['refreshTokenHash'] as Enum$order_by?);
  Enum$order_by? get type => (_$data['type'] as Enum$order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('expiresAt')) {
      final l$expiresAt = expiresAt;
      result$data['expiresAt'] =
          l$expiresAt == null ? null : toJson$Enum$order_by(l$expiresAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : toJson$Enum$order_by(l$metadata);
    }
    if (_$data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = refreshTokenHash;
      result$data['refreshTokenHash'] = l$refreshTokenHash == null
          ? null
          : toJson$Enum$order_by(l$refreshTokenHash);
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] =
          l$type == null ? null : toJson$Enum$order_by(l$type);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_order_by<Input$authRefreshTokens_order_by>
      get copyWith => CopyWith$Input$authRefreshTokens_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (_$data.containsKey('expiresAt') !=
        other._$data.containsKey('expiresAt')) {
      return false;
    }
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$refreshTokenHash = refreshTokenHash;
    final lOther$refreshTokenHash = other.refreshTokenHash;
    if (_$data.containsKey('refreshTokenHash') !=
        other._$data.containsKey('refreshTokenHash')) {
      return false;
    }
    if (l$refreshTokenHash != lOther$refreshTokenHash) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$expiresAt = expiresAt;
    final l$id = id;
    final l$metadata = metadata;
    final l$refreshTokenHash = refreshTokenHash;
    final l$type = type;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('expiresAt') ? l$expiresAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('refreshTokenHash') ? l$refreshTokenHash : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_order_by<TRes> {
  factory CopyWith$Input$authRefreshTokens_order_by(
    Input$authRefreshTokens_order_by instance,
    TRes Function(Input$authRefreshTokens_order_by) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_order_by;

  factory CopyWith$Input$authRefreshTokens_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_order_by;

  TRes call({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? metadata,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? type,
    Input$users_order_by? user,
    Enum$order_by? userId,
  });
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$authRefreshTokens_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_order_by<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_order_by(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_order_by _instance;

  final TRes Function(Input$authRefreshTokens_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? expiresAt = _undefined,
    Object? id = _undefined,
    Object? metadata = _undefined,
    Object? refreshTokenHash = _undefined,
    Object? type = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authRefreshTokens_order_by._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (expiresAt != _undefined) 'expiresAt': (expiresAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (metadata != _undefined) 'metadata': (metadata as Enum$order_by?),
        if (refreshTokenHash != _undefined)
          'refreshTokenHash': (refreshTokenHash as Enum$order_by?),
        if (type != _undefined) 'type': (type as Enum$order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_order_by<TRes>
    implements CopyWith$Input$authRefreshTokens_order_by<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? createdAt,
    Enum$order_by? expiresAt,
    Enum$order_by? id,
    Enum$order_by? metadata,
    Enum$order_by? refreshTokenHash,
    Enum$order_by? type,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      _res;
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$authRefreshTokens_pk_columns_input {
  factory Input$authRefreshTokens_pk_columns_input({required UUID id}) =>
      Input$authRefreshTokens_pk_columns_input._({
        r'id': id,
      });

  Input$authRefreshTokens_pk_columns_input._(this._$data);

  factory Input$authRefreshTokens_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = uuidFromJson(l$id);
    return Input$authRefreshTokens_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get id => (_$data['id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = uuidToJson(l$id);
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_pk_columns_input<
          Input$authRefreshTokens_pk_columns_input>
      get copyWith => CopyWith$Input$authRefreshTokens_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_pk_columns_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_pk_columns_input(
    Input$authRefreshTokens_pk_columns_input instance,
    TRes Function(Input$authRefreshTokens_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_pk_columns_input;

  factory CopyWith$Input$authRefreshTokens_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_pk_columns_input;

  TRes call({UUID? id});
}

class _CopyWithImpl$Input$authRefreshTokens_pk_columns_input<TRes>
    implements CopyWith$Input$authRefreshTokens_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_pk_columns_input _instance;

  final TRes Function(Input$authRefreshTokens_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authRefreshTokens_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as UUID),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_pk_columns_input<TRes>
    implements CopyWith$Input$authRefreshTokens_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_pk_columns_input(this._res);

  TRes _res;

  call({UUID? id}) => _res;
}

class Input$authRefreshTokens_prepend_input {
  factory Input$authRefreshTokens_prepend_input({JSONB? metadata}) =>
      Input$authRefreshTokens_prepend_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$authRefreshTokens_prepend_input._(this._$data);

  factory Input$authRefreshTokens_prepend_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    return Input$authRefreshTokens_prepend_input._(result$data);
  }

  Map<String, dynamic> _$data;

  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_prepend_input<
          Input$authRefreshTokens_prepend_input>
      get copyWith => CopyWith$Input$authRefreshTokens_prepend_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_prepend_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_prepend_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_prepend_input(
    Input$authRefreshTokens_prepend_input instance,
    TRes Function(Input$authRefreshTokens_prepend_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_prepend_input;

  factory CopyWith$Input$authRefreshTokens_prepend_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_prepend_input;

  TRes call({JSONB? metadata});
}

class _CopyWithImpl$Input$authRefreshTokens_prepend_input<TRes>
    implements CopyWith$Input$authRefreshTokens_prepend_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_prepend_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_prepend_input _instance;

  final TRes Function(Input$authRefreshTokens_prepend_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$authRefreshTokens_prepend_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_prepend_input<TRes>
    implements CopyWith$Input$authRefreshTokens_prepend_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_prepend_input(this._res);

  TRes _res;

  call({JSONB? metadata}) => _res;
}

class Input$authRefreshTokens_set_input {
  factory Input$authRefreshTokens_set_input({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    UUID? userId,
  }) =>
      Input$authRefreshTokens_set_input._({
        if (createdAt != null) r'createdAt': createdAt,
        if (expiresAt != null) r'expiresAt': expiresAt,
        if (id != null) r'id': id,
        if (metadata != null) r'metadata': metadata,
        if (refreshTokenHash != null) r'refreshTokenHash': refreshTokenHash,
        if (type != null) r'type': type,
        if (userId != null) r'userId': userId,
      });

  Input$authRefreshTokens_set_input._(this._$data);

  factory Input$authRefreshTokens_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('expiresAt')) {
      final l$expiresAt = data['expiresAt'];
      result$data['expiresAt'] =
          l$expiresAt == null ? null : DateTime.parse((l$expiresAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    if (data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = data['refreshTokenHash'];
      result$data['refreshTokenHash'] = (l$refreshTokenHash as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : fromJson$Enum$authRefreshTokenTypes_enum((l$type as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authRefreshTokens_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  DateTime? get expiresAt => (_$data['expiresAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  String? get refreshTokenHash => (_$data['refreshTokenHash'] as String?);
  Enum$authRefreshTokenTypes_enum? get type =>
      (_$data['type'] as Enum$authRefreshTokenTypes_enum?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('expiresAt')) {
      final l$expiresAt = expiresAt;
      result$data['expiresAt'] = l$expiresAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    if (_$data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = refreshTokenHash;
      result$data['refreshTokenHash'] = l$refreshTokenHash;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type == null
          ? null
          : toJson$Enum$authRefreshTokenTypes_enum(l$type);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_set_input<Input$authRefreshTokens_set_input>
      get copyWith => CopyWith$Input$authRefreshTokens_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (_$data.containsKey('expiresAt') !=
        other._$data.containsKey('expiresAt')) {
      return false;
    }
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$refreshTokenHash = refreshTokenHash;
    final lOther$refreshTokenHash = other.refreshTokenHash;
    if (_$data.containsKey('refreshTokenHash') !=
        other._$data.containsKey('refreshTokenHash')) {
      return false;
    }
    if (l$refreshTokenHash != lOther$refreshTokenHash) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$expiresAt = expiresAt;
    final l$id = id;
    final l$metadata = metadata;
    final l$refreshTokenHash = refreshTokenHash;
    final l$type = type;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('expiresAt') ? l$expiresAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('refreshTokenHash') ? l$refreshTokenHash : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_set_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_set_input(
    Input$authRefreshTokens_set_input instance,
    TRes Function(Input$authRefreshTokens_set_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_set_input;

  factory CopyWith$Input$authRefreshTokens_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_set_input;

  TRes call({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authRefreshTokens_set_input<TRes>
    implements CopyWith$Input$authRefreshTokens_set_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_set_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_set_input _instance;

  final TRes Function(Input$authRefreshTokens_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? expiresAt = _undefined,
    Object? id = _undefined,
    Object? metadata = _undefined,
    Object? refreshTokenHash = _undefined,
    Object? type = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authRefreshTokens_set_input._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (expiresAt != _undefined) 'expiresAt': (expiresAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
        if (refreshTokenHash != _undefined)
          'refreshTokenHash': (refreshTokenHash as String?),
        if (type != _undefined)
          'type': (type as Enum$authRefreshTokenTypes_enum?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_set_input<TRes>
    implements CopyWith$Input$authRefreshTokens_set_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_set_input(this._res);

  TRes _res;

  call({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    UUID? userId,
  }) =>
      _res;
}

class Input$authRefreshTokens_stream_cursor_input {
  factory Input$authRefreshTokens_stream_cursor_input({
    required Input$authRefreshTokens_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authRefreshTokens_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authRefreshTokens_stream_cursor_input._(this._$data);

  factory Input$authRefreshTokens_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authRefreshTokens_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authRefreshTokens_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRefreshTokens_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$authRefreshTokens_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_stream_cursor_input<
          Input$authRefreshTokens_stream_cursor_input>
      get copyWith => CopyWith$Input$authRefreshTokens_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_stream_cursor_input<TRes> {
  factory CopyWith$Input$authRefreshTokens_stream_cursor_input(
    Input$authRefreshTokens_stream_cursor_input instance,
    TRes Function(Input$authRefreshTokens_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_stream_cursor_input;

  factory CopyWith$Input$authRefreshTokens_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_stream_cursor_input;

  TRes call({
    Input$authRefreshTokens_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authRefreshTokens_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$authRefreshTokens_stream_cursor_input<TRes>
    implements CopyWith$Input$authRefreshTokens_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_stream_cursor_input _instance;

  final TRes Function(Input$authRefreshTokens_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authRefreshTokens_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$authRefreshTokens_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authRefreshTokens_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authRefreshTokens_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_stream_cursor_input<TRes>
    implements CopyWith$Input$authRefreshTokens_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authRefreshTokens_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokens_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$authRefreshTokens_stream_cursor_value_input.stub(_res);
}

class Input$authRefreshTokens_stream_cursor_value_input {
  factory Input$authRefreshTokens_stream_cursor_value_input({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    UUID? userId,
  }) =>
      Input$authRefreshTokens_stream_cursor_value_input._({
        if (createdAt != null) r'createdAt': createdAt,
        if (expiresAt != null) r'expiresAt': expiresAt,
        if (id != null) r'id': id,
        if (metadata != null) r'metadata': metadata,
        if (refreshTokenHash != null) r'refreshTokenHash': refreshTokenHash,
        if (type != null) r'type': type,
        if (userId != null) r'userId': userId,
      });

  Input$authRefreshTokens_stream_cursor_value_input._(this._$data);

  factory Input$authRefreshTokens_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('expiresAt')) {
      final l$expiresAt = data['expiresAt'];
      result$data['expiresAt'] =
          l$expiresAt == null ? null : DateTime.parse((l$expiresAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    if (data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = data['refreshTokenHash'];
      result$data['refreshTokenHash'] = (l$refreshTokenHash as String?);
    }
    if (data.containsKey('type')) {
      final l$type = data['type'];
      result$data['type'] = l$type == null
          ? null
          : fromJson$Enum$authRefreshTokenTypes_enum((l$type as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authRefreshTokens_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  DateTime? get expiresAt => (_$data['expiresAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  String? get refreshTokenHash => (_$data['refreshTokenHash'] as String?);
  Enum$authRefreshTokenTypes_enum? get type =>
      (_$data['type'] as Enum$authRefreshTokenTypes_enum?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('expiresAt')) {
      final l$expiresAt = expiresAt;
      result$data['expiresAt'] = l$expiresAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    if (_$data.containsKey('refreshTokenHash')) {
      final l$refreshTokenHash = refreshTokenHash;
      result$data['refreshTokenHash'] = l$refreshTokenHash;
    }
    if (_$data.containsKey('type')) {
      final l$type = type;
      result$data['type'] = l$type == null
          ? null
          : toJson$Enum$authRefreshTokenTypes_enum(l$type);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_stream_cursor_value_input<
          Input$authRefreshTokens_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$authRefreshTokens_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (_$data.containsKey('expiresAt') !=
        other._$data.containsKey('expiresAt')) {
      return false;
    }
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$refreshTokenHash = refreshTokenHash;
    final lOther$refreshTokenHash = other.refreshTokenHash;
    if (_$data.containsKey('refreshTokenHash') !=
        other._$data.containsKey('refreshTokenHash')) {
      return false;
    }
    if (l$refreshTokenHash != lOther$refreshTokenHash) {
      return false;
    }
    final l$type = type;
    final lOther$type = other.type;
    if (_$data.containsKey('type') != other._$data.containsKey('type')) {
      return false;
    }
    if (l$type != lOther$type) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$expiresAt = expiresAt;
    final l$id = id;
    final l$metadata = metadata;
    final l$refreshTokenHash = refreshTokenHash;
    final l$type = type;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('expiresAt') ? l$expiresAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('refreshTokenHash') ? l$refreshTokenHash : const {},
      _$data.containsKey('type') ? l$type : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$authRefreshTokens_stream_cursor_value_input(
    Input$authRefreshTokens_stream_cursor_value_input instance,
    TRes Function(Input$authRefreshTokens_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_stream_cursor_value_input;

  factory CopyWith$Input$authRefreshTokens_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_stream_cursor_value_input;

  TRes call({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authRefreshTokens_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$authRefreshTokens_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_stream_cursor_value_input _instance;

  final TRes Function(Input$authRefreshTokens_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? expiresAt = _undefined,
    Object? id = _undefined,
    Object? metadata = _undefined,
    Object? refreshTokenHash = _undefined,
    Object? type = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authRefreshTokens_stream_cursor_value_input._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (expiresAt != _undefined) 'expiresAt': (expiresAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
        if (refreshTokenHash != _undefined)
          'refreshTokenHash': (refreshTokenHash as String?),
        if (type != _undefined)
          'type': (type as Enum$authRefreshTokenTypes_enum?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authRefreshTokens_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$authRefreshTokens_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    DateTime? createdAt,
    DateTime? expiresAt,
    UUID? id,
    JSONB? metadata,
    String? refreshTokenHash,
    Enum$authRefreshTokenTypes_enum? type,
    UUID? userId,
  }) =>
      _res;
}

class Input$authRefreshTokens_updates {
  factory Input$authRefreshTokens_updates({
    Input$authRefreshTokens_append_input? $_append,
    Input$authRefreshTokens_delete_at_path_input? $_delete_at_path,
    Input$authRefreshTokens_delete_elem_input? $_delete_elem,
    Input$authRefreshTokens_delete_key_input? $_delete_key,
    Input$authRefreshTokens_prepend_input? $_prepend,
    Input$authRefreshTokens_set_input? $_set,
    required Input$authRefreshTokens_bool_exp where,
  }) =>
      Input$authRefreshTokens_updates._({
        if ($_append != null) r'_append': $_append,
        if ($_delete_at_path != null) r'_delete_at_path': $_delete_at_path,
        if ($_delete_elem != null) r'_delete_elem': $_delete_elem,
        if ($_delete_key != null) r'_delete_key': $_delete_key,
        if ($_prepend != null) r'_prepend': $_prepend,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authRefreshTokens_updates._(this._$data);

  factory Input$authRefreshTokens_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_append')) {
      final l$$_append = data['_append'];
      result$data['_append'] = l$$_append == null
          ? null
          : Input$authRefreshTokens_append_input.fromJson(
              (l$$_append as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = data['_delete_at_path'];
      result$data['_delete_at_path'] = l$$_delete_at_path == null
          ? null
          : Input$authRefreshTokens_delete_at_path_input.fromJson(
              (l$$_delete_at_path as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_elem')) {
      final l$$_delete_elem = data['_delete_elem'];
      result$data['_delete_elem'] = l$$_delete_elem == null
          ? null
          : Input$authRefreshTokens_delete_elem_input.fromJson(
              (l$$_delete_elem as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_key')) {
      final l$$_delete_key = data['_delete_key'];
      result$data['_delete_key'] = l$$_delete_key == null
          ? null
          : Input$authRefreshTokens_delete_key_input.fromJson(
              (l$$_delete_key as Map<String, dynamic>));
    }
    if (data.containsKey('_prepend')) {
      final l$$_prepend = data['_prepend'];
      result$data['_prepend'] = l$$_prepend == null
          ? null
          : Input$authRefreshTokens_prepend_input.fromJson(
              (l$$_prepend as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authRefreshTokens_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$authRefreshTokens_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$authRefreshTokens_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRefreshTokens_append_input? get $_append =>
      (_$data['_append'] as Input$authRefreshTokens_append_input?);
  Input$authRefreshTokens_delete_at_path_input? get $_delete_at_path =>
      (_$data['_delete_at_path']
          as Input$authRefreshTokens_delete_at_path_input?);
  Input$authRefreshTokens_delete_elem_input? get $_delete_elem =>
      (_$data['_delete_elem'] as Input$authRefreshTokens_delete_elem_input?);
  Input$authRefreshTokens_delete_key_input? get $_delete_key =>
      (_$data['_delete_key'] as Input$authRefreshTokens_delete_key_input?);
  Input$authRefreshTokens_prepend_input? get $_prepend =>
      (_$data['_prepend'] as Input$authRefreshTokens_prepend_input?);
  Input$authRefreshTokens_set_input? get $_set =>
      (_$data['_set'] as Input$authRefreshTokens_set_input?);
  Input$authRefreshTokens_bool_exp get where =>
      (_$data['where'] as Input$authRefreshTokens_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_append')) {
      final l$$_append = $_append;
      result$data['_append'] = l$$_append?.toJson();
    }
    if (_$data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = $_delete_at_path;
      result$data['_delete_at_path'] = l$$_delete_at_path?.toJson();
    }
    if (_$data.containsKey('_delete_elem')) {
      final l$$_delete_elem = $_delete_elem;
      result$data['_delete_elem'] = l$$_delete_elem?.toJson();
    }
    if (_$data.containsKey('_delete_key')) {
      final l$$_delete_key = $_delete_key;
      result$data['_delete_key'] = l$$_delete_key?.toJson();
    }
    if (_$data.containsKey('_prepend')) {
      final l$$_prepend = $_prepend;
      result$data['_prepend'] = l$$_prepend?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authRefreshTokens_updates<Input$authRefreshTokens_updates>
      get copyWith => CopyWith$Input$authRefreshTokens_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRefreshTokens_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_append = $_append;
    final lOther$$_append = other.$_append;
    if (_$data.containsKey('_append') != other._$data.containsKey('_append')) {
      return false;
    }
    if (l$$_append != lOther$$_append) {
      return false;
    }
    final l$$_delete_at_path = $_delete_at_path;
    final lOther$$_delete_at_path = other.$_delete_at_path;
    if (_$data.containsKey('_delete_at_path') !=
        other._$data.containsKey('_delete_at_path')) {
      return false;
    }
    if (l$$_delete_at_path != lOther$$_delete_at_path) {
      return false;
    }
    final l$$_delete_elem = $_delete_elem;
    final lOther$$_delete_elem = other.$_delete_elem;
    if (_$data.containsKey('_delete_elem') !=
        other._$data.containsKey('_delete_elem')) {
      return false;
    }
    if (l$$_delete_elem != lOther$$_delete_elem) {
      return false;
    }
    final l$$_delete_key = $_delete_key;
    final lOther$$_delete_key = other.$_delete_key;
    if (_$data.containsKey('_delete_key') !=
        other._$data.containsKey('_delete_key')) {
      return false;
    }
    if (l$$_delete_key != lOther$$_delete_key) {
      return false;
    }
    final l$$_prepend = $_prepend;
    final lOther$$_prepend = other.$_prepend;
    if (_$data.containsKey('_prepend') !=
        other._$data.containsKey('_prepend')) {
      return false;
    }
    if (l$$_prepend != lOther$$_prepend) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_append = $_append;
    final l$$_delete_at_path = $_delete_at_path;
    final l$$_delete_elem = $_delete_elem;
    final l$$_delete_key = $_delete_key;
    final l$$_prepend = $_prepend;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_append') ? l$$_append : const {},
      _$data.containsKey('_delete_at_path') ? l$$_delete_at_path : const {},
      _$data.containsKey('_delete_elem') ? l$$_delete_elem : const {},
      _$data.containsKey('_delete_key') ? l$$_delete_key : const {},
      _$data.containsKey('_prepend') ? l$$_prepend : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authRefreshTokens_updates<TRes> {
  factory CopyWith$Input$authRefreshTokens_updates(
    Input$authRefreshTokens_updates instance,
    TRes Function(Input$authRefreshTokens_updates) then,
  ) = _CopyWithImpl$Input$authRefreshTokens_updates;

  factory CopyWith$Input$authRefreshTokens_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authRefreshTokens_updates;

  TRes call({
    Input$authRefreshTokens_append_input? $_append,
    Input$authRefreshTokens_delete_at_path_input? $_delete_at_path,
    Input$authRefreshTokens_delete_elem_input? $_delete_elem,
    Input$authRefreshTokens_delete_key_input? $_delete_key,
    Input$authRefreshTokens_prepend_input? $_prepend,
    Input$authRefreshTokens_set_input? $_set,
    Input$authRefreshTokens_bool_exp? where,
  });
  CopyWith$Input$authRefreshTokens_append_input<TRes> get $_append;
  CopyWith$Input$authRefreshTokens_delete_at_path_input<TRes>
      get $_delete_at_path;
  CopyWith$Input$authRefreshTokens_delete_elem_input<TRes> get $_delete_elem;
  CopyWith$Input$authRefreshTokens_delete_key_input<TRes> get $_delete_key;
  CopyWith$Input$authRefreshTokens_prepend_input<TRes> get $_prepend;
  CopyWith$Input$authRefreshTokens_set_input<TRes> get $_set;
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authRefreshTokens_updates<TRes>
    implements CopyWith$Input$authRefreshTokens_updates<TRes> {
  _CopyWithImpl$Input$authRefreshTokens_updates(
    this._instance,
    this._then,
  );

  final Input$authRefreshTokens_updates _instance;

  final TRes Function(Input$authRefreshTokens_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_append = _undefined,
    Object? $_delete_at_path = _undefined,
    Object? $_delete_elem = _undefined,
    Object? $_delete_key = _undefined,
    Object? $_prepend = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authRefreshTokens_updates._({
        ..._instance._$data,
        if ($_append != _undefined)
          '_append': ($_append as Input$authRefreshTokens_append_input?),
        if ($_delete_at_path != _undefined)
          '_delete_at_path': ($_delete_at_path
              as Input$authRefreshTokens_delete_at_path_input?),
        if ($_delete_elem != _undefined)
          '_delete_elem':
              ($_delete_elem as Input$authRefreshTokens_delete_elem_input?),
        if ($_delete_key != _undefined)
          '_delete_key':
              ($_delete_key as Input$authRefreshTokens_delete_key_input?),
        if ($_prepend != _undefined)
          '_prepend': ($_prepend as Input$authRefreshTokens_prepend_input?),
        if ($_set != _undefined)
          '_set': ($_set as Input$authRefreshTokens_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authRefreshTokens_bool_exp),
      }));
  CopyWith$Input$authRefreshTokens_append_input<TRes> get $_append {
    final local$$_append = _instance.$_append;
    return local$$_append == null
        ? CopyWith$Input$authRefreshTokens_append_input.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_append_input(
            local$$_append, (e) => call($_append: e));
  }

  CopyWith$Input$authRefreshTokens_delete_at_path_input<TRes>
      get $_delete_at_path {
    final local$$_delete_at_path = _instance.$_delete_at_path;
    return local$$_delete_at_path == null
        ? CopyWith$Input$authRefreshTokens_delete_at_path_input.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_delete_at_path_input(
            local$$_delete_at_path, (e) => call($_delete_at_path: e));
  }

  CopyWith$Input$authRefreshTokens_delete_elem_input<TRes> get $_delete_elem {
    final local$$_delete_elem = _instance.$_delete_elem;
    return local$$_delete_elem == null
        ? CopyWith$Input$authRefreshTokens_delete_elem_input.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_delete_elem_input(
            local$$_delete_elem, (e) => call($_delete_elem: e));
  }

  CopyWith$Input$authRefreshTokens_delete_key_input<TRes> get $_delete_key {
    final local$$_delete_key = _instance.$_delete_key;
    return local$$_delete_key == null
        ? CopyWith$Input$authRefreshTokens_delete_key_input.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_delete_key_input(
            local$$_delete_key, (e) => call($_delete_key: e));
  }

  CopyWith$Input$authRefreshTokens_prepend_input<TRes> get $_prepend {
    final local$$_prepend = _instance.$_prepend;
    return local$$_prepend == null
        ? CopyWith$Input$authRefreshTokens_prepend_input.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_prepend_input(
            local$$_prepend, (e) => call($_prepend: e));
  }

  CopyWith$Input$authRefreshTokens_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authRefreshTokens_set_input.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authRefreshTokens_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authRefreshTokens_updates<TRes>
    implements CopyWith$Input$authRefreshTokens_updates<TRes> {
  _CopyWithStubImpl$Input$authRefreshTokens_updates(this._res);

  TRes _res;

  call({
    Input$authRefreshTokens_append_input? $_append,
    Input$authRefreshTokens_delete_at_path_input? $_delete_at_path,
    Input$authRefreshTokens_delete_elem_input? $_delete_elem,
    Input$authRefreshTokens_delete_key_input? $_delete_key,
    Input$authRefreshTokens_prepend_input? $_prepend,
    Input$authRefreshTokens_set_input? $_set,
    Input$authRefreshTokens_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authRefreshTokens_append_input<TRes> get $_append =>
      CopyWith$Input$authRefreshTokens_append_input.stub(_res);
  CopyWith$Input$authRefreshTokens_delete_at_path_input<TRes>
      get $_delete_at_path =>
          CopyWith$Input$authRefreshTokens_delete_at_path_input.stub(_res);
  CopyWith$Input$authRefreshTokens_delete_elem_input<TRes> get $_delete_elem =>
      CopyWith$Input$authRefreshTokens_delete_elem_input.stub(_res);
  CopyWith$Input$authRefreshTokens_delete_key_input<TRes> get $_delete_key =>
      CopyWith$Input$authRefreshTokens_delete_key_input.stub(_res);
  CopyWith$Input$authRefreshTokens_prepend_input<TRes> get $_prepend =>
      CopyWith$Input$authRefreshTokens_prepend_input.stub(_res);
  CopyWith$Input$authRefreshTokens_set_input<TRes> get $_set =>
      CopyWith$Input$authRefreshTokens_set_input.stub(_res);
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get where =>
      CopyWith$Input$authRefreshTokens_bool_exp.stub(_res);
}

class Input$authRoles_bool_exp {
  factory Input$authRoles_bool_exp({
    List<Input$authRoles_bool_exp>? $_and,
    Input$authRoles_bool_exp? $_not,
    List<Input$authRoles_bool_exp>? $_or,
    Input$String_comparison_exp? role,
    Input$authUserRoles_bool_exp? userRoles,
    Input$authUserRoles_aggregate_bool_exp? userRoles_aggregate,
    Input$users_bool_exp? usersByDefaultRole,
    Input$users_aggregate_bool_exp? usersByDefaultRole_aggregate,
  }) =>
      Input$authRoles_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (role != null) r'role': role,
        if (userRoles != null) r'userRoles': userRoles,
        if (userRoles_aggregate != null)
          r'userRoles_aggregate': userRoles_aggregate,
        if (usersByDefaultRole != null)
          r'usersByDefaultRole': usersByDefaultRole,
        if (usersByDefaultRole_aggregate != null)
          r'usersByDefaultRole_aggregate': usersByDefaultRole_aggregate,
      });

  Input$authRoles_bool_exp._(this._$data);

  factory Input$authRoles_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$authRoles_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authRoles_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$authRoles_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = l$role == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$role as Map<String, dynamic>));
    }
    if (data.containsKey('userRoles')) {
      final l$userRoles = data['userRoles'];
      result$data['userRoles'] = l$userRoles == null
          ? null
          : Input$authUserRoles_bool_exp.fromJson(
              (l$userRoles as Map<String, dynamic>));
    }
    if (data.containsKey('userRoles_aggregate')) {
      final l$userRoles_aggregate = data['userRoles_aggregate'];
      result$data['userRoles_aggregate'] = l$userRoles_aggregate == null
          ? null
          : Input$authUserRoles_aggregate_bool_exp.fromJson(
              (l$userRoles_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('usersByDefaultRole')) {
      final l$usersByDefaultRole = data['usersByDefaultRole'];
      result$data['usersByDefaultRole'] = l$usersByDefaultRole == null
          ? null
          : Input$users_bool_exp.fromJson(
              (l$usersByDefaultRole as Map<String, dynamic>));
    }
    if (data.containsKey('usersByDefaultRole_aggregate')) {
      final l$usersByDefaultRole_aggregate =
          data['usersByDefaultRole_aggregate'];
      result$data['usersByDefaultRole_aggregate'] =
          l$usersByDefaultRole_aggregate == null
              ? null
              : Input$users_aggregate_bool_exp.fromJson(
                  (l$usersByDefaultRole_aggregate as Map<String, dynamic>));
    }
    return Input$authRoles_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authRoles_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authRoles_bool_exp>?);
  Input$authRoles_bool_exp? get $_not =>
      (_$data['_not'] as Input$authRoles_bool_exp?);
  List<Input$authRoles_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authRoles_bool_exp>?);
  Input$String_comparison_exp? get role =>
      (_$data['role'] as Input$String_comparison_exp?);
  Input$authUserRoles_bool_exp? get userRoles =>
      (_$data['userRoles'] as Input$authUserRoles_bool_exp?);
  Input$authUserRoles_aggregate_bool_exp? get userRoles_aggregate =>
      (_$data['userRoles_aggregate']
          as Input$authUserRoles_aggregate_bool_exp?);
  Input$users_bool_exp? get usersByDefaultRole =>
      (_$data['usersByDefaultRole'] as Input$users_bool_exp?);
  Input$users_aggregate_bool_exp? get usersByDefaultRole_aggregate =>
      (_$data['usersByDefaultRole_aggregate']
          as Input$users_aggregate_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role?.toJson();
    }
    if (_$data.containsKey('userRoles')) {
      final l$userRoles = userRoles;
      result$data['userRoles'] = l$userRoles?.toJson();
    }
    if (_$data.containsKey('userRoles_aggregate')) {
      final l$userRoles_aggregate = userRoles_aggregate;
      result$data['userRoles_aggregate'] = l$userRoles_aggregate?.toJson();
    }
    if (_$data.containsKey('usersByDefaultRole')) {
      final l$usersByDefaultRole = usersByDefaultRole;
      result$data['usersByDefaultRole'] = l$usersByDefaultRole?.toJson();
    }
    if (_$data.containsKey('usersByDefaultRole_aggregate')) {
      final l$usersByDefaultRole_aggregate = usersByDefaultRole_aggregate;
      result$data['usersByDefaultRole_aggregate'] =
          l$usersByDefaultRole_aggregate?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRoles_bool_exp<Input$authRoles_bool_exp> get copyWith =>
      CopyWith$Input$authRoles_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$userRoles = userRoles;
    final lOther$userRoles = other.userRoles;
    if (_$data.containsKey('userRoles') !=
        other._$data.containsKey('userRoles')) {
      return false;
    }
    if (l$userRoles != lOther$userRoles) {
      return false;
    }
    final l$userRoles_aggregate = userRoles_aggregate;
    final lOther$userRoles_aggregate = other.userRoles_aggregate;
    if (_$data.containsKey('userRoles_aggregate') !=
        other._$data.containsKey('userRoles_aggregate')) {
      return false;
    }
    if (l$userRoles_aggregate != lOther$userRoles_aggregate) {
      return false;
    }
    final l$usersByDefaultRole = usersByDefaultRole;
    final lOther$usersByDefaultRole = other.usersByDefaultRole;
    if (_$data.containsKey('usersByDefaultRole') !=
        other._$data.containsKey('usersByDefaultRole')) {
      return false;
    }
    if (l$usersByDefaultRole != lOther$usersByDefaultRole) {
      return false;
    }
    final l$usersByDefaultRole_aggregate = usersByDefaultRole_aggregate;
    final lOther$usersByDefaultRole_aggregate =
        other.usersByDefaultRole_aggregate;
    if (_$data.containsKey('usersByDefaultRole_aggregate') !=
        other._$data.containsKey('usersByDefaultRole_aggregate')) {
      return false;
    }
    if (l$usersByDefaultRole_aggregate != lOther$usersByDefaultRole_aggregate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$role = role;
    final l$userRoles = userRoles;
    final l$userRoles_aggregate = userRoles_aggregate;
    final l$usersByDefaultRole = usersByDefaultRole;
    final l$usersByDefaultRole_aggregate = usersByDefaultRole_aggregate;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('userRoles') ? l$userRoles : const {},
      _$data.containsKey('userRoles_aggregate')
          ? l$userRoles_aggregate
          : const {},
      _$data.containsKey('usersByDefaultRole')
          ? l$usersByDefaultRole
          : const {},
      _$data.containsKey('usersByDefaultRole_aggregate')
          ? l$usersByDefaultRole_aggregate
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRoles_bool_exp<TRes> {
  factory CopyWith$Input$authRoles_bool_exp(
    Input$authRoles_bool_exp instance,
    TRes Function(Input$authRoles_bool_exp) then,
  ) = _CopyWithImpl$Input$authRoles_bool_exp;

  factory CopyWith$Input$authRoles_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_bool_exp;

  TRes call({
    List<Input$authRoles_bool_exp>? $_and,
    Input$authRoles_bool_exp? $_not,
    List<Input$authRoles_bool_exp>? $_or,
    Input$String_comparison_exp? role,
    Input$authUserRoles_bool_exp? userRoles,
    Input$authUserRoles_aggregate_bool_exp? userRoles_aggregate,
    Input$users_bool_exp? usersByDefaultRole,
    Input$users_aggregate_bool_exp? usersByDefaultRole_aggregate,
  });
  TRes $_and(
      Iterable<Input$authRoles_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authRoles_bool_exp<Input$authRoles_bool_exp>>?)
          _fn);
  CopyWith$Input$authRoles_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authRoles_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authRoles_bool_exp<Input$authRoles_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get role;
  CopyWith$Input$authUserRoles_bool_exp<TRes> get userRoles;
  CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes> get userRoles_aggregate;
  CopyWith$Input$users_bool_exp<TRes> get usersByDefaultRole;
  CopyWith$Input$users_aggregate_bool_exp<TRes>
      get usersByDefaultRole_aggregate;
}

class _CopyWithImpl$Input$authRoles_bool_exp<TRes>
    implements CopyWith$Input$authRoles_bool_exp<TRes> {
  _CopyWithImpl$Input$authRoles_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authRoles_bool_exp _instance;

  final TRes Function(Input$authRoles_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? role = _undefined,
    Object? userRoles = _undefined,
    Object? userRoles_aggregate = _undefined,
    Object? usersByDefaultRole = _undefined,
    Object? usersByDefaultRole_aggregate = _undefined,
  }) =>
      _then(Input$authRoles_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authRoles_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$authRoles_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authRoles_bool_exp>?),
        if (role != _undefined) 'role': (role as Input$String_comparison_exp?),
        if (userRoles != _undefined)
          'userRoles': (userRoles as Input$authUserRoles_bool_exp?),
        if (userRoles_aggregate != _undefined)
          'userRoles_aggregate':
              (userRoles_aggregate as Input$authUserRoles_aggregate_bool_exp?),
        if (usersByDefaultRole != _undefined)
          'usersByDefaultRole': (usersByDefaultRole as Input$users_bool_exp?),
        if (usersByDefaultRole_aggregate != _undefined)
          'usersByDefaultRole_aggregate':
              (usersByDefaultRole_aggregate as Input$users_aggregate_bool_exp?),
      }));
  TRes $_and(
          Iterable<Input$authRoles_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authRoles_bool_exp<
                          Input$authRoles_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$authRoles_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authRoles_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRoles_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authRoles_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authRoles_bool_exp<
                          Input$authRoles_bool_exp>>?)
              _fn) =>
      call(
          $_or:
              _fn(_instance.$_or?.map((e) => CopyWith$Input$authRoles_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get role {
    final local$role = _instance.role;
    return local$role == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$role, (e) => call(role: e));
  }

  CopyWith$Input$authUserRoles_bool_exp<TRes> get userRoles {
    final local$userRoles = _instance.userRoles;
    return local$userRoles == null
        ? CopyWith$Input$authUserRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_bool_exp(
            local$userRoles, (e) => call(userRoles: e));
  }

  CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes>
      get userRoles_aggregate {
    final local$userRoles_aggregate = _instance.userRoles_aggregate;
    return local$userRoles_aggregate == null
        ? CopyWith$Input$authUserRoles_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_aggregate_bool_exp(
            local$userRoles_aggregate, (e) => call(userRoles_aggregate: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get usersByDefaultRole {
    final local$usersByDefaultRole = _instance.usersByDefaultRole;
    return local$usersByDefaultRole == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(
            local$usersByDefaultRole, (e) => call(usersByDefaultRole: e));
  }

  CopyWith$Input$users_aggregate_bool_exp<TRes>
      get usersByDefaultRole_aggregate {
    final local$usersByDefaultRole_aggregate =
        _instance.usersByDefaultRole_aggregate;
    return local$usersByDefaultRole_aggregate == null
        ? CopyWith$Input$users_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_aggregate_bool_exp(
            local$usersByDefaultRole_aggregate,
            (e) => call(usersByDefaultRole_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$authRoles_bool_exp<TRes>
    implements CopyWith$Input$authRoles_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authRoles_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authRoles_bool_exp>? $_and,
    Input$authRoles_bool_exp? $_not,
    List<Input$authRoles_bool_exp>? $_or,
    Input$String_comparison_exp? role,
    Input$authUserRoles_bool_exp? userRoles,
    Input$authUserRoles_aggregate_bool_exp? userRoles_aggregate,
    Input$users_bool_exp? usersByDefaultRole,
    Input$users_aggregate_bool_exp? usersByDefaultRole_aggregate,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authRoles_bool_exp<TRes> get $_not =>
      CopyWith$Input$authRoles_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get role =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$authUserRoles_bool_exp<TRes> get userRoles =>
      CopyWith$Input$authUserRoles_bool_exp.stub(_res);
  CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes>
      get userRoles_aggregate =>
          CopyWith$Input$authUserRoles_aggregate_bool_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get usersByDefaultRole =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$users_aggregate_bool_exp<TRes>
      get usersByDefaultRole_aggregate =>
          CopyWith$Input$users_aggregate_bool_exp.stub(_res);
}

class Input$authRoles_insert_input {
  factory Input$authRoles_insert_input({
    String? role,
    Input$authUserRoles_arr_rel_insert_input? userRoles,
    Input$users_arr_rel_insert_input? usersByDefaultRole,
  }) =>
      Input$authRoles_insert_input._({
        if (role != null) r'role': role,
        if (userRoles != null) r'userRoles': userRoles,
        if (usersByDefaultRole != null)
          r'usersByDefaultRole': usersByDefaultRole,
      });

  Input$authRoles_insert_input._(this._$data);

  factory Input$authRoles_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = (l$role as String?);
    }
    if (data.containsKey('userRoles')) {
      final l$userRoles = data['userRoles'];
      result$data['userRoles'] = l$userRoles == null
          ? null
          : Input$authUserRoles_arr_rel_insert_input.fromJson(
              (l$userRoles as Map<String, dynamic>));
    }
    if (data.containsKey('usersByDefaultRole')) {
      final l$usersByDefaultRole = data['usersByDefaultRole'];
      result$data['usersByDefaultRole'] = l$usersByDefaultRole == null
          ? null
          : Input$users_arr_rel_insert_input.fromJson(
              (l$usersByDefaultRole as Map<String, dynamic>));
    }
    return Input$authRoles_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get role => (_$data['role'] as String?);
  Input$authUserRoles_arr_rel_insert_input? get userRoles =>
      (_$data['userRoles'] as Input$authUserRoles_arr_rel_insert_input?);
  Input$users_arr_rel_insert_input? get usersByDefaultRole =>
      (_$data['usersByDefaultRole'] as Input$users_arr_rel_insert_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role;
    }
    if (_$data.containsKey('userRoles')) {
      final l$userRoles = userRoles;
      result$data['userRoles'] = l$userRoles?.toJson();
    }
    if (_$data.containsKey('usersByDefaultRole')) {
      final l$usersByDefaultRole = usersByDefaultRole;
      result$data['usersByDefaultRole'] = l$usersByDefaultRole?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRoles_insert_input<Input$authRoles_insert_input>
      get copyWith => CopyWith$Input$authRoles_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$userRoles = userRoles;
    final lOther$userRoles = other.userRoles;
    if (_$data.containsKey('userRoles') !=
        other._$data.containsKey('userRoles')) {
      return false;
    }
    if (l$userRoles != lOther$userRoles) {
      return false;
    }
    final l$usersByDefaultRole = usersByDefaultRole;
    final lOther$usersByDefaultRole = other.usersByDefaultRole;
    if (_$data.containsKey('usersByDefaultRole') !=
        other._$data.containsKey('usersByDefaultRole')) {
      return false;
    }
    if (l$usersByDefaultRole != lOther$usersByDefaultRole) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$role = role;
    final l$userRoles = userRoles;
    final l$usersByDefaultRole = usersByDefaultRole;
    return Object.hashAll([
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('userRoles') ? l$userRoles : const {},
      _$data.containsKey('usersByDefaultRole')
          ? l$usersByDefaultRole
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRoles_insert_input<TRes> {
  factory CopyWith$Input$authRoles_insert_input(
    Input$authRoles_insert_input instance,
    TRes Function(Input$authRoles_insert_input) then,
  ) = _CopyWithImpl$Input$authRoles_insert_input;

  factory CopyWith$Input$authRoles_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_insert_input;

  TRes call({
    String? role,
    Input$authUserRoles_arr_rel_insert_input? userRoles,
    Input$users_arr_rel_insert_input? usersByDefaultRole,
  });
  CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> get userRoles;
  CopyWith$Input$users_arr_rel_insert_input<TRes> get usersByDefaultRole;
}

class _CopyWithImpl$Input$authRoles_insert_input<TRes>
    implements CopyWith$Input$authRoles_insert_input<TRes> {
  _CopyWithImpl$Input$authRoles_insert_input(
    this._instance,
    this._then,
  );

  final Input$authRoles_insert_input _instance;

  final TRes Function(Input$authRoles_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? role = _undefined,
    Object? userRoles = _undefined,
    Object? usersByDefaultRole = _undefined,
  }) =>
      _then(Input$authRoles_insert_input._({
        ..._instance._$data,
        if (role != _undefined) 'role': (role as String?),
        if (userRoles != _undefined)
          'userRoles': (userRoles as Input$authUserRoles_arr_rel_insert_input?),
        if (usersByDefaultRole != _undefined)
          'usersByDefaultRole':
              (usersByDefaultRole as Input$users_arr_rel_insert_input?),
      }));
  CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> get userRoles {
    final local$userRoles = _instance.userRoles;
    return local$userRoles == null
        ? CopyWith$Input$authUserRoles_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authUserRoles_arr_rel_insert_input(
            local$userRoles, (e) => call(userRoles: e));
  }

  CopyWith$Input$users_arr_rel_insert_input<TRes> get usersByDefaultRole {
    final local$usersByDefaultRole = _instance.usersByDefaultRole;
    return local$usersByDefaultRole == null
        ? CopyWith$Input$users_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_arr_rel_insert_input(
            local$usersByDefaultRole, (e) => call(usersByDefaultRole: e));
  }
}

class _CopyWithStubImpl$Input$authRoles_insert_input<TRes>
    implements CopyWith$Input$authRoles_insert_input<TRes> {
  _CopyWithStubImpl$Input$authRoles_insert_input(this._res);

  TRes _res;

  call({
    String? role,
    Input$authUserRoles_arr_rel_insert_input? userRoles,
    Input$users_arr_rel_insert_input? usersByDefaultRole,
  }) =>
      _res;
  CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> get userRoles =>
      CopyWith$Input$authUserRoles_arr_rel_insert_input.stub(_res);
  CopyWith$Input$users_arr_rel_insert_input<TRes> get usersByDefaultRole =>
      CopyWith$Input$users_arr_rel_insert_input.stub(_res);
}

class Input$authRoles_obj_rel_insert_input {
  factory Input$authRoles_obj_rel_insert_input({
    required Input$authRoles_insert_input data,
    Input$authRoles_on_conflict? on_conflict,
  }) =>
      Input$authRoles_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$authRoles_obj_rel_insert_input._(this._$data);

  factory Input$authRoles_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$authRoles_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$authRoles_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$authRoles_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRoles_insert_input get data =>
      (_$data['data'] as Input$authRoles_insert_input);
  Input$authRoles_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$authRoles_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRoles_obj_rel_insert_input<
          Input$authRoles_obj_rel_insert_input>
      get copyWith => CopyWith$Input$authRoles_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRoles_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$authRoles_obj_rel_insert_input(
    Input$authRoles_obj_rel_insert_input instance,
    TRes Function(Input$authRoles_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$authRoles_obj_rel_insert_input;

  factory CopyWith$Input$authRoles_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_obj_rel_insert_input;

  TRes call({
    Input$authRoles_insert_input? data,
    Input$authRoles_on_conflict? on_conflict,
  });
  CopyWith$Input$authRoles_insert_input<TRes> get data;
  CopyWith$Input$authRoles_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$authRoles_obj_rel_insert_input<TRes>
    implements CopyWith$Input$authRoles_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$authRoles_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$authRoles_obj_rel_insert_input _instance;

  final TRes Function(Input$authRoles_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$authRoles_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$authRoles_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$authRoles_on_conflict?),
      }));
  CopyWith$Input$authRoles_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$authRoles_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$authRoles_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$authRoles_on_conflict.stub(_then(_instance))
        : CopyWith$Input$authRoles_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$authRoles_obj_rel_insert_input<TRes>
    implements CopyWith$Input$authRoles_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$authRoles_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$authRoles_insert_input? data,
    Input$authRoles_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$authRoles_insert_input<TRes> get data =>
      CopyWith$Input$authRoles_insert_input.stub(_res);
  CopyWith$Input$authRoles_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$authRoles_on_conflict.stub(_res);
}

class Input$authRoles_on_conflict {
  factory Input$authRoles_on_conflict({
    required Enum$authRoles_constraint constraint,
    required List<Enum$authRoles_update_column> update_columns,
    Input$authRoles_bool_exp? where,
  }) =>
      Input$authRoles_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authRoles_on_conflict._(this._$data);

  factory Input$authRoles_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$authRoles_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$authRoles_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authRoles_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authRoles_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authRoles_constraint get constraint =>
      (_$data['constraint'] as Enum$authRoles_constraint);
  List<Enum$authRoles_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$authRoles_update_column>);
  Input$authRoles_bool_exp? get where =>
      (_$data['where'] as Input$authRoles_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$authRoles_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authRoles_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRoles_on_conflict<Input$authRoles_on_conflict>
      get copyWith => CopyWith$Input$authRoles_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRoles_on_conflict<TRes> {
  factory CopyWith$Input$authRoles_on_conflict(
    Input$authRoles_on_conflict instance,
    TRes Function(Input$authRoles_on_conflict) then,
  ) = _CopyWithImpl$Input$authRoles_on_conflict;

  factory CopyWith$Input$authRoles_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_on_conflict;

  TRes call({
    Enum$authRoles_constraint? constraint,
    List<Enum$authRoles_update_column>? update_columns,
    Input$authRoles_bool_exp? where,
  });
  CopyWith$Input$authRoles_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authRoles_on_conflict<TRes>
    implements CopyWith$Input$authRoles_on_conflict<TRes> {
  _CopyWithImpl$Input$authRoles_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authRoles_on_conflict _instance;

  final TRes Function(Input$authRoles_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authRoles_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authRoles_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$authRoles_update_column>),
        if (where != _undefined) 'where': (where as Input$authRoles_bool_exp?),
      }));
  CopyWith$Input$authRoles_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRoles_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authRoles_on_conflict<TRes>
    implements CopyWith$Input$authRoles_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authRoles_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authRoles_constraint? constraint,
    List<Enum$authRoles_update_column>? update_columns,
    Input$authRoles_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authRoles_bool_exp<TRes> get where =>
      CopyWith$Input$authRoles_bool_exp.stub(_res);
}

class Input$authRoles_order_by {
  factory Input$authRoles_order_by({
    Enum$order_by? role,
    Input$authUserRoles_aggregate_order_by? userRoles_aggregate,
    Input$users_aggregate_order_by? usersByDefaultRole_aggregate,
  }) =>
      Input$authRoles_order_by._({
        if (role != null) r'role': role,
        if (userRoles_aggregate != null)
          r'userRoles_aggregate': userRoles_aggregate,
        if (usersByDefaultRole_aggregate != null)
          r'usersByDefaultRole_aggregate': usersByDefaultRole_aggregate,
      });

  Input$authRoles_order_by._(this._$data);

  factory Input$authRoles_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] =
          l$role == null ? null : fromJson$Enum$order_by((l$role as String));
    }
    if (data.containsKey('userRoles_aggregate')) {
      final l$userRoles_aggregate = data['userRoles_aggregate'];
      result$data['userRoles_aggregate'] = l$userRoles_aggregate == null
          ? null
          : Input$authUserRoles_aggregate_order_by.fromJson(
              (l$userRoles_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('usersByDefaultRole_aggregate')) {
      final l$usersByDefaultRole_aggregate =
          data['usersByDefaultRole_aggregate'];
      result$data['usersByDefaultRole_aggregate'] =
          l$usersByDefaultRole_aggregate == null
              ? null
              : Input$users_aggregate_order_by.fromJson(
                  (l$usersByDefaultRole_aggregate as Map<String, dynamic>));
    }
    return Input$authRoles_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get role => (_$data['role'] as Enum$order_by?);
  Input$authUserRoles_aggregate_order_by? get userRoles_aggregate =>
      (_$data['userRoles_aggregate']
          as Input$authUserRoles_aggregate_order_by?);
  Input$users_aggregate_order_by? get usersByDefaultRole_aggregate =>
      (_$data['usersByDefaultRole_aggregate']
          as Input$users_aggregate_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] =
          l$role == null ? null : toJson$Enum$order_by(l$role);
    }
    if (_$data.containsKey('userRoles_aggregate')) {
      final l$userRoles_aggregate = userRoles_aggregate;
      result$data['userRoles_aggregate'] = l$userRoles_aggregate?.toJson();
    }
    if (_$data.containsKey('usersByDefaultRole_aggregate')) {
      final l$usersByDefaultRole_aggregate = usersByDefaultRole_aggregate;
      result$data['usersByDefaultRole_aggregate'] =
          l$usersByDefaultRole_aggregate?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authRoles_order_by<Input$authRoles_order_by> get copyWith =>
      CopyWith$Input$authRoles_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$userRoles_aggregate = userRoles_aggregate;
    final lOther$userRoles_aggregate = other.userRoles_aggregate;
    if (_$data.containsKey('userRoles_aggregate') !=
        other._$data.containsKey('userRoles_aggregate')) {
      return false;
    }
    if (l$userRoles_aggregate != lOther$userRoles_aggregate) {
      return false;
    }
    final l$usersByDefaultRole_aggregate = usersByDefaultRole_aggregate;
    final lOther$usersByDefaultRole_aggregate =
        other.usersByDefaultRole_aggregate;
    if (_$data.containsKey('usersByDefaultRole_aggregate') !=
        other._$data.containsKey('usersByDefaultRole_aggregate')) {
      return false;
    }
    if (l$usersByDefaultRole_aggregate != lOther$usersByDefaultRole_aggregate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$role = role;
    final l$userRoles_aggregate = userRoles_aggregate;
    final l$usersByDefaultRole_aggregate = usersByDefaultRole_aggregate;
    return Object.hashAll([
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('userRoles_aggregate')
          ? l$userRoles_aggregate
          : const {},
      _$data.containsKey('usersByDefaultRole_aggregate')
          ? l$usersByDefaultRole_aggregate
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRoles_order_by<TRes> {
  factory CopyWith$Input$authRoles_order_by(
    Input$authRoles_order_by instance,
    TRes Function(Input$authRoles_order_by) then,
  ) = _CopyWithImpl$Input$authRoles_order_by;

  factory CopyWith$Input$authRoles_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_order_by;

  TRes call({
    Enum$order_by? role,
    Input$authUserRoles_aggregate_order_by? userRoles_aggregate,
    Input$users_aggregate_order_by? usersByDefaultRole_aggregate,
  });
  CopyWith$Input$authUserRoles_aggregate_order_by<TRes> get userRoles_aggregate;
  CopyWith$Input$users_aggregate_order_by<TRes>
      get usersByDefaultRole_aggregate;
}

class _CopyWithImpl$Input$authRoles_order_by<TRes>
    implements CopyWith$Input$authRoles_order_by<TRes> {
  _CopyWithImpl$Input$authRoles_order_by(
    this._instance,
    this._then,
  );

  final Input$authRoles_order_by _instance;

  final TRes Function(Input$authRoles_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? role = _undefined,
    Object? userRoles_aggregate = _undefined,
    Object? usersByDefaultRole_aggregate = _undefined,
  }) =>
      _then(Input$authRoles_order_by._({
        ..._instance._$data,
        if (role != _undefined) 'role': (role as Enum$order_by?),
        if (userRoles_aggregate != _undefined)
          'userRoles_aggregate':
              (userRoles_aggregate as Input$authUserRoles_aggregate_order_by?),
        if (usersByDefaultRole_aggregate != _undefined)
          'usersByDefaultRole_aggregate':
              (usersByDefaultRole_aggregate as Input$users_aggregate_order_by?),
      }));
  CopyWith$Input$authUserRoles_aggregate_order_by<TRes>
      get userRoles_aggregate {
    final local$userRoles_aggregate = _instance.userRoles_aggregate;
    return local$userRoles_aggregate == null
        ? CopyWith$Input$authUserRoles_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_aggregate_order_by(
            local$userRoles_aggregate, (e) => call(userRoles_aggregate: e));
  }

  CopyWith$Input$users_aggregate_order_by<TRes>
      get usersByDefaultRole_aggregate {
    final local$usersByDefaultRole_aggregate =
        _instance.usersByDefaultRole_aggregate;
    return local$usersByDefaultRole_aggregate == null
        ? CopyWith$Input$users_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$users_aggregate_order_by(
            local$usersByDefaultRole_aggregate,
            (e) => call(usersByDefaultRole_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$authRoles_order_by<TRes>
    implements CopyWith$Input$authRoles_order_by<TRes> {
  _CopyWithStubImpl$Input$authRoles_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? role,
    Input$authUserRoles_aggregate_order_by? userRoles_aggregate,
    Input$users_aggregate_order_by? usersByDefaultRole_aggregate,
  }) =>
      _res;
  CopyWith$Input$authUserRoles_aggregate_order_by<TRes>
      get userRoles_aggregate =>
          CopyWith$Input$authUserRoles_aggregate_order_by.stub(_res);
  CopyWith$Input$users_aggregate_order_by<TRes>
      get usersByDefaultRole_aggregate =>
          CopyWith$Input$users_aggregate_order_by.stub(_res);
}

class Input$authRoles_pk_columns_input {
  factory Input$authRoles_pk_columns_input({required String role}) =>
      Input$authRoles_pk_columns_input._({
        r'role': role,
      });

  Input$authRoles_pk_columns_input._(this._$data);

  factory Input$authRoles_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$role = data['role'];
    result$data['role'] = (l$role as String);
    return Input$authRoles_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get role => (_$data['role'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$role = role;
    result$data['role'] = l$role;
    return result$data;
  }

  CopyWith$Input$authRoles_pk_columns_input<Input$authRoles_pk_columns_input>
      get copyWith => CopyWith$Input$authRoles_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (l$role != lOther$role) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$role = role;
    return Object.hashAll([l$role]);
  }
}

abstract class CopyWith$Input$authRoles_pk_columns_input<TRes> {
  factory CopyWith$Input$authRoles_pk_columns_input(
    Input$authRoles_pk_columns_input instance,
    TRes Function(Input$authRoles_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authRoles_pk_columns_input;

  factory CopyWith$Input$authRoles_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_pk_columns_input;

  TRes call({String? role});
}

class _CopyWithImpl$Input$authRoles_pk_columns_input<TRes>
    implements CopyWith$Input$authRoles_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authRoles_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authRoles_pk_columns_input _instance;

  final TRes Function(Input$authRoles_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? role = _undefined}) =>
      _then(Input$authRoles_pk_columns_input._({
        ..._instance._$data,
        if (role != _undefined && role != null) 'role': (role as String),
      }));
}

class _CopyWithStubImpl$Input$authRoles_pk_columns_input<TRes>
    implements CopyWith$Input$authRoles_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authRoles_pk_columns_input(this._res);

  TRes _res;

  call({String? role}) => _res;
}

class Input$authRoles_set_input {
  factory Input$authRoles_set_input({String? role}) =>
      Input$authRoles_set_input._({
        if (role != null) r'role': role,
      });

  Input$authRoles_set_input._(this._$data);

  factory Input$authRoles_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = (l$role as String?);
    }
    return Input$authRoles_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get role => (_$data['role'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role;
    }
    return result$data;
  }

  CopyWith$Input$authRoles_set_input<Input$authRoles_set_input> get copyWith =>
      CopyWith$Input$authRoles_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$role = role;
    return Object.hashAll([_$data.containsKey('role') ? l$role : const {}]);
  }
}

abstract class CopyWith$Input$authRoles_set_input<TRes> {
  factory CopyWith$Input$authRoles_set_input(
    Input$authRoles_set_input instance,
    TRes Function(Input$authRoles_set_input) then,
  ) = _CopyWithImpl$Input$authRoles_set_input;

  factory CopyWith$Input$authRoles_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_set_input;

  TRes call({String? role});
}

class _CopyWithImpl$Input$authRoles_set_input<TRes>
    implements CopyWith$Input$authRoles_set_input<TRes> {
  _CopyWithImpl$Input$authRoles_set_input(
    this._instance,
    this._then,
  );

  final Input$authRoles_set_input _instance;

  final TRes Function(Input$authRoles_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? role = _undefined}) => _then(Input$authRoles_set_input._({
        ..._instance._$data,
        if (role != _undefined) 'role': (role as String?),
      }));
}

class _CopyWithStubImpl$Input$authRoles_set_input<TRes>
    implements CopyWith$Input$authRoles_set_input<TRes> {
  _CopyWithStubImpl$Input$authRoles_set_input(this._res);

  TRes _res;

  call({String? role}) => _res;
}

class Input$authRoles_stream_cursor_input {
  factory Input$authRoles_stream_cursor_input({
    required Input$authRoles_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authRoles_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authRoles_stream_cursor_input._(this._$data);

  factory Input$authRoles_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authRoles_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authRoles_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRoles_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$authRoles_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authRoles_stream_cursor_input<
          Input$authRoles_stream_cursor_input>
      get copyWith => CopyWith$Input$authRoles_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authRoles_stream_cursor_input<TRes> {
  factory CopyWith$Input$authRoles_stream_cursor_input(
    Input$authRoles_stream_cursor_input instance,
    TRes Function(Input$authRoles_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authRoles_stream_cursor_input;

  factory CopyWith$Input$authRoles_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_stream_cursor_input;

  TRes call({
    Input$authRoles_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authRoles_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$authRoles_stream_cursor_input<TRes>
    implements CopyWith$Input$authRoles_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authRoles_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authRoles_stream_cursor_input _instance;

  final TRes Function(Input$authRoles_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authRoles_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$authRoles_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authRoles_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authRoles_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authRoles_stream_cursor_input<TRes>
    implements CopyWith$Input$authRoles_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authRoles_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authRoles_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authRoles_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$authRoles_stream_cursor_value_input.stub(_res);
}

class Input$authRoles_stream_cursor_value_input {
  factory Input$authRoles_stream_cursor_value_input({String? role}) =>
      Input$authRoles_stream_cursor_value_input._({
        if (role != null) r'role': role,
      });

  Input$authRoles_stream_cursor_value_input._(this._$data);

  factory Input$authRoles_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = (l$role as String?);
    }
    return Input$authRoles_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get role => (_$data['role'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role;
    }
    return result$data;
  }

  CopyWith$Input$authRoles_stream_cursor_value_input<
          Input$authRoles_stream_cursor_value_input>
      get copyWith => CopyWith$Input$authRoles_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$role = role;
    return Object.hashAll([_$data.containsKey('role') ? l$role : const {}]);
  }
}

abstract class CopyWith$Input$authRoles_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$authRoles_stream_cursor_value_input(
    Input$authRoles_stream_cursor_value_input instance,
    TRes Function(Input$authRoles_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authRoles_stream_cursor_value_input;

  factory CopyWith$Input$authRoles_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_stream_cursor_value_input;

  TRes call({String? role});
}

class _CopyWithImpl$Input$authRoles_stream_cursor_value_input<TRes>
    implements CopyWith$Input$authRoles_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authRoles_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authRoles_stream_cursor_value_input _instance;

  final TRes Function(Input$authRoles_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? role = _undefined}) =>
      _then(Input$authRoles_stream_cursor_value_input._({
        ..._instance._$data,
        if (role != _undefined) 'role': (role as String?),
      }));
}

class _CopyWithStubImpl$Input$authRoles_stream_cursor_value_input<TRes>
    implements CopyWith$Input$authRoles_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authRoles_stream_cursor_value_input(this._res);

  TRes _res;

  call({String? role}) => _res;
}

class Input$authRoles_updates {
  factory Input$authRoles_updates({
    Input$authRoles_set_input? $_set,
    required Input$authRoles_bool_exp where,
  }) =>
      Input$authRoles_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authRoles_updates._(this._$data);

  factory Input$authRoles_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authRoles_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$authRoles_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$authRoles_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authRoles_set_input? get $_set =>
      (_$data['_set'] as Input$authRoles_set_input?);
  Input$authRoles_bool_exp get where =>
      (_$data['where'] as Input$authRoles_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authRoles_updates<Input$authRoles_updates> get copyWith =>
      CopyWith$Input$authRoles_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authRoles_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authRoles_updates<TRes> {
  factory CopyWith$Input$authRoles_updates(
    Input$authRoles_updates instance,
    TRes Function(Input$authRoles_updates) then,
  ) = _CopyWithImpl$Input$authRoles_updates;

  factory CopyWith$Input$authRoles_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authRoles_updates;

  TRes call({
    Input$authRoles_set_input? $_set,
    Input$authRoles_bool_exp? where,
  });
  CopyWith$Input$authRoles_set_input<TRes> get $_set;
  CopyWith$Input$authRoles_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authRoles_updates<TRes>
    implements CopyWith$Input$authRoles_updates<TRes> {
  _CopyWithImpl$Input$authRoles_updates(
    this._instance,
    this._then,
  );

  final Input$authRoles_updates _instance;

  final TRes Function(Input$authRoles_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authRoles_updates._({
        ..._instance._$data,
        if ($_set != _undefined) '_set': ($_set as Input$authRoles_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authRoles_bool_exp),
      }));
  CopyWith$Input$authRoles_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authRoles_set_input.stub(_then(_instance))
        : CopyWith$Input$authRoles_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authRoles_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authRoles_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authRoles_updates<TRes>
    implements CopyWith$Input$authRoles_updates<TRes> {
  _CopyWithStubImpl$Input$authRoles_updates(this._res);

  TRes _res;

  call({
    Input$authRoles_set_input? $_set,
    Input$authRoles_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authRoles_set_input<TRes> get $_set =>
      CopyWith$Input$authRoles_set_input.stub(_res);
  CopyWith$Input$authRoles_bool_exp<TRes> get where =>
      CopyWith$Input$authRoles_bool_exp.stub(_res);
}

class Input$authUserProviders_aggregate_bool_exp {
  factory Input$authUserProviders_aggregate_bool_exp(
          {Input$authUserProviders_aggregate_bool_exp_count? count}) =>
      Input$authUserProviders_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$authUserProviders_aggregate_bool_exp._(this._$data);

  factory Input$authUserProviders_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$authUserProviders_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$authUserProviders_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserProviders_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$authUserProviders_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_aggregate_bool_exp<
          Input$authUserProviders_aggregate_bool_exp>
      get copyWith => CopyWith$Input$authUserProviders_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$authUserProviders_aggregate_bool_exp(
    Input$authUserProviders_aggregate_bool_exp instance,
    TRes Function(Input$authUserProviders_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$authUserProviders_aggregate_bool_exp;

  factory CopyWith$Input$authUserProviders_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_aggregate_bool_exp;

  TRes call({Input$authUserProviders_aggregate_bool_exp_count? count});
  CopyWith$Input$authUserProviders_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$authUserProviders_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$authUserProviders_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_aggregate_bool_exp _instance;

  final TRes Function(Input$authUserProviders_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$authUserProviders_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$authUserProviders_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$authUserProviders_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$authUserProviders_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$authUserProviders_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$authUserProviders_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$authUserProviders_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$authUserProviders_aggregate_bool_exp_count.stub(_res);
}

class Input$authUserProviders_aggregate_bool_exp_count {
  factory Input$authUserProviders_aggregate_bool_exp_count({
    List<Enum$authUserProviders_select_column>? arguments,
    bool? distinct,
    Input$authUserProviders_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$authUserProviders_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$authUserProviders_aggregate_bool_exp_count._(this._$data);

  factory Input$authUserProviders_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) =>
              fromJson$Enum$authUserProviders_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$authUserProviders_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$authUserProviders_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$authUserProviders_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$authUserProviders_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$authUserProviders_bool_exp? get filter =>
      (_$data['filter'] as Input$authUserProviders_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$authUserProviders_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$authUserProviders_aggregate_bool_exp_count<
          Input$authUserProviders_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$authUserProviders_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$authUserProviders_aggregate_bool_exp_count(
    Input$authUserProviders_aggregate_bool_exp_count instance,
    TRes Function(Input$authUserProviders_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$authUserProviders_aggregate_bool_exp_count;

  factory CopyWith$Input$authUserProviders_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_aggregate_bool_exp_count;

  TRes call({
    List<Enum$authUserProviders_select_column>? arguments,
    bool? distinct,
    Input$authUserProviders_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$authUserProviders_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$authUserProviders_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$authUserProviders_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$authUserProviders_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_aggregate_bool_exp_count _instance;

  final TRes Function(Input$authUserProviders_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$authUserProviders_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments':
              (arguments as List<Enum$authUserProviders_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$authUserProviders_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$authUserProviders_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$authUserProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$authUserProviders_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$authUserProviders_select_column>? arguments,
    bool? distinct,
    Input$authUserProviders_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$authUserProviders_bool_exp<TRes> get filter =>
      CopyWith$Input$authUserProviders_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$authUserProviders_aggregate_order_by {
  factory Input$authUserProviders_aggregate_order_by({
    Enum$order_by? count,
    Input$authUserProviders_max_order_by? max,
    Input$authUserProviders_min_order_by? min,
  }) =>
      Input$authUserProviders_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$authUserProviders_aggregate_order_by._(this._$data);

  factory Input$authUserProviders_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$authUserProviders_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$authUserProviders_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$authUserProviders_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$authUserProviders_max_order_by? get max =>
      (_$data['max'] as Input$authUserProviders_max_order_by?);
  Input$authUserProviders_min_order_by? get min =>
      (_$data['min'] as Input$authUserProviders_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_aggregate_order_by<
          Input$authUserProviders_aggregate_order_by>
      get copyWith => CopyWith$Input$authUserProviders_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_aggregate_order_by<TRes> {
  factory CopyWith$Input$authUserProviders_aggregate_order_by(
    Input$authUserProviders_aggregate_order_by instance,
    TRes Function(Input$authUserProviders_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$authUserProviders_aggregate_order_by;

  factory CopyWith$Input$authUserProviders_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$authUserProviders_max_order_by? max,
    Input$authUserProviders_min_order_by? min,
  });
  CopyWith$Input$authUserProviders_max_order_by<TRes> get max;
  CopyWith$Input$authUserProviders_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$authUserProviders_aggregate_order_by<TRes>
    implements CopyWith$Input$authUserProviders_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$authUserProviders_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_aggregate_order_by _instance;

  final TRes Function(Input$authUserProviders_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$authUserProviders_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$authUserProviders_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$authUserProviders_min_order_by?),
      }));
  CopyWith$Input$authUserProviders_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$authUserProviders_max_order_by.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$authUserProviders_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$authUserProviders_min_order_by.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_aggregate_order_by<TRes>
    implements CopyWith$Input$authUserProviders_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$authUserProviders_max_order_by? max,
    Input$authUserProviders_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$authUserProviders_max_order_by<TRes> get max =>
      CopyWith$Input$authUserProviders_max_order_by.stub(_res);
  CopyWith$Input$authUserProviders_min_order_by<TRes> get min =>
      CopyWith$Input$authUserProviders_min_order_by.stub(_res);
}

class Input$authUserProviders_arr_rel_insert_input {
  factory Input$authUserProviders_arr_rel_insert_input({
    required List<Input$authUserProviders_insert_input> data,
    Input$authUserProviders_on_conflict? on_conflict,
  }) =>
      Input$authUserProviders_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$authUserProviders_arr_rel_insert_input._(this._$data);

  factory Input$authUserProviders_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$authUserProviders_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$authUserProviders_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$authUserProviders_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authUserProviders_insert_input> get data =>
      (_$data['data'] as List<Input$authUserProviders_insert_input>);
  Input$authUserProviders_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$authUserProviders_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_arr_rel_insert_input<
          Input$authUserProviders_arr_rel_insert_input>
      get copyWith => CopyWith$Input$authUserProviders_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$authUserProviders_arr_rel_insert_input(
    Input$authUserProviders_arr_rel_insert_input instance,
    TRes Function(Input$authUserProviders_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$authUserProviders_arr_rel_insert_input;

  factory CopyWith$Input$authUserProviders_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_arr_rel_insert_input;

  TRes call({
    List<Input$authUserProviders_insert_input>? data,
    Input$authUserProviders_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$authUserProviders_insert_input> Function(
              Iterable<
                  CopyWith$Input$authUserProviders_insert_input<
                      Input$authUserProviders_insert_input>>)
          _fn);
  CopyWith$Input$authUserProviders_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$authUserProviders_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$authUserProviders_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_arr_rel_insert_input _instance;

  final TRes Function(Input$authUserProviders_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$authUserProviders_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$authUserProviders_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$authUserProviders_on_conflict?),
      }));
  TRes data(
          Iterable<Input$authUserProviders_insert_input> Function(
                  Iterable<
                      CopyWith$Input$authUserProviders_insert_input<
                          Input$authUserProviders_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data
              .map((e) => CopyWith$Input$authUserProviders_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$authUserProviders_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$authUserProviders_on_conflict.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$authUserProviders_insert_input>? data,
    Input$authUserProviders_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$authUserProviders_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$authUserProviders_on_conflict.stub(_res);
}

class Input$authUserProviders_bool_exp {
  factory Input$authUserProviders_bool_exp({
    List<Input$authUserProviders_bool_exp>? $_and,
    Input$authUserProviders_bool_exp? $_not,
    List<Input$authUserProviders_bool_exp>? $_or,
    Input$String_comparison_exp? accessToken,
    Input$timestamptz_comparison_exp? createdAt,
    Input$uuid_comparison_exp? id,
    Input$authProviders_bool_exp? provider,
    Input$String_comparison_exp? providerId,
    Input$String_comparison_exp? providerUserId,
    Input$String_comparison_exp? refreshToken,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      Input$authUserProviders_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (accessToken != null) r'accessToken': accessToken,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (provider != null) r'provider': provider,
        if (providerId != null) r'providerId': providerId,
        if (providerUserId != null) r'providerUserId': providerUserId,
        if (refreshToken != null) r'refreshToken': refreshToken,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserProviders_bool_exp._(this._$data);

  factory Input$authUserProviders_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$authUserProviders_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authUserProviders_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$authUserProviders_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('accessToken')) {
      final l$accessToken = data['accessToken'];
      result$data['accessToken'] = l$accessToken == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$accessToken as Map<String, dynamic>));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$createdAt as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$uuid_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('provider')) {
      final l$provider = data['provider'];
      result$data['provider'] = l$provider == null
          ? null
          : Input$authProviders_bool_exp.fromJson(
              (l$provider as Map<String, dynamic>));
    }
    if (data.containsKey('providerId')) {
      final l$providerId = data['providerId'];
      result$data['providerId'] = l$providerId == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$providerId as Map<String, dynamic>));
    }
    if (data.containsKey('providerUserId')) {
      final l$providerUserId = data['providerUserId'];
      result$data['providerUserId'] = l$providerUserId == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$providerUserId as Map<String, dynamic>));
    }
    if (data.containsKey('refreshToken')) {
      final l$refreshToken = data['refreshToken'];
      result$data['refreshToken'] = l$refreshToken == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$refreshToken as Map<String, dynamic>));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updatedAt as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$userId as Map<String, dynamic>));
    }
    return Input$authUserProviders_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authUserProviders_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authUserProviders_bool_exp>?);
  Input$authUserProviders_bool_exp? get $_not =>
      (_$data['_not'] as Input$authUserProviders_bool_exp?);
  List<Input$authUserProviders_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authUserProviders_bool_exp>?);
  Input$String_comparison_exp? get accessToken =>
      (_$data['accessToken'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get createdAt =>
      (_$data['createdAt'] as Input$timestamptz_comparison_exp?);
  Input$uuid_comparison_exp? get id =>
      (_$data['id'] as Input$uuid_comparison_exp?);
  Input$authProviders_bool_exp? get provider =>
      (_$data['provider'] as Input$authProviders_bool_exp?);
  Input$String_comparison_exp? get providerId =>
      (_$data['providerId'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get providerUserId =>
      (_$data['providerUserId'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get refreshToken =>
      (_$data['refreshToken'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get updatedAt =>
      (_$data['updatedAt'] as Input$timestamptz_comparison_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get userId =>
      (_$data['userId'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('accessToken')) {
      final l$accessToken = accessToken;
      result$data['accessToken'] = l$accessToken?.toJson();
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('provider')) {
      final l$provider = provider;
      result$data['provider'] = l$provider?.toJson();
    }
    if (_$data.containsKey('providerId')) {
      final l$providerId = providerId;
      result$data['providerId'] = l$providerId?.toJson();
    }
    if (_$data.containsKey('providerUserId')) {
      final l$providerUserId = providerUserId;
      result$data['providerUserId'] = l$providerUserId?.toJson();
    }
    if (_$data.containsKey('refreshToken')) {
      final l$refreshToken = refreshToken;
      result$data['refreshToken'] = l$refreshToken?.toJson();
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_bool_exp<Input$authUserProviders_bool_exp>
      get copyWith => CopyWith$Input$authUserProviders_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$accessToken = accessToken;
    final lOther$accessToken = other.accessToken;
    if (_$data.containsKey('accessToken') !=
        other._$data.containsKey('accessToken')) {
      return false;
    }
    if (l$accessToken != lOther$accessToken) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$provider = provider;
    final lOther$provider = other.provider;
    if (_$data.containsKey('provider') !=
        other._$data.containsKey('provider')) {
      return false;
    }
    if (l$provider != lOther$provider) {
      return false;
    }
    final l$providerId = providerId;
    final lOther$providerId = other.providerId;
    if (_$data.containsKey('providerId') !=
        other._$data.containsKey('providerId')) {
      return false;
    }
    if (l$providerId != lOther$providerId) {
      return false;
    }
    final l$providerUserId = providerUserId;
    final lOther$providerUserId = other.providerUserId;
    if (_$data.containsKey('providerUserId') !=
        other._$data.containsKey('providerUserId')) {
      return false;
    }
    if (l$providerUserId != lOther$providerUserId) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (_$data.containsKey('refreshToken') !=
        other._$data.containsKey('refreshToken')) {
      return false;
    }
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$accessToken = accessToken;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$provider = provider;
    final l$providerId = providerId;
    final l$providerUserId = providerUserId;
    final l$refreshToken = refreshToken;
    final l$updatedAt = updatedAt;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('accessToken') ? l$accessToken : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('provider') ? l$provider : const {},
      _$data.containsKey('providerId') ? l$providerId : const {},
      _$data.containsKey('providerUserId') ? l$providerUserId : const {},
      _$data.containsKey('refreshToken') ? l$refreshToken : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_bool_exp<TRes> {
  factory CopyWith$Input$authUserProviders_bool_exp(
    Input$authUserProviders_bool_exp instance,
    TRes Function(Input$authUserProviders_bool_exp) then,
  ) = _CopyWithImpl$Input$authUserProviders_bool_exp;

  factory CopyWith$Input$authUserProviders_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_bool_exp;

  TRes call({
    List<Input$authUserProviders_bool_exp>? $_and,
    Input$authUserProviders_bool_exp? $_not,
    List<Input$authUserProviders_bool_exp>? $_or,
    Input$String_comparison_exp? accessToken,
    Input$timestamptz_comparison_exp? createdAt,
    Input$uuid_comparison_exp? id,
    Input$authProviders_bool_exp? provider,
    Input$String_comparison_exp? providerId,
    Input$String_comparison_exp? providerUserId,
    Input$String_comparison_exp? refreshToken,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  });
  TRes $_and(
      Iterable<Input$authUserProviders_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authUserProviders_bool_exp<
                      Input$authUserProviders_bool_exp>>?)
          _fn);
  CopyWith$Input$authUserProviders_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authUserProviders_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authUserProviders_bool_exp<
                      Input$authUserProviders_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get accessToken;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt;
  CopyWith$Input$uuid_comparison_exp<TRes> get id;
  CopyWith$Input$authProviders_bool_exp<TRes> get provider;
  CopyWith$Input$String_comparison_exp<TRes> get providerId;
  CopyWith$Input$String_comparison_exp<TRes> get providerUserId;
  CopyWith$Input$String_comparison_exp<TRes> get refreshToken;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get userId;
}

class _CopyWithImpl$Input$authUserProviders_bool_exp<TRes>
    implements CopyWith$Input$authUserProviders_bool_exp<TRes> {
  _CopyWithImpl$Input$authUserProviders_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_bool_exp _instance;

  final TRes Function(Input$authUserProviders_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? accessToken = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? provider = _undefined,
    Object? providerId = _undefined,
    Object? providerUserId = _undefined,
    Object? refreshToken = _undefined,
    Object? updatedAt = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserProviders_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authUserProviders_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$authUserProviders_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authUserProviders_bool_exp>?),
        if (accessToken != _undefined)
          'accessToken': (accessToken as Input$String_comparison_exp?),
        if (createdAt != _undefined)
          'createdAt': (createdAt as Input$timestamptz_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$uuid_comparison_exp?),
        if (provider != _undefined)
          'provider': (provider as Input$authProviders_bool_exp?),
        if (providerId != _undefined)
          'providerId': (providerId as Input$String_comparison_exp?),
        if (providerUserId != _undefined)
          'providerUserId': (providerUserId as Input$String_comparison_exp?),
        if (refreshToken != _undefined)
          'refreshToken': (refreshToken as Input$String_comparison_exp?),
        if (updatedAt != _undefined)
          'updatedAt': (updatedAt as Input$timestamptz_comparison_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (userId != _undefined)
          'userId': (userId as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$authUserProviders_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authUserProviders_bool_exp<
                          Input$authUserProviders_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$authUserProviders_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authUserProviders_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authUserProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authUserProviders_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authUserProviders_bool_exp<
                          Input$authUserProviders_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$authUserProviders_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get accessToken {
    final local$accessToken = _instance.accessToken;
    return local$accessToken == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$accessToken, (e) => call(accessToken: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt {
    final local$createdAt = _instance.createdAt;
    return local$createdAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$createdAt, (e) => call(createdAt: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$authProviders_bool_exp<TRes> get provider {
    final local$provider = _instance.provider;
    return local$provider == null
        ? CopyWith$Input$authProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authProviders_bool_exp(
            local$provider, (e) => call(provider: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get providerId {
    final local$providerId = _instance.providerId;
    return local$providerId == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$providerId, (e) => call(providerId: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get providerUserId {
    final local$providerUserId = _instance.providerUserId;
    return local$providerUserId == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$providerUserId, (e) => call(providerUserId: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get refreshToken {
    final local$refreshToken = _instance.refreshToken;
    return local$refreshToken == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$refreshToken, (e) => call(refreshToken: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt {
    final local$updatedAt = _instance.updatedAt;
    return local$updatedAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updatedAt, (e) => call(updatedAt: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get userId {
    final local$userId = _instance.userId;
    return local$userId == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$userId, (e) => call(userId: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_bool_exp<TRes>
    implements CopyWith$Input$authUserProviders_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authUserProviders_bool_exp>? $_and,
    Input$authUserProviders_bool_exp? $_not,
    List<Input$authUserProviders_bool_exp>? $_or,
    Input$String_comparison_exp? accessToken,
    Input$timestamptz_comparison_exp? createdAt,
    Input$uuid_comparison_exp? id,
    Input$authProviders_bool_exp? provider,
    Input$String_comparison_exp? providerId,
    Input$String_comparison_exp? providerUserId,
    Input$String_comparison_exp? refreshToken,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authUserProviders_bool_exp<TRes> get $_not =>
      CopyWith$Input$authUserProviders_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get accessToken =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$authProviders_bool_exp<TRes> get provider =>
      CopyWith$Input$authProviders_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get providerId =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get providerUserId =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get refreshToken =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get userId =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$authUserProviders_insert_input {
  factory Input$authUserProviders_insert_input({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    Input$authProviders_obj_rel_insert_input? provider,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      Input$authUserProviders_insert_input._({
        if (accessToken != null) r'accessToken': accessToken,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (provider != null) r'provider': provider,
        if (providerId != null) r'providerId': providerId,
        if (providerUserId != null) r'providerUserId': providerUserId,
        if (refreshToken != null) r'refreshToken': refreshToken,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserProviders_insert_input._(this._$data);

  factory Input$authUserProviders_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('accessToken')) {
      final l$accessToken = data['accessToken'];
      result$data['accessToken'] = (l$accessToken as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('provider')) {
      final l$provider = data['provider'];
      result$data['provider'] = l$provider == null
          ? null
          : Input$authProviders_obj_rel_insert_input.fromJson(
              (l$provider as Map<String, dynamic>));
    }
    if (data.containsKey('providerId')) {
      final l$providerId = data['providerId'];
      result$data['providerId'] = (l$providerId as String?);
    }
    if (data.containsKey('providerUserId')) {
      final l$providerUserId = data['providerUserId'];
      result$data['providerUserId'] = (l$providerUserId as String?);
    }
    if (data.containsKey('refreshToken')) {
      final l$refreshToken = data['refreshToken'];
      result$data['refreshToken'] = (l$refreshToken as String?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserProviders_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get accessToken => (_$data['accessToken'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  Input$authProviders_obj_rel_insert_input? get provider =>
      (_$data['provider'] as Input$authProviders_obj_rel_insert_input?);
  String? get providerId => (_$data['providerId'] as String?);
  String? get providerUserId => (_$data['providerUserId'] as String?);
  String? get refreshToken => (_$data['refreshToken'] as String?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('accessToken')) {
      final l$accessToken = accessToken;
      result$data['accessToken'] = l$accessToken;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('provider')) {
      final l$provider = provider;
      result$data['provider'] = l$provider?.toJson();
    }
    if (_$data.containsKey('providerId')) {
      final l$providerId = providerId;
      result$data['providerId'] = l$providerId;
    }
    if (_$data.containsKey('providerUserId')) {
      final l$providerUserId = providerUserId;
      result$data['providerUserId'] = l$providerUserId;
    }
    if (_$data.containsKey('refreshToken')) {
      final l$refreshToken = refreshToken;
      result$data['refreshToken'] = l$refreshToken;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_insert_input<
          Input$authUserProviders_insert_input>
      get copyWith => CopyWith$Input$authUserProviders_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$accessToken = accessToken;
    final lOther$accessToken = other.accessToken;
    if (_$data.containsKey('accessToken') !=
        other._$data.containsKey('accessToken')) {
      return false;
    }
    if (l$accessToken != lOther$accessToken) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$provider = provider;
    final lOther$provider = other.provider;
    if (_$data.containsKey('provider') !=
        other._$data.containsKey('provider')) {
      return false;
    }
    if (l$provider != lOther$provider) {
      return false;
    }
    final l$providerId = providerId;
    final lOther$providerId = other.providerId;
    if (_$data.containsKey('providerId') !=
        other._$data.containsKey('providerId')) {
      return false;
    }
    if (l$providerId != lOther$providerId) {
      return false;
    }
    final l$providerUserId = providerUserId;
    final lOther$providerUserId = other.providerUserId;
    if (_$data.containsKey('providerUserId') !=
        other._$data.containsKey('providerUserId')) {
      return false;
    }
    if (l$providerUserId != lOther$providerUserId) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (_$data.containsKey('refreshToken') !=
        other._$data.containsKey('refreshToken')) {
      return false;
    }
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$accessToken = accessToken;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$provider = provider;
    final l$providerId = providerId;
    final l$providerUserId = providerUserId;
    final l$refreshToken = refreshToken;
    final l$updatedAt = updatedAt;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('accessToken') ? l$accessToken : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('provider') ? l$provider : const {},
      _$data.containsKey('providerId') ? l$providerId : const {},
      _$data.containsKey('providerUserId') ? l$providerUserId : const {},
      _$data.containsKey('refreshToken') ? l$refreshToken : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_insert_input<TRes> {
  factory CopyWith$Input$authUserProviders_insert_input(
    Input$authUserProviders_insert_input instance,
    TRes Function(Input$authUserProviders_insert_input) then,
  ) = _CopyWithImpl$Input$authUserProviders_insert_input;

  factory CopyWith$Input$authUserProviders_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_insert_input;

  TRes call({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    Input$authProviders_obj_rel_insert_input? provider,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  });
  CopyWith$Input$authProviders_obj_rel_insert_input<TRes> get provider;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$authUserProviders_insert_input<TRes>
    implements CopyWith$Input$authUserProviders_insert_input<TRes> {
  _CopyWithImpl$Input$authUserProviders_insert_input(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_insert_input _instance;

  final TRes Function(Input$authUserProviders_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? accessToken = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? provider = _undefined,
    Object? providerId = _undefined,
    Object? providerUserId = _undefined,
    Object? refreshToken = _undefined,
    Object? updatedAt = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserProviders_insert_input._({
        ..._instance._$data,
        if (accessToken != _undefined) 'accessToken': (accessToken as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (provider != _undefined)
          'provider': (provider as Input$authProviders_obj_rel_insert_input?),
        if (providerId != _undefined) 'providerId': (providerId as String?),
        if (providerUserId != _undefined)
          'providerUserId': (providerUserId as String?),
        if (refreshToken != _undefined)
          'refreshToken': (refreshToken as String?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
  CopyWith$Input$authProviders_obj_rel_insert_input<TRes> get provider {
    final local$provider = _instance.provider;
    return local$provider == null
        ? CopyWith$Input$authProviders_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authProviders_obj_rel_insert_input(
            local$provider, (e) => call(provider: e));
  }

  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_insert_input<TRes>
    implements CopyWith$Input$authUserProviders_insert_input<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_insert_input(this._res);

  TRes _res;

  call({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    Input$authProviders_obj_rel_insert_input? provider,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      _res;
  CopyWith$Input$authProviders_obj_rel_insert_input<TRes> get provider =>
      CopyWith$Input$authProviders_obj_rel_insert_input.stub(_res);
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$authUserProviders_max_order_by {
  factory Input$authUserProviders_max_order_by({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Enum$order_by? userId,
  }) =>
      Input$authUserProviders_max_order_by._({
        if (accessToken != null) r'accessToken': accessToken,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (providerId != null) r'providerId': providerId,
        if (providerUserId != null) r'providerUserId': providerUserId,
        if (refreshToken != null) r'refreshToken': refreshToken,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (userId != null) r'userId': userId,
      });

  Input$authUserProviders_max_order_by._(this._$data);

  factory Input$authUserProviders_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('accessToken')) {
      final l$accessToken = data['accessToken'];
      result$data['accessToken'] = l$accessToken == null
          ? null
          : fromJson$Enum$order_by((l$accessToken as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('providerId')) {
      final l$providerId = data['providerId'];
      result$data['providerId'] = l$providerId == null
          ? null
          : fromJson$Enum$order_by((l$providerId as String));
    }
    if (data.containsKey('providerUserId')) {
      final l$providerUserId = data['providerUserId'];
      result$data['providerUserId'] = l$providerUserId == null
          ? null
          : fromJson$Enum$order_by((l$providerUserId as String));
    }
    if (data.containsKey('refreshToken')) {
      final l$refreshToken = data['refreshToken'];
      result$data['refreshToken'] = l$refreshToken == null
          ? null
          : fromJson$Enum$order_by((l$refreshToken as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserProviders_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get accessToken => (_$data['accessToken'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get providerId => (_$data['providerId'] as Enum$order_by?);
  Enum$order_by? get providerUserId =>
      (_$data['providerUserId'] as Enum$order_by?);
  Enum$order_by? get refreshToken => (_$data['refreshToken'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('accessToken')) {
      final l$accessToken = accessToken;
      result$data['accessToken'] =
          l$accessToken == null ? null : toJson$Enum$order_by(l$accessToken);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('providerId')) {
      final l$providerId = providerId;
      result$data['providerId'] =
          l$providerId == null ? null : toJson$Enum$order_by(l$providerId);
    }
    if (_$data.containsKey('providerUserId')) {
      final l$providerUserId = providerUserId;
      result$data['providerUserId'] = l$providerUserId == null
          ? null
          : toJson$Enum$order_by(l$providerUserId);
    }
    if (_$data.containsKey('refreshToken')) {
      final l$refreshToken = refreshToken;
      result$data['refreshToken'] =
          l$refreshToken == null ? null : toJson$Enum$order_by(l$refreshToken);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_max_order_by<
          Input$authUserProviders_max_order_by>
      get copyWith => CopyWith$Input$authUserProviders_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$accessToken = accessToken;
    final lOther$accessToken = other.accessToken;
    if (_$data.containsKey('accessToken') !=
        other._$data.containsKey('accessToken')) {
      return false;
    }
    if (l$accessToken != lOther$accessToken) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$providerId = providerId;
    final lOther$providerId = other.providerId;
    if (_$data.containsKey('providerId') !=
        other._$data.containsKey('providerId')) {
      return false;
    }
    if (l$providerId != lOther$providerId) {
      return false;
    }
    final l$providerUserId = providerUserId;
    final lOther$providerUserId = other.providerUserId;
    if (_$data.containsKey('providerUserId') !=
        other._$data.containsKey('providerUserId')) {
      return false;
    }
    if (l$providerUserId != lOther$providerUserId) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (_$data.containsKey('refreshToken') !=
        other._$data.containsKey('refreshToken')) {
      return false;
    }
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$accessToken = accessToken;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$providerId = providerId;
    final l$providerUserId = providerUserId;
    final l$refreshToken = refreshToken;
    final l$updatedAt = updatedAt;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('accessToken') ? l$accessToken : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('providerId') ? l$providerId : const {},
      _$data.containsKey('providerUserId') ? l$providerUserId : const {},
      _$data.containsKey('refreshToken') ? l$refreshToken : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_max_order_by<TRes> {
  factory CopyWith$Input$authUserProviders_max_order_by(
    Input$authUserProviders_max_order_by instance,
    TRes Function(Input$authUserProviders_max_order_by) then,
  ) = _CopyWithImpl$Input$authUserProviders_max_order_by;

  factory CopyWith$Input$authUserProviders_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_max_order_by;

  TRes call({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authUserProviders_max_order_by<TRes>
    implements CopyWith$Input$authUserProviders_max_order_by<TRes> {
  _CopyWithImpl$Input$authUserProviders_max_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_max_order_by _instance;

  final TRes Function(Input$authUserProviders_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? accessToken = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? providerId = _undefined,
    Object? providerUserId = _undefined,
    Object? refreshToken = _undefined,
    Object? updatedAt = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserProviders_max_order_by._({
        ..._instance._$data,
        if (accessToken != _undefined)
          'accessToken': (accessToken as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (providerId != _undefined)
          'providerId': (providerId as Enum$order_by?),
        if (providerUserId != _undefined)
          'providerUserId': (providerUserId as Enum$order_by?),
        if (refreshToken != _undefined)
          'refreshToken': (refreshToken as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserProviders_max_order_by<TRes>
    implements CopyWith$Input$authUserProviders_max_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authUserProviders_min_order_by {
  factory Input$authUserProviders_min_order_by({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Enum$order_by? userId,
  }) =>
      Input$authUserProviders_min_order_by._({
        if (accessToken != null) r'accessToken': accessToken,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (providerId != null) r'providerId': providerId,
        if (providerUserId != null) r'providerUserId': providerUserId,
        if (refreshToken != null) r'refreshToken': refreshToken,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (userId != null) r'userId': userId,
      });

  Input$authUserProviders_min_order_by._(this._$data);

  factory Input$authUserProviders_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('accessToken')) {
      final l$accessToken = data['accessToken'];
      result$data['accessToken'] = l$accessToken == null
          ? null
          : fromJson$Enum$order_by((l$accessToken as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('providerId')) {
      final l$providerId = data['providerId'];
      result$data['providerId'] = l$providerId == null
          ? null
          : fromJson$Enum$order_by((l$providerId as String));
    }
    if (data.containsKey('providerUserId')) {
      final l$providerUserId = data['providerUserId'];
      result$data['providerUserId'] = l$providerUserId == null
          ? null
          : fromJson$Enum$order_by((l$providerUserId as String));
    }
    if (data.containsKey('refreshToken')) {
      final l$refreshToken = data['refreshToken'];
      result$data['refreshToken'] = l$refreshToken == null
          ? null
          : fromJson$Enum$order_by((l$refreshToken as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserProviders_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get accessToken => (_$data['accessToken'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get providerId => (_$data['providerId'] as Enum$order_by?);
  Enum$order_by? get providerUserId =>
      (_$data['providerUserId'] as Enum$order_by?);
  Enum$order_by? get refreshToken => (_$data['refreshToken'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('accessToken')) {
      final l$accessToken = accessToken;
      result$data['accessToken'] =
          l$accessToken == null ? null : toJson$Enum$order_by(l$accessToken);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('providerId')) {
      final l$providerId = providerId;
      result$data['providerId'] =
          l$providerId == null ? null : toJson$Enum$order_by(l$providerId);
    }
    if (_$data.containsKey('providerUserId')) {
      final l$providerUserId = providerUserId;
      result$data['providerUserId'] = l$providerUserId == null
          ? null
          : toJson$Enum$order_by(l$providerUserId);
    }
    if (_$data.containsKey('refreshToken')) {
      final l$refreshToken = refreshToken;
      result$data['refreshToken'] =
          l$refreshToken == null ? null : toJson$Enum$order_by(l$refreshToken);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_min_order_by<
          Input$authUserProviders_min_order_by>
      get copyWith => CopyWith$Input$authUserProviders_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$accessToken = accessToken;
    final lOther$accessToken = other.accessToken;
    if (_$data.containsKey('accessToken') !=
        other._$data.containsKey('accessToken')) {
      return false;
    }
    if (l$accessToken != lOther$accessToken) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$providerId = providerId;
    final lOther$providerId = other.providerId;
    if (_$data.containsKey('providerId') !=
        other._$data.containsKey('providerId')) {
      return false;
    }
    if (l$providerId != lOther$providerId) {
      return false;
    }
    final l$providerUserId = providerUserId;
    final lOther$providerUserId = other.providerUserId;
    if (_$data.containsKey('providerUserId') !=
        other._$data.containsKey('providerUserId')) {
      return false;
    }
    if (l$providerUserId != lOther$providerUserId) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (_$data.containsKey('refreshToken') !=
        other._$data.containsKey('refreshToken')) {
      return false;
    }
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$accessToken = accessToken;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$providerId = providerId;
    final l$providerUserId = providerUserId;
    final l$refreshToken = refreshToken;
    final l$updatedAt = updatedAt;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('accessToken') ? l$accessToken : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('providerId') ? l$providerId : const {},
      _$data.containsKey('providerUserId') ? l$providerUserId : const {},
      _$data.containsKey('refreshToken') ? l$refreshToken : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_min_order_by<TRes> {
  factory CopyWith$Input$authUserProviders_min_order_by(
    Input$authUserProviders_min_order_by instance,
    TRes Function(Input$authUserProviders_min_order_by) then,
  ) = _CopyWithImpl$Input$authUserProviders_min_order_by;

  factory CopyWith$Input$authUserProviders_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_min_order_by;

  TRes call({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authUserProviders_min_order_by<TRes>
    implements CopyWith$Input$authUserProviders_min_order_by<TRes> {
  _CopyWithImpl$Input$authUserProviders_min_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_min_order_by _instance;

  final TRes Function(Input$authUserProviders_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? accessToken = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? providerId = _undefined,
    Object? providerUserId = _undefined,
    Object? refreshToken = _undefined,
    Object? updatedAt = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserProviders_min_order_by._({
        ..._instance._$data,
        if (accessToken != _undefined)
          'accessToken': (accessToken as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (providerId != _undefined)
          'providerId': (providerId as Enum$order_by?),
        if (providerUserId != _undefined)
          'providerUserId': (providerUserId as Enum$order_by?),
        if (refreshToken != _undefined)
          'refreshToken': (refreshToken as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserProviders_min_order_by<TRes>
    implements CopyWith$Input$authUserProviders_min_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authUserProviders_on_conflict {
  factory Input$authUserProviders_on_conflict({
    required Enum$authUserProviders_constraint constraint,
    required List<Enum$authUserProviders_update_column> update_columns,
    Input$authUserProviders_bool_exp? where,
  }) =>
      Input$authUserProviders_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authUserProviders_on_conflict._(this._$data);

  factory Input$authUserProviders_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$authUserProviders_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map(
            (e) => fromJson$Enum$authUserProviders_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authUserProviders_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authUserProviders_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authUserProviders_constraint get constraint =>
      (_$data['constraint'] as Enum$authUserProviders_constraint);
  List<Enum$authUserProviders_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$authUserProviders_update_column>);
  Input$authUserProviders_bool_exp? get where =>
      (_$data['where'] as Input$authUserProviders_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$authUserProviders_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authUserProviders_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_on_conflict<
          Input$authUserProviders_on_conflict>
      get copyWith => CopyWith$Input$authUserProviders_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_on_conflict<TRes> {
  factory CopyWith$Input$authUserProviders_on_conflict(
    Input$authUserProviders_on_conflict instance,
    TRes Function(Input$authUserProviders_on_conflict) then,
  ) = _CopyWithImpl$Input$authUserProviders_on_conflict;

  factory CopyWith$Input$authUserProviders_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_on_conflict;

  TRes call({
    Enum$authUserProviders_constraint? constraint,
    List<Enum$authUserProviders_update_column>? update_columns,
    Input$authUserProviders_bool_exp? where,
  });
  CopyWith$Input$authUserProviders_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authUserProviders_on_conflict<TRes>
    implements CopyWith$Input$authUserProviders_on_conflict<TRes> {
  _CopyWithImpl$Input$authUserProviders_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_on_conflict _instance;

  final TRes Function(Input$authUserProviders_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authUserProviders_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authUserProviders_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$authUserProviders_update_column>),
        if (where != _undefined)
          'where': (where as Input$authUserProviders_bool_exp?),
      }));
  CopyWith$Input$authUserProviders_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authUserProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_on_conflict<TRes>
    implements CopyWith$Input$authUserProviders_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authUserProviders_constraint? constraint,
    List<Enum$authUserProviders_update_column>? update_columns,
    Input$authUserProviders_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authUserProviders_bool_exp<TRes> get where =>
      CopyWith$Input$authUserProviders_bool_exp.stub(_res);
}

class Input$authUserProviders_order_by {
  factory Input$authUserProviders_order_by({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Input$authProviders_order_by? provider,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      Input$authUserProviders_order_by._({
        if (accessToken != null) r'accessToken': accessToken,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (provider != null) r'provider': provider,
        if (providerId != null) r'providerId': providerId,
        if (providerUserId != null) r'providerUserId': providerUserId,
        if (refreshToken != null) r'refreshToken': refreshToken,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserProviders_order_by._(this._$data);

  factory Input$authUserProviders_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('accessToken')) {
      final l$accessToken = data['accessToken'];
      result$data['accessToken'] = l$accessToken == null
          ? null
          : fromJson$Enum$order_by((l$accessToken as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('provider')) {
      final l$provider = data['provider'];
      result$data['provider'] = l$provider == null
          ? null
          : Input$authProviders_order_by.fromJson(
              (l$provider as Map<String, dynamic>));
    }
    if (data.containsKey('providerId')) {
      final l$providerId = data['providerId'];
      result$data['providerId'] = l$providerId == null
          ? null
          : fromJson$Enum$order_by((l$providerId as String));
    }
    if (data.containsKey('providerUserId')) {
      final l$providerUserId = data['providerUserId'];
      result$data['providerUserId'] = l$providerUserId == null
          ? null
          : fromJson$Enum$order_by((l$providerUserId as String));
    }
    if (data.containsKey('refreshToken')) {
      final l$refreshToken = data['refreshToken'];
      result$data['refreshToken'] = l$refreshToken == null
          ? null
          : fromJson$Enum$order_by((l$refreshToken as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserProviders_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get accessToken => (_$data['accessToken'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Input$authProviders_order_by? get provider =>
      (_$data['provider'] as Input$authProviders_order_by?);
  Enum$order_by? get providerId => (_$data['providerId'] as Enum$order_by?);
  Enum$order_by? get providerUserId =>
      (_$data['providerUserId'] as Enum$order_by?);
  Enum$order_by? get refreshToken => (_$data['refreshToken'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('accessToken')) {
      final l$accessToken = accessToken;
      result$data['accessToken'] =
          l$accessToken == null ? null : toJson$Enum$order_by(l$accessToken);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('provider')) {
      final l$provider = provider;
      result$data['provider'] = l$provider?.toJson();
    }
    if (_$data.containsKey('providerId')) {
      final l$providerId = providerId;
      result$data['providerId'] =
          l$providerId == null ? null : toJson$Enum$order_by(l$providerId);
    }
    if (_$data.containsKey('providerUserId')) {
      final l$providerUserId = providerUserId;
      result$data['providerUserId'] = l$providerUserId == null
          ? null
          : toJson$Enum$order_by(l$providerUserId);
    }
    if (_$data.containsKey('refreshToken')) {
      final l$refreshToken = refreshToken;
      result$data['refreshToken'] =
          l$refreshToken == null ? null : toJson$Enum$order_by(l$refreshToken);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_order_by<Input$authUserProviders_order_by>
      get copyWith => CopyWith$Input$authUserProviders_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$accessToken = accessToken;
    final lOther$accessToken = other.accessToken;
    if (_$data.containsKey('accessToken') !=
        other._$data.containsKey('accessToken')) {
      return false;
    }
    if (l$accessToken != lOther$accessToken) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$provider = provider;
    final lOther$provider = other.provider;
    if (_$data.containsKey('provider') !=
        other._$data.containsKey('provider')) {
      return false;
    }
    if (l$provider != lOther$provider) {
      return false;
    }
    final l$providerId = providerId;
    final lOther$providerId = other.providerId;
    if (_$data.containsKey('providerId') !=
        other._$data.containsKey('providerId')) {
      return false;
    }
    if (l$providerId != lOther$providerId) {
      return false;
    }
    final l$providerUserId = providerUserId;
    final lOther$providerUserId = other.providerUserId;
    if (_$data.containsKey('providerUserId') !=
        other._$data.containsKey('providerUserId')) {
      return false;
    }
    if (l$providerUserId != lOther$providerUserId) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (_$data.containsKey('refreshToken') !=
        other._$data.containsKey('refreshToken')) {
      return false;
    }
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$accessToken = accessToken;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$provider = provider;
    final l$providerId = providerId;
    final l$providerUserId = providerUserId;
    final l$refreshToken = refreshToken;
    final l$updatedAt = updatedAt;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('accessToken') ? l$accessToken : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('provider') ? l$provider : const {},
      _$data.containsKey('providerId') ? l$providerId : const {},
      _$data.containsKey('providerUserId') ? l$providerUserId : const {},
      _$data.containsKey('refreshToken') ? l$refreshToken : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_order_by<TRes> {
  factory CopyWith$Input$authUserProviders_order_by(
    Input$authUserProviders_order_by instance,
    TRes Function(Input$authUserProviders_order_by) then,
  ) = _CopyWithImpl$Input$authUserProviders_order_by;

  factory CopyWith$Input$authUserProviders_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_order_by;

  TRes call({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Input$authProviders_order_by? provider,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Input$users_order_by? user,
    Enum$order_by? userId,
  });
  CopyWith$Input$authProviders_order_by<TRes> get provider;
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$authUserProviders_order_by<TRes>
    implements CopyWith$Input$authUserProviders_order_by<TRes> {
  _CopyWithImpl$Input$authUserProviders_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_order_by _instance;

  final TRes Function(Input$authUserProviders_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? accessToken = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? provider = _undefined,
    Object? providerId = _undefined,
    Object? providerUserId = _undefined,
    Object? refreshToken = _undefined,
    Object? updatedAt = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserProviders_order_by._({
        ..._instance._$data,
        if (accessToken != _undefined)
          'accessToken': (accessToken as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (provider != _undefined)
          'provider': (provider as Input$authProviders_order_by?),
        if (providerId != _undefined)
          'providerId': (providerId as Enum$order_by?),
        if (providerUserId != _undefined)
          'providerUserId': (providerUserId as Enum$order_by?),
        if (refreshToken != _undefined)
          'refreshToken': (refreshToken as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
  CopyWith$Input$authProviders_order_by<TRes> get provider {
    final local$provider = _instance.provider;
    return local$provider == null
        ? CopyWith$Input$authProviders_order_by.stub(_then(_instance))
        : CopyWith$Input$authProviders_order_by(
            local$provider, (e) => call(provider: e));
  }

  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_order_by<TRes>
    implements CopyWith$Input$authUserProviders_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? accessToken,
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Input$authProviders_order_by? provider,
    Enum$order_by? providerId,
    Enum$order_by? providerUserId,
    Enum$order_by? refreshToken,
    Enum$order_by? updatedAt,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      _res;
  CopyWith$Input$authProviders_order_by<TRes> get provider =>
      CopyWith$Input$authProviders_order_by.stub(_res);
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$authUserProviders_pk_columns_input {
  factory Input$authUserProviders_pk_columns_input({required UUID id}) =>
      Input$authUserProviders_pk_columns_input._({
        r'id': id,
      });

  Input$authUserProviders_pk_columns_input._(this._$data);

  factory Input$authUserProviders_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = uuidFromJson(l$id);
    return Input$authUserProviders_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get id => (_$data['id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = uuidToJson(l$id);
    return result$data;
  }

  CopyWith$Input$authUserProviders_pk_columns_input<
          Input$authUserProviders_pk_columns_input>
      get copyWith => CopyWith$Input$authUserProviders_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$authUserProviders_pk_columns_input<TRes> {
  factory CopyWith$Input$authUserProviders_pk_columns_input(
    Input$authUserProviders_pk_columns_input instance,
    TRes Function(Input$authUserProviders_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authUserProviders_pk_columns_input;

  factory CopyWith$Input$authUserProviders_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_pk_columns_input;

  TRes call({UUID? id});
}

class _CopyWithImpl$Input$authUserProviders_pk_columns_input<TRes>
    implements CopyWith$Input$authUserProviders_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authUserProviders_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_pk_columns_input _instance;

  final TRes Function(Input$authUserProviders_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authUserProviders_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as UUID),
      }));
}

class _CopyWithStubImpl$Input$authUserProviders_pk_columns_input<TRes>
    implements CopyWith$Input$authUserProviders_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_pk_columns_input(this._res);

  TRes _res;

  call({UUID? id}) => _res;
}

class Input$authUserProviders_set_input {
  factory Input$authUserProviders_set_input({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    UUID? userId,
  }) =>
      Input$authUserProviders_set_input._({
        if (accessToken != null) r'accessToken': accessToken,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (providerId != null) r'providerId': providerId,
        if (providerUserId != null) r'providerUserId': providerUserId,
        if (refreshToken != null) r'refreshToken': refreshToken,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (userId != null) r'userId': userId,
      });

  Input$authUserProviders_set_input._(this._$data);

  factory Input$authUserProviders_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('accessToken')) {
      final l$accessToken = data['accessToken'];
      result$data['accessToken'] = (l$accessToken as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('providerId')) {
      final l$providerId = data['providerId'];
      result$data['providerId'] = (l$providerId as String?);
    }
    if (data.containsKey('providerUserId')) {
      final l$providerUserId = data['providerUserId'];
      result$data['providerUserId'] = (l$providerUserId as String?);
    }
    if (data.containsKey('refreshToken')) {
      final l$refreshToken = data['refreshToken'];
      result$data['refreshToken'] = (l$refreshToken as String?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserProviders_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get accessToken => (_$data['accessToken'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get providerId => (_$data['providerId'] as String?);
  String? get providerUserId => (_$data['providerUserId'] as String?);
  String? get refreshToken => (_$data['refreshToken'] as String?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('accessToken')) {
      final l$accessToken = accessToken;
      result$data['accessToken'] = l$accessToken;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('providerId')) {
      final l$providerId = providerId;
      result$data['providerId'] = l$providerId;
    }
    if (_$data.containsKey('providerUserId')) {
      final l$providerUserId = providerUserId;
      result$data['providerUserId'] = l$providerUserId;
    }
    if (_$data.containsKey('refreshToken')) {
      final l$refreshToken = refreshToken;
      result$data['refreshToken'] = l$refreshToken;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_set_input<Input$authUserProviders_set_input>
      get copyWith => CopyWith$Input$authUserProviders_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$accessToken = accessToken;
    final lOther$accessToken = other.accessToken;
    if (_$data.containsKey('accessToken') !=
        other._$data.containsKey('accessToken')) {
      return false;
    }
    if (l$accessToken != lOther$accessToken) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$providerId = providerId;
    final lOther$providerId = other.providerId;
    if (_$data.containsKey('providerId') !=
        other._$data.containsKey('providerId')) {
      return false;
    }
    if (l$providerId != lOther$providerId) {
      return false;
    }
    final l$providerUserId = providerUserId;
    final lOther$providerUserId = other.providerUserId;
    if (_$data.containsKey('providerUserId') !=
        other._$data.containsKey('providerUserId')) {
      return false;
    }
    if (l$providerUserId != lOther$providerUserId) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (_$data.containsKey('refreshToken') !=
        other._$data.containsKey('refreshToken')) {
      return false;
    }
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$accessToken = accessToken;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$providerId = providerId;
    final l$providerUserId = providerUserId;
    final l$refreshToken = refreshToken;
    final l$updatedAt = updatedAt;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('accessToken') ? l$accessToken : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('providerId') ? l$providerId : const {},
      _$data.containsKey('providerUserId') ? l$providerUserId : const {},
      _$data.containsKey('refreshToken') ? l$refreshToken : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_set_input<TRes> {
  factory CopyWith$Input$authUserProviders_set_input(
    Input$authUserProviders_set_input instance,
    TRes Function(Input$authUserProviders_set_input) then,
  ) = _CopyWithImpl$Input$authUserProviders_set_input;

  factory CopyWith$Input$authUserProviders_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_set_input;

  TRes call({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authUserProviders_set_input<TRes>
    implements CopyWith$Input$authUserProviders_set_input<TRes> {
  _CopyWithImpl$Input$authUserProviders_set_input(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_set_input _instance;

  final TRes Function(Input$authUserProviders_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? accessToken = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? providerId = _undefined,
    Object? providerUserId = _undefined,
    Object? refreshToken = _undefined,
    Object? updatedAt = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserProviders_set_input._({
        ..._instance._$data,
        if (accessToken != _undefined) 'accessToken': (accessToken as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (providerId != _undefined) 'providerId': (providerId as String?),
        if (providerUserId != _undefined)
          'providerUserId': (providerUserId as String?),
        if (refreshToken != _undefined)
          'refreshToken': (refreshToken as String?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authUserProviders_set_input<TRes>
    implements CopyWith$Input$authUserProviders_set_input<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_set_input(this._res);

  TRes _res;

  call({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    UUID? userId,
  }) =>
      _res;
}

class Input$authUserProviders_stream_cursor_input {
  factory Input$authUserProviders_stream_cursor_input({
    required Input$authUserProviders_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authUserProviders_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authUserProviders_stream_cursor_input._(this._$data);

  factory Input$authUserProviders_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authUserProviders_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authUserProviders_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserProviders_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$authUserProviders_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_stream_cursor_input<
          Input$authUserProviders_stream_cursor_input>
      get copyWith => CopyWith$Input$authUserProviders_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_stream_cursor_input<TRes> {
  factory CopyWith$Input$authUserProviders_stream_cursor_input(
    Input$authUserProviders_stream_cursor_input instance,
    TRes Function(Input$authUserProviders_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authUserProviders_stream_cursor_input;

  factory CopyWith$Input$authUserProviders_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_stream_cursor_input;

  TRes call({
    Input$authUserProviders_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authUserProviders_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$authUserProviders_stream_cursor_input<TRes>
    implements CopyWith$Input$authUserProviders_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authUserProviders_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_stream_cursor_input _instance;

  final TRes Function(Input$authUserProviders_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authUserProviders_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$authUserProviders_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authUserProviders_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authUserProviders_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_stream_cursor_input<TRes>
    implements CopyWith$Input$authUserProviders_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authUserProviders_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authUserProviders_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$authUserProviders_stream_cursor_value_input.stub(_res);
}

class Input$authUserProviders_stream_cursor_value_input {
  factory Input$authUserProviders_stream_cursor_value_input({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    UUID? userId,
  }) =>
      Input$authUserProviders_stream_cursor_value_input._({
        if (accessToken != null) r'accessToken': accessToken,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (providerId != null) r'providerId': providerId,
        if (providerUserId != null) r'providerUserId': providerUserId,
        if (refreshToken != null) r'refreshToken': refreshToken,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (userId != null) r'userId': userId,
      });

  Input$authUserProviders_stream_cursor_value_input._(this._$data);

  factory Input$authUserProviders_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('accessToken')) {
      final l$accessToken = data['accessToken'];
      result$data['accessToken'] = (l$accessToken as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('providerId')) {
      final l$providerId = data['providerId'];
      result$data['providerId'] = (l$providerId as String?);
    }
    if (data.containsKey('providerUserId')) {
      final l$providerUserId = data['providerUserId'];
      result$data['providerUserId'] = (l$providerUserId as String?);
    }
    if (data.containsKey('refreshToken')) {
      final l$refreshToken = data['refreshToken'];
      result$data['refreshToken'] = (l$refreshToken as String?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserProviders_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get accessToken => (_$data['accessToken'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get providerId => (_$data['providerId'] as String?);
  String? get providerUserId => (_$data['providerUserId'] as String?);
  String? get refreshToken => (_$data['refreshToken'] as String?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('accessToken')) {
      final l$accessToken = accessToken;
      result$data['accessToken'] = l$accessToken;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('providerId')) {
      final l$providerId = providerId;
      result$data['providerId'] = l$providerId;
    }
    if (_$data.containsKey('providerUserId')) {
      final l$providerUserId = providerUserId;
      result$data['providerUserId'] = l$providerUserId;
    }
    if (_$data.containsKey('refreshToken')) {
      final l$refreshToken = refreshToken;
      result$data['refreshToken'] = l$refreshToken;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserProviders_stream_cursor_value_input<
          Input$authUserProviders_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$authUserProviders_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$accessToken = accessToken;
    final lOther$accessToken = other.accessToken;
    if (_$data.containsKey('accessToken') !=
        other._$data.containsKey('accessToken')) {
      return false;
    }
    if (l$accessToken != lOther$accessToken) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$providerId = providerId;
    final lOther$providerId = other.providerId;
    if (_$data.containsKey('providerId') !=
        other._$data.containsKey('providerId')) {
      return false;
    }
    if (l$providerId != lOther$providerId) {
      return false;
    }
    final l$providerUserId = providerUserId;
    final lOther$providerUserId = other.providerUserId;
    if (_$data.containsKey('providerUserId') !=
        other._$data.containsKey('providerUserId')) {
      return false;
    }
    if (l$providerUserId != lOther$providerUserId) {
      return false;
    }
    final l$refreshToken = refreshToken;
    final lOther$refreshToken = other.refreshToken;
    if (_$data.containsKey('refreshToken') !=
        other._$data.containsKey('refreshToken')) {
      return false;
    }
    if (l$refreshToken != lOther$refreshToken) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$accessToken = accessToken;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$providerId = providerId;
    final l$providerUserId = providerUserId;
    final l$refreshToken = refreshToken;
    final l$updatedAt = updatedAt;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('accessToken') ? l$accessToken : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('providerId') ? l$providerId : const {},
      _$data.containsKey('providerUserId') ? l$providerUserId : const {},
      _$data.containsKey('refreshToken') ? l$refreshToken : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$authUserProviders_stream_cursor_value_input(
    Input$authUserProviders_stream_cursor_value_input instance,
    TRes Function(Input$authUserProviders_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authUserProviders_stream_cursor_value_input;

  factory CopyWith$Input$authUserProviders_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_stream_cursor_value_input;

  TRes call({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authUserProviders_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$authUserProviders_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authUserProviders_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_stream_cursor_value_input _instance;

  final TRes Function(Input$authUserProviders_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? accessToken = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? providerId = _undefined,
    Object? providerUserId = _undefined,
    Object? refreshToken = _undefined,
    Object? updatedAt = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserProviders_stream_cursor_value_input._({
        ..._instance._$data,
        if (accessToken != _undefined) 'accessToken': (accessToken as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (providerId != _undefined) 'providerId': (providerId as String?),
        if (providerUserId != _undefined)
          'providerUserId': (providerUserId as String?),
        if (refreshToken != _undefined)
          'refreshToken': (refreshToken as String?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authUserProviders_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$authUserProviders_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    String? accessToken,
    DateTime? createdAt,
    UUID? id,
    String? providerId,
    String? providerUserId,
    String? refreshToken,
    DateTime? updatedAt,
    UUID? userId,
  }) =>
      _res;
}

class Input$authUserProviders_updates {
  factory Input$authUserProviders_updates({
    Input$authUserProviders_set_input? $_set,
    required Input$authUserProviders_bool_exp where,
  }) =>
      Input$authUserProviders_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authUserProviders_updates._(this._$data);

  factory Input$authUserProviders_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authUserProviders_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$authUserProviders_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$authUserProviders_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserProviders_set_input? get $_set =>
      (_$data['_set'] as Input$authUserProviders_set_input?);
  Input$authUserProviders_bool_exp get where =>
      (_$data['where'] as Input$authUserProviders_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authUserProviders_updates<Input$authUserProviders_updates>
      get copyWith => CopyWith$Input$authUserProviders_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserProviders_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authUserProviders_updates<TRes> {
  factory CopyWith$Input$authUserProviders_updates(
    Input$authUserProviders_updates instance,
    TRes Function(Input$authUserProviders_updates) then,
  ) = _CopyWithImpl$Input$authUserProviders_updates;

  factory CopyWith$Input$authUserProviders_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserProviders_updates;

  TRes call({
    Input$authUserProviders_set_input? $_set,
    Input$authUserProviders_bool_exp? where,
  });
  CopyWith$Input$authUserProviders_set_input<TRes> get $_set;
  CopyWith$Input$authUserProviders_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authUserProviders_updates<TRes>
    implements CopyWith$Input$authUserProviders_updates<TRes> {
  _CopyWithImpl$Input$authUserProviders_updates(
    this._instance,
    this._then,
  );

  final Input$authUserProviders_updates _instance;

  final TRes Function(Input$authUserProviders_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authUserProviders_updates._({
        ..._instance._$data,
        if ($_set != _undefined)
          '_set': ($_set as Input$authUserProviders_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authUserProviders_bool_exp),
      }));
  CopyWith$Input$authUserProviders_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authUserProviders_set_input.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authUserProviders_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authUserProviders_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authUserProviders_updates<TRes>
    implements CopyWith$Input$authUserProviders_updates<TRes> {
  _CopyWithStubImpl$Input$authUserProviders_updates(this._res);

  TRes _res;

  call({
    Input$authUserProviders_set_input? $_set,
    Input$authUserProviders_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authUserProviders_set_input<TRes> get $_set =>
      CopyWith$Input$authUserProviders_set_input.stub(_res);
  CopyWith$Input$authUserProviders_bool_exp<TRes> get where =>
      CopyWith$Input$authUserProviders_bool_exp.stub(_res);
}

class Input$authUserRoles_aggregate_bool_exp {
  factory Input$authUserRoles_aggregate_bool_exp(
          {Input$authUserRoles_aggregate_bool_exp_count? count}) =>
      Input$authUserRoles_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$authUserRoles_aggregate_bool_exp._(this._$data);

  factory Input$authUserRoles_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$authUserRoles_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$authUserRoles_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserRoles_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$authUserRoles_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_aggregate_bool_exp<
          Input$authUserRoles_aggregate_bool_exp>
      get copyWith => CopyWith$Input$authUserRoles_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$authUserRoles_aggregate_bool_exp(
    Input$authUserRoles_aggregate_bool_exp instance,
    TRes Function(Input$authUserRoles_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$authUserRoles_aggregate_bool_exp;

  factory CopyWith$Input$authUserRoles_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_aggregate_bool_exp;

  TRes call({Input$authUserRoles_aggregate_bool_exp_count? count});
  CopyWith$Input$authUserRoles_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$authUserRoles_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$authUserRoles_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_aggregate_bool_exp _instance;

  final TRes Function(Input$authUserRoles_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$authUserRoles_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$authUserRoles_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$authUserRoles_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$authUserRoles_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$authUserRoles_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$authUserRoles_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$authUserRoles_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$authUserRoles_aggregate_bool_exp_count.stub(_res);
}

class Input$authUserRoles_aggregate_bool_exp_count {
  factory Input$authUserRoles_aggregate_bool_exp_count({
    List<Enum$authUserRoles_select_column>? arguments,
    bool? distinct,
    Input$authUserRoles_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$authUserRoles_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$authUserRoles_aggregate_bool_exp_count._(this._$data);

  factory Input$authUserRoles_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$authUserRoles_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$authUserRoles_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$authUserRoles_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$authUserRoles_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$authUserRoles_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$authUserRoles_bool_exp? get filter =>
      (_$data['filter'] as Input$authUserRoles_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$authUserRoles_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$authUserRoles_aggregate_bool_exp_count<
          Input$authUserRoles_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$authUserRoles_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$authUserRoles_aggregate_bool_exp_count(
    Input$authUserRoles_aggregate_bool_exp_count instance,
    TRes Function(Input$authUserRoles_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$authUserRoles_aggregate_bool_exp_count;

  factory CopyWith$Input$authUserRoles_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_aggregate_bool_exp_count;

  TRes call({
    List<Enum$authUserRoles_select_column>? arguments,
    bool? distinct,
    Input$authUserRoles_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$authUserRoles_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$authUserRoles_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$authUserRoles_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$authUserRoles_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_aggregate_bool_exp_count _instance;

  final TRes Function(Input$authUserRoles_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$authUserRoles_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$authUserRoles_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$authUserRoles_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$authUserRoles_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$authUserRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$authUserRoles_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$authUserRoles_select_column>? arguments,
    bool? distinct,
    Input$authUserRoles_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$authUserRoles_bool_exp<TRes> get filter =>
      CopyWith$Input$authUserRoles_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$authUserRoles_aggregate_order_by {
  factory Input$authUserRoles_aggregate_order_by({
    Enum$order_by? count,
    Input$authUserRoles_max_order_by? max,
    Input$authUserRoles_min_order_by? min,
  }) =>
      Input$authUserRoles_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$authUserRoles_aggregate_order_by._(this._$data);

  factory Input$authUserRoles_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$authUserRoles_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$authUserRoles_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    return Input$authUserRoles_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$authUserRoles_max_order_by? get max =>
      (_$data['max'] as Input$authUserRoles_max_order_by?);
  Input$authUserRoles_min_order_by? get min =>
      (_$data['min'] as Input$authUserRoles_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_aggregate_order_by<
          Input$authUserRoles_aggregate_order_by>
      get copyWith => CopyWith$Input$authUserRoles_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_aggregate_order_by<TRes> {
  factory CopyWith$Input$authUserRoles_aggregate_order_by(
    Input$authUserRoles_aggregate_order_by instance,
    TRes Function(Input$authUserRoles_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$authUserRoles_aggregate_order_by;

  factory CopyWith$Input$authUserRoles_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$authUserRoles_max_order_by? max,
    Input$authUserRoles_min_order_by? min,
  });
  CopyWith$Input$authUserRoles_max_order_by<TRes> get max;
  CopyWith$Input$authUserRoles_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$authUserRoles_aggregate_order_by<TRes>
    implements CopyWith$Input$authUserRoles_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$authUserRoles_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_aggregate_order_by _instance;

  final TRes Function(Input$authUserRoles_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$authUserRoles_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$authUserRoles_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$authUserRoles_min_order_by?),
      }));
  CopyWith$Input$authUserRoles_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$authUserRoles_max_order_by.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$authUserRoles_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$authUserRoles_min_order_by.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_min_order_by(
            local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_aggregate_order_by<TRes>
    implements CopyWith$Input$authUserRoles_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$authUserRoles_max_order_by? max,
    Input$authUserRoles_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$authUserRoles_max_order_by<TRes> get max =>
      CopyWith$Input$authUserRoles_max_order_by.stub(_res);
  CopyWith$Input$authUserRoles_min_order_by<TRes> get min =>
      CopyWith$Input$authUserRoles_min_order_by.stub(_res);
}

class Input$authUserRoles_arr_rel_insert_input {
  factory Input$authUserRoles_arr_rel_insert_input({
    required List<Input$authUserRoles_insert_input> data,
    Input$authUserRoles_on_conflict? on_conflict,
  }) =>
      Input$authUserRoles_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$authUserRoles_arr_rel_insert_input._(this._$data);

  factory Input$authUserRoles_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$authUserRoles_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$authUserRoles_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$authUserRoles_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authUserRoles_insert_input> get data =>
      (_$data['data'] as List<Input$authUserRoles_insert_input>);
  Input$authUserRoles_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$authUserRoles_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_arr_rel_insert_input<
          Input$authUserRoles_arr_rel_insert_input>
      get copyWith => CopyWith$Input$authUserRoles_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$authUserRoles_arr_rel_insert_input(
    Input$authUserRoles_arr_rel_insert_input instance,
    TRes Function(Input$authUserRoles_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$authUserRoles_arr_rel_insert_input;

  factory CopyWith$Input$authUserRoles_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_arr_rel_insert_input;

  TRes call({
    List<Input$authUserRoles_insert_input>? data,
    Input$authUserRoles_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$authUserRoles_insert_input> Function(
              Iterable<
                  CopyWith$Input$authUserRoles_insert_input<
                      Input$authUserRoles_insert_input>>)
          _fn);
  CopyWith$Input$authUserRoles_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$authUserRoles_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$authUserRoles_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_arr_rel_insert_input _instance;

  final TRes Function(Input$authUserRoles_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$authUserRoles_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$authUserRoles_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$authUserRoles_on_conflict?),
      }));
  TRes data(
          Iterable<Input$authUserRoles_insert_input> Function(
                  Iterable<
                      CopyWith$Input$authUserRoles_insert_input<
                          Input$authUserRoles_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data
              .map((e) => CopyWith$Input$authUserRoles_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$authUserRoles_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$authUserRoles_on_conflict.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$authUserRoles_insert_input>? data,
    Input$authUserRoles_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$authUserRoles_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$authUserRoles_on_conflict.stub(_res);
}

class Input$authUserRoles_bool_exp {
  factory Input$authUserRoles_bool_exp({
    List<Input$authUserRoles_bool_exp>? $_and,
    Input$authUserRoles_bool_exp? $_not,
    List<Input$authUserRoles_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? createdAt,
    Input$uuid_comparison_exp? id,
    Input$String_comparison_exp? role,
    Input$authRoles_bool_exp? roleByRole,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      Input$authUserRoles_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (role != null) r'role': role,
        if (roleByRole != null) r'roleByRole': roleByRole,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserRoles_bool_exp._(this._$data);

  factory Input$authUserRoles_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$authUserRoles_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authUserRoles_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$authUserRoles_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$createdAt as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$uuid_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = l$role == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$role as Map<String, dynamic>));
    }
    if (data.containsKey('roleByRole')) {
      final l$roleByRole = data['roleByRole'];
      result$data['roleByRole'] = l$roleByRole == null
          ? null
          : Input$authRoles_bool_exp.fromJson(
              (l$roleByRole as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$userId as Map<String, dynamic>));
    }
    return Input$authUserRoles_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authUserRoles_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authUserRoles_bool_exp>?);
  Input$authUserRoles_bool_exp? get $_not =>
      (_$data['_not'] as Input$authUserRoles_bool_exp?);
  List<Input$authUserRoles_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authUserRoles_bool_exp>?);
  Input$timestamptz_comparison_exp? get createdAt =>
      (_$data['createdAt'] as Input$timestamptz_comparison_exp?);
  Input$uuid_comparison_exp? get id =>
      (_$data['id'] as Input$uuid_comparison_exp?);
  Input$String_comparison_exp? get role =>
      (_$data['role'] as Input$String_comparison_exp?);
  Input$authRoles_bool_exp? get roleByRole =>
      (_$data['roleByRole'] as Input$authRoles_bool_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get userId =>
      (_$data['userId'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role?.toJson();
    }
    if (_$data.containsKey('roleByRole')) {
      final l$roleByRole = roleByRole;
      result$data['roleByRole'] = l$roleByRole?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_bool_exp<Input$authUserRoles_bool_exp>
      get copyWith => CopyWith$Input$authUserRoles_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$roleByRole = roleByRole;
    final lOther$roleByRole = other.roleByRole;
    if (_$data.containsKey('roleByRole') !=
        other._$data.containsKey('roleByRole')) {
      return false;
    }
    if (l$roleByRole != lOther$roleByRole) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$createdAt = createdAt;
    final l$id = id;
    final l$role = role;
    final l$roleByRole = roleByRole;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('roleByRole') ? l$roleByRole : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_bool_exp<TRes> {
  factory CopyWith$Input$authUserRoles_bool_exp(
    Input$authUserRoles_bool_exp instance,
    TRes Function(Input$authUserRoles_bool_exp) then,
  ) = _CopyWithImpl$Input$authUserRoles_bool_exp;

  factory CopyWith$Input$authUserRoles_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_bool_exp;

  TRes call({
    List<Input$authUserRoles_bool_exp>? $_and,
    Input$authUserRoles_bool_exp? $_not,
    List<Input$authUserRoles_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? createdAt,
    Input$uuid_comparison_exp? id,
    Input$String_comparison_exp? role,
    Input$authRoles_bool_exp? roleByRole,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  });
  TRes $_and(
      Iterable<Input$authUserRoles_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authUserRoles_bool_exp<
                      Input$authUserRoles_bool_exp>>?)
          _fn);
  CopyWith$Input$authUserRoles_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authUserRoles_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authUserRoles_bool_exp<
                      Input$authUserRoles_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt;
  CopyWith$Input$uuid_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get role;
  CopyWith$Input$authRoles_bool_exp<TRes> get roleByRole;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get userId;
}

class _CopyWithImpl$Input$authUserRoles_bool_exp<TRes>
    implements CopyWith$Input$authUserRoles_bool_exp<TRes> {
  _CopyWithImpl$Input$authUserRoles_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_bool_exp _instance;

  final TRes Function(Input$authUserRoles_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? role = _undefined,
    Object? roleByRole = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserRoles_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authUserRoles_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$authUserRoles_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authUserRoles_bool_exp>?),
        if (createdAt != _undefined)
          'createdAt': (createdAt as Input$timestamptz_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$uuid_comparison_exp?),
        if (role != _undefined) 'role': (role as Input$String_comparison_exp?),
        if (roleByRole != _undefined)
          'roleByRole': (roleByRole as Input$authRoles_bool_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (userId != _undefined)
          'userId': (userId as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$authUserRoles_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authUserRoles_bool_exp<
                          Input$authUserRoles_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(
              _instance.$_and?.map((e) => CopyWith$Input$authUserRoles_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authUserRoles_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authUserRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authUserRoles_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authUserRoles_bool_exp<
                          Input$authUserRoles_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(
              _instance.$_or?.map((e) => CopyWith$Input$authUserRoles_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt {
    final local$createdAt = _instance.createdAt;
    return local$createdAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$createdAt, (e) => call(createdAt: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get role {
    final local$role = _instance.role;
    return local$role == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$role, (e) => call(role: e));
  }

  CopyWith$Input$authRoles_bool_exp<TRes> get roleByRole {
    final local$roleByRole = _instance.roleByRole;
    return local$roleByRole == null
        ? CopyWith$Input$authRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRoles_bool_exp(
            local$roleByRole, (e) => call(roleByRole: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get userId {
    final local$userId = _instance.userId;
    return local$userId == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$userId, (e) => call(userId: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_bool_exp<TRes>
    implements CopyWith$Input$authUserRoles_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authUserRoles_bool_exp>? $_and,
    Input$authUserRoles_bool_exp? $_not,
    List<Input$authUserRoles_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? createdAt,
    Input$uuid_comparison_exp? id,
    Input$String_comparison_exp? role,
    Input$authRoles_bool_exp? roleByRole,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authUserRoles_bool_exp<TRes> get $_not =>
      CopyWith$Input$authUserRoles_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get role =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$authRoles_bool_exp<TRes> get roleByRole =>
      CopyWith$Input$authRoles_bool_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get userId =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$authUserRoles_insert_input {
  factory Input$authUserRoles_insert_input({
    DateTime? createdAt,
    UUID? id,
    String? role,
    Input$authRoles_obj_rel_insert_input? roleByRole,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      Input$authUserRoles_insert_input._({
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (role != null) r'role': role,
        if (roleByRole != null) r'roleByRole': roleByRole,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserRoles_insert_input._(this._$data);

  factory Input$authUserRoles_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = (l$role as String?);
    }
    if (data.containsKey('roleByRole')) {
      final l$roleByRole = data['roleByRole'];
      result$data['roleByRole'] = l$roleByRole == null
          ? null
          : Input$authRoles_obj_rel_insert_input.fromJson(
              (l$roleByRole as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserRoles_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get role => (_$data['role'] as String?);
  Input$authRoles_obj_rel_insert_input? get roleByRole =>
      (_$data['roleByRole'] as Input$authRoles_obj_rel_insert_input?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role;
    }
    if (_$data.containsKey('roleByRole')) {
      final l$roleByRole = roleByRole;
      result$data['roleByRole'] = l$roleByRole?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_insert_input<Input$authUserRoles_insert_input>
      get copyWith => CopyWith$Input$authUserRoles_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$roleByRole = roleByRole;
    final lOther$roleByRole = other.roleByRole;
    if (_$data.containsKey('roleByRole') !=
        other._$data.containsKey('roleByRole')) {
      return false;
    }
    if (l$roleByRole != lOther$roleByRole) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$id = id;
    final l$role = role;
    final l$roleByRole = roleByRole;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('roleByRole') ? l$roleByRole : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_insert_input<TRes> {
  factory CopyWith$Input$authUserRoles_insert_input(
    Input$authUserRoles_insert_input instance,
    TRes Function(Input$authUserRoles_insert_input) then,
  ) = _CopyWithImpl$Input$authUserRoles_insert_input;

  factory CopyWith$Input$authUserRoles_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_insert_input;

  TRes call({
    DateTime? createdAt,
    UUID? id,
    String? role,
    Input$authRoles_obj_rel_insert_input? roleByRole,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  });
  CopyWith$Input$authRoles_obj_rel_insert_input<TRes> get roleByRole;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$authUserRoles_insert_input<TRes>
    implements CopyWith$Input$authUserRoles_insert_input<TRes> {
  _CopyWithImpl$Input$authUserRoles_insert_input(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_insert_input _instance;

  final TRes Function(Input$authUserRoles_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? role = _undefined,
    Object? roleByRole = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserRoles_insert_input._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (role != _undefined) 'role': (role as String?),
        if (roleByRole != _undefined)
          'roleByRole': (roleByRole as Input$authRoles_obj_rel_insert_input?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
  CopyWith$Input$authRoles_obj_rel_insert_input<TRes> get roleByRole {
    final local$roleByRole = _instance.roleByRole;
    return local$roleByRole == null
        ? CopyWith$Input$authRoles_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$authRoles_obj_rel_insert_input(
            local$roleByRole, (e) => call(roleByRole: e));
  }

  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_insert_input<TRes>
    implements CopyWith$Input$authUserRoles_insert_input<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_insert_input(this._res);

  TRes _res;

  call({
    DateTime? createdAt,
    UUID? id,
    String? role,
    Input$authRoles_obj_rel_insert_input? roleByRole,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      _res;
  CopyWith$Input$authRoles_obj_rel_insert_input<TRes> get roleByRole =>
      CopyWith$Input$authRoles_obj_rel_insert_input.stub(_res);
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$authUserRoles_max_order_by {
  factory Input$authUserRoles_max_order_by({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Enum$order_by? userId,
  }) =>
      Input$authUserRoles_max_order_by._({
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (role != null) r'role': role,
        if (userId != null) r'userId': userId,
      });

  Input$authUserRoles_max_order_by._(this._$data);

  factory Input$authUserRoles_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] =
          l$role == null ? null : fromJson$Enum$order_by((l$role as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserRoles_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get role => (_$data['role'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] =
          l$role == null ? null : toJson$Enum$order_by(l$role);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_max_order_by<Input$authUserRoles_max_order_by>
      get copyWith => CopyWith$Input$authUserRoles_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$id = id;
    final l$role = role;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_max_order_by<TRes> {
  factory CopyWith$Input$authUserRoles_max_order_by(
    Input$authUserRoles_max_order_by instance,
    TRes Function(Input$authUserRoles_max_order_by) then,
  ) = _CopyWithImpl$Input$authUserRoles_max_order_by;

  factory CopyWith$Input$authUserRoles_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_max_order_by;

  TRes call({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authUserRoles_max_order_by<TRes>
    implements CopyWith$Input$authUserRoles_max_order_by<TRes> {
  _CopyWithImpl$Input$authUserRoles_max_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_max_order_by _instance;

  final TRes Function(Input$authUserRoles_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? role = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserRoles_max_order_by._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (role != _undefined) 'role': (role as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserRoles_max_order_by<TRes>
    implements CopyWith$Input$authUserRoles_max_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authUserRoles_min_order_by {
  factory Input$authUserRoles_min_order_by({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Enum$order_by? userId,
  }) =>
      Input$authUserRoles_min_order_by._({
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (role != null) r'role': role,
        if (userId != null) r'userId': userId,
      });

  Input$authUserRoles_min_order_by._(this._$data);

  factory Input$authUserRoles_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] =
          l$role == null ? null : fromJson$Enum$order_by((l$role as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserRoles_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get role => (_$data['role'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] =
          l$role == null ? null : toJson$Enum$order_by(l$role);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_min_order_by<Input$authUserRoles_min_order_by>
      get copyWith => CopyWith$Input$authUserRoles_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$id = id;
    final l$role = role;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_min_order_by<TRes> {
  factory CopyWith$Input$authUserRoles_min_order_by(
    Input$authUserRoles_min_order_by instance,
    TRes Function(Input$authUserRoles_min_order_by) then,
  ) = _CopyWithImpl$Input$authUserRoles_min_order_by;

  factory CopyWith$Input$authUserRoles_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_min_order_by;

  TRes call({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authUserRoles_min_order_by<TRes>
    implements CopyWith$Input$authUserRoles_min_order_by<TRes> {
  _CopyWithImpl$Input$authUserRoles_min_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_min_order_by _instance;

  final TRes Function(Input$authUserRoles_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? role = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserRoles_min_order_by._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (role != _undefined) 'role': (role as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserRoles_min_order_by<TRes>
    implements CopyWith$Input$authUserRoles_min_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authUserRoles_on_conflict {
  factory Input$authUserRoles_on_conflict({
    required Enum$authUserRoles_constraint constraint,
    required List<Enum$authUserRoles_update_column> update_columns,
    Input$authUserRoles_bool_exp? where,
  }) =>
      Input$authUserRoles_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authUserRoles_on_conflict._(this._$data);

  factory Input$authUserRoles_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$authUserRoles_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$authUserRoles_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authUserRoles_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authUserRoles_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authUserRoles_constraint get constraint =>
      (_$data['constraint'] as Enum$authUserRoles_constraint);
  List<Enum$authUserRoles_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$authUserRoles_update_column>);
  Input$authUserRoles_bool_exp? get where =>
      (_$data['where'] as Input$authUserRoles_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$authUserRoles_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authUserRoles_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_on_conflict<Input$authUserRoles_on_conflict>
      get copyWith => CopyWith$Input$authUserRoles_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_on_conflict<TRes> {
  factory CopyWith$Input$authUserRoles_on_conflict(
    Input$authUserRoles_on_conflict instance,
    TRes Function(Input$authUserRoles_on_conflict) then,
  ) = _CopyWithImpl$Input$authUserRoles_on_conflict;

  factory CopyWith$Input$authUserRoles_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_on_conflict;

  TRes call({
    Enum$authUserRoles_constraint? constraint,
    List<Enum$authUserRoles_update_column>? update_columns,
    Input$authUserRoles_bool_exp? where,
  });
  CopyWith$Input$authUserRoles_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authUserRoles_on_conflict<TRes>
    implements CopyWith$Input$authUserRoles_on_conflict<TRes> {
  _CopyWithImpl$Input$authUserRoles_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_on_conflict _instance;

  final TRes Function(Input$authUserRoles_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authUserRoles_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authUserRoles_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$authUserRoles_update_column>),
        if (where != _undefined)
          'where': (where as Input$authUserRoles_bool_exp?),
      }));
  CopyWith$Input$authUserRoles_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authUserRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_on_conflict<TRes>
    implements CopyWith$Input$authUserRoles_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authUserRoles_constraint? constraint,
    List<Enum$authUserRoles_update_column>? update_columns,
    Input$authUserRoles_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authUserRoles_bool_exp<TRes> get where =>
      CopyWith$Input$authUserRoles_bool_exp.stub(_res);
}

class Input$authUserRoles_order_by {
  factory Input$authUserRoles_order_by({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Input$authRoles_order_by? roleByRole,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      Input$authUserRoles_order_by._({
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (role != null) r'role': role,
        if (roleByRole != null) r'roleByRole': roleByRole,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserRoles_order_by._(this._$data);

  factory Input$authUserRoles_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] =
          l$role == null ? null : fromJson$Enum$order_by((l$role as String));
    }
    if (data.containsKey('roleByRole')) {
      final l$roleByRole = data['roleByRole'];
      result$data['roleByRole'] = l$roleByRole == null
          ? null
          : Input$authRoles_order_by.fromJson(
              (l$roleByRole as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserRoles_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get role => (_$data['role'] as Enum$order_by?);
  Input$authRoles_order_by? get roleByRole =>
      (_$data['roleByRole'] as Input$authRoles_order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] =
          l$role == null ? null : toJson$Enum$order_by(l$role);
    }
    if (_$data.containsKey('roleByRole')) {
      final l$roleByRole = roleByRole;
      result$data['roleByRole'] = l$roleByRole?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_order_by<Input$authUserRoles_order_by>
      get copyWith => CopyWith$Input$authUserRoles_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$roleByRole = roleByRole;
    final lOther$roleByRole = other.roleByRole;
    if (_$data.containsKey('roleByRole') !=
        other._$data.containsKey('roleByRole')) {
      return false;
    }
    if (l$roleByRole != lOther$roleByRole) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$id = id;
    final l$role = role;
    final l$roleByRole = roleByRole;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('roleByRole') ? l$roleByRole : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_order_by<TRes> {
  factory CopyWith$Input$authUserRoles_order_by(
    Input$authUserRoles_order_by instance,
    TRes Function(Input$authUserRoles_order_by) then,
  ) = _CopyWithImpl$Input$authUserRoles_order_by;

  factory CopyWith$Input$authUserRoles_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_order_by;

  TRes call({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Input$authRoles_order_by? roleByRole,
    Input$users_order_by? user,
    Enum$order_by? userId,
  });
  CopyWith$Input$authRoles_order_by<TRes> get roleByRole;
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$authUserRoles_order_by<TRes>
    implements CopyWith$Input$authUserRoles_order_by<TRes> {
  _CopyWithImpl$Input$authUserRoles_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_order_by _instance;

  final TRes Function(Input$authUserRoles_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? role = _undefined,
    Object? roleByRole = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserRoles_order_by._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (role != _undefined) 'role': (role as Enum$order_by?),
        if (roleByRole != _undefined)
          'roleByRole': (roleByRole as Input$authRoles_order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
  CopyWith$Input$authRoles_order_by<TRes> get roleByRole {
    final local$roleByRole = _instance.roleByRole;
    return local$roleByRole == null
        ? CopyWith$Input$authRoles_order_by.stub(_then(_instance))
        : CopyWith$Input$authRoles_order_by(
            local$roleByRole, (e) => call(roleByRole: e));
  }

  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_order_by<TRes>
    implements CopyWith$Input$authUserRoles_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? createdAt,
    Enum$order_by? id,
    Enum$order_by? role,
    Input$authRoles_order_by? roleByRole,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      _res;
  CopyWith$Input$authRoles_order_by<TRes> get roleByRole =>
      CopyWith$Input$authRoles_order_by.stub(_res);
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$authUserRoles_pk_columns_input {
  factory Input$authUserRoles_pk_columns_input({required UUID id}) =>
      Input$authUserRoles_pk_columns_input._({
        r'id': id,
      });

  Input$authUserRoles_pk_columns_input._(this._$data);

  factory Input$authUserRoles_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = uuidFromJson(l$id);
    return Input$authUserRoles_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get id => (_$data['id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = uuidToJson(l$id);
    return result$data;
  }

  CopyWith$Input$authUserRoles_pk_columns_input<
          Input$authUserRoles_pk_columns_input>
      get copyWith => CopyWith$Input$authUserRoles_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$authUserRoles_pk_columns_input<TRes> {
  factory CopyWith$Input$authUserRoles_pk_columns_input(
    Input$authUserRoles_pk_columns_input instance,
    TRes Function(Input$authUserRoles_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authUserRoles_pk_columns_input;

  factory CopyWith$Input$authUserRoles_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_pk_columns_input;

  TRes call({UUID? id});
}

class _CopyWithImpl$Input$authUserRoles_pk_columns_input<TRes>
    implements CopyWith$Input$authUserRoles_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authUserRoles_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_pk_columns_input _instance;

  final TRes Function(Input$authUserRoles_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authUserRoles_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as UUID),
      }));
}

class _CopyWithStubImpl$Input$authUserRoles_pk_columns_input<TRes>
    implements CopyWith$Input$authUserRoles_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_pk_columns_input(this._res);

  TRes _res;

  call({UUID? id}) => _res;
}

class Input$authUserRoles_set_input {
  factory Input$authUserRoles_set_input({
    DateTime? createdAt,
    UUID? id,
    String? role,
    UUID? userId,
  }) =>
      Input$authUserRoles_set_input._({
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (role != null) r'role': role,
        if (userId != null) r'userId': userId,
      });

  Input$authUserRoles_set_input._(this._$data);

  factory Input$authUserRoles_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = (l$role as String?);
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserRoles_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get role => (_$data['role'] as String?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role;
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_set_input<Input$authUserRoles_set_input>
      get copyWith => CopyWith$Input$authUserRoles_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$id = id;
    final l$role = role;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_set_input<TRes> {
  factory CopyWith$Input$authUserRoles_set_input(
    Input$authUserRoles_set_input instance,
    TRes Function(Input$authUserRoles_set_input) then,
  ) = _CopyWithImpl$Input$authUserRoles_set_input;

  factory CopyWith$Input$authUserRoles_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_set_input;

  TRes call({
    DateTime? createdAt,
    UUID? id,
    String? role,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authUserRoles_set_input<TRes>
    implements CopyWith$Input$authUserRoles_set_input<TRes> {
  _CopyWithImpl$Input$authUserRoles_set_input(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_set_input _instance;

  final TRes Function(Input$authUserRoles_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? role = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserRoles_set_input._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (role != _undefined) 'role': (role as String?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authUserRoles_set_input<TRes>
    implements CopyWith$Input$authUserRoles_set_input<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_set_input(this._res);

  TRes _res;

  call({
    DateTime? createdAt,
    UUID? id,
    String? role,
    UUID? userId,
  }) =>
      _res;
}

class Input$authUserRoles_stream_cursor_input {
  factory Input$authUserRoles_stream_cursor_input({
    required Input$authUserRoles_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authUserRoles_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authUserRoles_stream_cursor_input._(this._$data);

  factory Input$authUserRoles_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authUserRoles_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authUserRoles_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserRoles_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$authUserRoles_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_stream_cursor_input<
          Input$authUserRoles_stream_cursor_input>
      get copyWith => CopyWith$Input$authUserRoles_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_stream_cursor_input<TRes> {
  factory CopyWith$Input$authUserRoles_stream_cursor_input(
    Input$authUserRoles_stream_cursor_input instance,
    TRes Function(Input$authUserRoles_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authUserRoles_stream_cursor_input;

  factory CopyWith$Input$authUserRoles_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_stream_cursor_input;

  TRes call({
    Input$authUserRoles_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authUserRoles_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$authUserRoles_stream_cursor_input<TRes>
    implements CopyWith$Input$authUserRoles_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authUserRoles_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_stream_cursor_input _instance;

  final TRes Function(Input$authUserRoles_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authUserRoles_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$authUserRoles_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authUserRoles_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authUserRoles_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_stream_cursor_input<TRes>
    implements CopyWith$Input$authUserRoles_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authUserRoles_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authUserRoles_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$authUserRoles_stream_cursor_value_input.stub(_res);
}

class Input$authUserRoles_stream_cursor_value_input {
  factory Input$authUserRoles_stream_cursor_value_input({
    DateTime? createdAt,
    UUID? id,
    String? role,
    UUID? userId,
  }) =>
      Input$authUserRoles_stream_cursor_value_input._({
        if (createdAt != null) r'createdAt': createdAt,
        if (id != null) r'id': id,
        if (role != null) r'role': role,
        if (userId != null) r'userId': userId,
      });

  Input$authUserRoles_stream_cursor_value_input._(this._$data);

  factory Input$authUserRoles_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('role')) {
      final l$role = data['role'];
      result$data['role'] = (l$role as String?);
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserRoles_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get role => (_$data['role'] as String?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('role')) {
      final l$role = role;
      result$data['role'] = l$role;
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserRoles_stream_cursor_value_input<
          Input$authUserRoles_stream_cursor_value_input>
      get copyWith => CopyWith$Input$authUserRoles_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$role = role;
    final lOther$role = other.role;
    if (_$data.containsKey('role') != other._$data.containsKey('role')) {
      return false;
    }
    if (l$role != lOther$role) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$id = id;
    final l$role = role;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('role') ? l$role : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$authUserRoles_stream_cursor_value_input(
    Input$authUserRoles_stream_cursor_value_input instance,
    TRes Function(Input$authUserRoles_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authUserRoles_stream_cursor_value_input;

  factory CopyWith$Input$authUserRoles_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_stream_cursor_value_input;

  TRes call({
    DateTime? createdAt,
    UUID? id,
    String? role,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authUserRoles_stream_cursor_value_input<TRes>
    implements CopyWith$Input$authUserRoles_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authUserRoles_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_stream_cursor_value_input _instance;

  final TRes Function(Input$authUserRoles_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? id = _undefined,
    Object? role = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserRoles_stream_cursor_value_input._({
        ..._instance._$data,
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (id != _undefined) 'id': (id as UUID?),
        if (role != _undefined) 'role': (role as String?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authUserRoles_stream_cursor_value_input<TRes>
    implements CopyWith$Input$authUserRoles_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? createdAt,
    UUID? id,
    String? role,
    UUID? userId,
  }) =>
      _res;
}

class Input$authUserRoles_updates {
  factory Input$authUserRoles_updates({
    Input$authUserRoles_set_input? $_set,
    required Input$authUserRoles_bool_exp where,
  }) =>
      Input$authUserRoles_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authUserRoles_updates._(this._$data);

  factory Input$authUserRoles_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authUserRoles_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$authUserRoles_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$authUserRoles_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserRoles_set_input? get $_set =>
      (_$data['_set'] as Input$authUserRoles_set_input?);
  Input$authUserRoles_bool_exp get where =>
      (_$data['where'] as Input$authUserRoles_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authUserRoles_updates<Input$authUserRoles_updates>
      get copyWith => CopyWith$Input$authUserRoles_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserRoles_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authUserRoles_updates<TRes> {
  factory CopyWith$Input$authUserRoles_updates(
    Input$authUserRoles_updates instance,
    TRes Function(Input$authUserRoles_updates) then,
  ) = _CopyWithImpl$Input$authUserRoles_updates;

  factory CopyWith$Input$authUserRoles_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserRoles_updates;

  TRes call({
    Input$authUserRoles_set_input? $_set,
    Input$authUserRoles_bool_exp? where,
  });
  CopyWith$Input$authUserRoles_set_input<TRes> get $_set;
  CopyWith$Input$authUserRoles_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authUserRoles_updates<TRes>
    implements CopyWith$Input$authUserRoles_updates<TRes> {
  _CopyWithImpl$Input$authUserRoles_updates(
    this._instance,
    this._then,
  );

  final Input$authUserRoles_updates _instance;

  final TRes Function(Input$authUserRoles_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authUserRoles_updates._({
        ..._instance._$data,
        if ($_set != _undefined)
          '_set': ($_set as Input$authUserRoles_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authUserRoles_bool_exp),
      }));
  CopyWith$Input$authUserRoles_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authUserRoles_set_input.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authUserRoles_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authUserRoles_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authUserRoles_updates<TRes>
    implements CopyWith$Input$authUserRoles_updates<TRes> {
  _CopyWithStubImpl$Input$authUserRoles_updates(this._res);

  TRes _res;

  call({
    Input$authUserRoles_set_input? $_set,
    Input$authUserRoles_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authUserRoles_set_input<TRes> get $_set =>
      CopyWith$Input$authUserRoles_set_input.stub(_res);
  CopyWith$Input$authUserRoles_bool_exp<TRes> get where =>
      CopyWith$Input$authUserRoles_bool_exp.stub(_res);
}

class Input$authUserSecurityKeys_aggregate_bool_exp {
  factory Input$authUserSecurityKeys_aggregate_bool_exp(
          {Input$authUserSecurityKeys_aggregate_bool_exp_count? count}) =>
      Input$authUserSecurityKeys_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$authUserSecurityKeys_aggregate_bool_exp._(this._$data);

  factory Input$authUserSecurityKeys_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$authUserSecurityKeys_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$authUserSecurityKeys_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserSecurityKeys_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$authUserSecurityKeys_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp<
          Input$authUserSecurityKeys_aggregate_bool_exp>
      get copyWith => CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp(
    Input$authUserSecurityKeys_aggregate_bool_exp instance,
    TRes Function(Input$authUserSecurityKeys_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_aggregate_bool_exp;

  factory CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_bool_exp;

  TRes call({Input$authUserSecurityKeys_aggregate_bool_exp_count? count});
  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$authUserSecurityKeys_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_aggregate_bool_exp _instance;

  final TRes Function(Input$authUserSecurityKeys_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$authUserSecurityKeys_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count':
              (count as Input$authUserSecurityKeys_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_bool_exp<TRes>
    implements CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$authUserSecurityKeys_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count<TRes>
      get count =>
          CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count.stub(
              _res);
}

class Input$authUserSecurityKeys_aggregate_bool_exp_count {
  factory Input$authUserSecurityKeys_aggregate_bool_exp_count({
    List<Enum$authUserSecurityKeys_select_column>? arguments,
    bool? distinct,
    Input$authUserSecurityKeys_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$authUserSecurityKeys_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$authUserSecurityKeys_aggregate_bool_exp_count._(this._$data);

  factory Input$authUserSecurityKeys_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) =>
              fromJson$Enum$authUserSecurityKeys_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$authUserSecurityKeys_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$authUserSecurityKeys_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$authUserSecurityKeys_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$authUserSecurityKeys_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$authUserSecurityKeys_bool_exp? get filter =>
      (_$data['filter'] as Input$authUserSecurityKeys_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$authUserSecurityKeys_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count<
          Input$authUserSecurityKeys_aggregate_bool_exp_count>
      get copyWith =>
          CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count<
    TRes> {
  factory CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count(
    Input$authUserSecurityKeys_aggregate_bool_exp_count instance,
    TRes Function(Input$authUserSecurityKeys_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_aggregate_bool_exp_count;

  factory CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_bool_exp_count;

  TRes call({
    List<Enum$authUserSecurityKeys_select_column>? arguments,
    bool? distinct,
    Input$authUserSecurityKeys_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$authUserSecurityKeys_aggregate_bool_exp_count<TRes>
    implements
        CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_aggregate_bool_exp_count _instance;

  final TRes Function(Input$authUserSecurityKeys_aggregate_bool_exp_count)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments':
              (arguments as List<Enum$authUserSecurityKeys_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$authUserSecurityKeys_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserSecurityKeys_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_bool_exp_count<
        TRes>
    implements
        CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_bool_exp_count(
      this._res);

  TRes _res;

  call({
    List<Enum$authUserSecurityKeys_select_column>? arguments,
    bool? distinct,
    Input$authUserSecurityKeys_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get filter =>
      CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$authUserSecurityKeys_aggregate_order_by {
  factory Input$authUserSecurityKeys_aggregate_order_by({
    Input$authUserSecurityKeys_avg_order_by? avg,
    Enum$order_by? count,
    Input$authUserSecurityKeys_max_order_by? max,
    Input$authUserSecurityKeys_min_order_by? min,
    Input$authUserSecurityKeys_stddev_order_by? stddev,
    Input$authUserSecurityKeys_stddev_pop_order_by? stddev_pop,
    Input$authUserSecurityKeys_stddev_samp_order_by? stddev_samp,
    Input$authUserSecurityKeys_sum_order_by? sum,
    Input$authUserSecurityKeys_var_pop_order_by? var_pop,
    Input$authUserSecurityKeys_var_samp_order_by? var_samp,
    Input$authUserSecurityKeys_variance_order_by? variance,
  }) =>
      Input$authUserSecurityKeys_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$authUserSecurityKeys_aggregate_order_by._(this._$data);

  factory Input$authUserSecurityKeys_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$authUserSecurityKeys_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$authUserSecurityKeys_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$authUserSecurityKeys_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$authUserSecurityKeys_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$authUserSecurityKeys_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$authUserSecurityKeys_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$authUserSecurityKeys_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$authUserSecurityKeys_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$authUserSecurityKeys_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$authUserSecurityKeys_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$authUserSecurityKeys_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserSecurityKeys_avg_order_by? get avg =>
      (_$data['avg'] as Input$authUserSecurityKeys_avg_order_by?);
  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$authUserSecurityKeys_max_order_by? get max =>
      (_$data['max'] as Input$authUserSecurityKeys_max_order_by?);
  Input$authUserSecurityKeys_min_order_by? get min =>
      (_$data['min'] as Input$authUserSecurityKeys_min_order_by?);
  Input$authUserSecurityKeys_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$authUserSecurityKeys_stddev_order_by?);
  Input$authUserSecurityKeys_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$authUserSecurityKeys_stddev_pop_order_by?);
  Input$authUserSecurityKeys_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp']
          as Input$authUserSecurityKeys_stddev_samp_order_by?);
  Input$authUserSecurityKeys_sum_order_by? get sum =>
      (_$data['sum'] as Input$authUserSecurityKeys_sum_order_by?);
  Input$authUserSecurityKeys_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$authUserSecurityKeys_var_pop_order_by?);
  Input$authUserSecurityKeys_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$authUserSecurityKeys_var_samp_order_by?);
  Input$authUserSecurityKeys_variance_order_by? get variance =>
      (_$data['variance'] as Input$authUserSecurityKeys_variance_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_aggregate_order_by<
          Input$authUserSecurityKeys_aggregate_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_aggregate_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_aggregate_order_by(
    Input$authUserSecurityKeys_aggregate_order_by instance,
    TRes Function(Input$authUserSecurityKeys_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_aggregate_order_by;

  factory CopyWith$Input$authUserSecurityKeys_aggregate_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_order_by;

  TRes call({
    Input$authUserSecurityKeys_avg_order_by? avg,
    Enum$order_by? count,
    Input$authUserSecurityKeys_max_order_by? max,
    Input$authUserSecurityKeys_min_order_by? min,
    Input$authUserSecurityKeys_stddev_order_by? stddev,
    Input$authUserSecurityKeys_stddev_pop_order_by? stddev_pop,
    Input$authUserSecurityKeys_stddev_samp_order_by? stddev_samp,
    Input$authUserSecurityKeys_sum_order_by? sum,
    Input$authUserSecurityKeys_var_pop_order_by? var_pop,
    Input$authUserSecurityKeys_var_samp_order_by? var_samp,
    Input$authUserSecurityKeys_variance_order_by? variance,
  });
  CopyWith$Input$authUserSecurityKeys_avg_order_by<TRes> get avg;
  CopyWith$Input$authUserSecurityKeys_max_order_by<TRes> get max;
  CopyWith$Input$authUserSecurityKeys_min_order_by<TRes> get min;
  CopyWith$Input$authUserSecurityKeys_stddev_order_by<TRes> get stddev;
  CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by<TRes>
      get stddev_samp;
  CopyWith$Input$authUserSecurityKeys_sum_order_by<TRes> get sum;
  CopyWith$Input$authUserSecurityKeys_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$authUserSecurityKeys_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$authUserSecurityKeys_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$authUserSecurityKeys_aggregate_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_aggregate_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined)
          'avg': (avg as Input$authUserSecurityKeys_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined)
          'max': (max as Input$authUserSecurityKeys_max_order_by?),
        if (min != _undefined)
          'min': (min as Input$authUserSecurityKeys_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$authUserSecurityKeys_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop':
              (stddev_pop as Input$authUserSecurityKeys_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp':
              (stddev_samp as Input$authUserSecurityKeys_stddev_samp_order_by?),
        if (sum != _undefined)
          'sum': (sum as Input$authUserSecurityKeys_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$authUserSecurityKeys_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp':
              (var_samp as Input$authUserSecurityKeys_var_samp_order_by?),
        if (variance != _undefined)
          'variance':
              (variance as Input$authUserSecurityKeys_variance_order_by?),
      }));
  CopyWith$Input$authUserSecurityKeys_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$authUserSecurityKeys_avg_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_avg_order_by(
            local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$authUserSecurityKeys_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$authUserSecurityKeys_max_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$authUserSecurityKeys_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$authUserSecurityKeys_min_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_min_order_by(
            local$min, (e) => call(min: e));
  }

  CopyWith$Input$authUserSecurityKeys_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$authUserSecurityKeys_stddev_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by<TRes>
      get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$authUserSecurityKeys_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$authUserSecurityKeys_sum_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_sum_order_by(
            local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$authUserSecurityKeys_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$authUserSecurityKeys_var_pop_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$authUserSecurityKeys_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$authUserSecurityKeys_var_samp_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$authUserSecurityKeys_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$authUserSecurityKeys_variance_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$authUserSecurityKeys_avg_order_by? avg,
    Enum$order_by? count,
    Input$authUserSecurityKeys_max_order_by? max,
    Input$authUserSecurityKeys_min_order_by? min,
    Input$authUserSecurityKeys_stddev_order_by? stddev,
    Input$authUserSecurityKeys_stddev_pop_order_by? stddev_pop,
    Input$authUserSecurityKeys_stddev_samp_order_by? stddev_samp,
    Input$authUserSecurityKeys_sum_order_by? sum,
    Input$authUserSecurityKeys_var_pop_order_by? var_pop,
    Input$authUserSecurityKeys_var_samp_order_by? var_samp,
    Input$authUserSecurityKeys_variance_order_by? variance,
  }) =>
      _res;
  CopyWith$Input$authUserSecurityKeys_avg_order_by<TRes> get avg =>
      CopyWith$Input$authUserSecurityKeys_avg_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_max_order_by<TRes> get max =>
      CopyWith$Input$authUserSecurityKeys_max_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_min_order_by<TRes> get min =>
      CopyWith$Input$authUserSecurityKeys_min_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$authUserSecurityKeys_stddev_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by<TRes>
      get stddev_pop =>
          CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by<TRes>
      get stddev_samp =>
          CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_sum_order_by<TRes> get sum =>
      CopyWith$Input$authUserSecurityKeys_sum_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$authUserSecurityKeys_var_pop_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$authUserSecurityKeys_var_samp_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_variance_order_by<TRes> get variance =>
      CopyWith$Input$authUserSecurityKeys_variance_order_by.stub(_res);
}

class Input$authUserSecurityKeys_arr_rel_insert_input {
  factory Input$authUserSecurityKeys_arr_rel_insert_input({
    required List<Input$authUserSecurityKeys_insert_input> data,
    Input$authUserSecurityKeys_on_conflict? on_conflict,
  }) =>
      Input$authUserSecurityKeys_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$authUserSecurityKeys_arr_rel_insert_input._(this._$data);

  factory Input$authUserSecurityKeys_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$authUserSecurityKeys_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$authUserSecurityKeys_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$authUserSecurityKeys_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authUserSecurityKeys_insert_input> get data =>
      (_$data['data'] as List<Input$authUserSecurityKeys_insert_input>);
  Input$authUserSecurityKeys_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$authUserSecurityKeys_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input<
          Input$authUserSecurityKeys_arr_rel_insert_input>
      get copyWith => CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input(
    Input$authUserSecurityKeys_arr_rel_insert_input instance,
    TRes Function(Input$authUserSecurityKeys_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_arr_rel_insert_input;

  factory CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_arr_rel_insert_input;

  TRes call({
    List<Input$authUserSecurityKeys_insert_input>? data,
    Input$authUserSecurityKeys_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$authUserSecurityKeys_insert_input> Function(
              Iterable<
                  CopyWith$Input$authUserSecurityKeys_insert_input<
                      Input$authUserSecurityKeys_insert_input>>)
          _fn);
  CopyWith$Input$authUserSecurityKeys_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$authUserSecurityKeys_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_arr_rel_insert_input _instance;

  final TRes Function(Input$authUserSecurityKeys_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$authUserSecurityKeys_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict':
              (on_conflict as Input$authUserSecurityKeys_on_conflict?),
      }));
  TRes data(
          Iterable<Input$authUserSecurityKeys_insert_input> Function(
                  Iterable<
                      CopyWith$Input$authUserSecurityKeys_insert_input<
                          Input$authUserSecurityKeys_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data
              .map((e) => CopyWith$Input$authUserSecurityKeys_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$authUserSecurityKeys_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$authUserSecurityKeys_on_conflict.stub(_then(_instance))
        : CopyWith$Input$authUserSecurityKeys_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_arr_rel_insert_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$authUserSecurityKeys_insert_input>? data,
    Input$authUserSecurityKeys_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$authUserSecurityKeys_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$authUserSecurityKeys_on_conflict.stub(_res);
}

class Input$authUserSecurityKeys_avg_order_by {
  factory Input$authUserSecurityKeys_avg_order_by({Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_avg_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_avg_order_by._(this._$data);

  factory Input$authUserSecurityKeys_avg_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_avg_order_by<
          Input$authUserSecurityKeys_avg_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_avg_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_avg_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_avg_order_by(
    Input$authUserSecurityKeys_avg_order_by instance,
    TRes Function(Input$authUserSecurityKeys_avg_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_avg_order_by;

  factory CopyWith$Input$authUserSecurityKeys_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_avg_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_avg_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_avg_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_avg_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_avg_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_avg_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_avg_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$authUserSecurityKeys_bool_exp {
  factory Input$authUserSecurityKeys_bool_exp({
    List<Input$authUserSecurityKeys_bool_exp>? $_and,
    Input$authUserSecurityKeys_bool_exp? $_not,
    List<Input$authUserSecurityKeys_bool_exp>? $_or,
    Input$bigint_comparison_exp? counter,
    Input$String_comparison_exp? credentialId,
    Input$bytea_comparison_exp? credentialPublicKey,
    Input$uuid_comparison_exp? id,
    Input$String_comparison_exp? nickname,
    Input$String_comparison_exp? transports,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      Input$authUserSecurityKeys_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (counter != null) r'counter': counter,
        if (credentialId != null) r'credentialId': credentialId,
        if (credentialPublicKey != null)
          r'credentialPublicKey': credentialPublicKey,
        if (id != null) r'id': id,
        if (nickname != null) r'nickname': nickname,
        if (transports != null) r'transports': transports,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserSecurityKeys_bool_exp._(this._$data);

  factory Input$authUserSecurityKeys_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$authUserSecurityKeys_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$authUserSecurityKeys_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$authUserSecurityKeys_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : Input$bigint_comparison_exp.fromJson(
              (l$counter as Map<String, dynamic>));
    }
    if (data.containsKey('credentialId')) {
      final l$credentialId = data['credentialId'];
      result$data['credentialId'] = l$credentialId == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$credentialId as Map<String, dynamic>));
    }
    if (data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = data['credentialPublicKey'];
      result$data['credentialPublicKey'] = l$credentialPublicKey == null
          ? null
          : Input$bytea_comparison_exp.fromJson(
              (l$credentialPublicKey as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$uuid_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('nickname')) {
      final l$nickname = data['nickname'];
      result$data['nickname'] = l$nickname == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$nickname as Map<String, dynamic>));
    }
    if (data.containsKey('transports')) {
      final l$transports = data['transports'];
      result$data['transports'] = l$transports == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$transports as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$userId as Map<String, dynamic>));
    }
    return Input$authUserSecurityKeys_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$authUserSecurityKeys_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$authUserSecurityKeys_bool_exp>?);
  Input$authUserSecurityKeys_bool_exp? get $_not =>
      (_$data['_not'] as Input$authUserSecurityKeys_bool_exp?);
  List<Input$authUserSecurityKeys_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$authUserSecurityKeys_bool_exp>?);
  Input$bigint_comparison_exp? get counter =>
      (_$data['counter'] as Input$bigint_comparison_exp?);
  Input$String_comparison_exp? get credentialId =>
      (_$data['credentialId'] as Input$String_comparison_exp?);
  Input$bytea_comparison_exp? get credentialPublicKey =>
      (_$data['credentialPublicKey'] as Input$bytea_comparison_exp?);
  Input$uuid_comparison_exp? get id =>
      (_$data['id'] as Input$uuid_comparison_exp?);
  Input$String_comparison_exp? get nickname =>
      (_$data['nickname'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get transports =>
      (_$data['transports'] as Input$String_comparison_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get userId =>
      (_$data['userId'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] = l$counter?.toJson();
    }
    if (_$data.containsKey('credentialId')) {
      final l$credentialId = credentialId;
      result$data['credentialId'] = l$credentialId?.toJson();
    }
    if (_$data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = credentialPublicKey;
      result$data['credentialPublicKey'] = l$credentialPublicKey?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('nickname')) {
      final l$nickname = nickname;
      result$data['nickname'] = l$nickname?.toJson();
    }
    if (_$data.containsKey('transports')) {
      final l$transports = transports;
      result$data['transports'] = l$transports?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_bool_exp<
          Input$authUserSecurityKeys_bool_exp>
      get copyWith => CopyWith$Input$authUserSecurityKeys_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    final l$credentialId = credentialId;
    final lOther$credentialId = other.credentialId;
    if (_$data.containsKey('credentialId') !=
        other._$data.containsKey('credentialId')) {
      return false;
    }
    if (l$credentialId != lOther$credentialId) {
      return false;
    }
    final l$credentialPublicKey = credentialPublicKey;
    final lOther$credentialPublicKey = other.credentialPublicKey;
    if (_$data.containsKey('credentialPublicKey') !=
        other._$data.containsKey('credentialPublicKey')) {
      return false;
    }
    if (l$credentialPublicKey != lOther$credentialPublicKey) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$nickname = nickname;
    final lOther$nickname = other.nickname;
    if (_$data.containsKey('nickname') !=
        other._$data.containsKey('nickname')) {
      return false;
    }
    if (l$nickname != lOther$nickname) {
      return false;
    }
    final l$transports = transports;
    final lOther$transports = other.transports;
    if (_$data.containsKey('transports') !=
        other._$data.containsKey('transports')) {
      return false;
    }
    if (l$transports != lOther$transports) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$counter = counter;
    final l$credentialId = credentialId;
    final l$credentialPublicKey = credentialPublicKey;
    final l$id = id;
    final l$nickname = nickname;
    final l$transports = transports;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('counter') ? l$counter : const {},
      _$data.containsKey('credentialId') ? l$credentialId : const {},
      _$data.containsKey('credentialPublicKey')
          ? l$credentialPublicKey
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('nickname') ? l$nickname : const {},
      _$data.containsKey('transports') ? l$transports : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_bool_exp(
    Input$authUserSecurityKeys_bool_exp instance,
    TRes Function(Input$authUserSecurityKeys_bool_exp) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_bool_exp;

  factory CopyWith$Input$authUserSecurityKeys_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_bool_exp;

  TRes call({
    List<Input$authUserSecurityKeys_bool_exp>? $_and,
    Input$authUserSecurityKeys_bool_exp? $_not,
    List<Input$authUserSecurityKeys_bool_exp>? $_or,
    Input$bigint_comparison_exp? counter,
    Input$String_comparison_exp? credentialId,
    Input$bytea_comparison_exp? credentialPublicKey,
    Input$uuid_comparison_exp? id,
    Input$String_comparison_exp? nickname,
    Input$String_comparison_exp? transports,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  });
  TRes $_and(
      Iterable<Input$authUserSecurityKeys_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authUserSecurityKeys_bool_exp<
                      Input$authUserSecurityKeys_bool_exp>>?)
          _fn);
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$authUserSecurityKeys_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$authUserSecurityKeys_bool_exp<
                      Input$authUserSecurityKeys_bool_exp>>?)
          _fn);
  CopyWith$Input$bigint_comparison_exp<TRes> get counter;
  CopyWith$Input$String_comparison_exp<TRes> get credentialId;
  CopyWith$Input$bytea_comparison_exp<TRes> get credentialPublicKey;
  CopyWith$Input$uuid_comparison_exp<TRes> get id;
  CopyWith$Input$String_comparison_exp<TRes> get nickname;
  CopyWith$Input$String_comparison_exp<TRes> get transports;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get userId;
}

class _CopyWithImpl$Input$authUserSecurityKeys_bool_exp<TRes>
    implements CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_bool_exp(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_bool_exp _instance;

  final TRes Function(Input$authUserSecurityKeys_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? counter = _undefined,
    Object? credentialId = _undefined,
    Object? credentialPublicKey = _undefined,
    Object? id = _undefined,
    Object? nickname = _undefined,
    Object? transports = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$authUserSecurityKeys_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$authUserSecurityKeys_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$authUserSecurityKeys_bool_exp>?),
        if (counter != _undefined)
          'counter': (counter as Input$bigint_comparison_exp?),
        if (credentialId != _undefined)
          'credentialId': (credentialId as Input$String_comparison_exp?),
        if (credentialPublicKey != _undefined)
          'credentialPublicKey':
              (credentialPublicKey as Input$bytea_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$uuid_comparison_exp?),
        if (nickname != _undefined)
          'nickname': (nickname as Input$String_comparison_exp?),
        if (transports != _undefined)
          'transports': (transports as Input$String_comparison_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (userId != _undefined)
          'userId': (userId as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$authUserSecurityKeys_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authUserSecurityKeys_bool_exp<
                          Input$authUserSecurityKeys_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$authUserSecurityKeys_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserSecurityKeys_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$authUserSecurityKeys_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$authUserSecurityKeys_bool_exp<
                          Input$authUserSecurityKeys_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$authUserSecurityKeys_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$bigint_comparison_exp<TRes> get counter {
    final local$counter = _instance.counter;
    return local$counter == null
        ? CopyWith$Input$bigint_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$bigint_comparison_exp(
            local$counter, (e) => call(counter: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get credentialId {
    final local$credentialId = _instance.credentialId;
    return local$credentialId == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$credentialId, (e) => call(credentialId: e));
  }

  CopyWith$Input$bytea_comparison_exp<TRes> get credentialPublicKey {
    final local$credentialPublicKey = _instance.credentialPublicKey;
    return local$credentialPublicKey == null
        ? CopyWith$Input$bytea_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$bytea_comparison_exp(
            local$credentialPublicKey, (e) => call(credentialPublicKey: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get nickname {
    final local$nickname = _instance.nickname;
    return local$nickname == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$nickname, (e) => call(nickname: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get transports {
    final local$transports = _instance.transports;
    return local$transports == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$transports, (e) => call(transports: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get userId {
    final local$userId = _instance.userId;
    return local$userId == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$userId, (e) => call(userId: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_bool_exp<TRes>
    implements CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$authUserSecurityKeys_bool_exp>? $_and,
    Input$authUserSecurityKeys_bool_exp? $_not,
    List<Input$authUserSecurityKeys_bool_exp>? $_or,
    Input$bigint_comparison_exp? counter,
    Input$String_comparison_exp? credentialId,
    Input$bytea_comparison_exp? credentialPublicKey,
    Input$uuid_comparison_exp? id,
    Input$String_comparison_exp? nickname,
    Input$String_comparison_exp? transports,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? userId,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get $_not =>
      CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$bigint_comparison_exp<TRes> get counter =>
      CopyWith$Input$bigint_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get credentialId =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$bytea_comparison_exp<TRes> get credentialPublicKey =>
      CopyWith$Input$bytea_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get nickname =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get transports =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get userId =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$authUserSecurityKeys_inc_input {
  factory Input$authUserSecurityKeys_inc_input({int? counter}) =>
      Input$authUserSecurityKeys_inc_input._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_inc_input._(this._$data);

  factory Input$authUserSecurityKeys_inc_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = (l$counter as int?);
    }
    return Input$authUserSecurityKeys_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get counter => (_$data['counter'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] = l$counter;
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_inc_input<
          Input$authUserSecurityKeys_inc_input>
      get copyWith => CopyWith$Input$authUserSecurityKeys_inc_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_inc_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_inc_input<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_inc_input(
    Input$authUserSecurityKeys_inc_input instance,
    TRes Function(Input$authUserSecurityKeys_inc_input) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_inc_input;

  factory CopyWith$Input$authUserSecurityKeys_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_inc_input;

  TRes call({int? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_inc_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_inc_input<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_inc_input(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_inc_input _instance;

  final TRes Function(Input$authUserSecurityKeys_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_inc_input._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as int?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_inc_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_inc_input<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_inc_input(this._res);

  TRes _res;

  call({int? counter}) => _res;
}

class Input$authUserSecurityKeys_insert_input {
  factory Input$authUserSecurityKeys_insert_input({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      Input$authUserSecurityKeys_insert_input._({
        if (counter != null) r'counter': counter,
        if (credentialId != null) r'credentialId': credentialId,
        if (credentialPublicKey != null)
          r'credentialPublicKey': credentialPublicKey,
        if (id != null) r'id': id,
        if (nickname != null) r'nickname': nickname,
        if (transports != null) r'transports': transports,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserSecurityKeys_insert_input._(this._$data);

  factory Input$authUserSecurityKeys_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = (l$counter as int?);
    }
    if (data.containsKey('credentialId')) {
      final l$credentialId = data['credentialId'];
      result$data['credentialId'] = (l$credentialId as String?);
    }
    if (data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = data['credentialPublicKey'];
      result$data['credentialPublicKey'] = (l$credentialPublicKey as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('nickname')) {
      final l$nickname = data['nickname'];
      result$data['nickname'] = (l$nickname as String?);
    }
    if (data.containsKey('transports')) {
      final l$transports = data['transports'];
      result$data['transports'] = (l$transports as String?);
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserSecurityKeys_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get counter => (_$data['counter'] as int?);
  String? get credentialId => (_$data['credentialId'] as String?);
  String? get credentialPublicKey => (_$data['credentialPublicKey'] as String?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get nickname => (_$data['nickname'] as String?);
  String? get transports => (_$data['transports'] as String?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] = l$counter;
    }
    if (_$data.containsKey('credentialId')) {
      final l$credentialId = credentialId;
      result$data['credentialId'] = l$credentialId;
    }
    if (_$data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = credentialPublicKey;
      result$data['credentialPublicKey'] = l$credentialPublicKey;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('nickname')) {
      final l$nickname = nickname;
      result$data['nickname'] = l$nickname;
    }
    if (_$data.containsKey('transports')) {
      final l$transports = transports;
      result$data['transports'] = l$transports;
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_insert_input<
          Input$authUserSecurityKeys_insert_input>
      get copyWith => CopyWith$Input$authUserSecurityKeys_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    final l$credentialId = credentialId;
    final lOther$credentialId = other.credentialId;
    if (_$data.containsKey('credentialId') !=
        other._$data.containsKey('credentialId')) {
      return false;
    }
    if (l$credentialId != lOther$credentialId) {
      return false;
    }
    final l$credentialPublicKey = credentialPublicKey;
    final lOther$credentialPublicKey = other.credentialPublicKey;
    if (_$data.containsKey('credentialPublicKey') !=
        other._$data.containsKey('credentialPublicKey')) {
      return false;
    }
    if (l$credentialPublicKey != lOther$credentialPublicKey) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$nickname = nickname;
    final lOther$nickname = other.nickname;
    if (_$data.containsKey('nickname') !=
        other._$data.containsKey('nickname')) {
      return false;
    }
    if (l$nickname != lOther$nickname) {
      return false;
    }
    final l$transports = transports;
    final lOther$transports = other.transports;
    if (_$data.containsKey('transports') !=
        other._$data.containsKey('transports')) {
      return false;
    }
    if (l$transports != lOther$transports) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    final l$credentialId = credentialId;
    final l$credentialPublicKey = credentialPublicKey;
    final l$id = id;
    final l$nickname = nickname;
    final l$transports = transports;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('counter') ? l$counter : const {},
      _$data.containsKey('credentialId') ? l$credentialId : const {},
      _$data.containsKey('credentialPublicKey')
          ? l$credentialPublicKey
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('nickname') ? l$nickname : const {},
      _$data.containsKey('transports') ? l$transports : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_insert_input<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_insert_input(
    Input$authUserSecurityKeys_insert_input instance,
    TRes Function(Input$authUserSecurityKeys_insert_input) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_insert_input;

  factory CopyWith$Input$authUserSecurityKeys_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_insert_input;

  TRes call({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  });
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$authUserSecurityKeys_insert_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_insert_input<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_insert_input(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_insert_input _instance;

  final TRes Function(Input$authUserSecurityKeys_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? counter = _undefined,
    Object? credentialId = _undefined,
    Object? credentialPublicKey = _undefined,
    Object? id = _undefined,
    Object? nickname = _undefined,
    Object? transports = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_insert_input._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as int?),
        if (credentialId != _undefined)
          'credentialId': (credentialId as String?),
        if (credentialPublicKey != _undefined)
          'credentialPublicKey': (credentialPublicKey as String?),
        if (id != _undefined) 'id': (id as UUID?),
        if (nickname != _undefined) 'nickname': (nickname as String?),
        if (transports != _undefined) 'transports': (transports as String?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_insert_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_insert_input<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_insert_input(this._res);

  TRes _res;

  call({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    Input$users_obj_rel_insert_input? user,
    UUID? userId,
  }) =>
      _res;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$authUserSecurityKeys_max_order_by {
  factory Input$authUserSecurityKeys_max_order_by({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Enum$order_by? userId,
  }) =>
      Input$authUserSecurityKeys_max_order_by._({
        if (counter != null) r'counter': counter,
        if (credentialId != null) r'credentialId': credentialId,
        if (id != null) r'id': id,
        if (nickname != null) r'nickname': nickname,
        if (transports != null) r'transports': transports,
        if (userId != null) r'userId': userId,
      });

  Input$authUserSecurityKeys_max_order_by._(this._$data);

  factory Input$authUserSecurityKeys_max_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    if (data.containsKey('credentialId')) {
      final l$credentialId = data['credentialId'];
      result$data['credentialId'] = l$credentialId == null
          ? null
          : fromJson$Enum$order_by((l$credentialId as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('nickname')) {
      final l$nickname = data['nickname'];
      result$data['nickname'] = l$nickname == null
          ? null
          : fromJson$Enum$order_by((l$nickname as String));
    }
    if (data.containsKey('transports')) {
      final l$transports = data['transports'];
      result$data['transports'] = l$transports == null
          ? null
          : fromJson$Enum$order_by((l$transports as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserSecurityKeys_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Enum$order_by? get credentialId => (_$data['credentialId'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get nickname => (_$data['nickname'] as Enum$order_by?);
  Enum$order_by? get transports => (_$data['transports'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    if (_$data.containsKey('credentialId')) {
      final l$credentialId = credentialId;
      result$data['credentialId'] =
          l$credentialId == null ? null : toJson$Enum$order_by(l$credentialId);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('nickname')) {
      final l$nickname = nickname;
      result$data['nickname'] =
          l$nickname == null ? null : toJson$Enum$order_by(l$nickname);
    }
    if (_$data.containsKey('transports')) {
      final l$transports = transports;
      result$data['transports'] =
          l$transports == null ? null : toJson$Enum$order_by(l$transports);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_max_order_by<
          Input$authUserSecurityKeys_max_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    final l$credentialId = credentialId;
    final lOther$credentialId = other.credentialId;
    if (_$data.containsKey('credentialId') !=
        other._$data.containsKey('credentialId')) {
      return false;
    }
    if (l$credentialId != lOther$credentialId) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$nickname = nickname;
    final lOther$nickname = other.nickname;
    if (_$data.containsKey('nickname') !=
        other._$data.containsKey('nickname')) {
      return false;
    }
    if (l$nickname != lOther$nickname) {
      return false;
    }
    final l$transports = transports;
    final lOther$transports = other.transports;
    if (_$data.containsKey('transports') !=
        other._$data.containsKey('transports')) {
      return false;
    }
    if (l$transports != lOther$transports) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    final l$credentialId = credentialId;
    final l$id = id;
    final l$nickname = nickname;
    final l$transports = transports;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('counter') ? l$counter : const {},
      _$data.containsKey('credentialId') ? l$credentialId : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('nickname') ? l$nickname : const {},
      _$data.containsKey('transports') ? l$transports : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_max_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_max_order_by(
    Input$authUserSecurityKeys_max_order_by instance,
    TRes Function(Input$authUserSecurityKeys_max_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_max_order_by;

  factory CopyWith$Input$authUserSecurityKeys_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_max_order_by;

  TRes call({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authUserSecurityKeys_max_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_max_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_max_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_max_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? counter = _undefined,
    Object? credentialId = _undefined,
    Object? id = _undefined,
    Object? nickname = _undefined,
    Object? transports = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_max_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
        if (credentialId != _undefined)
          'credentialId': (credentialId as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (nickname != _undefined) 'nickname': (nickname as Enum$order_by?),
        if (transports != _undefined)
          'transports': (transports as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_max_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_max_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authUserSecurityKeys_min_order_by {
  factory Input$authUserSecurityKeys_min_order_by({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Enum$order_by? userId,
  }) =>
      Input$authUserSecurityKeys_min_order_by._({
        if (counter != null) r'counter': counter,
        if (credentialId != null) r'credentialId': credentialId,
        if (id != null) r'id': id,
        if (nickname != null) r'nickname': nickname,
        if (transports != null) r'transports': transports,
        if (userId != null) r'userId': userId,
      });

  Input$authUserSecurityKeys_min_order_by._(this._$data);

  factory Input$authUserSecurityKeys_min_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    if (data.containsKey('credentialId')) {
      final l$credentialId = data['credentialId'];
      result$data['credentialId'] = l$credentialId == null
          ? null
          : fromJson$Enum$order_by((l$credentialId as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('nickname')) {
      final l$nickname = data['nickname'];
      result$data['nickname'] = l$nickname == null
          ? null
          : fromJson$Enum$order_by((l$nickname as String));
    }
    if (data.containsKey('transports')) {
      final l$transports = data['transports'];
      result$data['transports'] = l$transports == null
          ? null
          : fromJson$Enum$order_by((l$transports as String));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserSecurityKeys_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Enum$order_by? get credentialId => (_$data['credentialId'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get nickname => (_$data['nickname'] as Enum$order_by?);
  Enum$order_by? get transports => (_$data['transports'] as Enum$order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    if (_$data.containsKey('credentialId')) {
      final l$credentialId = credentialId;
      result$data['credentialId'] =
          l$credentialId == null ? null : toJson$Enum$order_by(l$credentialId);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('nickname')) {
      final l$nickname = nickname;
      result$data['nickname'] =
          l$nickname == null ? null : toJson$Enum$order_by(l$nickname);
    }
    if (_$data.containsKey('transports')) {
      final l$transports = transports;
      result$data['transports'] =
          l$transports == null ? null : toJson$Enum$order_by(l$transports);
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_min_order_by<
          Input$authUserSecurityKeys_min_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    final l$credentialId = credentialId;
    final lOther$credentialId = other.credentialId;
    if (_$data.containsKey('credentialId') !=
        other._$data.containsKey('credentialId')) {
      return false;
    }
    if (l$credentialId != lOther$credentialId) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$nickname = nickname;
    final lOther$nickname = other.nickname;
    if (_$data.containsKey('nickname') !=
        other._$data.containsKey('nickname')) {
      return false;
    }
    if (l$nickname != lOther$nickname) {
      return false;
    }
    final l$transports = transports;
    final lOther$transports = other.transports;
    if (_$data.containsKey('transports') !=
        other._$data.containsKey('transports')) {
      return false;
    }
    if (l$transports != lOther$transports) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    final l$credentialId = credentialId;
    final l$id = id;
    final l$nickname = nickname;
    final l$transports = transports;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('counter') ? l$counter : const {},
      _$data.containsKey('credentialId') ? l$credentialId : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('nickname') ? l$nickname : const {},
      _$data.containsKey('transports') ? l$transports : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_min_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_min_order_by(
    Input$authUserSecurityKeys_min_order_by instance,
    TRes Function(Input$authUserSecurityKeys_min_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_min_order_by;

  factory CopyWith$Input$authUserSecurityKeys_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_min_order_by;

  TRes call({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Enum$order_by? userId,
  });
}

class _CopyWithImpl$Input$authUserSecurityKeys_min_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_min_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_min_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_min_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? counter = _undefined,
    Object? credentialId = _undefined,
    Object? id = _undefined,
    Object? nickname = _undefined,
    Object? transports = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_min_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
        if (credentialId != _undefined)
          'credentialId': (credentialId as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (nickname != _undefined) 'nickname': (nickname as Enum$order_by?),
        if (transports != _undefined)
          'transports': (transports as Enum$order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_min_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_min_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Enum$order_by? userId,
  }) =>
      _res;
}

class Input$authUserSecurityKeys_on_conflict {
  factory Input$authUserSecurityKeys_on_conflict({
    required Enum$authUserSecurityKeys_constraint constraint,
    required List<Enum$authUserSecurityKeys_update_column> update_columns,
    Input$authUserSecurityKeys_bool_exp? where,
  }) =>
      Input$authUserSecurityKeys_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$authUserSecurityKeys_on_conflict._(this._$data);

  factory Input$authUserSecurityKeys_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$authUserSecurityKeys_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$authUserSecurityKeys_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$authUserSecurityKeys_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$authUserSecurityKeys_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$authUserSecurityKeys_constraint get constraint =>
      (_$data['constraint'] as Enum$authUserSecurityKeys_constraint);
  List<Enum$authUserSecurityKeys_update_column> get update_columns =>
      (_$data['update_columns']
          as List<Enum$authUserSecurityKeys_update_column>);
  Input$authUserSecurityKeys_bool_exp? get where =>
      (_$data['where'] as Input$authUserSecurityKeys_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$authUserSecurityKeys_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$authUserSecurityKeys_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_on_conflict<
          Input$authUserSecurityKeys_on_conflict>
      get copyWith => CopyWith$Input$authUserSecurityKeys_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_on_conflict<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_on_conflict(
    Input$authUserSecurityKeys_on_conflict instance,
    TRes Function(Input$authUserSecurityKeys_on_conflict) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_on_conflict;

  factory CopyWith$Input$authUserSecurityKeys_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_on_conflict;

  TRes call({
    Enum$authUserSecurityKeys_constraint? constraint,
    List<Enum$authUserSecurityKeys_update_column>? update_columns,
    Input$authUserSecurityKeys_bool_exp? where,
  });
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authUserSecurityKeys_on_conflict<TRes>
    implements CopyWith$Input$authUserSecurityKeys_on_conflict<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_on_conflict(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_on_conflict _instance;

  final TRes Function(Input$authUserSecurityKeys_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$authUserSecurityKeys_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$authUserSecurityKeys_update_column>),
        if (where != _undefined)
          'where': (where as Input$authUserSecurityKeys_bool_exp?),
      }));
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserSecurityKeys_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_on_conflict<TRes>
    implements CopyWith$Input$authUserSecurityKeys_on_conflict<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_on_conflict(this._res);

  TRes _res;

  call({
    Enum$authUserSecurityKeys_constraint? constraint,
    List<Enum$authUserSecurityKeys_update_column>? update_columns,
    Input$authUserSecurityKeys_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get where =>
      CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_res);
}

class Input$authUserSecurityKeys_order_by {
  factory Input$authUserSecurityKeys_order_by({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? credentialPublicKey,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      Input$authUserSecurityKeys_order_by._({
        if (counter != null) r'counter': counter,
        if (credentialId != null) r'credentialId': credentialId,
        if (credentialPublicKey != null)
          r'credentialPublicKey': credentialPublicKey,
        if (id != null) r'id': id,
        if (nickname != null) r'nickname': nickname,
        if (transports != null) r'transports': transports,
        if (user != null) r'user': user,
        if (userId != null) r'userId': userId,
      });

  Input$authUserSecurityKeys_order_by._(this._$data);

  factory Input$authUserSecurityKeys_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    if (data.containsKey('credentialId')) {
      final l$credentialId = data['credentialId'];
      result$data['credentialId'] = l$credentialId == null
          ? null
          : fromJson$Enum$order_by((l$credentialId as String));
    }
    if (data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = data['credentialPublicKey'];
      result$data['credentialPublicKey'] = l$credentialPublicKey == null
          ? null
          : fromJson$Enum$order_by((l$credentialPublicKey as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('nickname')) {
      final l$nickname = data['nickname'];
      result$data['nickname'] = l$nickname == null
          ? null
          : fromJson$Enum$order_by((l$nickname as String));
    }
    if (data.containsKey('transports')) {
      final l$transports = data['transports'];
      result$data['transports'] = l$transports == null
          ? null
          : fromJson$Enum$order_by((l$transports as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null
          ? null
          : fromJson$Enum$order_by((l$userId as String));
    }
    return Input$authUserSecurityKeys_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Enum$order_by? get credentialId => (_$data['credentialId'] as Enum$order_by?);
  Enum$order_by? get credentialPublicKey =>
      (_$data['credentialPublicKey'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get nickname => (_$data['nickname'] as Enum$order_by?);
  Enum$order_by? get transports => (_$data['transports'] as Enum$order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get userId => (_$data['userId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    if (_$data.containsKey('credentialId')) {
      final l$credentialId = credentialId;
      result$data['credentialId'] =
          l$credentialId == null ? null : toJson$Enum$order_by(l$credentialId);
    }
    if (_$data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = credentialPublicKey;
      result$data['credentialPublicKey'] = l$credentialPublicKey == null
          ? null
          : toJson$Enum$order_by(l$credentialPublicKey);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('nickname')) {
      final l$nickname = nickname;
      result$data['nickname'] =
          l$nickname == null ? null : toJson$Enum$order_by(l$nickname);
    }
    if (_$data.containsKey('transports')) {
      final l$transports = transports;
      result$data['transports'] =
          l$transports == null ? null : toJson$Enum$order_by(l$transports);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] =
          l$userId == null ? null : toJson$Enum$order_by(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_order_by<
          Input$authUserSecurityKeys_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    final l$credentialId = credentialId;
    final lOther$credentialId = other.credentialId;
    if (_$data.containsKey('credentialId') !=
        other._$data.containsKey('credentialId')) {
      return false;
    }
    if (l$credentialId != lOther$credentialId) {
      return false;
    }
    final l$credentialPublicKey = credentialPublicKey;
    final lOther$credentialPublicKey = other.credentialPublicKey;
    if (_$data.containsKey('credentialPublicKey') !=
        other._$data.containsKey('credentialPublicKey')) {
      return false;
    }
    if (l$credentialPublicKey != lOther$credentialPublicKey) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$nickname = nickname;
    final lOther$nickname = other.nickname;
    if (_$data.containsKey('nickname') !=
        other._$data.containsKey('nickname')) {
      return false;
    }
    if (l$nickname != lOther$nickname) {
      return false;
    }
    final l$transports = transports;
    final lOther$transports = other.transports;
    if (_$data.containsKey('transports') !=
        other._$data.containsKey('transports')) {
      return false;
    }
    if (l$transports != lOther$transports) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    final l$credentialId = credentialId;
    final l$credentialPublicKey = credentialPublicKey;
    final l$id = id;
    final l$nickname = nickname;
    final l$transports = transports;
    final l$user = user;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('counter') ? l$counter : const {},
      _$data.containsKey('credentialId') ? l$credentialId : const {},
      _$data.containsKey('credentialPublicKey')
          ? l$credentialPublicKey
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('nickname') ? l$nickname : const {},
      _$data.containsKey('transports') ? l$transports : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_order_by(
    Input$authUserSecurityKeys_order_by instance,
    TRes Function(Input$authUserSecurityKeys_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_order_by;

  factory CopyWith$Input$authUserSecurityKeys_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_order_by;

  TRes call({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? credentialPublicKey,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Input$users_order_by? user,
    Enum$order_by? userId,
  });
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$authUserSecurityKeys_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? counter = _undefined,
    Object? credentialId = _undefined,
    Object? credentialPublicKey = _undefined,
    Object? id = _undefined,
    Object? nickname = _undefined,
    Object? transports = _undefined,
    Object? user = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
        if (credentialId != _undefined)
          'credentialId': (credentialId as Enum$order_by?),
        if (credentialPublicKey != _undefined)
          'credentialPublicKey': (credentialPublicKey as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (nickname != _undefined) 'nickname': (nickname as Enum$order_by?),
        if (transports != _undefined)
          'transports': (transports as Enum$order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (userId != _undefined) 'userId': (userId as Enum$order_by?),
      }));
  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? counter,
    Enum$order_by? credentialId,
    Enum$order_by? credentialPublicKey,
    Enum$order_by? id,
    Enum$order_by? nickname,
    Enum$order_by? transports,
    Input$users_order_by? user,
    Enum$order_by? userId,
  }) =>
      _res;
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$authUserSecurityKeys_pk_columns_input {
  factory Input$authUserSecurityKeys_pk_columns_input({required UUID id}) =>
      Input$authUserSecurityKeys_pk_columns_input._({
        r'id': id,
      });

  Input$authUserSecurityKeys_pk_columns_input._(this._$data);

  factory Input$authUserSecurityKeys_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = uuidFromJson(l$id);
    return Input$authUserSecurityKeys_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get id => (_$data['id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = uuidToJson(l$id);
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_pk_columns_input<
          Input$authUserSecurityKeys_pk_columns_input>
      get copyWith => CopyWith$Input$authUserSecurityKeys_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_pk_columns_input<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_pk_columns_input(
    Input$authUserSecurityKeys_pk_columns_input instance,
    TRes Function(Input$authUserSecurityKeys_pk_columns_input) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_pk_columns_input;

  factory CopyWith$Input$authUserSecurityKeys_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_pk_columns_input;

  TRes call({UUID? id});
}

class _CopyWithImpl$Input$authUserSecurityKeys_pk_columns_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_pk_columns_input<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_pk_columns_input _instance;

  final TRes Function(Input$authUserSecurityKeys_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$authUserSecurityKeys_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as UUID),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_pk_columns_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_pk_columns_input(this._res);

  TRes _res;

  call({UUID? id}) => _res;
}

class Input$authUserSecurityKeys_set_input {
  factory Input$authUserSecurityKeys_set_input({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    UUID? userId,
  }) =>
      Input$authUserSecurityKeys_set_input._({
        if (counter != null) r'counter': counter,
        if (credentialId != null) r'credentialId': credentialId,
        if (credentialPublicKey != null)
          r'credentialPublicKey': credentialPublicKey,
        if (id != null) r'id': id,
        if (nickname != null) r'nickname': nickname,
        if (transports != null) r'transports': transports,
        if (userId != null) r'userId': userId,
      });

  Input$authUserSecurityKeys_set_input._(this._$data);

  factory Input$authUserSecurityKeys_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = (l$counter as int?);
    }
    if (data.containsKey('credentialId')) {
      final l$credentialId = data['credentialId'];
      result$data['credentialId'] = (l$credentialId as String?);
    }
    if (data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = data['credentialPublicKey'];
      result$data['credentialPublicKey'] = (l$credentialPublicKey as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('nickname')) {
      final l$nickname = data['nickname'];
      result$data['nickname'] = (l$nickname as String?);
    }
    if (data.containsKey('transports')) {
      final l$transports = data['transports'];
      result$data['transports'] = (l$transports as String?);
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserSecurityKeys_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get counter => (_$data['counter'] as int?);
  String? get credentialId => (_$data['credentialId'] as String?);
  String? get credentialPublicKey => (_$data['credentialPublicKey'] as String?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get nickname => (_$data['nickname'] as String?);
  String? get transports => (_$data['transports'] as String?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] = l$counter;
    }
    if (_$data.containsKey('credentialId')) {
      final l$credentialId = credentialId;
      result$data['credentialId'] = l$credentialId;
    }
    if (_$data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = credentialPublicKey;
      result$data['credentialPublicKey'] = l$credentialPublicKey;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('nickname')) {
      final l$nickname = nickname;
      result$data['nickname'] = l$nickname;
    }
    if (_$data.containsKey('transports')) {
      final l$transports = transports;
      result$data['transports'] = l$transports;
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_set_input<
          Input$authUserSecurityKeys_set_input>
      get copyWith => CopyWith$Input$authUserSecurityKeys_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    final l$credentialId = credentialId;
    final lOther$credentialId = other.credentialId;
    if (_$data.containsKey('credentialId') !=
        other._$data.containsKey('credentialId')) {
      return false;
    }
    if (l$credentialId != lOther$credentialId) {
      return false;
    }
    final l$credentialPublicKey = credentialPublicKey;
    final lOther$credentialPublicKey = other.credentialPublicKey;
    if (_$data.containsKey('credentialPublicKey') !=
        other._$data.containsKey('credentialPublicKey')) {
      return false;
    }
    if (l$credentialPublicKey != lOther$credentialPublicKey) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$nickname = nickname;
    final lOther$nickname = other.nickname;
    if (_$data.containsKey('nickname') !=
        other._$data.containsKey('nickname')) {
      return false;
    }
    if (l$nickname != lOther$nickname) {
      return false;
    }
    final l$transports = transports;
    final lOther$transports = other.transports;
    if (_$data.containsKey('transports') !=
        other._$data.containsKey('transports')) {
      return false;
    }
    if (l$transports != lOther$transports) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    final l$credentialId = credentialId;
    final l$credentialPublicKey = credentialPublicKey;
    final l$id = id;
    final l$nickname = nickname;
    final l$transports = transports;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('counter') ? l$counter : const {},
      _$data.containsKey('credentialId') ? l$credentialId : const {},
      _$data.containsKey('credentialPublicKey')
          ? l$credentialPublicKey
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('nickname') ? l$nickname : const {},
      _$data.containsKey('transports') ? l$transports : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_set_input<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_set_input(
    Input$authUserSecurityKeys_set_input instance,
    TRes Function(Input$authUserSecurityKeys_set_input) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_set_input;

  factory CopyWith$Input$authUserSecurityKeys_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_set_input;

  TRes call({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authUserSecurityKeys_set_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_set_input<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_set_input(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_set_input _instance;

  final TRes Function(Input$authUserSecurityKeys_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? counter = _undefined,
    Object? credentialId = _undefined,
    Object? credentialPublicKey = _undefined,
    Object? id = _undefined,
    Object? nickname = _undefined,
    Object? transports = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_set_input._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as int?),
        if (credentialId != _undefined)
          'credentialId': (credentialId as String?),
        if (credentialPublicKey != _undefined)
          'credentialPublicKey': (credentialPublicKey as String?),
        if (id != _undefined) 'id': (id as UUID?),
        if (nickname != _undefined) 'nickname': (nickname as String?),
        if (transports != _undefined) 'transports': (transports as String?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_set_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_set_input<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_set_input(this._res);

  TRes _res;

  call({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    UUID? userId,
  }) =>
      _res;
}

class Input$authUserSecurityKeys_stddev_order_by {
  factory Input$authUserSecurityKeys_stddev_order_by(
          {Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_stddev_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_stddev_order_by._(this._$data);

  factory Input$authUserSecurityKeys_stddev_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_stddev_order_by<
          Input$authUserSecurityKeys_stddev_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_stddev_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_stddev_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_stddev_order_by(
    Input$authUserSecurityKeys_stddev_order_by instance,
    TRes Function(Input$authUserSecurityKeys_stddev_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_stddev_order_by;

  factory CopyWith$Input$authUserSecurityKeys_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_stddev_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stddev_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_stddev_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_stddev_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$authUserSecurityKeys_stddev_pop_order_by {
  factory Input$authUserSecurityKeys_stddev_pop_order_by(
          {Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_stddev_pop_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_stddev_pop_order_by._(this._$data);

  factory Input$authUserSecurityKeys_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by<
          Input$authUserSecurityKeys_stddev_pop_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by(
    Input$authUserSecurityKeys_stddev_pop_order_by instance,
    TRes Function(Input$authUserSecurityKeys_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_stddev_pop_order_by;

  factory CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_pop_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_stddev_pop_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_stddev_pop_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_stddev_pop_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_pop_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_pop_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$authUserSecurityKeys_stddev_samp_order_by {
  factory Input$authUserSecurityKeys_stddev_samp_order_by(
          {Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_stddev_samp_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_stddev_samp_order_by._(this._$data);

  factory Input$authUserSecurityKeys_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by<
          Input$authUserSecurityKeys_stddev_samp_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by(
    Input$authUserSecurityKeys_stddev_samp_order_by instance,
    TRes Function(Input$authUserSecurityKeys_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_stddev_samp_order_by;

  factory CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_samp_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_stddev_samp_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_stddev_samp_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_stddev_samp_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_samp_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_stddev_samp_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$authUserSecurityKeys_stream_cursor_input {
  factory Input$authUserSecurityKeys_stream_cursor_input({
    required Input$authUserSecurityKeys_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$authUserSecurityKeys_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$authUserSecurityKeys_stream_cursor_input._(this._$data);

  factory Input$authUserSecurityKeys_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$authUserSecurityKeys_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$authUserSecurityKeys_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserSecurityKeys_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$authUserSecurityKeys_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_stream_cursor_input<
          Input$authUserSecurityKeys_stream_cursor_input>
      get copyWith => CopyWith$Input$authUserSecurityKeys_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_stream_cursor_input<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_stream_cursor_input(
    Input$authUserSecurityKeys_stream_cursor_input instance,
    TRes Function(Input$authUserSecurityKeys_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_stream_cursor_input;

  factory CopyWith$Input$authUserSecurityKeys_stream_cursor_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_stream_cursor_input;

  TRes call({
    Input$authUserSecurityKeys_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$authUserSecurityKeys_stream_cursor_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_stream_cursor_input _instance;

  final TRes Function(Input$authUserSecurityKeys_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$authUserSecurityKeys_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_stream_cursor_input<TRes>
    implements CopyWith$Input$authUserSecurityKeys_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$authUserSecurityKeys_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input.stub(
              _res);
}

class Input$authUserSecurityKeys_stream_cursor_value_input {
  factory Input$authUserSecurityKeys_stream_cursor_value_input({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    UUID? userId,
  }) =>
      Input$authUserSecurityKeys_stream_cursor_value_input._({
        if (counter != null) r'counter': counter,
        if (credentialId != null) r'credentialId': credentialId,
        if (credentialPublicKey != null)
          r'credentialPublicKey': credentialPublicKey,
        if (id != null) r'id': id,
        if (nickname != null) r'nickname': nickname,
        if (transports != null) r'transports': transports,
        if (userId != null) r'userId': userId,
      });

  Input$authUserSecurityKeys_stream_cursor_value_input._(this._$data);

  factory Input$authUserSecurityKeys_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = (l$counter as int?);
    }
    if (data.containsKey('credentialId')) {
      final l$credentialId = data['credentialId'];
      result$data['credentialId'] = (l$credentialId as String?);
    }
    if (data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = data['credentialPublicKey'];
      result$data['credentialPublicKey'] = (l$credentialPublicKey as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('nickname')) {
      final l$nickname = data['nickname'];
      result$data['nickname'] = (l$nickname as String?);
    }
    if (data.containsKey('transports')) {
      final l$transports = data['transports'];
      result$data['transports'] = (l$transports as String?);
    }
    if (data.containsKey('userId')) {
      final l$userId = data['userId'];
      result$data['userId'] = l$userId == null ? null : uuidFromJson(l$userId);
    }
    return Input$authUserSecurityKeys_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get counter => (_$data['counter'] as int?);
  String? get credentialId => (_$data['credentialId'] as String?);
  String? get credentialPublicKey => (_$data['credentialPublicKey'] as String?);
  UUID? get id => (_$data['id'] as UUID?);
  String? get nickname => (_$data['nickname'] as String?);
  String? get transports => (_$data['transports'] as String?);
  UUID? get userId => (_$data['userId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] = l$counter;
    }
    if (_$data.containsKey('credentialId')) {
      final l$credentialId = credentialId;
      result$data['credentialId'] = l$credentialId;
    }
    if (_$data.containsKey('credentialPublicKey')) {
      final l$credentialPublicKey = credentialPublicKey;
      result$data['credentialPublicKey'] = l$credentialPublicKey;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('nickname')) {
      final l$nickname = nickname;
      result$data['nickname'] = l$nickname;
    }
    if (_$data.containsKey('transports')) {
      final l$transports = transports;
      result$data['transports'] = l$transports;
    }
    if (_$data.containsKey('userId')) {
      final l$userId = userId;
      result$data['userId'] = l$userId == null ? null : uuidToJson(l$userId);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input<
          Input$authUserSecurityKeys_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    final l$credentialId = credentialId;
    final lOther$credentialId = other.credentialId;
    if (_$data.containsKey('credentialId') !=
        other._$data.containsKey('credentialId')) {
      return false;
    }
    if (l$credentialId != lOther$credentialId) {
      return false;
    }
    final l$credentialPublicKey = credentialPublicKey;
    final lOther$credentialPublicKey = other.credentialPublicKey;
    if (_$data.containsKey('credentialPublicKey') !=
        other._$data.containsKey('credentialPublicKey')) {
      return false;
    }
    if (l$credentialPublicKey != lOther$credentialPublicKey) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$nickname = nickname;
    final lOther$nickname = other.nickname;
    if (_$data.containsKey('nickname') !=
        other._$data.containsKey('nickname')) {
      return false;
    }
    if (l$nickname != lOther$nickname) {
      return false;
    }
    final l$transports = transports;
    final lOther$transports = other.transports;
    if (_$data.containsKey('transports') !=
        other._$data.containsKey('transports')) {
      return false;
    }
    if (l$transports != lOther$transports) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (_$data.containsKey('userId') != other._$data.containsKey('userId')) {
      return false;
    }
    if (l$userId != lOther$userId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    final l$credentialId = credentialId;
    final l$credentialPublicKey = credentialPublicKey;
    final l$id = id;
    final l$nickname = nickname;
    final l$transports = transports;
    final l$userId = userId;
    return Object.hashAll([
      _$data.containsKey('counter') ? l$counter : const {},
      _$data.containsKey('credentialId') ? l$credentialId : const {},
      _$data.containsKey('credentialPublicKey')
          ? l$credentialPublicKey
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('nickname') ? l$nickname : const {},
      _$data.containsKey('transports') ? l$transports : const {},
      _$data.containsKey('userId') ? l$userId : const {},
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input(
    Input$authUserSecurityKeys_stream_cursor_value_input instance,
    TRes Function(Input$authUserSecurityKeys_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_stream_cursor_value_input;

  factory CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_stream_cursor_value_input;

  TRes call({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    UUID? userId,
  });
}

class _CopyWithImpl$Input$authUserSecurityKeys_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_stream_cursor_value_input _instance;

  final TRes Function(Input$authUserSecurityKeys_stream_cursor_value_input)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? counter = _undefined,
    Object? credentialId = _undefined,
    Object? credentialPublicKey = _undefined,
    Object? id = _undefined,
    Object? nickname = _undefined,
    Object? transports = _undefined,
    Object? userId = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_stream_cursor_value_input._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as int?),
        if (credentialId != _undefined)
          'credentialId': (credentialId as String?),
        if (credentialPublicKey != _undefined)
          'credentialPublicKey': (credentialPublicKey as String?),
        if (id != _undefined) 'id': (id as UUID?),
        if (nickname != _undefined) 'nickname': (nickname as String?),
        if (transports != _undefined) 'transports': (transports as String?),
        if (userId != _undefined) 'userId': (userId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_stream_cursor_value_input<
        TRes>
    implements
        CopyWith$Input$authUserSecurityKeys_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    int? counter,
    String? credentialId,
    String? credentialPublicKey,
    UUID? id,
    String? nickname,
    String? transports,
    UUID? userId,
  }) =>
      _res;
}

class Input$authUserSecurityKeys_sum_order_by {
  factory Input$authUserSecurityKeys_sum_order_by({Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_sum_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_sum_order_by._(this._$data);

  factory Input$authUserSecurityKeys_sum_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_sum_order_by<
          Input$authUserSecurityKeys_sum_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_sum_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_sum_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_sum_order_by(
    Input$authUserSecurityKeys_sum_order_by instance,
    TRes Function(Input$authUserSecurityKeys_sum_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_sum_order_by;

  factory CopyWith$Input$authUserSecurityKeys_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_sum_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_sum_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_sum_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_sum_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_sum_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_sum_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_sum_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$authUserSecurityKeys_updates {
  factory Input$authUserSecurityKeys_updates({
    Input$authUserSecurityKeys_inc_input? $_inc,
    Input$authUserSecurityKeys_set_input? $_set,
    required Input$authUserSecurityKeys_bool_exp where,
  }) =>
      Input$authUserSecurityKeys_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$authUserSecurityKeys_updates._(this._$data);

  factory Input$authUserSecurityKeys_updates.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$authUserSecurityKeys_inc_input.fromJson(
              (l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$authUserSecurityKeys_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$authUserSecurityKeys_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$authUserSecurityKeys_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$authUserSecurityKeys_inc_input? get $_inc =>
      (_$data['_inc'] as Input$authUserSecurityKeys_inc_input?);
  Input$authUserSecurityKeys_set_input? get $_set =>
      (_$data['_set'] as Input$authUserSecurityKeys_set_input?);
  Input$authUserSecurityKeys_bool_exp get where =>
      (_$data['where'] as Input$authUserSecurityKeys_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_updates<
          Input$authUserSecurityKeys_updates>
      get copyWith => CopyWith$Input$authUserSecurityKeys_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_updates<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_updates(
    Input$authUserSecurityKeys_updates instance,
    TRes Function(Input$authUserSecurityKeys_updates) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_updates;

  factory CopyWith$Input$authUserSecurityKeys_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_updates;

  TRes call({
    Input$authUserSecurityKeys_inc_input? $_inc,
    Input$authUserSecurityKeys_set_input? $_set,
    Input$authUserSecurityKeys_bool_exp? where,
  });
  CopyWith$Input$authUserSecurityKeys_inc_input<TRes> get $_inc;
  CopyWith$Input$authUserSecurityKeys_set_input<TRes> get $_set;
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$authUserSecurityKeys_updates<TRes>
    implements CopyWith$Input$authUserSecurityKeys_updates<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_updates(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_updates _instance;

  final TRes Function(Input$authUserSecurityKeys_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$authUserSecurityKeys_updates._({
        ..._instance._$data,
        if ($_inc != _undefined)
          '_inc': ($_inc as Input$authUserSecurityKeys_inc_input?),
        if ($_set != _undefined)
          '_set': ($_set as Input$authUserSecurityKeys_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$authUserSecurityKeys_bool_exp),
      }));
  CopyWith$Input$authUserSecurityKeys_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$authUserSecurityKeys_inc_input.stub(_then(_instance))
        : CopyWith$Input$authUserSecurityKeys_inc_input(
            local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$authUserSecurityKeys_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$authUserSecurityKeys_set_input.stub(_then(_instance))
        : CopyWith$Input$authUserSecurityKeys_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$authUserSecurityKeys_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_updates<TRes>
    implements CopyWith$Input$authUserSecurityKeys_updates<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_updates(this._res);

  TRes _res;

  call({
    Input$authUserSecurityKeys_inc_input? $_inc,
    Input$authUserSecurityKeys_set_input? $_set,
    Input$authUserSecurityKeys_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$authUserSecurityKeys_inc_input<TRes> get $_inc =>
      CopyWith$Input$authUserSecurityKeys_inc_input.stub(_res);
  CopyWith$Input$authUserSecurityKeys_set_input<TRes> get $_set =>
      CopyWith$Input$authUserSecurityKeys_set_input.stub(_res);
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get where =>
      CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_res);
}

class Input$authUserSecurityKeys_var_pop_order_by {
  factory Input$authUserSecurityKeys_var_pop_order_by(
          {Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_var_pop_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_var_pop_order_by._(this._$data);

  factory Input$authUserSecurityKeys_var_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_var_pop_order_by<
          Input$authUserSecurityKeys_var_pop_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_var_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_var_pop_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_var_pop_order_by(
    Input$authUserSecurityKeys_var_pop_order_by instance,
    TRes Function(Input$authUserSecurityKeys_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_var_pop_order_by;

  factory CopyWith$Input$authUserSecurityKeys_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_var_pop_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_var_pop_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_var_pop_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_var_pop_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_var_pop_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_var_pop_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$authUserSecurityKeys_var_samp_order_by {
  factory Input$authUserSecurityKeys_var_samp_order_by(
          {Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_var_samp_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_var_samp_order_by._(this._$data);

  factory Input$authUserSecurityKeys_var_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_var_samp_order_by<
          Input$authUserSecurityKeys_var_samp_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_var_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_var_samp_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_var_samp_order_by(
    Input$authUserSecurityKeys_var_samp_order_by instance,
    TRes Function(Input$authUserSecurityKeys_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_var_samp_order_by;

  factory CopyWith$Input$authUserSecurityKeys_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_var_samp_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_var_samp_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_var_samp_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_var_samp_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_var_samp_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_var_samp_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$authUserSecurityKeys_variance_order_by {
  factory Input$authUserSecurityKeys_variance_order_by(
          {Enum$order_by? counter}) =>
      Input$authUserSecurityKeys_variance_order_by._({
        if (counter != null) r'counter': counter,
      });

  Input$authUserSecurityKeys_variance_order_by._(this._$data);

  factory Input$authUserSecurityKeys_variance_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('counter')) {
      final l$counter = data['counter'];
      result$data['counter'] = l$counter == null
          ? null
          : fromJson$Enum$order_by((l$counter as String));
    }
    return Input$authUserSecurityKeys_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get counter => (_$data['counter'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('counter')) {
      final l$counter = counter;
      result$data['counter'] =
          l$counter == null ? null : toJson$Enum$order_by(l$counter);
    }
    return result$data;
  }

  CopyWith$Input$authUserSecurityKeys_variance_order_by<
          Input$authUserSecurityKeys_variance_order_by>
      get copyWith => CopyWith$Input$authUserSecurityKeys_variance_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$authUserSecurityKeys_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$counter = counter;
    final lOther$counter = other.counter;
    if (_$data.containsKey('counter') != other._$data.containsKey('counter')) {
      return false;
    }
    if (l$counter != lOther$counter) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$counter = counter;
    return Object.hashAll(
        [_$data.containsKey('counter') ? l$counter : const {}]);
  }
}

abstract class CopyWith$Input$authUserSecurityKeys_variance_order_by<TRes> {
  factory CopyWith$Input$authUserSecurityKeys_variance_order_by(
    Input$authUserSecurityKeys_variance_order_by instance,
    TRes Function(Input$authUserSecurityKeys_variance_order_by) then,
  ) = _CopyWithImpl$Input$authUserSecurityKeys_variance_order_by;

  factory CopyWith$Input$authUserSecurityKeys_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$authUserSecurityKeys_variance_order_by;

  TRes call({Enum$order_by? counter});
}

class _CopyWithImpl$Input$authUserSecurityKeys_variance_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_variance_order_by<TRes> {
  _CopyWithImpl$Input$authUserSecurityKeys_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$authUserSecurityKeys_variance_order_by _instance;

  final TRes Function(Input$authUserSecurityKeys_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? counter = _undefined}) =>
      _then(Input$authUserSecurityKeys_variance_order_by._({
        ..._instance._$data,
        if (counter != _undefined) 'counter': (counter as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$authUserSecurityKeys_variance_order_by<TRes>
    implements CopyWith$Input$authUserSecurityKeys_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$authUserSecurityKeys_variance_order_by(this._res);

  TRes _res;

  call({Enum$order_by? counter}) => _res;
}

class Input$bigint_comparison_exp {
  factory Input$bigint_comparison_exp({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      Input$bigint_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$bigint_comparison_exp._(this._$data);

  factory Input$bigint_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as int?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as int?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as int?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as int?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as int?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as int?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as int)).toList();
    }
    return Input$bigint_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get $_eq => (_$data['_eq'] as int?);
  int? get $_gt => (_$data['_gt'] as int?);
  int? get $_gte => (_$data['_gte'] as int?);
  List<int>? get $_in => (_$data['_in'] as List<int>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  int? get $_lt => (_$data['_lt'] as int?);
  int? get $_lte => (_$data['_lte'] as int?);
  int? get $_neq => (_$data['_neq'] as int?);
  List<int>? get $_nin => (_$data['_nin'] as List<int>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$bigint_comparison_exp<Input$bigint_comparison_exp>
      get copyWith => CopyWith$Input$bigint_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$bigint_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$bigint_comparison_exp<TRes> {
  factory CopyWith$Input$bigint_comparison_exp(
    Input$bigint_comparison_exp instance,
    TRes Function(Input$bigint_comparison_exp) then,
  ) = _CopyWithImpl$Input$bigint_comparison_exp;

  factory CopyWith$Input$bigint_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$bigint_comparison_exp;

  TRes call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  });
}

class _CopyWithImpl$Input$bigint_comparison_exp<TRes>
    implements CopyWith$Input$bigint_comparison_exp<TRes> {
  _CopyWithImpl$Input$bigint_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$bigint_comparison_exp _instance;

  final TRes Function(Input$bigint_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$bigint_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as int?),
        if ($_gt != _undefined) '_gt': ($_gt as int?),
        if ($_gte != _undefined) '_gte': ($_gte as int?),
        if ($_in != _undefined) '_in': ($_in as List<int>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as int?),
        if ($_lte != _undefined) '_lte': ($_lte as int?),
        if ($_neq != _undefined) '_neq': ($_neq as int?),
        if ($_nin != _undefined) '_nin': ($_nin as List<int>?),
      }));
}

class _CopyWithStubImpl$Input$bigint_comparison_exp<TRes>
    implements CopyWith$Input$bigint_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$bigint_comparison_exp(this._res);

  TRes _res;

  call({
    int? $_eq,
    int? $_gt,
    int? $_gte,
    List<int>? $_in,
    bool? $_is_null,
    int? $_lt,
    int? $_lte,
    int? $_neq,
    List<int>? $_nin,
  }) =>
      _res;
}

class Input$blog_bool_exp {
  factory Input$blog_bool_exp({
    List<Input$blog_bool_exp>? $_and,
    Input$blog_bool_exp? $_not,
    List<Input$blog_bool_exp>? $_or,
    Input$String_comparison_exp? blog_content,
    Input$date_comparison_exp? blog_date,
    Input$Int_comparison_exp? blog_id,
    Input$String_comparison_exp? blog_title,
    Input$timestamptz_comparison_exp? created_at,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      Input$blog_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (blog_content != null) r'blog_content': blog_content,
        if (blog_date != null) r'blog_date': blog_date,
        if (blog_id != null) r'blog_id': blog_id,
        if (blog_title != null) r'blog_title': blog_title,
        if (created_at != null) r'created_at': created_at,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$blog_bool_exp._(this._$data);

  factory Input$blog_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$blog_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$blog_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$blog_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('blog_content')) {
      final l$blog_content = data['blog_content'];
      result$data['blog_content'] = l$blog_content == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$blog_content as Map<String, dynamic>));
    }
    if (data.containsKey('blog_date')) {
      final l$blog_date = data['blog_date'];
      result$data['blog_date'] = l$blog_date == null
          ? null
          : Input$date_comparison_exp.fromJson(
              (l$blog_date as Map<String, dynamic>));
    }
    if (data.containsKey('blog_id')) {
      final l$blog_id = data['blog_id'];
      result$data['blog_id'] = l$blog_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$blog_id as Map<String, dynamic>));
    }
    if (data.containsKey('blog_title')) {
      final l$blog_title = data['blog_title'];
      result$data['blog_title'] = l$blog_title == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$blog_title as Map<String, dynamic>));
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    return Input$blog_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$blog_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$blog_bool_exp>?);
  Input$blog_bool_exp? get $_not => (_$data['_not'] as Input$blog_bool_exp?);
  List<Input$blog_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$blog_bool_exp>?);
  Input$String_comparison_exp? get blog_content =>
      (_$data['blog_content'] as Input$String_comparison_exp?);
  Input$date_comparison_exp? get blog_date =>
      (_$data['blog_date'] as Input$date_comparison_exp?);
  Input$Int_comparison_exp? get blog_id =>
      (_$data['blog_id'] as Input$Int_comparison_exp?);
  Input$String_comparison_exp? get blog_title =>
      (_$data['blog_title'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('blog_content')) {
      final l$blog_content = blog_content;
      result$data['blog_content'] = l$blog_content?.toJson();
    }
    if (_$data.containsKey('blog_date')) {
      final l$blog_date = blog_date;
      result$data['blog_date'] = l$blog_date?.toJson();
    }
    if (_$data.containsKey('blog_id')) {
      final l$blog_id = blog_id;
      result$data['blog_id'] = l$blog_id?.toJson();
    }
    if (_$data.containsKey('blog_title')) {
      final l$blog_title = blog_title;
      result$data['blog_title'] = l$blog_title?.toJson();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$blog_bool_exp<Input$blog_bool_exp> get copyWith =>
      CopyWith$Input$blog_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$blog_content = blog_content;
    final lOther$blog_content = other.blog_content;
    if (_$data.containsKey('blog_content') !=
        other._$data.containsKey('blog_content')) {
      return false;
    }
    if (l$blog_content != lOther$blog_content) {
      return false;
    }
    final l$blog_date = blog_date;
    final lOther$blog_date = other.blog_date;
    if (_$data.containsKey('blog_date') !=
        other._$data.containsKey('blog_date')) {
      return false;
    }
    if (l$blog_date != lOther$blog_date) {
      return false;
    }
    final l$blog_id = blog_id;
    final lOther$blog_id = other.blog_id;
    if (_$data.containsKey('blog_id') != other._$data.containsKey('blog_id')) {
      return false;
    }
    if (l$blog_id != lOther$blog_id) {
      return false;
    }
    final l$blog_title = blog_title;
    final lOther$blog_title = other.blog_title;
    if (_$data.containsKey('blog_title') !=
        other._$data.containsKey('blog_title')) {
      return false;
    }
    if (l$blog_title != lOther$blog_title) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$blog_content = blog_content;
    final l$blog_date = blog_date;
    final l$blog_id = blog_id;
    final l$blog_title = blog_title;
    final l$created_at = created_at;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('blog_content') ? l$blog_content : const {},
      _$data.containsKey('blog_date') ? l$blog_date : const {},
      _$data.containsKey('blog_id') ? l$blog_id : const {},
      _$data.containsKey('blog_title') ? l$blog_title : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$blog_bool_exp<TRes> {
  factory CopyWith$Input$blog_bool_exp(
    Input$blog_bool_exp instance,
    TRes Function(Input$blog_bool_exp) then,
  ) = _CopyWithImpl$Input$blog_bool_exp;

  factory CopyWith$Input$blog_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_bool_exp;

  TRes call({
    List<Input$blog_bool_exp>? $_and,
    Input$blog_bool_exp? $_not,
    List<Input$blog_bool_exp>? $_or,
    Input$String_comparison_exp? blog_content,
    Input$date_comparison_exp? blog_date,
    Input$Int_comparison_exp? blog_id,
    Input$String_comparison_exp? blog_title,
    Input$timestamptz_comparison_exp? created_at,
    Input$timestamptz_comparison_exp? updated_at,
  });
  TRes $_and(
      Iterable<Input$blog_bool_exp>? Function(
              Iterable<CopyWith$Input$blog_bool_exp<Input$blog_bool_exp>>?)
          _fn);
  CopyWith$Input$blog_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$blog_bool_exp>? Function(
              Iterable<CopyWith$Input$blog_bool_exp<Input$blog_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get blog_content;
  CopyWith$Input$date_comparison_exp<TRes> get blog_date;
  CopyWith$Input$Int_comparison_exp<TRes> get blog_id;
  CopyWith$Input$String_comparison_exp<TRes> get blog_title;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
}

class _CopyWithImpl$Input$blog_bool_exp<TRes>
    implements CopyWith$Input$blog_bool_exp<TRes> {
  _CopyWithImpl$Input$blog_bool_exp(
    this._instance,
    this._then,
  );

  final Input$blog_bool_exp _instance;

  final TRes Function(Input$blog_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? blog_content = _undefined,
    Object? blog_date = _undefined,
    Object? blog_id = _undefined,
    Object? blog_title = _undefined,
    Object? created_at = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$blog_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined) '_and': ($_and as List<Input$blog_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$blog_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$blog_bool_exp>?),
        if (blog_content != _undefined)
          'blog_content': (blog_content as Input$String_comparison_exp?),
        if (blog_date != _undefined)
          'blog_date': (blog_date as Input$date_comparison_exp?),
        if (blog_id != _undefined)
          'blog_id': (blog_id as Input$Int_comparison_exp?),
        if (blog_title != _undefined)
          'blog_title': (blog_title as Input$String_comparison_exp?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$blog_bool_exp>? Function(
                  Iterable<CopyWith$Input$blog_bool_exp<Input$blog_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$blog_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$blog_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$blog_bool_exp.stub(_then(_instance))
        : CopyWith$Input$blog_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$blog_bool_exp>? Function(
                  Iterable<CopyWith$Input$blog_bool_exp<Input$blog_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$blog_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get blog_content {
    final local$blog_content = _instance.blog_content;
    return local$blog_content == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$blog_content, (e) => call(blog_content: e));
  }

  CopyWith$Input$date_comparison_exp<TRes> get blog_date {
    final local$blog_date = _instance.blog_date;
    return local$blog_date == null
        ? CopyWith$Input$date_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$date_comparison_exp(
            local$blog_date, (e) => call(blog_date: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get blog_id {
    final local$blog_id = _instance.blog_id;
    return local$blog_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$blog_id, (e) => call(blog_id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get blog_title {
    final local$blog_title = _instance.blog_title;
    return local$blog_title == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$blog_title, (e) => call(blog_title: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }
}

class _CopyWithStubImpl$Input$blog_bool_exp<TRes>
    implements CopyWith$Input$blog_bool_exp<TRes> {
  _CopyWithStubImpl$Input$blog_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$blog_bool_exp>? $_and,
    Input$blog_bool_exp? $_not,
    List<Input$blog_bool_exp>? $_or,
    Input$String_comparison_exp? blog_content,
    Input$date_comparison_exp? blog_date,
    Input$Int_comparison_exp? blog_id,
    Input$String_comparison_exp? blog_title,
    Input$timestamptz_comparison_exp? created_at,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$blog_bool_exp<TRes> get $_not =>
      CopyWith$Input$blog_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get blog_content =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$date_comparison_exp<TRes> get blog_date =>
      CopyWith$Input$date_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get blog_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get blog_title =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$blog_insert_input {
  factory Input$blog_insert_input({
    String? blog_content,
    DateTime? blog_date,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  }) =>
      Input$blog_insert_input._({
        if (blog_content != null) r'blog_content': blog_content,
        if (blog_date != null) r'blog_date': blog_date,
        if (blog_title != null) r'blog_title': blog_title,
        if (created_at != null) r'created_at': created_at,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$blog_insert_input._(this._$data);

  factory Input$blog_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('blog_content')) {
      final l$blog_content = data['blog_content'];
      result$data['blog_content'] = (l$blog_content as String?);
    }
    if (data.containsKey('blog_date')) {
      final l$blog_date = data['blog_date'];
      result$data['blog_date'] =
          l$blog_date == null ? null : DateTime.parse((l$blog_date as String));
    }
    if (data.containsKey('blog_title')) {
      final l$blog_title = data['blog_title'];
      result$data['blog_title'] = (l$blog_title as String?);
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$blog_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get blog_content => (_$data['blog_content'] as String?);
  DateTime? get blog_date => (_$data['blog_date'] as DateTime?);
  String? get blog_title => (_$data['blog_title'] as String?);
  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('blog_content')) {
      final l$blog_content = blog_content;
      result$data['blog_content'] = l$blog_content;
    }
    if (_$data.containsKey('blog_date')) {
      final l$blog_date = blog_date;
      result$data['blog_date'] = l$blog_date?.toIso8601String();
    }
    if (_$data.containsKey('blog_title')) {
      final l$blog_title = blog_title;
      result$data['blog_title'] = l$blog_title;
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$blog_insert_input<Input$blog_insert_input> get copyWith =>
      CopyWith$Input$blog_insert_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$blog_content = blog_content;
    final lOther$blog_content = other.blog_content;
    if (_$data.containsKey('blog_content') !=
        other._$data.containsKey('blog_content')) {
      return false;
    }
    if (l$blog_content != lOther$blog_content) {
      return false;
    }
    final l$blog_date = blog_date;
    final lOther$blog_date = other.blog_date;
    if (_$data.containsKey('blog_date') !=
        other._$data.containsKey('blog_date')) {
      return false;
    }
    if (l$blog_date != lOther$blog_date) {
      return false;
    }
    final l$blog_title = blog_title;
    final lOther$blog_title = other.blog_title;
    if (_$data.containsKey('blog_title') !=
        other._$data.containsKey('blog_title')) {
      return false;
    }
    if (l$blog_title != lOther$blog_title) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$blog_content = blog_content;
    final l$blog_date = blog_date;
    final l$blog_title = blog_title;
    final l$created_at = created_at;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('blog_content') ? l$blog_content : const {},
      _$data.containsKey('blog_date') ? l$blog_date : const {},
      _$data.containsKey('blog_title') ? l$blog_title : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$blog_insert_input<TRes> {
  factory CopyWith$Input$blog_insert_input(
    Input$blog_insert_input instance,
    TRes Function(Input$blog_insert_input) then,
  ) = _CopyWithImpl$Input$blog_insert_input;

  factory CopyWith$Input$blog_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_insert_input;

  TRes call({
    String? blog_content,
    DateTime? blog_date,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$blog_insert_input<TRes>
    implements CopyWith$Input$blog_insert_input<TRes> {
  _CopyWithImpl$Input$blog_insert_input(
    this._instance,
    this._then,
  );

  final Input$blog_insert_input _instance;

  final TRes Function(Input$blog_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? blog_content = _undefined,
    Object? blog_date = _undefined,
    Object? blog_title = _undefined,
    Object? created_at = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$blog_insert_input._({
        ..._instance._$data,
        if (blog_content != _undefined)
          'blog_content': (blog_content as String?),
        if (blog_date != _undefined) 'blog_date': (blog_date as DateTime?),
        if (blog_title != _undefined) 'blog_title': (blog_title as String?),
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$blog_insert_input<TRes>
    implements CopyWith$Input$blog_insert_input<TRes> {
  _CopyWithStubImpl$Input$blog_insert_input(this._res);

  TRes _res;

  call({
    String? blog_content,
    DateTime? blog_date,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$blog_on_conflict {
  factory Input$blog_on_conflict({
    required Enum$blog_constraint constraint,
    required List<Enum$blog_update_column> update_columns,
    Input$blog_bool_exp? where,
  }) =>
      Input$blog_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$blog_on_conflict._(this._$data);

  factory Input$blog_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$blog_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$blog_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$blog_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$blog_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$blog_constraint get constraint =>
      (_$data['constraint'] as Enum$blog_constraint);
  List<Enum$blog_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$blog_update_column>);
  Input$blog_bool_exp? get where => (_$data['where'] as Input$blog_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$blog_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] =
        l$update_columns.map((e) => toJson$Enum$blog_update_column(e)).toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$blog_on_conflict<Input$blog_on_conflict> get copyWith =>
      CopyWith$Input$blog_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$blog_on_conflict<TRes> {
  factory CopyWith$Input$blog_on_conflict(
    Input$blog_on_conflict instance,
    TRes Function(Input$blog_on_conflict) then,
  ) = _CopyWithImpl$Input$blog_on_conflict;

  factory CopyWith$Input$blog_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_on_conflict;

  TRes call({
    Enum$blog_constraint? constraint,
    List<Enum$blog_update_column>? update_columns,
    Input$blog_bool_exp? where,
  });
  CopyWith$Input$blog_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$blog_on_conflict<TRes>
    implements CopyWith$Input$blog_on_conflict<TRes> {
  _CopyWithImpl$Input$blog_on_conflict(
    this._instance,
    this._then,
  );

  final Input$blog_on_conflict _instance;

  final TRes Function(Input$blog_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$blog_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$blog_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns as List<Enum$blog_update_column>),
        if (where != _undefined) 'where': (where as Input$blog_bool_exp?),
      }));
  CopyWith$Input$blog_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$blog_bool_exp.stub(_then(_instance))
        : CopyWith$Input$blog_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$blog_on_conflict<TRes>
    implements CopyWith$Input$blog_on_conflict<TRes> {
  _CopyWithStubImpl$Input$blog_on_conflict(this._res);

  TRes _res;

  call({
    Enum$blog_constraint? constraint,
    List<Enum$blog_update_column>? update_columns,
    Input$blog_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$blog_bool_exp<TRes> get where =>
      CopyWith$Input$blog_bool_exp.stub(_res);
}

class Input$blog_order_by {
  factory Input$blog_order_by({
    Enum$order_by? blog_content,
    Enum$order_by? blog_date,
    Enum$order_by? blog_id,
    Enum$order_by? blog_title,
    Enum$order_by? created_at,
    Enum$order_by? updated_at,
  }) =>
      Input$blog_order_by._({
        if (blog_content != null) r'blog_content': blog_content,
        if (blog_date != null) r'blog_date': blog_date,
        if (blog_id != null) r'blog_id': blog_id,
        if (blog_title != null) r'blog_title': blog_title,
        if (created_at != null) r'created_at': created_at,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$blog_order_by._(this._$data);

  factory Input$blog_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('blog_content')) {
      final l$blog_content = data['blog_content'];
      result$data['blog_content'] = l$blog_content == null
          ? null
          : fromJson$Enum$order_by((l$blog_content as String));
    }
    if (data.containsKey('blog_date')) {
      final l$blog_date = data['blog_date'];
      result$data['blog_date'] = l$blog_date == null
          ? null
          : fromJson$Enum$order_by((l$blog_date as String));
    }
    if (data.containsKey('blog_id')) {
      final l$blog_id = data['blog_id'];
      result$data['blog_id'] = l$blog_id == null
          ? null
          : fromJson$Enum$order_by((l$blog_id as String));
    }
    if (data.containsKey('blog_title')) {
      final l$blog_title = data['blog_title'];
      result$data['blog_title'] = l$blog_title == null
          ? null
          : fromJson$Enum$order_by((l$blog_title as String));
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$blog_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get blog_content => (_$data['blog_content'] as Enum$order_by?);
  Enum$order_by? get blog_date => (_$data['blog_date'] as Enum$order_by?);
  Enum$order_by? get blog_id => (_$data['blog_id'] as Enum$order_by?);
  Enum$order_by? get blog_title => (_$data['blog_title'] as Enum$order_by?);
  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('blog_content')) {
      final l$blog_content = blog_content;
      result$data['blog_content'] =
          l$blog_content == null ? null : toJson$Enum$order_by(l$blog_content);
    }
    if (_$data.containsKey('blog_date')) {
      final l$blog_date = blog_date;
      result$data['blog_date'] =
          l$blog_date == null ? null : toJson$Enum$order_by(l$blog_date);
    }
    if (_$data.containsKey('blog_id')) {
      final l$blog_id = blog_id;
      result$data['blog_id'] =
          l$blog_id == null ? null : toJson$Enum$order_by(l$blog_id);
    }
    if (_$data.containsKey('blog_title')) {
      final l$blog_title = blog_title;
      result$data['blog_title'] =
          l$blog_title == null ? null : toJson$Enum$order_by(l$blog_title);
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$blog_order_by<Input$blog_order_by> get copyWith =>
      CopyWith$Input$blog_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$blog_content = blog_content;
    final lOther$blog_content = other.blog_content;
    if (_$data.containsKey('blog_content') !=
        other._$data.containsKey('blog_content')) {
      return false;
    }
    if (l$blog_content != lOther$blog_content) {
      return false;
    }
    final l$blog_date = blog_date;
    final lOther$blog_date = other.blog_date;
    if (_$data.containsKey('blog_date') !=
        other._$data.containsKey('blog_date')) {
      return false;
    }
    if (l$blog_date != lOther$blog_date) {
      return false;
    }
    final l$blog_id = blog_id;
    final lOther$blog_id = other.blog_id;
    if (_$data.containsKey('blog_id') != other._$data.containsKey('blog_id')) {
      return false;
    }
    if (l$blog_id != lOther$blog_id) {
      return false;
    }
    final l$blog_title = blog_title;
    final lOther$blog_title = other.blog_title;
    if (_$data.containsKey('blog_title') !=
        other._$data.containsKey('blog_title')) {
      return false;
    }
    if (l$blog_title != lOther$blog_title) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$blog_content = blog_content;
    final l$blog_date = blog_date;
    final l$blog_id = blog_id;
    final l$blog_title = blog_title;
    final l$created_at = created_at;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('blog_content') ? l$blog_content : const {},
      _$data.containsKey('blog_date') ? l$blog_date : const {},
      _$data.containsKey('blog_id') ? l$blog_id : const {},
      _$data.containsKey('blog_title') ? l$blog_title : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$blog_order_by<TRes> {
  factory CopyWith$Input$blog_order_by(
    Input$blog_order_by instance,
    TRes Function(Input$blog_order_by) then,
  ) = _CopyWithImpl$Input$blog_order_by;

  factory CopyWith$Input$blog_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_order_by;

  TRes call({
    Enum$order_by? blog_content,
    Enum$order_by? blog_date,
    Enum$order_by? blog_id,
    Enum$order_by? blog_title,
    Enum$order_by? created_at,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$blog_order_by<TRes>
    implements CopyWith$Input$blog_order_by<TRes> {
  _CopyWithImpl$Input$blog_order_by(
    this._instance,
    this._then,
  );

  final Input$blog_order_by _instance;

  final TRes Function(Input$blog_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? blog_content = _undefined,
    Object? blog_date = _undefined,
    Object? blog_id = _undefined,
    Object? blog_title = _undefined,
    Object? created_at = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$blog_order_by._({
        ..._instance._$data,
        if (blog_content != _undefined)
          'blog_content': (blog_content as Enum$order_by?),
        if (blog_date != _undefined) 'blog_date': (blog_date as Enum$order_by?),
        if (blog_id != _undefined) 'blog_id': (blog_id as Enum$order_by?),
        if (blog_title != _undefined)
          'blog_title': (blog_title as Enum$order_by?),
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$blog_order_by<TRes>
    implements CopyWith$Input$blog_order_by<TRes> {
  _CopyWithStubImpl$Input$blog_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? blog_content,
    Enum$order_by? blog_date,
    Enum$order_by? blog_id,
    Enum$order_by? blog_title,
    Enum$order_by? created_at,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$blog_pk_columns_input {
  factory Input$blog_pk_columns_input({required int blog_id}) =>
      Input$blog_pk_columns_input._({
        r'blog_id': blog_id,
      });

  Input$blog_pk_columns_input._(this._$data);

  factory Input$blog_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$blog_id = data['blog_id'];
    result$data['blog_id'] = (l$blog_id as int);
    return Input$blog_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int get blog_id => (_$data['blog_id'] as int);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$blog_id = blog_id;
    result$data['blog_id'] = l$blog_id;
    return result$data;
  }

  CopyWith$Input$blog_pk_columns_input<Input$blog_pk_columns_input>
      get copyWith => CopyWith$Input$blog_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$blog_id = blog_id;
    final lOther$blog_id = other.blog_id;
    if (l$blog_id != lOther$blog_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$blog_id = blog_id;
    return Object.hashAll([l$blog_id]);
  }
}

abstract class CopyWith$Input$blog_pk_columns_input<TRes> {
  factory CopyWith$Input$blog_pk_columns_input(
    Input$blog_pk_columns_input instance,
    TRes Function(Input$blog_pk_columns_input) then,
  ) = _CopyWithImpl$Input$blog_pk_columns_input;

  factory CopyWith$Input$blog_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_pk_columns_input;

  TRes call({int? blog_id});
}

class _CopyWithImpl$Input$blog_pk_columns_input<TRes>
    implements CopyWith$Input$blog_pk_columns_input<TRes> {
  _CopyWithImpl$Input$blog_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$blog_pk_columns_input _instance;

  final TRes Function(Input$blog_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? blog_id = _undefined}) =>
      _then(Input$blog_pk_columns_input._({
        ..._instance._$data,
        if (blog_id != _undefined && blog_id != null)
          'blog_id': (blog_id as int),
      }));
}

class _CopyWithStubImpl$Input$blog_pk_columns_input<TRes>
    implements CopyWith$Input$blog_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$blog_pk_columns_input(this._res);

  TRes _res;

  call({int? blog_id}) => _res;
}

class Input$blog_set_input {
  factory Input$blog_set_input({
    String? blog_content,
    DateTime? blog_date,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  }) =>
      Input$blog_set_input._({
        if (blog_content != null) r'blog_content': blog_content,
        if (blog_date != null) r'blog_date': blog_date,
        if (blog_title != null) r'blog_title': blog_title,
        if (created_at != null) r'created_at': created_at,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$blog_set_input._(this._$data);

  factory Input$blog_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('blog_content')) {
      final l$blog_content = data['blog_content'];
      result$data['blog_content'] = (l$blog_content as String?);
    }
    if (data.containsKey('blog_date')) {
      final l$blog_date = data['blog_date'];
      result$data['blog_date'] =
          l$blog_date == null ? null : DateTime.parse((l$blog_date as String));
    }
    if (data.containsKey('blog_title')) {
      final l$blog_title = data['blog_title'];
      result$data['blog_title'] = (l$blog_title as String?);
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$blog_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get blog_content => (_$data['blog_content'] as String?);
  DateTime? get blog_date => (_$data['blog_date'] as DateTime?);
  String? get blog_title => (_$data['blog_title'] as String?);
  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('blog_content')) {
      final l$blog_content = blog_content;
      result$data['blog_content'] = l$blog_content;
    }
    if (_$data.containsKey('blog_date')) {
      final l$blog_date = blog_date;
      result$data['blog_date'] = l$blog_date?.toIso8601String();
    }
    if (_$data.containsKey('blog_title')) {
      final l$blog_title = blog_title;
      result$data['blog_title'] = l$blog_title;
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$blog_set_input<Input$blog_set_input> get copyWith =>
      CopyWith$Input$blog_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_set_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$blog_content = blog_content;
    final lOther$blog_content = other.blog_content;
    if (_$data.containsKey('blog_content') !=
        other._$data.containsKey('blog_content')) {
      return false;
    }
    if (l$blog_content != lOther$blog_content) {
      return false;
    }
    final l$blog_date = blog_date;
    final lOther$blog_date = other.blog_date;
    if (_$data.containsKey('blog_date') !=
        other._$data.containsKey('blog_date')) {
      return false;
    }
    if (l$blog_date != lOther$blog_date) {
      return false;
    }
    final l$blog_title = blog_title;
    final lOther$blog_title = other.blog_title;
    if (_$data.containsKey('blog_title') !=
        other._$data.containsKey('blog_title')) {
      return false;
    }
    if (l$blog_title != lOther$blog_title) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$blog_content = blog_content;
    final l$blog_date = blog_date;
    final l$blog_title = blog_title;
    final l$created_at = created_at;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('blog_content') ? l$blog_content : const {},
      _$data.containsKey('blog_date') ? l$blog_date : const {},
      _$data.containsKey('blog_title') ? l$blog_title : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$blog_set_input<TRes> {
  factory CopyWith$Input$blog_set_input(
    Input$blog_set_input instance,
    TRes Function(Input$blog_set_input) then,
  ) = _CopyWithImpl$Input$blog_set_input;

  factory CopyWith$Input$blog_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_set_input;

  TRes call({
    String? blog_content,
    DateTime? blog_date,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$blog_set_input<TRes>
    implements CopyWith$Input$blog_set_input<TRes> {
  _CopyWithImpl$Input$blog_set_input(
    this._instance,
    this._then,
  );

  final Input$blog_set_input _instance;

  final TRes Function(Input$blog_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? blog_content = _undefined,
    Object? blog_date = _undefined,
    Object? blog_title = _undefined,
    Object? created_at = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$blog_set_input._({
        ..._instance._$data,
        if (blog_content != _undefined)
          'blog_content': (blog_content as String?),
        if (blog_date != _undefined) 'blog_date': (blog_date as DateTime?),
        if (blog_title != _undefined) 'blog_title': (blog_title as String?),
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$blog_set_input<TRes>
    implements CopyWith$Input$blog_set_input<TRes> {
  _CopyWithStubImpl$Input$blog_set_input(this._res);

  TRes _res;

  call({
    String? blog_content,
    DateTime? blog_date,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$blog_stream_cursor_input {
  factory Input$blog_stream_cursor_input({
    required Input$blog_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$blog_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$blog_stream_cursor_input._(this._$data);

  factory Input$blog_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$blog_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$blog_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$blog_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$blog_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$blog_stream_cursor_input<Input$blog_stream_cursor_input>
      get copyWith => CopyWith$Input$blog_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$blog_stream_cursor_input<TRes> {
  factory CopyWith$Input$blog_stream_cursor_input(
    Input$blog_stream_cursor_input instance,
    TRes Function(Input$blog_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$blog_stream_cursor_input;

  factory CopyWith$Input$blog_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_stream_cursor_input;

  TRes call({
    Input$blog_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$blog_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$blog_stream_cursor_input<TRes>
    implements CopyWith$Input$blog_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$blog_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$blog_stream_cursor_input _instance;

  final TRes Function(Input$blog_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$blog_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$blog_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$blog_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$blog_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$blog_stream_cursor_input<TRes>
    implements CopyWith$Input$blog_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$blog_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$blog_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$blog_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$blog_stream_cursor_value_input.stub(_res);
}

class Input$blog_stream_cursor_value_input {
  factory Input$blog_stream_cursor_value_input({
    String? blog_content,
    DateTime? blog_date,
    int? blog_id,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  }) =>
      Input$blog_stream_cursor_value_input._({
        if (blog_content != null) r'blog_content': blog_content,
        if (blog_date != null) r'blog_date': blog_date,
        if (blog_id != null) r'blog_id': blog_id,
        if (blog_title != null) r'blog_title': blog_title,
        if (created_at != null) r'created_at': created_at,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$blog_stream_cursor_value_input._(this._$data);

  factory Input$blog_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('blog_content')) {
      final l$blog_content = data['blog_content'];
      result$data['blog_content'] = (l$blog_content as String?);
    }
    if (data.containsKey('blog_date')) {
      final l$blog_date = data['blog_date'];
      result$data['blog_date'] =
          l$blog_date == null ? null : DateTime.parse((l$blog_date as String));
    }
    if (data.containsKey('blog_id')) {
      final l$blog_id = data['blog_id'];
      result$data['blog_id'] = (l$blog_id as int?);
    }
    if (data.containsKey('blog_title')) {
      final l$blog_title = data['blog_title'];
      result$data['blog_title'] = (l$blog_title as String?);
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$blog_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get blog_content => (_$data['blog_content'] as String?);
  DateTime? get blog_date => (_$data['blog_date'] as DateTime?);
  int? get blog_id => (_$data['blog_id'] as int?);
  String? get blog_title => (_$data['blog_title'] as String?);
  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('blog_content')) {
      final l$blog_content = blog_content;
      result$data['blog_content'] = l$blog_content;
    }
    if (_$data.containsKey('blog_date')) {
      final l$blog_date = blog_date;
      result$data['blog_date'] = l$blog_date?.toIso8601String();
    }
    if (_$data.containsKey('blog_id')) {
      final l$blog_id = blog_id;
      result$data['blog_id'] = l$blog_id;
    }
    if (_$data.containsKey('blog_title')) {
      final l$blog_title = blog_title;
      result$data['blog_title'] = l$blog_title;
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$blog_stream_cursor_value_input<
          Input$blog_stream_cursor_value_input>
      get copyWith => CopyWith$Input$blog_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$blog_content = blog_content;
    final lOther$blog_content = other.blog_content;
    if (_$data.containsKey('blog_content') !=
        other._$data.containsKey('blog_content')) {
      return false;
    }
    if (l$blog_content != lOther$blog_content) {
      return false;
    }
    final l$blog_date = blog_date;
    final lOther$blog_date = other.blog_date;
    if (_$data.containsKey('blog_date') !=
        other._$data.containsKey('blog_date')) {
      return false;
    }
    if (l$blog_date != lOther$blog_date) {
      return false;
    }
    final l$blog_id = blog_id;
    final lOther$blog_id = other.blog_id;
    if (_$data.containsKey('blog_id') != other._$data.containsKey('blog_id')) {
      return false;
    }
    if (l$blog_id != lOther$blog_id) {
      return false;
    }
    final l$blog_title = blog_title;
    final lOther$blog_title = other.blog_title;
    if (_$data.containsKey('blog_title') !=
        other._$data.containsKey('blog_title')) {
      return false;
    }
    if (l$blog_title != lOther$blog_title) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$blog_content = blog_content;
    final l$blog_date = blog_date;
    final l$blog_id = blog_id;
    final l$blog_title = blog_title;
    final l$created_at = created_at;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('blog_content') ? l$blog_content : const {},
      _$data.containsKey('blog_date') ? l$blog_date : const {},
      _$data.containsKey('blog_id') ? l$blog_id : const {},
      _$data.containsKey('blog_title') ? l$blog_title : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$blog_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$blog_stream_cursor_value_input(
    Input$blog_stream_cursor_value_input instance,
    TRes Function(Input$blog_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$blog_stream_cursor_value_input;

  factory CopyWith$Input$blog_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_stream_cursor_value_input;

  TRes call({
    String? blog_content,
    DateTime? blog_date,
    int? blog_id,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$blog_stream_cursor_value_input<TRes>
    implements CopyWith$Input$blog_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$blog_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$blog_stream_cursor_value_input _instance;

  final TRes Function(Input$blog_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? blog_content = _undefined,
    Object? blog_date = _undefined,
    Object? blog_id = _undefined,
    Object? blog_title = _undefined,
    Object? created_at = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$blog_stream_cursor_value_input._({
        ..._instance._$data,
        if (blog_content != _undefined)
          'blog_content': (blog_content as String?),
        if (blog_date != _undefined) 'blog_date': (blog_date as DateTime?),
        if (blog_id != _undefined) 'blog_id': (blog_id as int?),
        if (blog_title != _undefined) 'blog_title': (blog_title as String?),
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$blog_stream_cursor_value_input<TRes>
    implements CopyWith$Input$blog_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$blog_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? blog_content,
    DateTime? blog_date,
    int? blog_id,
    String? blog_title,
    DateTime? created_at,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$blog_updates {
  factory Input$blog_updates({
    Input$blog_set_input? $_set,
    required Input$blog_bool_exp where,
  }) =>
      Input$blog_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$blog_updates._(this._$data);

  factory Input$blog_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$blog_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$blog_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$blog_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$blog_set_input? get $_set => (_$data['_set'] as Input$blog_set_input?);
  Input$blog_bool_exp get where => (_$data['where'] as Input$blog_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$blog_updates<Input$blog_updates> get copyWith =>
      CopyWith$Input$blog_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$blog_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$blog_updates<TRes> {
  factory CopyWith$Input$blog_updates(
    Input$blog_updates instance,
    TRes Function(Input$blog_updates) then,
  ) = _CopyWithImpl$Input$blog_updates;

  factory CopyWith$Input$blog_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$blog_updates;

  TRes call({
    Input$blog_set_input? $_set,
    Input$blog_bool_exp? where,
  });
  CopyWith$Input$blog_set_input<TRes> get $_set;
  CopyWith$Input$blog_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$blog_updates<TRes>
    implements CopyWith$Input$blog_updates<TRes> {
  _CopyWithImpl$Input$blog_updates(
    this._instance,
    this._then,
  );

  final Input$blog_updates _instance;

  final TRes Function(Input$blog_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$blog_updates._({
        ..._instance._$data,
        if ($_set != _undefined) '_set': ($_set as Input$blog_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$blog_bool_exp),
      }));
  CopyWith$Input$blog_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$blog_set_input.stub(_then(_instance))
        : CopyWith$Input$blog_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$blog_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$blog_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$blog_updates<TRes>
    implements CopyWith$Input$blog_updates<TRes> {
  _CopyWithStubImpl$Input$blog_updates(this._res);

  TRes _res;

  call({
    Input$blog_set_input? $_set,
    Input$blog_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$blog_set_input<TRes> get $_set =>
      CopyWith$Input$blog_set_input.stub(_res);
  CopyWith$Input$blog_bool_exp<TRes> get where =>
      CopyWith$Input$blog_bool_exp.stub(_res);
}

class Input$buckets_bool_exp {
  factory Input$buckets_bool_exp({
    List<Input$buckets_bool_exp>? $_and,
    Input$buckets_bool_exp? $_not,
    List<Input$buckets_bool_exp>? $_or,
    Input$String_comparison_exp? cacheControl,
    Input$timestamptz_comparison_exp? createdAt,
    Input$Int_comparison_exp? downloadExpiration,
    Input$files_bool_exp? files,
    Input$files_aggregate_bool_exp? files_aggregate,
    Input$String_comparison_exp? id,
    Input$Int_comparison_exp? maxUploadFileSize,
    Input$Int_comparison_exp? minUploadFileSize,
    Input$Boolean_comparison_exp? presignedUrlsEnabled,
    Input$timestamptz_comparison_exp? updatedAt,
  }) =>
      Input$buckets_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (cacheControl != null) r'cacheControl': cacheControl,
        if (createdAt != null) r'createdAt': createdAt,
        if (downloadExpiration != null)
          r'downloadExpiration': downloadExpiration,
        if (files != null) r'files': files,
        if (files_aggregate != null) r'files_aggregate': files_aggregate,
        if (id != null) r'id': id,
        if (maxUploadFileSize != null) r'maxUploadFileSize': maxUploadFileSize,
        if (minUploadFileSize != null) r'minUploadFileSize': minUploadFileSize,
        if (presignedUrlsEnabled != null)
          r'presignedUrlsEnabled': presignedUrlsEnabled,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$buckets_bool_exp._(this._$data);

  factory Input$buckets_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$buckets_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$buckets_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$buckets_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('cacheControl')) {
      final l$cacheControl = data['cacheControl'];
      result$data['cacheControl'] = l$cacheControl == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$cacheControl as Map<String, dynamic>));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$createdAt as Map<String, dynamic>));
    }
    if (data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = data['downloadExpiration'];
      result$data['downloadExpiration'] = l$downloadExpiration == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$downloadExpiration as Map<String, dynamic>));
    }
    if (data.containsKey('files')) {
      final l$files = data['files'];
      result$data['files'] = l$files == null
          ? null
          : Input$files_bool_exp.fromJson((l$files as Map<String, dynamic>));
    }
    if (data.containsKey('files_aggregate')) {
      final l$files_aggregate = data['files_aggregate'];
      result$data['files_aggregate'] = l$files_aggregate == null
          ? null
          : Input$files_aggregate_bool_exp.fromJson(
              (l$files_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$id as Map<String, dynamic>));
    }
    if (data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = data['maxUploadFileSize'];
      result$data['maxUploadFileSize'] = l$maxUploadFileSize == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$maxUploadFileSize as Map<String, dynamic>));
    }
    if (data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = data['minUploadFileSize'];
      result$data['minUploadFileSize'] = l$minUploadFileSize == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$minUploadFileSize as Map<String, dynamic>));
    }
    if (data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = data['presignedUrlsEnabled'];
      result$data['presignedUrlsEnabled'] = l$presignedUrlsEnabled == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$presignedUrlsEnabled as Map<String, dynamic>));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updatedAt as Map<String, dynamic>));
    }
    return Input$buckets_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$buckets_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$buckets_bool_exp>?);
  Input$buckets_bool_exp? get $_not =>
      (_$data['_not'] as Input$buckets_bool_exp?);
  List<Input$buckets_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$buckets_bool_exp>?);
  Input$String_comparison_exp? get cacheControl =>
      (_$data['cacheControl'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get createdAt =>
      (_$data['createdAt'] as Input$timestamptz_comparison_exp?);
  Input$Int_comparison_exp? get downloadExpiration =>
      (_$data['downloadExpiration'] as Input$Int_comparison_exp?);
  Input$files_bool_exp? get files => (_$data['files'] as Input$files_bool_exp?);
  Input$files_aggregate_bool_exp? get files_aggregate =>
      (_$data['files_aggregate'] as Input$files_aggregate_bool_exp?);
  Input$String_comparison_exp? get id =>
      (_$data['id'] as Input$String_comparison_exp?);
  Input$Int_comparison_exp? get maxUploadFileSize =>
      (_$data['maxUploadFileSize'] as Input$Int_comparison_exp?);
  Input$Int_comparison_exp? get minUploadFileSize =>
      (_$data['minUploadFileSize'] as Input$Int_comparison_exp?);
  Input$Boolean_comparison_exp? get presignedUrlsEnabled =>
      (_$data['presignedUrlsEnabled'] as Input$Boolean_comparison_exp?);
  Input$timestamptz_comparison_exp? get updatedAt =>
      (_$data['updatedAt'] as Input$timestamptz_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('cacheControl')) {
      final l$cacheControl = cacheControl;
      result$data['cacheControl'] = l$cacheControl?.toJson();
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toJson();
    }
    if (_$data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = downloadExpiration;
      result$data['downloadExpiration'] = l$downloadExpiration?.toJson();
    }
    if (_$data.containsKey('files')) {
      final l$files = files;
      result$data['files'] = l$files?.toJson();
    }
    if (_$data.containsKey('files_aggregate')) {
      final l$files_aggregate = files_aggregate;
      result$data['files_aggregate'] = l$files_aggregate?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = maxUploadFileSize;
      result$data['maxUploadFileSize'] = l$maxUploadFileSize?.toJson();
    }
    if (_$data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = minUploadFileSize;
      result$data['minUploadFileSize'] = l$minUploadFileSize?.toJson();
    }
    if (_$data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = presignedUrlsEnabled;
      result$data['presignedUrlsEnabled'] = l$presignedUrlsEnabled?.toJson();
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$buckets_bool_exp<Input$buckets_bool_exp> get copyWith =>
      CopyWith$Input$buckets_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$cacheControl = cacheControl;
    final lOther$cacheControl = other.cacheControl;
    if (_$data.containsKey('cacheControl') !=
        other._$data.containsKey('cacheControl')) {
      return false;
    }
    if (l$cacheControl != lOther$cacheControl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$downloadExpiration = downloadExpiration;
    final lOther$downloadExpiration = other.downloadExpiration;
    if (_$data.containsKey('downloadExpiration') !=
        other._$data.containsKey('downloadExpiration')) {
      return false;
    }
    if (l$downloadExpiration != lOther$downloadExpiration) {
      return false;
    }
    final l$files = files;
    final lOther$files = other.files;
    if (_$data.containsKey('files') != other._$data.containsKey('files')) {
      return false;
    }
    if (l$files != lOther$files) {
      return false;
    }
    final l$files_aggregate = files_aggregate;
    final lOther$files_aggregate = other.files_aggregate;
    if (_$data.containsKey('files_aggregate') !=
        other._$data.containsKey('files_aggregate')) {
      return false;
    }
    if (l$files_aggregate != lOther$files_aggregate) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$maxUploadFileSize = maxUploadFileSize;
    final lOther$maxUploadFileSize = other.maxUploadFileSize;
    if (_$data.containsKey('maxUploadFileSize') !=
        other._$data.containsKey('maxUploadFileSize')) {
      return false;
    }
    if (l$maxUploadFileSize != lOther$maxUploadFileSize) {
      return false;
    }
    final l$minUploadFileSize = minUploadFileSize;
    final lOther$minUploadFileSize = other.minUploadFileSize;
    if (_$data.containsKey('minUploadFileSize') !=
        other._$data.containsKey('minUploadFileSize')) {
      return false;
    }
    if (l$minUploadFileSize != lOther$minUploadFileSize) {
      return false;
    }
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final lOther$presignedUrlsEnabled = other.presignedUrlsEnabled;
    if (_$data.containsKey('presignedUrlsEnabled') !=
        other._$data.containsKey('presignedUrlsEnabled')) {
      return false;
    }
    if (l$presignedUrlsEnabled != lOther$presignedUrlsEnabled) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$cacheControl = cacheControl;
    final l$createdAt = createdAt;
    final l$downloadExpiration = downloadExpiration;
    final l$files = files;
    final l$files_aggregate = files_aggregate;
    final l$id = id;
    final l$maxUploadFileSize = maxUploadFileSize;
    final l$minUploadFileSize = minUploadFileSize;
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('cacheControl') ? l$cacheControl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('downloadExpiration')
          ? l$downloadExpiration
          : const {},
      _$data.containsKey('files') ? l$files : const {},
      _$data.containsKey('files_aggregate') ? l$files_aggregate : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('maxUploadFileSize') ? l$maxUploadFileSize : const {},
      _$data.containsKey('minUploadFileSize') ? l$minUploadFileSize : const {},
      _$data.containsKey('presignedUrlsEnabled')
          ? l$presignedUrlsEnabled
          : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_bool_exp<TRes> {
  factory CopyWith$Input$buckets_bool_exp(
    Input$buckets_bool_exp instance,
    TRes Function(Input$buckets_bool_exp) then,
  ) = _CopyWithImpl$Input$buckets_bool_exp;

  factory CopyWith$Input$buckets_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_bool_exp;

  TRes call({
    List<Input$buckets_bool_exp>? $_and,
    Input$buckets_bool_exp? $_not,
    List<Input$buckets_bool_exp>? $_or,
    Input$String_comparison_exp? cacheControl,
    Input$timestamptz_comparison_exp? createdAt,
    Input$Int_comparison_exp? downloadExpiration,
    Input$files_bool_exp? files,
    Input$files_aggregate_bool_exp? files_aggregate,
    Input$String_comparison_exp? id,
    Input$Int_comparison_exp? maxUploadFileSize,
    Input$Int_comparison_exp? minUploadFileSize,
    Input$Boolean_comparison_exp? presignedUrlsEnabled,
    Input$timestamptz_comparison_exp? updatedAt,
  });
  TRes $_and(
      Iterable<Input$buckets_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$buckets_bool_exp<Input$buckets_bool_exp>>?)
          _fn);
  CopyWith$Input$buckets_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$buckets_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$buckets_bool_exp<Input$buckets_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get cacheControl;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt;
  CopyWith$Input$Int_comparison_exp<TRes> get downloadExpiration;
  CopyWith$Input$files_bool_exp<TRes> get files;
  CopyWith$Input$files_aggregate_bool_exp<TRes> get files_aggregate;
  CopyWith$Input$String_comparison_exp<TRes> get id;
  CopyWith$Input$Int_comparison_exp<TRes> get maxUploadFileSize;
  CopyWith$Input$Int_comparison_exp<TRes> get minUploadFileSize;
  CopyWith$Input$Boolean_comparison_exp<TRes> get presignedUrlsEnabled;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt;
}

class _CopyWithImpl$Input$buckets_bool_exp<TRes>
    implements CopyWith$Input$buckets_bool_exp<TRes> {
  _CopyWithImpl$Input$buckets_bool_exp(
    this._instance,
    this._then,
  );

  final Input$buckets_bool_exp _instance;

  final TRes Function(Input$buckets_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? cacheControl = _undefined,
    Object? createdAt = _undefined,
    Object? downloadExpiration = _undefined,
    Object? files = _undefined,
    Object? files_aggregate = _undefined,
    Object? id = _undefined,
    Object? maxUploadFileSize = _undefined,
    Object? minUploadFileSize = _undefined,
    Object? presignedUrlsEnabled = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$buckets_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$buckets_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$buckets_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$buckets_bool_exp>?),
        if (cacheControl != _undefined)
          'cacheControl': (cacheControl as Input$String_comparison_exp?),
        if (createdAt != _undefined)
          'createdAt': (createdAt as Input$timestamptz_comparison_exp?),
        if (downloadExpiration != _undefined)
          'downloadExpiration':
              (downloadExpiration as Input$Int_comparison_exp?),
        if (files != _undefined) 'files': (files as Input$files_bool_exp?),
        if (files_aggregate != _undefined)
          'files_aggregate':
              (files_aggregate as Input$files_aggregate_bool_exp?),
        if (id != _undefined) 'id': (id as Input$String_comparison_exp?),
        if (maxUploadFileSize != _undefined)
          'maxUploadFileSize': (maxUploadFileSize as Input$Int_comparison_exp?),
        if (minUploadFileSize != _undefined)
          'minUploadFileSize': (minUploadFileSize as Input$Int_comparison_exp?),
        if (presignedUrlsEnabled != _undefined)
          'presignedUrlsEnabled':
              (presignedUrlsEnabled as Input$Boolean_comparison_exp?),
        if (updatedAt != _undefined)
          'updatedAt': (updatedAt as Input$timestamptz_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$buckets_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$buckets_bool_exp<Input$buckets_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$buckets_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$buckets_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$buckets_bool_exp.stub(_then(_instance))
        : CopyWith$Input$buckets_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$buckets_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$buckets_bool_exp<Input$buckets_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$buckets_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get cacheControl {
    final local$cacheControl = _instance.cacheControl;
    return local$cacheControl == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$cacheControl, (e) => call(cacheControl: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt {
    final local$createdAt = _instance.createdAt;
    return local$createdAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$createdAt, (e) => call(createdAt: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get downloadExpiration {
    final local$downloadExpiration = _instance.downloadExpiration;
    return local$downloadExpiration == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$downloadExpiration, (e) => call(downloadExpiration: e));
  }

  CopyWith$Input$files_bool_exp<TRes> get files {
    final local$files = _instance.files;
    return local$files == null
        ? CopyWith$Input$files_bool_exp.stub(_then(_instance))
        : CopyWith$Input$files_bool_exp(local$files, (e) => call(files: e));
  }

  CopyWith$Input$files_aggregate_bool_exp<TRes> get files_aggregate {
    final local$files_aggregate = _instance.files_aggregate;
    return local$files_aggregate == null
        ? CopyWith$Input$files_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$files_aggregate_bool_exp(
            local$files_aggregate, (e) => call(files_aggregate: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get maxUploadFileSize {
    final local$maxUploadFileSize = _instance.maxUploadFileSize;
    return local$maxUploadFileSize == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$maxUploadFileSize, (e) => call(maxUploadFileSize: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get minUploadFileSize {
    final local$minUploadFileSize = _instance.minUploadFileSize;
    return local$minUploadFileSize == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$minUploadFileSize, (e) => call(minUploadFileSize: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get presignedUrlsEnabled {
    final local$presignedUrlsEnabled = _instance.presignedUrlsEnabled;
    return local$presignedUrlsEnabled == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$presignedUrlsEnabled, (e) => call(presignedUrlsEnabled: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt {
    final local$updatedAt = _instance.updatedAt;
    return local$updatedAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updatedAt, (e) => call(updatedAt: e));
  }
}

class _CopyWithStubImpl$Input$buckets_bool_exp<TRes>
    implements CopyWith$Input$buckets_bool_exp<TRes> {
  _CopyWithStubImpl$Input$buckets_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$buckets_bool_exp>? $_and,
    Input$buckets_bool_exp? $_not,
    List<Input$buckets_bool_exp>? $_or,
    Input$String_comparison_exp? cacheControl,
    Input$timestamptz_comparison_exp? createdAt,
    Input$Int_comparison_exp? downloadExpiration,
    Input$files_bool_exp? files,
    Input$files_aggregate_bool_exp? files_aggregate,
    Input$String_comparison_exp? id,
    Input$Int_comparison_exp? maxUploadFileSize,
    Input$Int_comparison_exp? minUploadFileSize,
    Input$Boolean_comparison_exp? presignedUrlsEnabled,
    Input$timestamptz_comparison_exp? updatedAt,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$buckets_bool_exp<TRes> get $_not =>
      CopyWith$Input$buckets_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get cacheControl =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get downloadExpiration =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$files_bool_exp<TRes> get files =>
      CopyWith$Input$files_bool_exp.stub(_res);
  CopyWith$Input$files_aggregate_bool_exp<TRes> get files_aggregate =>
      CopyWith$Input$files_aggregate_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get id =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get maxUploadFileSize =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get minUploadFileSize =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get presignedUrlsEnabled =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$buckets_inc_input {
  factory Input$buckets_inc_input({
    int? downloadExpiration,
    int? maxUploadFileSize,
    int? minUploadFileSize,
  }) =>
      Input$buckets_inc_input._({
        if (downloadExpiration != null)
          r'downloadExpiration': downloadExpiration,
        if (maxUploadFileSize != null) r'maxUploadFileSize': maxUploadFileSize,
        if (minUploadFileSize != null) r'minUploadFileSize': minUploadFileSize,
      });

  Input$buckets_inc_input._(this._$data);

  factory Input$buckets_inc_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = data['downloadExpiration'];
      result$data['downloadExpiration'] = (l$downloadExpiration as int?);
    }
    if (data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = data['maxUploadFileSize'];
      result$data['maxUploadFileSize'] = (l$maxUploadFileSize as int?);
    }
    if (data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = data['minUploadFileSize'];
      result$data['minUploadFileSize'] = (l$minUploadFileSize as int?);
    }
    return Input$buckets_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get downloadExpiration => (_$data['downloadExpiration'] as int?);
  int? get maxUploadFileSize => (_$data['maxUploadFileSize'] as int?);
  int? get minUploadFileSize => (_$data['minUploadFileSize'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = downloadExpiration;
      result$data['downloadExpiration'] = l$downloadExpiration;
    }
    if (_$data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = maxUploadFileSize;
      result$data['maxUploadFileSize'] = l$maxUploadFileSize;
    }
    if (_$data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = minUploadFileSize;
      result$data['minUploadFileSize'] = l$minUploadFileSize;
    }
    return result$data;
  }

  CopyWith$Input$buckets_inc_input<Input$buckets_inc_input> get copyWith =>
      CopyWith$Input$buckets_inc_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_inc_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$downloadExpiration = downloadExpiration;
    final lOther$downloadExpiration = other.downloadExpiration;
    if (_$data.containsKey('downloadExpiration') !=
        other._$data.containsKey('downloadExpiration')) {
      return false;
    }
    if (l$downloadExpiration != lOther$downloadExpiration) {
      return false;
    }
    final l$maxUploadFileSize = maxUploadFileSize;
    final lOther$maxUploadFileSize = other.maxUploadFileSize;
    if (_$data.containsKey('maxUploadFileSize') !=
        other._$data.containsKey('maxUploadFileSize')) {
      return false;
    }
    if (l$maxUploadFileSize != lOther$maxUploadFileSize) {
      return false;
    }
    final l$minUploadFileSize = minUploadFileSize;
    final lOther$minUploadFileSize = other.minUploadFileSize;
    if (_$data.containsKey('minUploadFileSize') !=
        other._$data.containsKey('minUploadFileSize')) {
      return false;
    }
    if (l$minUploadFileSize != lOther$minUploadFileSize) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$downloadExpiration = downloadExpiration;
    final l$maxUploadFileSize = maxUploadFileSize;
    final l$minUploadFileSize = minUploadFileSize;
    return Object.hashAll([
      _$data.containsKey('downloadExpiration')
          ? l$downloadExpiration
          : const {},
      _$data.containsKey('maxUploadFileSize') ? l$maxUploadFileSize : const {},
      _$data.containsKey('minUploadFileSize') ? l$minUploadFileSize : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_inc_input<TRes> {
  factory CopyWith$Input$buckets_inc_input(
    Input$buckets_inc_input instance,
    TRes Function(Input$buckets_inc_input) then,
  ) = _CopyWithImpl$Input$buckets_inc_input;

  factory CopyWith$Input$buckets_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_inc_input;

  TRes call({
    int? downloadExpiration,
    int? maxUploadFileSize,
    int? minUploadFileSize,
  });
}

class _CopyWithImpl$Input$buckets_inc_input<TRes>
    implements CopyWith$Input$buckets_inc_input<TRes> {
  _CopyWithImpl$Input$buckets_inc_input(
    this._instance,
    this._then,
  );

  final Input$buckets_inc_input _instance;

  final TRes Function(Input$buckets_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? downloadExpiration = _undefined,
    Object? maxUploadFileSize = _undefined,
    Object? minUploadFileSize = _undefined,
  }) =>
      _then(Input$buckets_inc_input._({
        ..._instance._$data,
        if (downloadExpiration != _undefined)
          'downloadExpiration': (downloadExpiration as int?),
        if (maxUploadFileSize != _undefined)
          'maxUploadFileSize': (maxUploadFileSize as int?),
        if (minUploadFileSize != _undefined)
          'minUploadFileSize': (minUploadFileSize as int?),
      }));
}

class _CopyWithStubImpl$Input$buckets_inc_input<TRes>
    implements CopyWith$Input$buckets_inc_input<TRes> {
  _CopyWithStubImpl$Input$buckets_inc_input(this._res);

  TRes _res;

  call({
    int? downloadExpiration,
    int? maxUploadFileSize,
    int? minUploadFileSize,
  }) =>
      _res;
}

class Input$buckets_insert_input {
  factory Input$buckets_insert_input({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    Input$files_arr_rel_insert_input? files,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  }) =>
      Input$buckets_insert_input._({
        if (cacheControl != null) r'cacheControl': cacheControl,
        if (createdAt != null) r'createdAt': createdAt,
        if (downloadExpiration != null)
          r'downloadExpiration': downloadExpiration,
        if (files != null) r'files': files,
        if (id != null) r'id': id,
        if (maxUploadFileSize != null) r'maxUploadFileSize': maxUploadFileSize,
        if (minUploadFileSize != null) r'minUploadFileSize': minUploadFileSize,
        if (presignedUrlsEnabled != null)
          r'presignedUrlsEnabled': presignedUrlsEnabled,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$buckets_insert_input._(this._$data);

  factory Input$buckets_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cacheControl')) {
      final l$cacheControl = data['cacheControl'];
      result$data['cacheControl'] = (l$cacheControl as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = data['downloadExpiration'];
      result$data['downloadExpiration'] = (l$downloadExpiration as int?);
    }
    if (data.containsKey('files')) {
      final l$files = data['files'];
      result$data['files'] = l$files == null
          ? null
          : Input$files_arr_rel_insert_input.fromJson(
              (l$files as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = data['maxUploadFileSize'];
      result$data['maxUploadFileSize'] = (l$maxUploadFileSize as int?);
    }
    if (data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = data['minUploadFileSize'];
      result$data['minUploadFileSize'] = (l$minUploadFileSize as int?);
    }
    if (data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = data['presignedUrlsEnabled'];
      result$data['presignedUrlsEnabled'] = (l$presignedUrlsEnabled as bool?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    return Input$buckets_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get cacheControl => (_$data['cacheControl'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  int? get downloadExpiration => (_$data['downloadExpiration'] as int?);
  Input$files_arr_rel_insert_input? get files =>
      (_$data['files'] as Input$files_arr_rel_insert_input?);
  String? get id => (_$data['id'] as String?);
  int? get maxUploadFileSize => (_$data['maxUploadFileSize'] as int?);
  int? get minUploadFileSize => (_$data['minUploadFileSize'] as int?);
  bool? get presignedUrlsEnabled => (_$data['presignedUrlsEnabled'] as bool?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cacheControl')) {
      final l$cacheControl = cacheControl;
      result$data['cacheControl'] = l$cacheControl;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = downloadExpiration;
      result$data['downloadExpiration'] = l$downloadExpiration;
    }
    if (_$data.containsKey('files')) {
      final l$files = files;
      result$data['files'] = l$files?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = maxUploadFileSize;
      result$data['maxUploadFileSize'] = l$maxUploadFileSize;
    }
    if (_$data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = minUploadFileSize;
      result$data['minUploadFileSize'] = l$minUploadFileSize;
    }
    if (_$data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = presignedUrlsEnabled;
      result$data['presignedUrlsEnabled'] = l$presignedUrlsEnabled;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$buckets_insert_input<Input$buckets_insert_input>
      get copyWith => CopyWith$Input$buckets_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cacheControl = cacheControl;
    final lOther$cacheControl = other.cacheControl;
    if (_$data.containsKey('cacheControl') !=
        other._$data.containsKey('cacheControl')) {
      return false;
    }
    if (l$cacheControl != lOther$cacheControl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$downloadExpiration = downloadExpiration;
    final lOther$downloadExpiration = other.downloadExpiration;
    if (_$data.containsKey('downloadExpiration') !=
        other._$data.containsKey('downloadExpiration')) {
      return false;
    }
    if (l$downloadExpiration != lOther$downloadExpiration) {
      return false;
    }
    final l$files = files;
    final lOther$files = other.files;
    if (_$data.containsKey('files') != other._$data.containsKey('files')) {
      return false;
    }
    if (l$files != lOther$files) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$maxUploadFileSize = maxUploadFileSize;
    final lOther$maxUploadFileSize = other.maxUploadFileSize;
    if (_$data.containsKey('maxUploadFileSize') !=
        other._$data.containsKey('maxUploadFileSize')) {
      return false;
    }
    if (l$maxUploadFileSize != lOther$maxUploadFileSize) {
      return false;
    }
    final l$minUploadFileSize = minUploadFileSize;
    final lOther$minUploadFileSize = other.minUploadFileSize;
    if (_$data.containsKey('minUploadFileSize') !=
        other._$data.containsKey('minUploadFileSize')) {
      return false;
    }
    if (l$minUploadFileSize != lOther$minUploadFileSize) {
      return false;
    }
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final lOther$presignedUrlsEnabled = other.presignedUrlsEnabled;
    if (_$data.containsKey('presignedUrlsEnabled') !=
        other._$data.containsKey('presignedUrlsEnabled')) {
      return false;
    }
    if (l$presignedUrlsEnabled != lOther$presignedUrlsEnabled) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cacheControl = cacheControl;
    final l$createdAt = createdAt;
    final l$downloadExpiration = downloadExpiration;
    final l$files = files;
    final l$id = id;
    final l$maxUploadFileSize = maxUploadFileSize;
    final l$minUploadFileSize = minUploadFileSize;
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('cacheControl') ? l$cacheControl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('downloadExpiration')
          ? l$downloadExpiration
          : const {},
      _$data.containsKey('files') ? l$files : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('maxUploadFileSize') ? l$maxUploadFileSize : const {},
      _$data.containsKey('minUploadFileSize') ? l$minUploadFileSize : const {},
      _$data.containsKey('presignedUrlsEnabled')
          ? l$presignedUrlsEnabled
          : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_insert_input<TRes> {
  factory CopyWith$Input$buckets_insert_input(
    Input$buckets_insert_input instance,
    TRes Function(Input$buckets_insert_input) then,
  ) = _CopyWithImpl$Input$buckets_insert_input;

  factory CopyWith$Input$buckets_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_insert_input;

  TRes call({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    Input$files_arr_rel_insert_input? files,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  });
  CopyWith$Input$files_arr_rel_insert_input<TRes> get files;
}

class _CopyWithImpl$Input$buckets_insert_input<TRes>
    implements CopyWith$Input$buckets_insert_input<TRes> {
  _CopyWithImpl$Input$buckets_insert_input(
    this._instance,
    this._then,
  );

  final Input$buckets_insert_input _instance;

  final TRes Function(Input$buckets_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? cacheControl = _undefined,
    Object? createdAt = _undefined,
    Object? downloadExpiration = _undefined,
    Object? files = _undefined,
    Object? id = _undefined,
    Object? maxUploadFileSize = _undefined,
    Object? minUploadFileSize = _undefined,
    Object? presignedUrlsEnabled = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$buckets_insert_input._({
        ..._instance._$data,
        if (cacheControl != _undefined)
          'cacheControl': (cacheControl as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (downloadExpiration != _undefined)
          'downloadExpiration': (downloadExpiration as int?),
        if (files != _undefined)
          'files': (files as Input$files_arr_rel_insert_input?),
        if (id != _undefined) 'id': (id as String?),
        if (maxUploadFileSize != _undefined)
          'maxUploadFileSize': (maxUploadFileSize as int?),
        if (minUploadFileSize != _undefined)
          'minUploadFileSize': (minUploadFileSize as int?),
        if (presignedUrlsEnabled != _undefined)
          'presignedUrlsEnabled': (presignedUrlsEnabled as bool?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
      }));
  CopyWith$Input$files_arr_rel_insert_input<TRes> get files {
    final local$files = _instance.files;
    return local$files == null
        ? CopyWith$Input$files_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$files_arr_rel_insert_input(
            local$files, (e) => call(files: e));
  }
}

class _CopyWithStubImpl$Input$buckets_insert_input<TRes>
    implements CopyWith$Input$buckets_insert_input<TRes> {
  _CopyWithStubImpl$Input$buckets_insert_input(this._res);

  TRes _res;

  call({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    Input$files_arr_rel_insert_input? files,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  }) =>
      _res;
  CopyWith$Input$files_arr_rel_insert_input<TRes> get files =>
      CopyWith$Input$files_arr_rel_insert_input.stub(_res);
}

class Input$buckets_obj_rel_insert_input {
  factory Input$buckets_obj_rel_insert_input({
    required Input$buckets_insert_input data,
    Input$buckets_on_conflict? on_conflict,
  }) =>
      Input$buckets_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$buckets_obj_rel_insert_input._(this._$data);

  factory Input$buckets_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$buckets_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$buckets_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$buckets_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$buckets_insert_input get data =>
      (_$data['data'] as Input$buckets_insert_input);
  Input$buckets_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$buckets_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$buckets_obj_rel_insert_input<
          Input$buckets_obj_rel_insert_input>
      get copyWith => CopyWith$Input$buckets_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$buckets_obj_rel_insert_input(
    Input$buckets_obj_rel_insert_input instance,
    TRes Function(Input$buckets_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$buckets_obj_rel_insert_input;

  factory CopyWith$Input$buckets_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_obj_rel_insert_input;

  TRes call({
    Input$buckets_insert_input? data,
    Input$buckets_on_conflict? on_conflict,
  });
  CopyWith$Input$buckets_insert_input<TRes> get data;
  CopyWith$Input$buckets_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$buckets_obj_rel_insert_input<TRes>
    implements CopyWith$Input$buckets_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$buckets_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$buckets_obj_rel_insert_input _instance;

  final TRes Function(Input$buckets_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$buckets_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$buckets_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$buckets_on_conflict?),
      }));
  CopyWith$Input$buckets_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$buckets_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$buckets_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$buckets_on_conflict.stub(_then(_instance))
        : CopyWith$Input$buckets_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$buckets_obj_rel_insert_input<TRes>
    implements CopyWith$Input$buckets_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$buckets_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$buckets_insert_input? data,
    Input$buckets_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$buckets_insert_input<TRes> get data =>
      CopyWith$Input$buckets_insert_input.stub(_res);
  CopyWith$Input$buckets_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$buckets_on_conflict.stub(_res);
}

class Input$buckets_on_conflict {
  factory Input$buckets_on_conflict({
    required Enum$buckets_constraint constraint,
    required List<Enum$buckets_update_column> update_columns,
    Input$buckets_bool_exp? where,
  }) =>
      Input$buckets_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$buckets_on_conflict._(this._$data);

  factory Input$buckets_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$buckets_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$buckets_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$buckets_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$buckets_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$buckets_constraint get constraint =>
      (_$data['constraint'] as Enum$buckets_constraint);
  List<Enum$buckets_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$buckets_update_column>);
  Input$buckets_bool_exp? get where =>
      (_$data['where'] as Input$buckets_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$buckets_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$buckets_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$buckets_on_conflict<Input$buckets_on_conflict> get copyWith =>
      CopyWith$Input$buckets_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_on_conflict<TRes> {
  factory CopyWith$Input$buckets_on_conflict(
    Input$buckets_on_conflict instance,
    TRes Function(Input$buckets_on_conflict) then,
  ) = _CopyWithImpl$Input$buckets_on_conflict;

  factory CopyWith$Input$buckets_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_on_conflict;

  TRes call({
    Enum$buckets_constraint? constraint,
    List<Enum$buckets_update_column>? update_columns,
    Input$buckets_bool_exp? where,
  });
  CopyWith$Input$buckets_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$buckets_on_conflict<TRes>
    implements CopyWith$Input$buckets_on_conflict<TRes> {
  _CopyWithImpl$Input$buckets_on_conflict(
    this._instance,
    this._then,
  );

  final Input$buckets_on_conflict _instance;

  final TRes Function(Input$buckets_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$buckets_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$buckets_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$buckets_update_column>),
        if (where != _undefined) 'where': (where as Input$buckets_bool_exp?),
      }));
  CopyWith$Input$buckets_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$buckets_bool_exp.stub(_then(_instance))
        : CopyWith$Input$buckets_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$buckets_on_conflict<TRes>
    implements CopyWith$Input$buckets_on_conflict<TRes> {
  _CopyWithStubImpl$Input$buckets_on_conflict(this._res);

  TRes _res;

  call({
    Enum$buckets_constraint? constraint,
    List<Enum$buckets_update_column>? update_columns,
    Input$buckets_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$buckets_bool_exp<TRes> get where =>
      CopyWith$Input$buckets_bool_exp.stub(_res);
}

class Input$buckets_order_by {
  factory Input$buckets_order_by({
    Enum$order_by? cacheControl,
    Enum$order_by? createdAt,
    Enum$order_by? downloadExpiration,
    Input$files_aggregate_order_by? files_aggregate,
    Enum$order_by? id,
    Enum$order_by? maxUploadFileSize,
    Enum$order_by? minUploadFileSize,
    Enum$order_by? presignedUrlsEnabled,
    Enum$order_by? updatedAt,
  }) =>
      Input$buckets_order_by._({
        if (cacheControl != null) r'cacheControl': cacheControl,
        if (createdAt != null) r'createdAt': createdAt,
        if (downloadExpiration != null)
          r'downloadExpiration': downloadExpiration,
        if (files_aggregate != null) r'files_aggregate': files_aggregate,
        if (id != null) r'id': id,
        if (maxUploadFileSize != null) r'maxUploadFileSize': maxUploadFileSize,
        if (minUploadFileSize != null) r'minUploadFileSize': minUploadFileSize,
        if (presignedUrlsEnabled != null)
          r'presignedUrlsEnabled': presignedUrlsEnabled,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$buckets_order_by._(this._$data);

  factory Input$buckets_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cacheControl')) {
      final l$cacheControl = data['cacheControl'];
      result$data['cacheControl'] = l$cacheControl == null
          ? null
          : fromJson$Enum$order_by((l$cacheControl as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = data['downloadExpiration'];
      result$data['downloadExpiration'] = l$downloadExpiration == null
          ? null
          : fromJson$Enum$order_by((l$downloadExpiration as String));
    }
    if (data.containsKey('files_aggregate')) {
      final l$files_aggregate = data['files_aggregate'];
      result$data['files_aggregate'] = l$files_aggregate == null
          ? null
          : Input$files_aggregate_order_by.fromJson(
              (l$files_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = data['maxUploadFileSize'];
      result$data['maxUploadFileSize'] = l$maxUploadFileSize == null
          ? null
          : fromJson$Enum$order_by((l$maxUploadFileSize as String));
    }
    if (data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = data['minUploadFileSize'];
      result$data['minUploadFileSize'] = l$minUploadFileSize == null
          ? null
          : fromJson$Enum$order_by((l$minUploadFileSize as String));
    }
    if (data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = data['presignedUrlsEnabled'];
      result$data['presignedUrlsEnabled'] = l$presignedUrlsEnabled == null
          ? null
          : fromJson$Enum$order_by((l$presignedUrlsEnabled as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    return Input$buckets_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cacheControl => (_$data['cacheControl'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get downloadExpiration =>
      (_$data['downloadExpiration'] as Enum$order_by?);
  Input$files_aggregate_order_by? get files_aggregate =>
      (_$data['files_aggregate'] as Input$files_aggregate_order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get maxUploadFileSize =>
      (_$data['maxUploadFileSize'] as Enum$order_by?);
  Enum$order_by? get minUploadFileSize =>
      (_$data['minUploadFileSize'] as Enum$order_by?);
  Enum$order_by? get presignedUrlsEnabled =>
      (_$data['presignedUrlsEnabled'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cacheControl')) {
      final l$cacheControl = cacheControl;
      result$data['cacheControl'] =
          l$cacheControl == null ? null : toJson$Enum$order_by(l$cacheControl);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = downloadExpiration;
      result$data['downloadExpiration'] = l$downloadExpiration == null
          ? null
          : toJson$Enum$order_by(l$downloadExpiration);
    }
    if (_$data.containsKey('files_aggregate')) {
      final l$files_aggregate = files_aggregate;
      result$data['files_aggregate'] = l$files_aggregate?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = maxUploadFileSize;
      result$data['maxUploadFileSize'] = l$maxUploadFileSize == null
          ? null
          : toJson$Enum$order_by(l$maxUploadFileSize);
    }
    if (_$data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = minUploadFileSize;
      result$data['minUploadFileSize'] = l$minUploadFileSize == null
          ? null
          : toJson$Enum$order_by(l$minUploadFileSize);
    }
    if (_$data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = presignedUrlsEnabled;
      result$data['presignedUrlsEnabled'] = l$presignedUrlsEnabled == null
          ? null
          : toJson$Enum$order_by(l$presignedUrlsEnabled);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    return result$data;
  }

  CopyWith$Input$buckets_order_by<Input$buckets_order_by> get copyWith =>
      CopyWith$Input$buckets_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cacheControl = cacheControl;
    final lOther$cacheControl = other.cacheControl;
    if (_$data.containsKey('cacheControl') !=
        other._$data.containsKey('cacheControl')) {
      return false;
    }
    if (l$cacheControl != lOther$cacheControl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$downloadExpiration = downloadExpiration;
    final lOther$downloadExpiration = other.downloadExpiration;
    if (_$data.containsKey('downloadExpiration') !=
        other._$data.containsKey('downloadExpiration')) {
      return false;
    }
    if (l$downloadExpiration != lOther$downloadExpiration) {
      return false;
    }
    final l$files_aggregate = files_aggregate;
    final lOther$files_aggregate = other.files_aggregate;
    if (_$data.containsKey('files_aggregate') !=
        other._$data.containsKey('files_aggregate')) {
      return false;
    }
    if (l$files_aggregate != lOther$files_aggregate) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$maxUploadFileSize = maxUploadFileSize;
    final lOther$maxUploadFileSize = other.maxUploadFileSize;
    if (_$data.containsKey('maxUploadFileSize') !=
        other._$data.containsKey('maxUploadFileSize')) {
      return false;
    }
    if (l$maxUploadFileSize != lOther$maxUploadFileSize) {
      return false;
    }
    final l$minUploadFileSize = minUploadFileSize;
    final lOther$minUploadFileSize = other.minUploadFileSize;
    if (_$data.containsKey('minUploadFileSize') !=
        other._$data.containsKey('minUploadFileSize')) {
      return false;
    }
    if (l$minUploadFileSize != lOther$minUploadFileSize) {
      return false;
    }
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final lOther$presignedUrlsEnabled = other.presignedUrlsEnabled;
    if (_$data.containsKey('presignedUrlsEnabled') !=
        other._$data.containsKey('presignedUrlsEnabled')) {
      return false;
    }
    if (l$presignedUrlsEnabled != lOther$presignedUrlsEnabled) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cacheControl = cacheControl;
    final l$createdAt = createdAt;
    final l$downloadExpiration = downloadExpiration;
    final l$files_aggregate = files_aggregate;
    final l$id = id;
    final l$maxUploadFileSize = maxUploadFileSize;
    final l$minUploadFileSize = minUploadFileSize;
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('cacheControl') ? l$cacheControl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('downloadExpiration')
          ? l$downloadExpiration
          : const {},
      _$data.containsKey('files_aggregate') ? l$files_aggregate : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('maxUploadFileSize') ? l$maxUploadFileSize : const {},
      _$data.containsKey('minUploadFileSize') ? l$minUploadFileSize : const {},
      _$data.containsKey('presignedUrlsEnabled')
          ? l$presignedUrlsEnabled
          : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_order_by<TRes> {
  factory CopyWith$Input$buckets_order_by(
    Input$buckets_order_by instance,
    TRes Function(Input$buckets_order_by) then,
  ) = _CopyWithImpl$Input$buckets_order_by;

  factory CopyWith$Input$buckets_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_order_by;

  TRes call({
    Enum$order_by? cacheControl,
    Enum$order_by? createdAt,
    Enum$order_by? downloadExpiration,
    Input$files_aggregate_order_by? files_aggregate,
    Enum$order_by? id,
    Enum$order_by? maxUploadFileSize,
    Enum$order_by? minUploadFileSize,
    Enum$order_by? presignedUrlsEnabled,
    Enum$order_by? updatedAt,
  });
  CopyWith$Input$files_aggregate_order_by<TRes> get files_aggregate;
}

class _CopyWithImpl$Input$buckets_order_by<TRes>
    implements CopyWith$Input$buckets_order_by<TRes> {
  _CopyWithImpl$Input$buckets_order_by(
    this._instance,
    this._then,
  );

  final Input$buckets_order_by _instance;

  final TRes Function(Input$buckets_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? cacheControl = _undefined,
    Object? createdAt = _undefined,
    Object? downloadExpiration = _undefined,
    Object? files_aggregate = _undefined,
    Object? id = _undefined,
    Object? maxUploadFileSize = _undefined,
    Object? minUploadFileSize = _undefined,
    Object? presignedUrlsEnabled = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$buckets_order_by._({
        ..._instance._$data,
        if (cacheControl != _undefined)
          'cacheControl': (cacheControl as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (downloadExpiration != _undefined)
          'downloadExpiration': (downloadExpiration as Enum$order_by?),
        if (files_aggregate != _undefined)
          'files_aggregate':
              (files_aggregate as Input$files_aggregate_order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (maxUploadFileSize != _undefined)
          'maxUploadFileSize': (maxUploadFileSize as Enum$order_by?),
        if (minUploadFileSize != _undefined)
          'minUploadFileSize': (minUploadFileSize as Enum$order_by?),
        if (presignedUrlsEnabled != _undefined)
          'presignedUrlsEnabled': (presignedUrlsEnabled as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
      }));
  CopyWith$Input$files_aggregate_order_by<TRes> get files_aggregate {
    final local$files_aggregate = _instance.files_aggregate;
    return local$files_aggregate == null
        ? CopyWith$Input$files_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$files_aggregate_order_by(
            local$files_aggregate, (e) => call(files_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$buckets_order_by<TRes>
    implements CopyWith$Input$buckets_order_by<TRes> {
  _CopyWithStubImpl$Input$buckets_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? cacheControl,
    Enum$order_by? createdAt,
    Enum$order_by? downloadExpiration,
    Input$files_aggregate_order_by? files_aggregate,
    Enum$order_by? id,
    Enum$order_by? maxUploadFileSize,
    Enum$order_by? minUploadFileSize,
    Enum$order_by? presignedUrlsEnabled,
    Enum$order_by? updatedAt,
  }) =>
      _res;
  CopyWith$Input$files_aggregate_order_by<TRes> get files_aggregate =>
      CopyWith$Input$files_aggregate_order_by.stub(_res);
}

class Input$buckets_pk_columns_input {
  factory Input$buckets_pk_columns_input({required String id}) =>
      Input$buckets_pk_columns_input._({
        r'id': id,
      });

  Input$buckets_pk_columns_input._(this._$data);

  factory Input$buckets_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    return Input$buckets_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Input$buckets_pk_columns_input<Input$buckets_pk_columns_input>
      get copyWith => CopyWith$Input$buckets_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$buckets_pk_columns_input<TRes> {
  factory CopyWith$Input$buckets_pk_columns_input(
    Input$buckets_pk_columns_input instance,
    TRes Function(Input$buckets_pk_columns_input) then,
  ) = _CopyWithImpl$Input$buckets_pk_columns_input;

  factory CopyWith$Input$buckets_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_pk_columns_input;

  TRes call({String? id});
}

class _CopyWithImpl$Input$buckets_pk_columns_input<TRes>
    implements CopyWith$Input$buckets_pk_columns_input<TRes> {
  _CopyWithImpl$Input$buckets_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$buckets_pk_columns_input _instance;

  final TRes Function(Input$buckets_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) =>
      _then(Input$buckets_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
      }));
}

class _CopyWithStubImpl$Input$buckets_pk_columns_input<TRes>
    implements CopyWith$Input$buckets_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$buckets_pk_columns_input(this._res);

  TRes _res;

  call({String? id}) => _res;
}

class Input$buckets_set_input {
  factory Input$buckets_set_input({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  }) =>
      Input$buckets_set_input._({
        if (cacheControl != null) r'cacheControl': cacheControl,
        if (createdAt != null) r'createdAt': createdAt,
        if (downloadExpiration != null)
          r'downloadExpiration': downloadExpiration,
        if (id != null) r'id': id,
        if (maxUploadFileSize != null) r'maxUploadFileSize': maxUploadFileSize,
        if (minUploadFileSize != null) r'minUploadFileSize': minUploadFileSize,
        if (presignedUrlsEnabled != null)
          r'presignedUrlsEnabled': presignedUrlsEnabled,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$buckets_set_input._(this._$data);

  factory Input$buckets_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cacheControl')) {
      final l$cacheControl = data['cacheControl'];
      result$data['cacheControl'] = (l$cacheControl as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = data['downloadExpiration'];
      result$data['downloadExpiration'] = (l$downloadExpiration as int?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = data['maxUploadFileSize'];
      result$data['maxUploadFileSize'] = (l$maxUploadFileSize as int?);
    }
    if (data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = data['minUploadFileSize'];
      result$data['minUploadFileSize'] = (l$minUploadFileSize as int?);
    }
    if (data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = data['presignedUrlsEnabled'];
      result$data['presignedUrlsEnabled'] = (l$presignedUrlsEnabled as bool?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    return Input$buckets_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get cacheControl => (_$data['cacheControl'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  int? get downloadExpiration => (_$data['downloadExpiration'] as int?);
  String? get id => (_$data['id'] as String?);
  int? get maxUploadFileSize => (_$data['maxUploadFileSize'] as int?);
  int? get minUploadFileSize => (_$data['minUploadFileSize'] as int?);
  bool? get presignedUrlsEnabled => (_$data['presignedUrlsEnabled'] as bool?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cacheControl')) {
      final l$cacheControl = cacheControl;
      result$data['cacheControl'] = l$cacheControl;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = downloadExpiration;
      result$data['downloadExpiration'] = l$downloadExpiration;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = maxUploadFileSize;
      result$data['maxUploadFileSize'] = l$maxUploadFileSize;
    }
    if (_$data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = minUploadFileSize;
      result$data['minUploadFileSize'] = l$minUploadFileSize;
    }
    if (_$data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = presignedUrlsEnabled;
      result$data['presignedUrlsEnabled'] = l$presignedUrlsEnabled;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$buckets_set_input<Input$buckets_set_input> get copyWith =>
      CopyWith$Input$buckets_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cacheControl = cacheControl;
    final lOther$cacheControl = other.cacheControl;
    if (_$data.containsKey('cacheControl') !=
        other._$data.containsKey('cacheControl')) {
      return false;
    }
    if (l$cacheControl != lOther$cacheControl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$downloadExpiration = downloadExpiration;
    final lOther$downloadExpiration = other.downloadExpiration;
    if (_$data.containsKey('downloadExpiration') !=
        other._$data.containsKey('downloadExpiration')) {
      return false;
    }
    if (l$downloadExpiration != lOther$downloadExpiration) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$maxUploadFileSize = maxUploadFileSize;
    final lOther$maxUploadFileSize = other.maxUploadFileSize;
    if (_$data.containsKey('maxUploadFileSize') !=
        other._$data.containsKey('maxUploadFileSize')) {
      return false;
    }
    if (l$maxUploadFileSize != lOther$maxUploadFileSize) {
      return false;
    }
    final l$minUploadFileSize = minUploadFileSize;
    final lOther$minUploadFileSize = other.minUploadFileSize;
    if (_$data.containsKey('minUploadFileSize') !=
        other._$data.containsKey('minUploadFileSize')) {
      return false;
    }
    if (l$minUploadFileSize != lOther$minUploadFileSize) {
      return false;
    }
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final lOther$presignedUrlsEnabled = other.presignedUrlsEnabled;
    if (_$data.containsKey('presignedUrlsEnabled') !=
        other._$data.containsKey('presignedUrlsEnabled')) {
      return false;
    }
    if (l$presignedUrlsEnabled != lOther$presignedUrlsEnabled) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cacheControl = cacheControl;
    final l$createdAt = createdAt;
    final l$downloadExpiration = downloadExpiration;
    final l$id = id;
    final l$maxUploadFileSize = maxUploadFileSize;
    final l$minUploadFileSize = minUploadFileSize;
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('cacheControl') ? l$cacheControl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('downloadExpiration')
          ? l$downloadExpiration
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('maxUploadFileSize') ? l$maxUploadFileSize : const {},
      _$data.containsKey('minUploadFileSize') ? l$minUploadFileSize : const {},
      _$data.containsKey('presignedUrlsEnabled')
          ? l$presignedUrlsEnabled
          : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_set_input<TRes> {
  factory CopyWith$Input$buckets_set_input(
    Input$buckets_set_input instance,
    TRes Function(Input$buckets_set_input) then,
  ) = _CopyWithImpl$Input$buckets_set_input;

  factory CopyWith$Input$buckets_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_set_input;

  TRes call({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  });
}

class _CopyWithImpl$Input$buckets_set_input<TRes>
    implements CopyWith$Input$buckets_set_input<TRes> {
  _CopyWithImpl$Input$buckets_set_input(
    this._instance,
    this._then,
  );

  final Input$buckets_set_input _instance;

  final TRes Function(Input$buckets_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? cacheControl = _undefined,
    Object? createdAt = _undefined,
    Object? downloadExpiration = _undefined,
    Object? id = _undefined,
    Object? maxUploadFileSize = _undefined,
    Object? minUploadFileSize = _undefined,
    Object? presignedUrlsEnabled = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$buckets_set_input._({
        ..._instance._$data,
        if (cacheControl != _undefined)
          'cacheControl': (cacheControl as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (downloadExpiration != _undefined)
          'downloadExpiration': (downloadExpiration as int?),
        if (id != _undefined) 'id': (id as String?),
        if (maxUploadFileSize != _undefined)
          'maxUploadFileSize': (maxUploadFileSize as int?),
        if (minUploadFileSize != _undefined)
          'minUploadFileSize': (minUploadFileSize as int?),
        if (presignedUrlsEnabled != _undefined)
          'presignedUrlsEnabled': (presignedUrlsEnabled as bool?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$buckets_set_input<TRes>
    implements CopyWith$Input$buckets_set_input<TRes> {
  _CopyWithStubImpl$Input$buckets_set_input(this._res);

  TRes _res;

  call({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  }) =>
      _res;
}

class Input$buckets_stream_cursor_input {
  factory Input$buckets_stream_cursor_input({
    required Input$buckets_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$buckets_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$buckets_stream_cursor_input._(this._$data);

  factory Input$buckets_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$buckets_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$buckets_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$buckets_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$buckets_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$buckets_stream_cursor_input<Input$buckets_stream_cursor_input>
      get copyWith => CopyWith$Input$buckets_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_stream_cursor_input<TRes> {
  factory CopyWith$Input$buckets_stream_cursor_input(
    Input$buckets_stream_cursor_input instance,
    TRes Function(Input$buckets_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$buckets_stream_cursor_input;

  factory CopyWith$Input$buckets_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_stream_cursor_input;

  TRes call({
    Input$buckets_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$buckets_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$buckets_stream_cursor_input<TRes>
    implements CopyWith$Input$buckets_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$buckets_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$buckets_stream_cursor_input _instance;

  final TRes Function(Input$buckets_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$buckets_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$buckets_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$buckets_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$buckets_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$buckets_stream_cursor_input<TRes>
    implements CopyWith$Input$buckets_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$buckets_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$buckets_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$buckets_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$buckets_stream_cursor_value_input.stub(_res);
}

class Input$buckets_stream_cursor_value_input {
  factory Input$buckets_stream_cursor_value_input({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  }) =>
      Input$buckets_stream_cursor_value_input._({
        if (cacheControl != null) r'cacheControl': cacheControl,
        if (createdAt != null) r'createdAt': createdAt,
        if (downloadExpiration != null)
          r'downloadExpiration': downloadExpiration,
        if (id != null) r'id': id,
        if (maxUploadFileSize != null) r'maxUploadFileSize': maxUploadFileSize,
        if (minUploadFileSize != null) r'minUploadFileSize': minUploadFileSize,
        if (presignedUrlsEnabled != null)
          r'presignedUrlsEnabled': presignedUrlsEnabled,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$buckets_stream_cursor_value_input._(this._$data);

  factory Input$buckets_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cacheControl')) {
      final l$cacheControl = data['cacheControl'];
      result$data['cacheControl'] = (l$cacheControl as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = data['downloadExpiration'];
      result$data['downloadExpiration'] = (l$downloadExpiration as int?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = (l$id as String?);
    }
    if (data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = data['maxUploadFileSize'];
      result$data['maxUploadFileSize'] = (l$maxUploadFileSize as int?);
    }
    if (data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = data['minUploadFileSize'];
      result$data['minUploadFileSize'] = (l$minUploadFileSize as int?);
    }
    if (data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = data['presignedUrlsEnabled'];
      result$data['presignedUrlsEnabled'] = (l$presignedUrlsEnabled as bool?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    return Input$buckets_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get cacheControl => (_$data['cacheControl'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  int? get downloadExpiration => (_$data['downloadExpiration'] as int?);
  String? get id => (_$data['id'] as String?);
  int? get maxUploadFileSize => (_$data['maxUploadFileSize'] as int?);
  int? get minUploadFileSize => (_$data['minUploadFileSize'] as int?);
  bool? get presignedUrlsEnabled => (_$data['presignedUrlsEnabled'] as bool?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cacheControl')) {
      final l$cacheControl = cacheControl;
      result$data['cacheControl'] = l$cacheControl;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('downloadExpiration')) {
      final l$downloadExpiration = downloadExpiration;
      result$data['downloadExpiration'] = l$downloadExpiration;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id;
    }
    if (_$data.containsKey('maxUploadFileSize')) {
      final l$maxUploadFileSize = maxUploadFileSize;
      result$data['maxUploadFileSize'] = l$maxUploadFileSize;
    }
    if (_$data.containsKey('minUploadFileSize')) {
      final l$minUploadFileSize = minUploadFileSize;
      result$data['minUploadFileSize'] = l$minUploadFileSize;
    }
    if (_$data.containsKey('presignedUrlsEnabled')) {
      final l$presignedUrlsEnabled = presignedUrlsEnabled;
      result$data['presignedUrlsEnabled'] = l$presignedUrlsEnabled;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$buckets_stream_cursor_value_input<
          Input$buckets_stream_cursor_value_input>
      get copyWith => CopyWith$Input$buckets_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cacheControl = cacheControl;
    final lOther$cacheControl = other.cacheControl;
    if (_$data.containsKey('cacheControl') !=
        other._$data.containsKey('cacheControl')) {
      return false;
    }
    if (l$cacheControl != lOther$cacheControl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$downloadExpiration = downloadExpiration;
    final lOther$downloadExpiration = other.downloadExpiration;
    if (_$data.containsKey('downloadExpiration') !=
        other._$data.containsKey('downloadExpiration')) {
      return false;
    }
    if (l$downloadExpiration != lOther$downloadExpiration) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$maxUploadFileSize = maxUploadFileSize;
    final lOther$maxUploadFileSize = other.maxUploadFileSize;
    if (_$data.containsKey('maxUploadFileSize') !=
        other._$data.containsKey('maxUploadFileSize')) {
      return false;
    }
    if (l$maxUploadFileSize != lOther$maxUploadFileSize) {
      return false;
    }
    final l$minUploadFileSize = minUploadFileSize;
    final lOther$minUploadFileSize = other.minUploadFileSize;
    if (_$data.containsKey('minUploadFileSize') !=
        other._$data.containsKey('minUploadFileSize')) {
      return false;
    }
    if (l$minUploadFileSize != lOther$minUploadFileSize) {
      return false;
    }
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final lOther$presignedUrlsEnabled = other.presignedUrlsEnabled;
    if (_$data.containsKey('presignedUrlsEnabled') !=
        other._$data.containsKey('presignedUrlsEnabled')) {
      return false;
    }
    if (l$presignedUrlsEnabled != lOther$presignedUrlsEnabled) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cacheControl = cacheControl;
    final l$createdAt = createdAt;
    final l$downloadExpiration = downloadExpiration;
    final l$id = id;
    final l$maxUploadFileSize = maxUploadFileSize;
    final l$minUploadFileSize = minUploadFileSize;
    final l$presignedUrlsEnabled = presignedUrlsEnabled;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('cacheControl') ? l$cacheControl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('downloadExpiration')
          ? l$downloadExpiration
          : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('maxUploadFileSize') ? l$maxUploadFileSize : const {},
      _$data.containsKey('minUploadFileSize') ? l$minUploadFileSize : const {},
      _$data.containsKey('presignedUrlsEnabled')
          ? l$presignedUrlsEnabled
          : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$buckets_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$buckets_stream_cursor_value_input(
    Input$buckets_stream_cursor_value_input instance,
    TRes Function(Input$buckets_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$buckets_stream_cursor_value_input;

  factory CopyWith$Input$buckets_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_stream_cursor_value_input;

  TRes call({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  });
}

class _CopyWithImpl$Input$buckets_stream_cursor_value_input<TRes>
    implements CopyWith$Input$buckets_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$buckets_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$buckets_stream_cursor_value_input _instance;

  final TRes Function(Input$buckets_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? cacheControl = _undefined,
    Object? createdAt = _undefined,
    Object? downloadExpiration = _undefined,
    Object? id = _undefined,
    Object? maxUploadFileSize = _undefined,
    Object? minUploadFileSize = _undefined,
    Object? presignedUrlsEnabled = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$buckets_stream_cursor_value_input._({
        ..._instance._$data,
        if (cacheControl != _undefined)
          'cacheControl': (cacheControl as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (downloadExpiration != _undefined)
          'downloadExpiration': (downloadExpiration as int?),
        if (id != _undefined) 'id': (id as String?),
        if (maxUploadFileSize != _undefined)
          'maxUploadFileSize': (maxUploadFileSize as int?),
        if (minUploadFileSize != _undefined)
          'minUploadFileSize': (minUploadFileSize as int?),
        if (presignedUrlsEnabled != _undefined)
          'presignedUrlsEnabled': (presignedUrlsEnabled as bool?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$buckets_stream_cursor_value_input<TRes>
    implements CopyWith$Input$buckets_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$buckets_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? cacheControl,
    DateTime? createdAt,
    int? downloadExpiration,
    String? id,
    int? maxUploadFileSize,
    int? minUploadFileSize,
    bool? presignedUrlsEnabled,
    DateTime? updatedAt,
  }) =>
      _res;
}

class Input$buckets_updates {
  factory Input$buckets_updates({
    Input$buckets_inc_input? $_inc,
    Input$buckets_set_input? $_set,
    required Input$buckets_bool_exp where,
  }) =>
      Input$buckets_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$buckets_updates._(this._$data);

  factory Input$buckets_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$buckets_inc_input.fromJson((l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$buckets_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$buckets_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$buckets_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$buckets_inc_input? get $_inc =>
      (_$data['_inc'] as Input$buckets_inc_input?);
  Input$buckets_set_input? get $_set =>
      (_$data['_set'] as Input$buckets_set_input?);
  Input$buckets_bool_exp get where =>
      (_$data['where'] as Input$buckets_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$buckets_updates<Input$buckets_updates> get copyWith =>
      CopyWith$Input$buckets_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$buckets_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$buckets_updates<TRes> {
  factory CopyWith$Input$buckets_updates(
    Input$buckets_updates instance,
    TRes Function(Input$buckets_updates) then,
  ) = _CopyWithImpl$Input$buckets_updates;

  factory CopyWith$Input$buckets_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$buckets_updates;

  TRes call({
    Input$buckets_inc_input? $_inc,
    Input$buckets_set_input? $_set,
    Input$buckets_bool_exp? where,
  });
  CopyWith$Input$buckets_inc_input<TRes> get $_inc;
  CopyWith$Input$buckets_set_input<TRes> get $_set;
  CopyWith$Input$buckets_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$buckets_updates<TRes>
    implements CopyWith$Input$buckets_updates<TRes> {
  _CopyWithImpl$Input$buckets_updates(
    this._instance,
    this._then,
  );

  final Input$buckets_updates _instance;

  final TRes Function(Input$buckets_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$buckets_updates._({
        ..._instance._$data,
        if ($_inc != _undefined) '_inc': ($_inc as Input$buckets_inc_input?),
        if ($_set != _undefined) '_set': ($_set as Input$buckets_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$buckets_bool_exp),
      }));
  CopyWith$Input$buckets_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$buckets_inc_input.stub(_then(_instance))
        : CopyWith$Input$buckets_inc_input(local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$buckets_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$buckets_set_input.stub(_then(_instance))
        : CopyWith$Input$buckets_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$buckets_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$buckets_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$buckets_updates<TRes>
    implements CopyWith$Input$buckets_updates<TRes> {
  _CopyWithStubImpl$Input$buckets_updates(this._res);

  TRes _res;

  call({
    Input$buckets_inc_input? $_inc,
    Input$buckets_set_input? $_set,
    Input$buckets_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$buckets_inc_input<TRes> get $_inc =>
      CopyWith$Input$buckets_inc_input.stub(_res);
  CopyWith$Input$buckets_set_input<TRes> get $_set =>
      CopyWith$Input$buckets_set_input.stub(_res);
  CopyWith$Input$buckets_bool_exp<TRes> get where =>
      CopyWith$Input$buckets_bool_exp.stub(_res);
}

class Input$bytea_comparison_exp {
  factory Input$bytea_comparison_exp({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      Input$bytea_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$bytea_comparison_exp._(this._$data);

  factory Input$bytea_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = (l$$_eq as String?);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = (l$$_gt as String?);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = (l$$_gte as String?);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = (l$$_lt as String?);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = (l$$_lte as String?);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = (l$$_neq as String?);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$bytea_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get $_eq => (_$data['_eq'] as String?);
  String? get $_gt => (_$data['_gt'] as String?);
  String? get $_gte => (_$data['_gte'] as String?);
  List<String>? get $_in => (_$data['_in'] as List<String>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  String? get $_lt => (_$data['_lt'] as String?);
  String? get $_lte => (_$data['_lte'] as String?);
  String? get $_neq => (_$data['_neq'] as String?);
  List<String>? get $_nin => (_$data['_nin'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq;
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt;
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte;
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt;
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte;
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq;
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$bytea_comparison_exp<Input$bytea_comparison_exp>
      get copyWith => CopyWith$Input$bytea_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$bytea_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$bytea_comparison_exp<TRes> {
  factory CopyWith$Input$bytea_comparison_exp(
    Input$bytea_comparison_exp instance,
    TRes Function(Input$bytea_comparison_exp) then,
  ) = _CopyWithImpl$Input$bytea_comparison_exp;

  factory CopyWith$Input$bytea_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$bytea_comparison_exp;

  TRes call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  });
}

class _CopyWithImpl$Input$bytea_comparison_exp<TRes>
    implements CopyWith$Input$bytea_comparison_exp<TRes> {
  _CopyWithImpl$Input$bytea_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$bytea_comparison_exp _instance;

  final TRes Function(Input$bytea_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$bytea_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as String?),
        if ($_gt != _undefined) '_gt': ($_gt as String?),
        if ($_gte != _undefined) '_gte': ($_gte as String?),
        if ($_in != _undefined) '_in': ($_in as List<String>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as String?),
        if ($_lte != _undefined) '_lte': ($_lte as String?),
        if ($_neq != _undefined) '_neq': ($_neq as String?),
        if ($_nin != _undefined) '_nin': ($_nin as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$bytea_comparison_exp<TRes>
    implements CopyWith$Input$bytea_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$bytea_comparison_exp(this._res);

  TRes _res;

  call({
    String? $_eq,
    String? $_gt,
    String? $_gte,
    List<String>? $_in,
    bool? $_is_null,
    String? $_lt,
    String? $_lte,
    String? $_neq,
    List<String>? $_nin,
  }) =>
      _res;
}

class Input$citext_comparison_exp {
  factory Input$citext_comparison_exp({
    Citext? $_eq,
    Citext? $_gt,
    Citext? $_gte,
    Citext? $_ilike,
    List<Citext>? $_in,
    Citext? $_iregex,
    bool? $_is_null,
    Citext? $_like,
    Citext? $_lt,
    Citext? $_lte,
    Citext? $_neq,
    Citext? $_nilike,
    List<Citext>? $_nin,
    Citext? $_niregex,
    Citext? $_nlike,
    Citext? $_nregex,
    Citext? $_nsimilar,
    Citext? $_regex,
    Citext? $_similar,
  }) =>
      Input$citext_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_ilike != null) r'_ilike': $_ilike,
        if ($_in != null) r'_in': $_in,
        if ($_iregex != null) r'_iregex': $_iregex,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_like != null) r'_like': $_like,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nilike != null) r'_nilike': $_nilike,
        if ($_nin != null) r'_nin': $_nin,
        if ($_niregex != null) r'_niregex': $_niregex,
        if ($_nlike != null) r'_nlike': $_nlike,
        if ($_nregex != null) r'_nregex': $_nregex,
        if ($_nsimilar != null) r'_nsimilar': $_nsimilar,
        if ($_regex != null) r'_regex': $_regex,
        if ($_similar != null) r'_similar': $_similar,
      });

  Input$citext_comparison_exp._(this._$data);

  factory Input$citext_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = l$$_eq == null ? null : citextFromJson(l$$_eq);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = l$$_gt == null ? null : citextFromJson(l$$_gt);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = l$$_gte == null ? null : citextFromJson(l$$_gte);
    }
    if (data.containsKey('_ilike')) {
      final l$$_ilike = data['_ilike'];
      result$data['_ilike'] =
          l$$_ilike == null ? null : citextFromJson(l$$_ilike);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => citextFromJson(e)).toList();
    }
    if (data.containsKey('_iregex')) {
      final l$$_iregex = data['_iregex'];
      result$data['_iregex'] =
          l$$_iregex == null ? null : citextFromJson(l$$_iregex);
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_like')) {
      final l$$_like = data['_like'];
      result$data['_like'] = l$$_like == null ? null : citextFromJson(l$$_like);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = l$$_lt == null ? null : citextFromJson(l$$_lt);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = l$$_lte == null ? null : citextFromJson(l$$_lte);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = l$$_neq == null ? null : citextFromJson(l$$_neq);
    }
    if (data.containsKey('_nilike')) {
      final l$$_nilike = data['_nilike'];
      result$data['_nilike'] =
          l$$_nilike == null ? null : citextFromJson(l$$_nilike);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => citextFromJson(e)).toList();
    }
    if (data.containsKey('_niregex')) {
      final l$$_niregex = data['_niregex'];
      result$data['_niregex'] =
          l$$_niregex == null ? null : citextFromJson(l$$_niregex);
    }
    if (data.containsKey('_nlike')) {
      final l$$_nlike = data['_nlike'];
      result$data['_nlike'] =
          l$$_nlike == null ? null : citextFromJson(l$$_nlike);
    }
    if (data.containsKey('_nregex')) {
      final l$$_nregex = data['_nregex'];
      result$data['_nregex'] =
          l$$_nregex == null ? null : citextFromJson(l$$_nregex);
    }
    if (data.containsKey('_nsimilar')) {
      final l$$_nsimilar = data['_nsimilar'];
      result$data['_nsimilar'] =
          l$$_nsimilar == null ? null : citextFromJson(l$$_nsimilar);
    }
    if (data.containsKey('_regex')) {
      final l$$_regex = data['_regex'];
      result$data['_regex'] =
          l$$_regex == null ? null : citextFromJson(l$$_regex);
    }
    if (data.containsKey('_similar')) {
      final l$$_similar = data['_similar'];
      result$data['_similar'] =
          l$$_similar == null ? null : citextFromJson(l$$_similar);
    }
    return Input$citext_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Citext? get $_eq => (_$data['_eq'] as Citext?);
  Citext? get $_gt => (_$data['_gt'] as Citext?);
  Citext? get $_gte => (_$data['_gte'] as Citext?);
  Citext? get $_ilike => (_$data['_ilike'] as Citext?);
  List<Citext>? get $_in => (_$data['_in'] as List<Citext>?);
  Citext? get $_iregex => (_$data['_iregex'] as Citext?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  Citext? get $_like => (_$data['_like'] as Citext?);
  Citext? get $_lt => (_$data['_lt'] as Citext?);
  Citext? get $_lte => (_$data['_lte'] as Citext?);
  Citext? get $_neq => (_$data['_neq'] as Citext?);
  Citext? get $_nilike => (_$data['_nilike'] as Citext?);
  List<Citext>? get $_nin => (_$data['_nin'] as List<Citext>?);
  Citext? get $_niregex => (_$data['_niregex'] as Citext?);
  Citext? get $_nlike => (_$data['_nlike'] as Citext?);
  Citext? get $_nregex => (_$data['_nregex'] as Citext?);
  Citext? get $_nsimilar => (_$data['_nsimilar'] as Citext?);
  Citext? get $_regex => (_$data['_regex'] as Citext?);
  Citext? get $_similar => (_$data['_similar'] as Citext?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq == null ? null : citextToJson(l$$_eq);
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt == null ? null : citextToJson(l$$_gt);
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte == null ? null : citextToJson(l$$_gte);
    }
    if (_$data.containsKey('_ilike')) {
      final l$$_ilike = $_ilike;
      result$data['_ilike'] =
          l$$_ilike == null ? null : citextToJson(l$$_ilike);
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => citextToJson(e)).toList();
    }
    if (_$data.containsKey('_iregex')) {
      final l$$_iregex = $_iregex;
      result$data['_iregex'] =
          l$$_iregex == null ? null : citextToJson(l$$_iregex);
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_like')) {
      final l$$_like = $_like;
      result$data['_like'] = l$$_like == null ? null : citextToJson(l$$_like);
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt == null ? null : citextToJson(l$$_lt);
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte == null ? null : citextToJson(l$$_lte);
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq == null ? null : citextToJson(l$$_neq);
    }
    if (_$data.containsKey('_nilike')) {
      final l$$_nilike = $_nilike;
      result$data['_nilike'] =
          l$$_nilike == null ? null : citextToJson(l$$_nilike);
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => citextToJson(e)).toList();
    }
    if (_$data.containsKey('_niregex')) {
      final l$$_niregex = $_niregex;
      result$data['_niregex'] =
          l$$_niregex == null ? null : citextToJson(l$$_niregex);
    }
    if (_$data.containsKey('_nlike')) {
      final l$$_nlike = $_nlike;
      result$data['_nlike'] =
          l$$_nlike == null ? null : citextToJson(l$$_nlike);
    }
    if (_$data.containsKey('_nregex')) {
      final l$$_nregex = $_nregex;
      result$data['_nregex'] =
          l$$_nregex == null ? null : citextToJson(l$$_nregex);
    }
    if (_$data.containsKey('_nsimilar')) {
      final l$$_nsimilar = $_nsimilar;
      result$data['_nsimilar'] =
          l$$_nsimilar == null ? null : citextToJson(l$$_nsimilar);
    }
    if (_$data.containsKey('_regex')) {
      final l$$_regex = $_regex;
      result$data['_regex'] =
          l$$_regex == null ? null : citextToJson(l$$_regex);
    }
    if (_$data.containsKey('_similar')) {
      final l$$_similar = $_similar;
      result$data['_similar'] =
          l$$_similar == null ? null : citextToJson(l$$_similar);
    }
    return result$data;
  }

  CopyWith$Input$citext_comparison_exp<Input$citext_comparison_exp>
      get copyWith => CopyWith$Input$citext_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$citext_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_ilike = $_ilike;
    final lOther$$_ilike = other.$_ilike;
    if (_$data.containsKey('_ilike') != other._$data.containsKey('_ilike')) {
      return false;
    }
    if (l$$_ilike != lOther$$_ilike) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_iregex = $_iregex;
    final lOther$$_iregex = other.$_iregex;
    if (_$data.containsKey('_iregex') != other._$data.containsKey('_iregex')) {
      return false;
    }
    if (l$$_iregex != lOther$$_iregex) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_like = $_like;
    final lOther$$_like = other.$_like;
    if (_$data.containsKey('_like') != other._$data.containsKey('_like')) {
      return false;
    }
    if (l$$_like != lOther$$_like) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nilike = $_nilike;
    final lOther$$_nilike = other.$_nilike;
    if (_$data.containsKey('_nilike') != other._$data.containsKey('_nilike')) {
      return false;
    }
    if (l$$_nilike != lOther$$_nilike) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    final l$$_niregex = $_niregex;
    final lOther$$_niregex = other.$_niregex;
    if (_$data.containsKey('_niregex') !=
        other._$data.containsKey('_niregex')) {
      return false;
    }
    if (l$$_niregex != lOther$$_niregex) {
      return false;
    }
    final l$$_nlike = $_nlike;
    final lOther$$_nlike = other.$_nlike;
    if (_$data.containsKey('_nlike') != other._$data.containsKey('_nlike')) {
      return false;
    }
    if (l$$_nlike != lOther$$_nlike) {
      return false;
    }
    final l$$_nregex = $_nregex;
    final lOther$$_nregex = other.$_nregex;
    if (_$data.containsKey('_nregex') != other._$data.containsKey('_nregex')) {
      return false;
    }
    if (l$$_nregex != lOther$$_nregex) {
      return false;
    }
    final l$$_nsimilar = $_nsimilar;
    final lOther$$_nsimilar = other.$_nsimilar;
    if (_$data.containsKey('_nsimilar') !=
        other._$data.containsKey('_nsimilar')) {
      return false;
    }
    if (l$$_nsimilar != lOther$$_nsimilar) {
      return false;
    }
    final l$$_regex = $_regex;
    final lOther$$_regex = other.$_regex;
    if (_$data.containsKey('_regex') != other._$data.containsKey('_regex')) {
      return false;
    }
    if (l$$_regex != lOther$$_regex) {
      return false;
    }
    final l$$_similar = $_similar;
    final lOther$$_similar = other.$_similar;
    if (_$data.containsKey('_similar') !=
        other._$data.containsKey('_similar')) {
      return false;
    }
    if (l$$_similar != lOther$$_similar) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_ilike = $_ilike;
    final l$$_in = $_in;
    final l$$_iregex = $_iregex;
    final l$$_is_null = $_is_null;
    final l$$_like = $_like;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nilike = $_nilike;
    final l$$_nin = $_nin;
    final l$$_niregex = $_niregex;
    final l$$_nlike = $_nlike;
    final l$$_nregex = $_nregex;
    final l$$_nsimilar = $_nsimilar;
    final l$$_regex = $_regex;
    final l$$_similar = $_similar;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_ilike') ? l$$_ilike : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_iregex') ? l$$_iregex : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_like') ? l$$_like : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nilike') ? l$$_nilike : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
      _$data.containsKey('_niregex') ? l$$_niregex : const {},
      _$data.containsKey('_nlike') ? l$$_nlike : const {},
      _$data.containsKey('_nregex') ? l$$_nregex : const {},
      _$data.containsKey('_nsimilar') ? l$$_nsimilar : const {},
      _$data.containsKey('_regex') ? l$$_regex : const {},
      _$data.containsKey('_similar') ? l$$_similar : const {},
    ]);
  }
}

abstract class CopyWith$Input$citext_comparison_exp<TRes> {
  factory CopyWith$Input$citext_comparison_exp(
    Input$citext_comparison_exp instance,
    TRes Function(Input$citext_comparison_exp) then,
  ) = _CopyWithImpl$Input$citext_comparison_exp;

  factory CopyWith$Input$citext_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$citext_comparison_exp;

  TRes call({
    Citext? $_eq,
    Citext? $_gt,
    Citext? $_gte,
    Citext? $_ilike,
    List<Citext>? $_in,
    Citext? $_iregex,
    bool? $_is_null,
    Citext? $_like,
    Citext? $_lt,
    Citext? $_lte,
    Citext? $_neq,
    Citext? $_nilike,
    List<Citext>? $_nin,
    Citext? $_niregex,
    Citext? $_nlike,
    Citext? $_nregex,
    Citext? $_nsimilar,
    Citext? $_regex,
    Citext? $_similar,
  });
}

class _CopyWithImpl$Input$citext_comparison_exp<TRes>
    implements CopyWith$Input$citext_comparison_exp<TRes> {
  _CopyWithImpl$Input$citext_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$citext_comparison_exp _instance;

  final TRes Function(Input$citext_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_ilike = _undefined,
    Object? $_in = _undefined,
    Object? $_iregex = _undefined,
    Object? $_is_null = _undefined,
    Object? $_like = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nilike = _undefined,
    Object? $_nin = _undefined,
    Object? $_niregex = _undefined,
    Object? $_nlike = _undefined,
    Object? $_nregex = _undefined,
    Object? $_nsimilar = _undefined,
    Object? $_regex = _undefined,
    Object? $_similar = _undefined,
  }) =>
      _then(Input$citext_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as Citext?),
        if ($_gt != _undefined) '_gt': ($_gt as Citext?),
        if ($_gte != _undefined) '_gte': ($_gte as Citext?),
        if ($_ilike != _undefined) '_ilike': ($_ilike as Citext?),
        if ($_in != _undefined) '_in': ($_in as List<Citext>?),
        if ($_iregex != _undefined) '_iregex': ($_iregex as Citext?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_like != _undefined) '_like': ($_like as Citext?),
        if ($_lt != _undefined) '_lt': ($_lt as Citext?),
        if ($_lte != _undefined) '_lte': ($_lte as Citext?),
        if ($_neq != _undefined) '_neq': ($_neq as Citext?),
        if ($_nilike != _undefined) '_nilike': ($_nilike as Citext?),
        if ($_nin != _undefined) '_nin': ($_nin as List<Citext>?),
        if ($_niregex != _undefined) '_niregex': ($_niregex as Citext?),
        if ($_nlike != _undefined) '_nlike': ($_nlike as Citext?),
        if ($_nregex != _undefined) '_nregex': ($_nregex as Citext?),
        if ($_nsimilar != _undefined) '_nsimilar': ($_nsimilar as Citext?),
        if ($_regex != _undefined) '_regex': ($_regex as Citext?),
        if ($_similar != _undefined) '_similar': ($_similar as Citext?),
      }));
}

class _CopyWithStubImpl$Input$citext_comparison_exp<TRes>
    implements CopyWith$Input$citext_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$citext_comparison_exp(this._res);

  TRes _res;

  call({
    Citext? $_eq,
    Citext? $_gt,
    Citext? $_gte,
    Citext? $_ilike,
    List<Citext>? $_in,
    Citext? $_iregex,
    bool? $_is_null,
    Citext? $_like,
    Citext? $_lt,
    Citext? $_lte,
    Citext? $_neq,
    Citext? $_nilike,
    List<Citext>? $_nin,
    Citext? $_niregex,
    Citext? $_nlike,
    Citext? $_nregex,
    Citext? $_nsimilar,
    Citext? $_regex,
    Citext? $_similar,
  }) =>
      _res;
}

class Input$cs_message_aggregate_bool_exp {
  factory Input$cs_message_aggregate_bool_exp(
          {Input$cs_message_aggregate_bool_exp_count? count}) =>
      Input$cs_message_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$cs_message_aggregate_bool_exp._(this._$data);

  factory Input$cs_message_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$cs_message_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$cs_message_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$cs_message_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$cs_message_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$cs_message_aggregate_bool_exp<
          Input$cs_message_aggregate_bool_exp>
      get copyWith => CopyWith$Input$cs_message_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$cs_message_aggregate_bool_exp(
    Input$cs_message_aggregate_bool_exp instance,
    TRes Function(Input$cs_message_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$cs_message_aggregate_bool_exp;

  factory CopyWith$Input$cs_message_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_aggregate_bool_exp;

  TRes call({Input$cs_message_aggregate_bool_exp_count? count});
  CopyWith$Input$cs_message_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$cs_message_aggregate_bool_exp<TRes>
    implements CopyWith$Input$cs_message_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$cs_message_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$cs_message_aggregate_bool_exp _instance;

  final TRes Function(Input$cs_message_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$cs_message_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$cs_message_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$cs_message_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$cs_message_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$cs_message_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_aggregate_bool_exp<TRes>
    implements CopyWith$Input$cs_message_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$cs_message_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$cs_message_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$cs_message_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$cs_message_aggregate_bool_exp_count.stub(_res);
}

class Input$cs_message_aggregate_bool_exp_count {
  factory Input$cs_message_aggregate_bool_exp_count({
    List<Enum$cs_message_select_column>? arguments,
    bool? distinct,
    Input$cs_message_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$cs_message_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$cs_message_aggregate_bool_exp_count._(this._$data);

  factory Input$cs_message_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$cs_message_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$cs_message_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$cs_message_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$cs_message_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$cs_message_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$cs_message_bool_exp? get filter =>
      (_$data['filter'] as Input$cs_message_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$cs_message_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$cs_message_aggregate_bool_exp_count<
          Input$cs_message_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$cs_message_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$cs_message_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$cs_message_aggregate_bool_exp_count(
    Input$cs_message_aggregate_bool_exp_count instance,
    TRes Function(Input$cs_message_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$cs_message_aggregate_bool_exp_count;

  factory CopyWith$Input$cs_message_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_aggregate_bool_exp_count;

  TRes call({
    List<Enum$cs_message_select_column>? arguments,
    bool? distinct,
    Input$cs_message_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$cs_message_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$cs_message_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$cs_message_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$cs_message_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$cs_message_aggregate_bool_exp_count _instance;

  final TRes Function(Input$cs_message_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$cs_message_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$cs_message_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$cs_message_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$cs_message_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$cs_message_bool_exp.stub(_then(_instance))
        : CopyWith$Input$cs_message_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$cs_message_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$cs_message_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$cs_message_select_column>? arguments,
    bool? distinct,
    Input$cs_message_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$cs_message_bool_exp<TRes> get filter =>
      CopyWith$Input$cs_message_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$cs_message_aggregate_order_by {
  factory Input$cs_message_aggregate_order_by({
    Input$cs_message_avg_order_by? avg,
    Enum$order_by? count,
    Input$cs_message_max_order_by? max,
    Input$cs_message_min_order_by? min,
    Input$cs_message_stddev_order_by? stddev,
    Input$cs_message_stddev_pop_order_by? stddev_pop,
    Input$cs_message_stddev_samp_order_by? stddev_samp,
    Input$cs_message_sum_order_by? sum,
    Input$cs_message_var_pop_order_by? var_pop,
    Input$cs_message_var_samp_order_by? var_samp,
    Input$cs_message_variance_order_by? variance,
  }) =>
      Input$cs_message_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$cs_message_aggregate_order_by._(this._$data);

  factory Input$cs_message_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$cs_message_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$cs_message_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$cs_message_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$cs_message_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$cs_message_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$cs_message_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$cs_message_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$cs_message_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$cs_message_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$cs_message_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$cs_message_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$cs_message_avg_order_by? get avg =>
      (_$data['avg'] as Input$cs_message_avg_order_by?);
  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$cs_message_max_order_by? get max =>
      (_$data['max'] as Input$cs_message_max_order_by?);
  Input$cs_message_min_order_by? get min =>
      (_$data['min'] as Input$cs_message_min_order_by?);
  Input$cs_message_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$cs_message_stddev_order_by?);
  Input$cs_message_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$cs_message_stddev_pop_order_by?);
  Input$cs_message_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$cs_message_stddev_samp_order_by?);
  Input$cs_message_sum_order_by? get sum =>
      (_$data['sum'] as Input$cs_message_sum_order_by?);
  Input$cs_message_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$cs_message_var_pop_order_by?);
  Input$cs_message_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$cs_message_var_samp_order_by?);
  Input$cs_message_variance_order_by? get variance =>
      (_$data['variance'] as Input$cs_message_variance_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$cs_message_aggregate_order_by<
          Input$cs_message_aggregate_order_by>
      get copyWith => CopyWith$Input$cs_message_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_aggregate_order_by<TRes> {
  factory CopyWith$Input$cs_message_aggregate_order_by(
    Input$cs_message_aggregate_order_by instance,
    TRes Function(Input$cs_message_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_aggregate_order_by;

  factory CopyWith$Input$cs_message_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_aggregate_order_by;

  TRes call({
    Input$cs_message_avg_order_by? avg,
    Enum$order_by? count,
    Input$cs_message_max_order_by? max,
    Input$cs_message_min_order_by? min,
    Input$cs_message_stddev_order_by? stddev,
    Input$cs_message_stddev_pop_order_by? stddev_pop,
    Input$cs_message_stddev_samp_order_by? stddev_samp,
    Input$cs_message_sum_order_by? sum,
    Input$cs_message_var_pop_order_by? var_pop,
    Input$cs_message_var_samp_order_by? var_samp,
    Input$cs_message_variance_order_by? variance,
  });
  CopyWith$Input$cs_message_avg_order_by<TRes> get avg;
  CopyWith$Input$cs_message_max_order_by<TRes> get max;
  CopyWith$Input$cs_message_min_order_by<TRes> get min;
  CopyWith$Input$cs_message_stddev_order_by<TRes> get stddev;
  CopyWith$Input$cs_message_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$cs_message_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$cs_message_sum_order_by<TRes> get sum;
  CopyWith$Input$cs_message_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$cs_message_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$cs_message_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$cs_message_aggregate_order_by<TRes>
    implements CopyWith$Input$cs_message_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_aggregate_order_by _instance;

  final TRes Function(Input$cs_message_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$cs_message_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$cs_message_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$cs_message_max_order_by?),
        if (min != _undefined) 'min': (min as Input$cs_message_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$cs_message_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$cs_message_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp':
              (stddev_samp as Input$cs_message_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$cs_message_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$cs_message_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$cs_message_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$cs_message_variance_order_by?),
      }));
  CopyWith$Input$cs_message_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$cs_message_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_avg_order_by(
            local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$cs_message_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$cs_message_max_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$cs_message_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$cs_message_min_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_min_order_by(
            local$min, (e) => call(min: e));
  }

  CopyWith$Input$cs_message_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$cs_message_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$cs_message_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$cs_message_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$cs_message_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$cs_message_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$cs_message_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$cs_message_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_sum_order_by(
            local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$cs_message_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$cs_message_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$cs_message_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$cs_message_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$cs_message_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$cs_message_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_aggregate_order_by<TRes>
    implements CopyWith$Input$cs_message_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$cs_message_avg_order_by? avg,
    Enum$order_by? count,
    Input$cs_message_max_order_by? max,
    Input$cs_message_min_order_by? min,
    Input$cs_message_stddev_order_by? stddev,
    Input$cs_message_stddev_pop_order_by? stddev_pop,
    Input$cs_message_stddev_samp_order_by? stddev_samp,
    Input$cs_message_sum_order_by? sum,
    Input$cs_message_var_pop_order_by? var_pop,
    Input$cs_message_var_samp_order_by? var_samp,
    Input$cs_message_variance_order_by? variance,
  }) =>
      _res;
  CopyWith$Input$cs_message_avg_order_by<TRes> get avg =>
      CopyWith$Input$cs_message_avg_order_by.stub(_res);
  CopyWith$Input$cs_message_max_order_by<TRes> get max =>
      CopyWith$Input$cs_message_max_order_by.stub(_res);
  CopyWith$Input$cs_message_min_order_by<TRes> get min =>
      CopyWith$Input$cs_message_min_order_by.stub(_res);
  CopyWith$Input$cs_message_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$cs_message_stddev_order_by.stub(_res);
  CopyWith$Input$cs_message_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$cs_message_stddev_pop_order_by.stub(_res);
  CopyWith$Input$cs_message_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$cs_message_stddev_samp_order_by.stub(_res);
  CopyWith$Input$cs_message_sum_order_by<TRes> get sum =>
      CopyWith$Input$cs_message_sum_order_by.stub(_res);
  CopyWith$Input$cs_message_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$cs_message_var_pop_order_by.stub(_res);
  CopyWith$Input$cs_message_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$cs_message_var_samp_order_by.stub(_res);
  CopyWith$Input$cs_message_variance_order_by<TRes> get variance =>
      CopyWith$Input$cs_message_variance_order_by.stub(_res);
}

class Input$cs_message_arr_rel_insert_input {
  factory Input$cs_message_arr_rel_insert_input({
    required List<Input$cs_message_insert_input> data,
    Input$cs_message_on_conflict? on_conflict,
  }) =>
      Input$cs_message_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$cs_message_arr_rel_insert_input._(this._$data);

  factory Input$cs_message_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$cs_message_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$cs_message_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$cs_message_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$cs_message_insert_input> get data =>
      (_$data['data'] as List<Input$cs_message_insert_input>);
  Input$cs_message_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$cs_message_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$cs_message_arr_rel_insert_input<
          Input$cs_message_arr_rel_insert_input>
      get copyWith => CopyWith$Input$cs_message_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$cs_message_arr_rel_insert_input(
    Input$cs_message_arr_rel_insert_input instance,
    TRes Function(Input$cs_message_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$cs_message_arr_rel_insert_input;

  factory CopyWith$Input$cs_message_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_arr_rel_insert_input;

  TRes call({
    List<Input$cs_message_insert_input>? data,
    Input$cs_message_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$cs_message_insert_input> Function(
              Iterable<
                  CopyWith$Input$cs_message_insert_input<
                      Input$cs_message_insert_input>>)
          _fn);
  CopyWith$Input$cs_message_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$cs_message_arr_rel_insert_input<TRes>
    implements CopyWith$Input$cs_message_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$cs_message_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$cs_message_arr_rel_insert_input _instance;

  final TRes Function(Input$cs_message_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$cs_message_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$cs_message_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$cs_message_on_conflict?),
      }));
  TRes data(
          Iterable<Input$cs_message_insert_input> Function(
                  Iterable<
                      CopyWith$Input$cs_message_insert_input<
                          Input$cs_message_insert_input>>)
              _fn) =>
      call(
          data: _fn(
              _instance.data.map((e) => CopyWith$Input$cs_message_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$cs_message_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$cs_message_on_conflict.stub(_then(_instance))
        : CopyWith$Input$cs_message_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_arr_rel_insert_input<TRes>
    implements CopyWith$Input$cs_message_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$cs_message_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$cs_message_insert_input>? data,
    Input$cs_message_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$cs_message_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$cs_message_on_conflict.stub(_res);
}

class Input$cs_message_avg_order_by {
  factory Input$cs_message_avg_order_by({Enum$order_by? cs_message_id}) =>
      Input$cs_message_avg_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_avg_order_by._(this._$data);

  factory Input$cs_message_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_avg_order_by<Input$cs_message_avg_order_by>
      get copyWith => CopyWith$Input$cs_message_avg_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_avg_order_by<TRes> {
  factory CopyWith$Input$cs_message_avg_order_by(
    Input$cs_message_avg_order_by instance,
    TRes Function(Input$cs_message_avg_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_avg_order_by;

  factory CopyWith$Input$cs_message_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_avg_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_avg_order_by<TRes>
    implements CopyWith$Input$cs_message_avg_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_avg_order_by _instance;

  final TRes Function(Input$cs_message_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_avg_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_avg_order_by<TRes>
    implements CopyWith$Input$cs_message_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_avg_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$cs_message_bool_exp {
  factory Input$cs_message_bool_exp({
    List<Input$cs_message_bool_exp>? $_and,
    Input$cs_message_bool_exp? $_not,
    List<Input$cs_message_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$users_bool_exp? cs_agent,
    Input$uuid_comparison_exp? cs_agent_user_id,
    Input$String_comparison_exp? cs_message_content,
    Input$date_comparison_exp? cs_message_date,
    Input$Int_comparison_exp? cs_message_id,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      Input$cs_message_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (cs_agent != null) r'cs_agent': cs_agent,
        if (cs_agent_user_id != null) r'cs_agent_user_id': cs_agent_user_id,
        if (cs_message_content != null)
          r'cs_message_content': cs_message_content,
        if (cs_message_date != null) r'cs_message_date': cs_message_date,
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$cs_message_bool_exp._(this._$data);

  factory Input$cs_message_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$cs_message_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$cs_message_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$cs_message_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('cs_agent')) {
      final l$cs_agent = data['cs_agent'];
      result$data['cs_agent'] = l$cs_agent == null
          ? null
          : Input$users_bool_exp.fromJson((l$cs_agent as Map<String, dynamic>));
    }
    if (data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = data['cs_agent_user_id'];
      result$data['cs_agent_user_id'] = l$cs_agent_user_id == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$cs_agent_user_id as Map<String, dynamic>));
    }
    if (data.containsKey('cs_message_content')) {
      final l$cs_message_content = data['cs_message_content'];
      result$data['cs_message_content'] = l$cs_message_content == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$cs_message_content as Map<String, dynamic>));
    }
    if (data.containsKey('cs_message_date')) {
      final l$cs_message_date = data['cs_message_date'];
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : Input$date_comparison_exp.fromJson(
              (l$cs_message_date as Map<String, dynamic>));
    }
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$cs_message_id as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$user_id as Map<String, dynamic>));
    }
    return Input$cs_message_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$cs_message_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$cs_message_bool_exp>?);
  Input$cs_message_bool_exp? get $_not =>
      (_$data['_not'] as Input$cs_message_bool_exp?);
  List<Input$cs_message_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$cs_message_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$users_bool_exp? get cs_agent =>
      (_$data['cs_agent'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get cs_agent_user_id =>
      (_$data['cs_agent_user_id'] as Input$uuid_comparison_exp?);
  Input$String_comparison_exp? get cs_message_content =>
      (_$data['cs_message_content'] as Input$String_comparison_exp?);
  Input$date_comparison_exp? get cs_message_date =>
      (_$data['cs_message_date'] as Input$date_comparison_exp?);
  Input$Int_comparison_exp? get cs_message_id =>
      (_$data['cs_message_id'] as Input$Int_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get user_id =>
      (_$data['user_id'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('cs_agent')) {
      final l$cs_agent = cs_agent;
      result$data['cs_agent'] = l$cs_agent?.toJson();
    }
    if (_$data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = cs_agent_user_id;
      result$data['cs_agent_user_id'] = l$cs_agent_user_id?.toJson();
    }
    if (_$data.containsKey('cs_message_content')) {
      final l$cs_message_content = cs_message_content;
      result$data['cs_message_content'] = l$cs_message_content?.toJson();
    }
    if (_$data.containsKey('cs_message_date')) {
      final l$cs_message_date = cs_message_date;
      result$data['cs_message_date'] = l$cs_message_date?.toJson();
    }
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$cs_message_bool_exp<Input$cs_message_bool_exp> get copyWith =>
      CopyWith$Input$cs_message_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$cs_agent = cs_agent;
    final lOther$cs_agent = other.cs_agent;
    if (_$data.containsKey('cs_agent') !=
        other._$data.containsKey('cs_agent')) {
      return false;
    }
    if (l$cs_agent != lOther$cs_agent) {
      return false;
    }
    final l$cs_agent_user_id = cs_agent_user_id;
    final lOther$cs_agent_user_id = other.cs_agent_user_id;
    if (_$data.containsKey('cs_agent_user_id') !=
        other._$data.containsKey('cs_agent_user_id')) {
      return false;
    }
    if (l$cs_agent_user_id != lOther$cs_agent_user_id) {
      return false;
    }
    final l$cs_message_content = cs_message_content;
    final lOther$cs_message_content = other.cs_message_content;
    if (_$data.containsKey('cs_message_content') !=
        other._$data.containsKey('cs_message_content')) {
      return false;
    }
    if (l$cs_message_content != lOther$cs_message_content) {
      return false;
    }
    final l$cs_message_date = cs_message_date;
    final lOther$cs_message_date = other.cs_message_date;
    if (_$data.containsKey('cs_message_date') !=
        other._$data.containsKey('cs_message_date')) {
      return false;
    }
    if (l$cs_message_date != lOther$cs_message_date) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$cs_agent = cs_agent;
    final l$cs_agent_user_id = cs_agent_user_id;
    final l$cs_message_content = cs_message_content;
    final l$cs_message_date = cs_message_date;
    final l$cs_message_id = cs_message_id;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('cs_agent') ? l$cs_agent : const {},
      _$data.containsKey('cs_agent_user_id') ? l$cs_agent_user_id : const {},
      _$data.containsKey('cs_message_content')
          ? l$cs_message_content
          : const {},
      _$data.containsKey('cs_message_date') ? l$cs_message_date : const {},
      _$data.containsKey('cs_message_id') ? l$cs_message_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_bool_exp<TRes> {
  factory CopyWith$Input$cs_message_bool_exp(
    Input$cs_message_bool_exp instance,
    TRes Function(Input$cs_message_bool_exp) then,
  ) = _CopyWithImpl$Input$cs_message_bool_exp;

  factory CopyWith$Input$cs_message_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_bool_exp;

  TRes call({
    List<Input$cs_message_bool_exp>? $_and,
    Input$cs_message_bool_exp? $_not,
    List<Input$cs_message_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$users_bool_exp? cs_agent,
    Input$uuid_comparison_exp? cs_agent_user_id,
    Input$String_comparison_exp? cs_message_content,
    Input$date_comparison_exp? cs_message_date,
    Input$Int_comparison_exp? cs_message_id,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  });
  TRes $_and(
      Iterable<Input$cs_message_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$cs_message_bool_exp<
                      Input$cs_message_bool_exp>>?)
          _fn);
  CopyWith$Input$cs_message_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$cs_message_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$cs_message_bool_exp<
                      Input$cs_message_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$users_bool_exp<TRes> get cs_agent;
  CopyWith$Input$uuid_comparison_exp<TRes> get cs_agent_user_id;
  CopyWith$Input$String_comparison_exp<TRes> get cs_message_content;
  CopyWith$Input$date_comparison_exp<TRes> get cs_message_date;
  CopyWith$Input$Int_comparison_exp<TRes> get cs_message_id;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id;
}

class _CopyWithImpl$Input$cs_message_bool_exp<TRes>
    implements CopyWith$Input$cs_message_bool_exp<TRes> {
  _CopyWithImpl$Input$cs_message_bool_exp(
    this._instance,
    this._then,
  );

  final Input$cs_message_bool_exp _instance;

  final TRes Function(Input$cs_message_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? cs_agent = _undefined,
    Object? cs_agent_user_id = _undefined,
    Object? cs_message_content = _undefined,
    Object? cs_message_date = _undefined,
    Object? cs_message_id = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$cs_message_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$cs_message_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$cs_message_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$cs_message_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (cs_agent != _undefined)
          'cs_agent': (cs_agent as Input$users_bool_exp?),
        if (cs_agent_user_id != _undefined)
          'cs_agent_user_id': (cs_agent_user_id as Input$uuid_comparison_exp?),
        if (cs_message_content != _undefined)
          'cs_message_content':
              (cs_message_content as Input$String_comparison_exp?),
        if (cs_message_date != _undefined)
          'cs_message_date': (cs_message_date as Input$date_comparison_exp?),
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Input$Int_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (user_id != _undefined)
          'user_id': (user_id as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$cs_message_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$cs_message_bool_exp<
                          Input$cs_message_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(
              _instance.$_and?.map((e) => CopyWith$Input$cs_message_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$cs_message_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$cs_message_bool_exp.stub(_then(_instance))
        : CopyWith$Input$cs_message_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$cs_message_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$cs_message_bool_exp<
                          Input$cs_message_bool_exp>>?)
              _fn) =>
      call(
          $_or:
              _fn(_instance.$_or?.map((e) => CopyWith$Input$cs_message_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get cs_agent {
    final local$cs_agent = _instance.cs_agent;
    return local$cs_agent == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(
            local$cs_agent, (e) => call(cs_agent: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get cs_agent_user_id {
    final local$cs_agent_user_id = _instance.cs_agent_user_id;
    return local$cs_agent_user_id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$cs_agent_user_id, (e) => call(cs_agent_user_id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get cs_message_content {
    final local$cs_message_content = _instance.cs_message_content;
    return local$cs_message_content == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$cs_message_content, (e) => call(cs_message_content: e));
  }

  CopyWith$Input$date_comparison_exp<TRes> get cs_message_date {
    final local$cs_message_date = _instance.cs_message_date;
    return local$cs_message_date == null
        ? CopyWith$Input$date_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$date_comparison_exp(
            local$cs_message_date, (e) => call(cs_message_date: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get cs_message_id {
    final local$cs_message_id = _instance.cs_message_id;
    return local$cs_message_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$cs_message_id, (e) => call(cs_message_id: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get user_id {
    final local$user_id = _instance.user_id;
    return local$user_id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$user_id, (e) => call(user_id: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_bool_exp<TRes>
    implements CopyWith$Input$cs_message_bool_exp<TRes> {
  _CopyWithStubImpl$Input$cs_message_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$cs_message_bool_exp>? $_and,
    Input$cs_message_bool_exp? $_not,
    List<Input$cs_message_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$users_bool_exp? cs_agent,
    Input$uuid_comparison_exp? cs_agent_user_id,
    Input$String_comparison_exp? cs_message_content,
    Input$date_comparison_exp? cs_message_date,
    Input$Int_comparison_exp? cs_message_id,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$cs_message_bool_exp<TRes> get $_not =>
      CopyWith$Input$cs_message_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get cs_agent =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get cs_agent_user_id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get cs_message_content =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$date_comparison_exp<TRes> get cs_message_date =>
      CopyWith$Input$date_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get cs_message_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$cs_message_insert_input {
  factory Input$cs_message_insert_input({
    DateTime? created_at,
    Input$users_obj_rel_insert_input? cs_agent,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      Input$cs_message_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (cs_agent != null) r'cs_agent': cs_agent,
        if (cs_agent_user_id != null) r'cs_agent_user_id': cs_agent_user_id,
        if (cs_message_content != null)
          r'cs_message_content': cs_message_content,
        if (cs_message_date != null) r'cs_message_date': cs_message_date,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$cs_message_insert_input._(this._$data);

  factory Input$cs_message_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('cs_agent')) {
      final l$cs_agent = data['cs_agent'];
      result$data['cs_agent'] = l$cs_agent == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$cs_agent as Map<String, dynamic>));
    }
    if (data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = data['cs_agent_user_id'];
      result$data['cs_agent_user_id'] =
          l$cs_agent_user_id == null ? null : uuidFromJson(l$cs_agent_user_id);
    }
    if (data.containsKey('cs_message_content')) {
      final l$cs_message_content = data['cs_message_content'];
      result$data['cs_message_content'] = (l$cs_message_content as String?);
    }
    if (data.containsKey('cs_message_date')) {
      final l$cs_message_date = data['cs_message_date'];
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : DateTime.parse((l$cs_message_date as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$cs_message_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  Input$users_obj_rel_insert_input? get cs_agent =>
      (_$data['cs_agent'] as Input$users_obj_rel_insert_input?);
  UUID? get cs_agent_user_id => (_$data['cs_agent_user_id'] as UUID?);
  String? get cs_message_content => (_$data['cs_message_content'] as String?);
  DateTime? get cs_message_date => (_$data['cs_message_date'] as DateTime?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('cs_agent')) {
      final l$cs_agent = cs_agent;
      result$data['cs_agent'] = l$cs_agent?.toJson();
    }
    if (_$data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = cs_agent_user_id;
      result$data['cs_agent_user_id'] =
          l$cs_agent_user_id == null ? null : uuidToJson(l$cs_agent_user_id);
    }
    if (_$data.containsKey('cs_message_content')) {
      final l$cs_message_content = cs_message_content;
      result$data['cs_message_content'] = l$cs_message_content;
    }
    if (_$data.containsKey('cs_message_date')) {
      final l$cs_message_date = cs_message_date;
      result$data['cs_message_date'] = l$cs_message_date?.toIso8601String();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_insert_input<Input$cs_message_insert_input>
      get copyWith => CopyWith$Input$cs_message_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$cs_agent = cs_agent;
    final lOther$cs_agent = other.cs_agent;
    if (_$data.containsKey('cs_agent') !=
        other._$data.containsKey('cs_agent')) {
      return false;
    }
    if (l$cs_agent != lOther$cs_agent) {
      return false;
    }
    final l$cs_agent_user_id = cs_agent_user_id;
    final lOther$cs_agent_user_id = other.cs_agent_user_id;
    if (_$data.containsKey('cs_agent_user_id') !=
        other._$data.containsKey('cs_agent_user_id')) {
      return false;
    }
    if (l$cs_agent_user_id != lOther$cs_agent_user_id) {
      return false;
    }
    final l$cs_message_content = cs_message_content;
    final lOther$cs_message_content = other.cs_message_content;
    if (_$data.containsKey('cs_message_content') !=
        other._$data.containsKey('cs_message_content')) {
      return false;
    }
    if (l$cs_message_content != lOther$cs_message_content) {
      return false;
    }
    final l$cs_message_date = cs_message_date;
    final lOther$cs_message_date = other.cs_message_date;
    if (_$data.containsKey('cs_message_date') !=
        other._$data.containsKey('cs_message_date')) {
      return false;
    }
    if (l$cs_message_date != lOther$cs_message_date) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$cs_agent = cs_agent;
    final l$cs_agent_user_id = cs_agent_user_id;
    final l$cs_message_content = cs_message_content;
    final l$cs_message_date = cs_message_date;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('cs_agent') ? l$cs_agent : const {},
      _$data.containsKey('cs_agent_user_id') ? l$cs_agent_user_id : const {},
      _$data.containsKey('cs_message_content')
          ? l$cs_message_content
          : const {},
      _$data.containsKey('cs_message_date') ? l$cs_message_date : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_insert_input<TRes> {
  factory CopyWith$Input$cs_message_insert_input(
    Input$cs_message_insert_input instance,
    TRes Function(Input$cs_message_insert_input) then,
  ) = _CopyWithImpl$Input$cs_message_insert_input;

  factory CopyWith$Input$cs_message_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_insert_input;

  TRes call({
    DateTime? created_at,
    Input$users_obj_rel_insert_input? cs_agent,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  });
  CopyWith$Input$users_obj_rel_insert_input<TRes> get cs_agent;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$cs_message_insert_input<TRes>
    implements CopyWith$Input$cs_message_insert_input<TRes> {
  _CopyWithImpl$Input$cs_message_insert_input(
    this._instance,
    this._then,
  );

  final Input$cs_message_insert_input _instance;

  final TRes Function(Input$cs_message_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? cs_agent = _undefined,
    Object? cs_agent_user_id = _undefined,
    Object? cs_message_content = _undefined,
    Object? cs_message_date = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$cs_message_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (cs_agent != _undefined)
          'cs_agent': (cs_agent as Input$users_obj_rel_insert_input?),
        if (cs_agent_user_id != _undefined)
          'cs_agent_user_id': (cs_agent_user_id as UUID?),
        if (cs_message_content != _undefined)
          'cs_message_content': (cs_message_content as String?),
        if (cs_message_date != _undefined)
          'cs_message_date': (cs_message_date as DateTime?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
  CopyWith$Input$users_obj_rel_insert_input<TRes> get cs_agent {
    final local$cs_agent = _instance.cs_agent;
    return local$cs_agent == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$cs_agent, (e) => call(cs_agent: e));
  }

  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_insert_input<TRes>
    implements CopyWith$Input$cs_message_insert_input<TRes> {
  _CopyWithStubImpl$Input$cs_message_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    Input$users_obj_rel_insert_input? cs_agent,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      _res;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get cs_agent =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$cs_message_max_order_by {
  factory Input$cs_message_max_order_by({
    Enum$order_by? created_at,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Enum$order_by? user_id,
  }) =>
      Input$cs_message_max_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (cs_agent_user_id != null) r'cs_agent_user_id': cs_agent_user_id,
        if (cs_message_content != null)
          r'cs_message_content': cs_message_content,
        if (cs_message_date != null) r'cs_message_date': cs_message_date,
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$cs_message_max_order_by._(this._$data);

  factory Input$cs_message_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = data['cs_agent_user_id'];
      result$data['cs_agent_user_id'] = l$cs_agent_user_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_agent_user_id as String));
    }
    if (data.containsKey('cs_message_content')) {
      final l$cs_message_content = data['cs_message_content'];
      result$data['cs_message_content'] = l$cs_message_content == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_content as String));
    }
    if (data.containsKey('cs_message_date')) {
      final l$cs_message_date = data['cs_message_date'];
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_date as String));
    }
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : fromJson$Enum$order_by((l$user_id as String));
    }
    return Input$cs_message_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get cs_agent_user_id =>
      (_$data['cs_agent_user_id'] as Enum$order_by?);
  Enum$order_by? get cs_message_content =>
      (_$data['cs_message_content'] as Enum$order_by?);
  Enum$order_by? get cs_message_date =>
      (_$data['cs_message_date'] as Enum$order_by?);
  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Enum$order_by? get user_id => (_$data['user_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = cs_agent_user_id;
      result$data['cs_agent_user_id'] = l$cs_agent_user_id == null
          ? null
          : toJson$Enum$order_by(l$cs_agent_user_id);
    }
    if (_$data.containsKey('cs_message_content')) {
      final l$cs_message_content = cs_message_content;
      result$data['cs_message_content'] = l$cs_message_content == null
          ? null
          : toJson$Enum$order_by(l$cs_message_content);
    }
    if (_$data.containsKey('cs_message_date')) {
      final l$cs_message_date = cs_message_date;
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : toJson$Enum$order_by(l$cs_message_date);
    }
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] =
          l$user_id == null ? null : toJson$Enum$order_by(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_max_order_by<Input$cs_message_max_order_by>
      get copyWith => CopyWith$Input$cs_message_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$cs_agent_user_id = cs_agent_user_id;
    final lOther$cs_agent_user_id = other.cs_agent_user_id;
    if (_$data.containsKey('cs_agent_user_id') !=
        other._$data.containsKey('cs_agent_user_id')) {
      return false;
    }
    if (l$cs_agent_user_id != lOther$cs_agent_user_id) {
      return false;
    }
    final l$cs_message_content = cs_message_content;
    final lOther$cs_message_content = other.cs_message_content;
    if (_$data.containsKey('cs_message_content') !=
        other._$data.containsKey('cs_message_content')) {
      return false;
    }
    if (l$cs_message_content != lOther$cs_message_content) {
      return false;
    }
    final l$cs_message_date = cs_message_date;
    final lOther$cs_message_date = other.cs_message_date;
    if (_$data.containsKey('cs_message_date') !=
        other._$data.containsKey('cs_message_date')) {
      return false;
    }
    if (l$cs_message_date != lOther$cs_message_date) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$cs_agent_user_id = cs_agent_user_id;
    final l$cs_message_content = cs_message_content;
    final l$cs_message_date = cs_message_date;
    final l$cs_message_id = cs_message_id;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('cs_agent_user_id') ? l$cs_agent_user_id : const {},
      _$data.containsKey('cs_message_content')
          ? l$cs_message_content
          : const {},
      _$data.containsKey('cs_message_date') ? l$cs_message_date : const {},
      _$data.containsKey('cs_message_id') ? l$cs_message_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_max_order_by<TRes> {
  factory CopyWith$Input$cs_message_max_order_by(
    Input$cs_message_max_order_by instance,
    TRes Function(Input$cs_message_max_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_max_order_by;

  factory CopyWith$Input$cs_message_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_max_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Enum$order_by? user_id,
  });
}

class _CopyWithImpl$Input$cs_message_max_order_by<TRes>
    implements CopyWith$Input$cs_message_max_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_max_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_max_order_by _instance;

  final TRes Function(Input$cs_message_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? cs_agent_user_id = _undefined,
    Object? cs_message_content = _undefined,
    Object? cs_message_date = _undefined,
    Object? cs_message_id = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$cs_message_max_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (cs_agent_user_id != _undefined)
          'cs_agent_user_id': (cs_agent_user_id as Enum$order_by?),
        if (cs_message_content != _undefined)
          'cs_message_content': (cs_message_content as Enum$order_by?),
        if (cs_message_date != _undefined)
          'cs_message_date': (cs_message_date as Enum$order_by?),
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (user_id != _undefined) 'user_id': (user_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_max_order_by<TRes>
    implements CopyWith$Input$cs_message_max_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Enum$order_by? user_id,
  }) =>
      _res;
}

class Input$cs_message_min_order_by {
  factory Input$cs_message_min_order_by({
    Enum$order_by? created_at,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Enum$order_by? user_id,
  }) =>
      Input$cs_message_min_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (cs_agent_user_id != null) r'cs_agent_user_id': cs_agent_user_id,
        if (cs_message_content != null)
          r'cs_message_content': cs_message_content,
        if (cs_message_date != null) r'cs_message_date': cs_message_date,
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$cs_message_min_order_by._(this._$data);

  factory Input$cs_message_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = data['cs_agent_user_id'];
      result$data['cs_agent_user_id'] = l$cs_agent_user_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_agent_user_id as String));
    }
    if (data.containsKey('cs_message_content')) {
      final l$cs_message_content = data['cs_message_content'];
      result$data['cs_message_content'] = l$cs_message_content == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_content as String));
    }
    if (data.containsKey('cs_message_date')) {
      final l$cs_message_date = data['cs_message_date'];
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_date as String));
    }
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : fromJson$Enum$order_by((l$user_id as String));
    }
    return Input$cs_message_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get cs_agent_user_id =>
      (_$data['cs_agent_user_id'] as Enum$order_by?);
  Enum$order_by? get cs_message_content =>
      (_$data['cs_message_content'] as Enum$order_by?);
  Enum$order_by? get cs_message_date =>
      (_$data['cs_message_date'] as Enum$order_by?);
  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Enum$order_by? get user_id => (_$data['user_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = cs_agent_user_id;
      result$data['cs_agent_user_id'] = l$cs_agent_user_id == null
          ? null
          : toJson$Enum$order_by(l$cs_agent_user_id);
    }
    if (_$data.containsKey('cs_message_content')) {
      final l$cs_message_content = cs_message_content;
      result$data['cs_message_content'] = l$cs_message_content == null
          ? null
          : toJson$Enum$order_by(l$cs_message_content);
    }
    if (_$data.containsKey('cs_message_date')) {
      final l$cs_message_date = cs_message_date;
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : toJson$Enum$order_by(l$cs_message_date);
    }
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] =
          l$user_id == null ? null : toJson$Enum$order_by(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_min_order_by<Input$cs_message_min_order_by>
      get copyWith => CopyWith$Input$cs_message_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$cs_agent_user_id = cs_agent_user_id;
    final lOther$cs_agent_user_id = other.cs_agent_user_id;
    if (_$data.containsKey('cs_agent_user_id') !=
        other._$data.containsKey('cs_agent_user_id')) {
      return false;
    }
    if (l$cs_agent_user_id != lOther$cs_agent_user_id) {
      return false;
    }
    final l$cs_message_content = cs_message_content;
    final lOther$cs_message_content = other.cs_message_content;
    if (_$data.containsKey('cs_message_content') !=
        other._$data.containsKey('cs_message_content')) {
      return false;
    }
    if (l$cs_message_content != lOther$cs_message_content) {
      return false;
    }
    final l$cs_message_date = cs_message_date;
    final lOther$cs_message_date = other.cs_message_date;
    if (_$data.containsKey('cs_message_date') !=
        other._$data.containsKey('cs_message_date')) {
      return false;
    }
    if (l$cs_message_date != lOther$cs_message_date) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$cs_agent_user_id = cs_agent_user_id;
    final l$cs_message_content = cs_message_content;
    final l$cs_message_date = cs_message_date;
    final l$cs_message_id = cs_message_id;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('cs_agent_user_id') ? l$cs_agent_user_id : const {},
      _$data.containsKey('cs_message_content')
          ? l$cs_message_content
          : const {},
      _$data.containsKey('cs_message_date') ? l$cs_message_date : const {},
      _$data.containsKey('cs_message_id') ? l$cs_message_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_min_order_by<TRes> {
  factory CopyWith$Input$cs_message_min_order_by(
    Input$cs_message_min_order_by instance,
    TRes Function(Input$cs_message_min_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_min_order_by;

  factory CopyWith$Input$cs_message_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_min_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Enum$order_by? user_id,
  });
}

class _CopyWithImpl$Input$cs_message_min_order_by<TRes>
    implements CopyWith$Input$cs_message_min_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_min_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_min_order_by _instance;

  final TRes Function(Input$cs_message_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? cs_agent_user_id = _undefined,
    Object? cs_message_content = _undefined,
    Object? cs_message_date = _undefined,
    Object? cs_message_id = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$cs_message_min_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (cs_agent_user_id != _undefined)
          'cs_agent_user_id': (cs_agent_user_id as Enum$order_by?),
        if (cs_message_content != _undefined)
          'cs_message_content': (cs_message_content as Enum$order_by?),
        if (cs_message_date != _undefined)
          'cs_message_date': (cs_message_date as Enum$order_by?),
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (user_id != _undefined) 'user_id': (user_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_min_order_by<TRes>
    implements CopyWith$Input$cs_message_min_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Enum$order_by? user_id,
  }) =>
      _res;
}

class Input$cs_message_on_conflict {
  factory Input$cs_message_on_conflict({
    required Enum$cs_message_constraint constraint,
    required List<Enum$cs_message_update_column> update_columns,
    Input$cs_message_bool_exp? where,
  }) =>
      Input$cs_message_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$cs_message_on_conflict._(this._$data);

  factory Input$cs_message_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$cs_message_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$cs_message_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$cs_message_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$cs_message_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$cs_message_constraint get constraint =>
      (_$data['constraint'] as Enum$cs_message_constraint);
  List<Enum$cs_message_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$cs_message_update_column>);
  Input$cs_message_bool_exp? get where =>
      (_$data['where'] as Input$cs_message_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$cs_message_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$cs_message_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$cs_message_on_conflict<Input$cs_message_on_conflict>
      get copyWith => CopyWith$Input$cs_message_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_on_conflict<TRes> {
  factory CopyWith$Input$cs_message_on_conflict(
    Input$cs_message_on_conflict instance,
    TRes Function(Input$cs_message_on_conflict) then,
  ) = _CopyWithImpl$Input$cs_message_on_conflict;

  factory CopyWith$Input$cs_message_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_on_conflict;

  TRes call({
    Enum$cs_message_constraint? constraint,
    List<Enum$cs_message_update_column>? update_columns,
    Input$cs_message_bool_exp? where,
  });
  CopyWith$Input$cs_message_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$cs_message_on_conflict<TRes>
    implements CopyWith$Input$cs_message_on_conflict<TRes> {
  _CopyWithImpl$Input$cs_message_on_conflict(
    this._instance,
    this._then,
  );

  final Input$cs_message_on_conflict _instance;

  final TRes Function(Input$cs_message_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$cs_message_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$cs_message_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$cs_message_update_column>),
        if (where != _undefined) 'where': (where as Input$cs_message_bool_exp?),
      }));
  CopyWith$Input$cs_message_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$cs_message_bool_exp.stub(_then(_instance))
        : CopyWith$Input$cs_message_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_on_conflict<TRes>
    implements CopyWith$Input$cs_message_on_conflict<TRes> {
  _CopyWithStubImpl$Input$cs_message_on_conflict(this._res);

  TRes _res;

  call({
    Enum$cs_message_constraint? constraint,
    List<Enum$cs_message_update_column>? update_columns,
    Input$cs_message_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$cs_message_bool_exp<TRes> get where =>
      CopyWith$Input$cs_message_bool_exp.stub(_res);
}

class Input$cs_message_order_by {
  factory Input$cs_message_order_by({
    Enum$order_by? created_at,
    Input$users_order_by? cs_agent,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      Input$cs_message_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (cs_agent != null) r'cs_agent': cs_agent,
        if (cs_agent_user_id != null) r'cs_agent_user_id': cs_agent_user_id,
        if (cs_message_content != null)
          r'cs_message_content': cs_message_content,
        if (cs_message_date != null) r'cs_message_date': cs_message_date,
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$cs_message_order_by._(this._$data);

  factory Input$cs_message_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('cs_agent')) {
      final l$cs_agent = data['cs_agent'];
      result$data['cs_agent'] = l$cs_agent == null
          ? null
          : Input$users_order_by.fromJson((l$cs_agent as Map<String, dynamic>));
    }
    if (data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = data['cs_agent_user_id'];
      result$data['cs_agent_user_id'] = l$cs_agent_user_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_agent_user_id as String));
    }
    if (data.containsKey('cs_message_content')) {
      final l$cs_message_content = data['cs_message_content'];
      result$data['cs_message_content'] = l$cs_message_content == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_content as String));
    }
    if (data.containsKey('cs_message_date')) {
      final l$cs_message_date = data['cs_message_date'];
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_date as String));
    }
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : fromJson$Enum$order_by((l$user_id as String));
    }
    return Input$cs_message_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Input$users_order_by? get cs_agent =>
      (_$data['cs_agent'] as Input$users_order_by?);
  Enum$order_by? get cs_agent_user_id =>
      (_$data['cs_agent_user_id'] as Enum$order_by?);
  Enum$order_by? get cs_message_content =>
      (_$data['cs_message_content'] as Enum$order_by?);
  Enum$order_by? get cs_message_date =>
      (_$data['cs_message_date'] as Enum$order_by?);
  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get user_id => (_$data['user_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('cs_agent')) {
      final l$cs_agent = cs_agent;
      result$data['cs_agent'] = l$cs_agent?.toJson();
    }
    if (_$data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = cs_agent_user_id;
      result$data['cs_agent_user_id'] = l$cs_agent_user_id == null
          ? null
          : toJson$Enum$order_by(l$cs_agent_user_id);
    }
    if (_$data.containsKey('cs_message_content')) {
      final l$cs_message_content = cs_message_content;
      result$data['cs_message_content'] = l$cs_message_content == null
          ? null
          : toJson$Enum$order_by(l$cs_message_content);
    }
    if (_$data.containsKey('cs_message_date')) {
      final l$cs_message_date = cs_message_date;
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : toJson$Enum$order_by(l$cs_message_date);
    }
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] =
          l$user_id == null ? null : toJson$Enum$order_by(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_order_by<Input$cs_message_order_by> get copyWith =>
      CopyWith$Input$cs_message_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$cs_agent = cs_agent;
    final lOther$cs_agent = other.cs_agent;
    if (_$data.containsKey('cs_agent') !=
        other._$data.containsKey('cs_agent')) {
      return false;
    }
    if (l$cs_agent != lOther$cs_agent) {
      return false;
    }
    final l$cs_agent_user_id = cs_agent_user_id;
    final lOther$cs_agent_user_id = other.cs_agent_user_id;
    if (_$data.containsKey('cs_agent_user_id') !=
        other._$data.containsKey('cs_agent_user_id')) {
      return false;
    }
    if (l$cs_agent_user_id != lOther$cs_agent_user_id) {
      return false;
    }
    final l$cs_message_content = cs_message_content;
    final lOther$cs_message_content = other.cs_message_content;
    if (_$data.containsKey('cs_message_content') !=
        other._$data.containsKey('cs_message_content')) {
      return false;
    }
    if (l$cs_message_content != lOther$cs_message_content) {
      return false;
    }
    final l$cs_message_date = cs_message_date;
    final lOther$cs_message_date = other.cs_message_date;
    if (_$data.containsKey('cs_message_date') !=
        other._$data.containsKey('cs_message_date')) {
      return false;
    }
    if (l$cs_message_date != lOther$cs_message_date) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$cs_agent = cs_agent;
    final l$cs_agent_user_id = cs_agent_user_id;
    final l$cs_message_content = cs_message_content;
    final l$cs_message_date = cs_message_date;
    final l$cs_message_id = cs_message_id;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('cs_agent') ? l$cs_agent : const {},
      _$data.containsKey('cs_agent_user_id') ? l$cs_agent_user_id : const {},
      _$data.containsKey('cs_message_content')
          ? l$cs_message_content
          : const {},
      _$data.containsKey('cs_message_date') ? l$cs_message_date : const {},
      _$data.containsKey('cs_message_id') ? l$cs_message_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_order_by<TRes> {
  factory CopyWith$Input$cs_message_order_by(
    Input$cs_message_order_by instance,
    TRes Function(Input$cs_message_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_order_by;

  factory CopyWith$Input$cs_message_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_order_by;

  TRes call({
    Enum$order_by? created_at,
    Input$users_order_by? cs_agent,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  });
  CopyWith$Input$users_order_by<TRes> get cs_agent;
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$cs_message_order_by<TRes>
    implements CopyWith$Input$cs_message_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_order_by _instance;

  final TRes Function(Input$cs_message_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? cs_agent = _undefined,
    Object? cs_agent_user_id = _undefined,
    Object? cs_message_content = _undefined,
    Object? cs_message_date = _undefined,
    Object? cs_message_id = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$cs_message_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (cs_agent != _undefined)
          'cs_agent': (cs_agent as Input$users_order_by?),
        if (cs_agent_user_id != _undefined)
          'cs_agent_user_id': (cs_agent_user_id as Enum$order_by?),
        if (cs_message_content != _undefined)
          'cs_message_content': (cs_message_content as Enum$order_by?),
        if (cs_message_date != _undefined)
          'cs_message_date': (cs_message_date as Enum$order_by?),
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (user_id != _undefined) 'user_id': (user_id as Enum$order_by?),
      }));
  CopyWith$Input$users_order_by<TRes> get cs_agent {
    final local$cs_agent = _instance.cs_agent;
    return local$cs_agent == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(
            local$cs_agent, (e) => call(cs_agent: e));
  }

  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_order_by<TRes>
    implements CopyWith$Input$cs_message_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Input$users_order_by? cs_agent,
    Enum$order_by? cs_agent_user_id,
    Enum$order_by? cs_message_content,
    Enum$order_by? cs_message_date,
    Enum$order_by? cs_message_id,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      _res;
  CopyWith$Input$users_order_by<TRes> get cs_agent =>
      CopyWith$Input$users_order_by.stub(_res);
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$cs_message_pk_columns_input {
  factory Input$cs_message_pk_columns_input({required int cs_message_id}) =>
      Input$cs_message_pk_columns_input._({
        r'cs_message_id': cs_message_id,
      });

  Input$cs_message_pk_columns_input._(this._$data);

  factory Input$cs_message_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$cs_message_id = data['cs_message_id'];
    result$data['cs_message_id'] = (l$cs_message_id as int);
    return Input$cs_message_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int get cs_message_id => (_$data['cs_message_id'] as int);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$cs_message_id = cs_message_id;
    result$data['cs_message_id'] = l$cs_message_id;
    return result$data;
  }

  CopyWith$Input$cs_message_pk_columns_input<Input$cs_message_pk_columns_input>
      get copyWith => CopyWith$Input$cs_message_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll([l$cs_message_id]);
  }
}

abstract class CopyWith$Input$cs_message_pk_columns_input<TRes> {
  factory CopyWith$Input$cs_message_pk_columns_input(
    Input$cs_message_pk_columns_input instance,
    TRes Function(Input$cs_message_pk_columns_input) then,
  ) = _CopyWithImpl$Input$cs_message_pk_columns_input;

  factory CopyWith$Input$cs_message_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_pk_columns_input;

  TRes call({int? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_pk_columns_input<TRes>
    implements CopyWith$Input$cs_message_pk_columns_input<TRes> {
  _CopyWithImpl$Input$cs_message_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$cs_message_pk_columns_input _instance;

  final TRes Function(Input$cs_message_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_pk_columns_input._({
        ..._instance._$data,
        if (cs_message_id != _undefined && cs_message_id != null)
          'cs_message_id': (cs_message_id as int),
      }));
}

class _CopyWithStubImpl$Input$cs_message_pk_columns_input<TRes>
    implements CopyWith$Input$cs_message_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$cs_message_pk_columns_input(this._res);

  TRes _res;

  call({int? cs_message_id}) => _res;
}

class Input$cs_message_set_input {
  factory Input$cs_message_set_input({
    DateTime? created_at,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$cs_message_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (cs_agent_user_id != null) r'cs_agent_user_id': cs_agent_user_id,
        if (cs_message_content != null)
          r'cs_message_content': cs_message_content,
        if (cs_message_date != null) r'cs_message_date': cs_message_date,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$cs_message_set_input._(this._$data);

  factory Input$cs_message_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = data['cs_agent_user_id'];
      result$data['cs_agent_user_id'] =
          l$cs_agent_user_id == null ? null : uuidFromJson(l$cs_agent_user_id);
    }
    if (data.containsKey('cs_message_content')) {
      final l$cs_message_content = data['cs_message_content'];
      result$data['cs_message_content'] = (l$cs_message_content as String?);
    }
    if (data.containsKey('cs_message_date')) {
      final l$cs_message_date = data['cs_message_date'];
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : DateTime.parse((l$cs_message_date as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$cs_message_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  UUID? get cs_agent_user_id => (_$data['cs_agent_user_id'] as UUID?);
  String? get cs_message_content => (_$data['cs_message_content'] as String?);
  DateTime? get cs_message_date => (_$data['cs_message_date'] as DateTime?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = cs_agent_user_id;
      result$data['cs_agent_user_id'] =
          l$cs_agent_user_id == null ? null : uuidToJson(l$cs_agent_user_id);
    }
    if (_$data.containsKey('cs_message_content')) {
      final l$cs_message_content = cs_message_content;
      result$data['cs_message_content'] = l$cs_message_content;
    }
    if (_$data.containsKey('cs_message_date')) {
      final l$cs_message_date = cs_message_date;
      result$data['cs_message_date'] = l$cs_message_date?.toIso8601String();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_set_input<Input$cs_message_set_input>
      get copyWith => CopyWith$Input$cs_message_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$cs_agent_user_id = cs_agent_user_id;
    final lOther$cs_agent_user_id = other.cs_agent_user_id;
    if (_$data.containsKey('cs_agent_user_id') !=
        other._$data.containsKey('cs_agent_user_id')) {
      return false;
    }
    if (l$cs_agent_user_id != lOther$cs_agent_user_id) {
      return false;
    }
    final l$cs_message_content = cs_message_content;
    final lOther$cs_message_content = other.cs_message_content;
    if (_$data.containsKey('cs_message_content') !=
        other._$data.containsKey('cs_message_content')) {
      return false;
    }
    if (l$cs_message_content != lOther$cs_message_content) {
      return false;
    }
    final l$cs_message_date = cs_message_date;
    final lOther$cs_message_date = other.cs_message_date;
    if (_$data.containsKey('cs_message_date') !=
        other._$data.containsKey('cs_message_date')) {
      return false;
    }
    if (l$cs_message_date != lOther$cs_message_date) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$cs_agent_user_id = cs_agent_user_id;
    final l$cs_message_content = cs_message_content;
    final l$cs_message_date = cs_message_date;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('cs_agent_user_id') ? l$cs_agent_user_id : const {},
      _$data.containsKey('cs_message_content')
          ? l$cs_message_content
          : const {},
      _$data.containsKey('cs_message_date') ? l$cs_message_date : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_set_input<TRes> {
  factory CopyWith$Input$cs_message_set_input(
    Input$cs_message_set_input instance,
    TRes Function(Input$cs_message_set_input) then,
  ) = _CopyWithImpl$Input$cs_message_set_input;

  factory CopyWith$Input$cs_message_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_set_input;

  TRes call({
    DateTime? created_at,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$cs_message_set_input<TRes>
    implements CopyWith$Input$cs_message_set_input<TRes> {
  _CopyWithImpl$Input$cs_message_set_input(
    this._instance,
    this._then,
  );

  final Input$cs_message_set_input _instance;

  final TRes Function(Input$cs_message_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? cs_agent_user_id = _undefined,
    Object? cs_message_content = _undefined,
    Object? cs_message_date = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$cs_message_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (cs_agent_user_id != _undefined)
          'cs_agent_user_id': (cs_agent_user_id as UUID?),
        if (cs_message_content != _undefined)
          'cs_message_content': (cs_message_content as String?),
        if (cs_message_date != _undefined)
          'cs_message_date': (cs_message_date as DateTime?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_set_input<TRes>
    implements CopyWith$Input$cs_message_set_input<TRes> {
  _CopyWithStubImpl$Input$cs_message_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$cs_message_stddev_order_by {
  factory Input$cs_message_stddev_order_by({Enum$order_by? cs_message_id}) =>
      Input$cs_message_stddev_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_stddev_order_by._(this._$data);

  factory Input$cs_message_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_stddev_order_by<Input$cs_message_stddev_order_by>
      get copyWith => CopyWith$Input$cs_message_stddev_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_stddev_order_by<TRes> {
  factory CopyWith$Input$cs_message_stddev_order_by(
    Input$cs_message_stddev_order_by instance,
    TRes Function(Input$cs_message_stddev_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_stddev_order_by;

  factory CopyWith$Input$cs_message_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_stddev_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_stddev_order_by<TRes>
    implements CopyWith$Input$cs_message_stddev_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_stddev_order_by _instance;

  final TRes Function(Input$cs_message_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_stddev_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_stddev_order_by<TRes>
    implements CopyWith$Input$cs_message_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_stddev_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$cs_message_stddev_pop_order_by {
  factory Input$cs_message_stddev_pop_order_by(
          {Enum$order_by? cs_message_id}) =>
      Input$cs_message_stddev_pop_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_stddev_pop_order_by._(this._$data);

  factory Input$cs_message_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_stddev_pop_order_by<
          Input$cs_message_stddev_pop_order_by>
      get copyWith => CopyWith$Input$cs_message_stddev_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$cs_message_stddev_pop_order_by(
    Input$cs_message_stddev_pop_order_by instance,
    TRes Function(Input$cs_message_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_stddev_pop_order_by;

  factory CopyWith$Input$cs_message_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_stddev_pop_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_stddev_pop_order_by<TRes>
    implements CopyWith$Input$cs_message_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_stddev_pop_order_by _instance;

  final TRes Function(Input$cs_message_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_stddev_pop_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_stddev_pop_order_by<TRes>
    implements CopyWith$Input$cs_message_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_stddev_pop_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$cs_message_stddev_samp_order_by {
  factory Input$cs_message_stddev_samp_order_by(
          {Enum$order_by? cs_message_id}) =>
      Input$cs_message_stddev_samp_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_stddev_samp_order_by._(this._$data);

  factory Input$cs_message_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_stddev_samp_order_by<
          Input$cs_message_stddev_samp_order_by>
      get copyWith => CopyWith$Input$cs_message_stddev_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$cs_message_stddev_samp_order_by(
    Input$cs_message_stddev_samp_order_by instance,
    TRes Function(Input$cs_message_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_stddev_samp_order_by;

  factory CopyWith$Input$cs_message_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_stddev_samp_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_stddev_samp_order_by<TRes>
    implements CopyWith$Input$cs_message_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_stddev_samp_order_by _instance;

  final TRes Function(Input$cs_message_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_stddev_samp_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_stddev_samp_order_by<TRes>
    implements CopyWith$Input$cs_message_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_stddev_samp_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$cs_message_stream_cursor_input {
  factory Input$cs_message_stream_cursor_input({
    required Input$cs_message_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$cs_message_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$cs_message_stream_cursor_input._(this._$data);

  factory Input$cs_message_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$cs_message_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$cs_message_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$cs_message_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$cs_message_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_stream_cursor_input<
          Input$cs_message_stream_cursor_input>
      get copyWith => CopyWith$Input$cs_message_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_stream_cursor_input<TRes> {
  factory CopyWith$Input$cs_message_stream_cursor_input(
    Input$cs_message_stream_cursor_input instance,
    TRes Function(Input$cs_message_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$cs_message_stream_cursor_input;

  factory CopyWith$Input$cs_message_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_stream_cursor_input;

  TRes call({
    Input$cs_message_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$cs_message_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$cs_message_stream_cursor_input<TRes>
    implements CopyWith$Input$cs_message_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$cs_message_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$cs_message_stream_cursor_input _instance;

  final TRes Function(Input$cs_message_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$cs_message_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$cs_message_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$cs_message_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$cs_message_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_stream_cursor_input<TRes>
    implements CopyWith$Input$cs_message_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$cs_message_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$cs_message_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$cs_message_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$cs_message_stream_cursor_value_input.stub(_res);
}

class Input$cs_message_stream_cursor_value_input {
  factory Input$cs_message_stream_cursor_value_input({
    DateTime? created_at,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    int? cs_message_id,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$cs_message_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (cs_agent_user_id != null) r'cs_agent_user_id': cs_agent_user_id,
        if (cs_message_content != null)
          r'cs_message_content': cs_message_content,
        if (cs_message_date != null) r'cs_message_date': cs_message_date,
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$cs_message_stream_cursor_value_input._(this._$data);

  factory Input$cs_message_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = data['cs_agent_user_id'];
      result$data['cs_agent_user_id'] =
          l$cs_agent_user_id == null ? null : uuidFromJson(l$cs_agent_user_id);
    }
    if (data.containsKey('cs_message_content')) {
      final l$cs_message_content = data['cs_message_content'];
      result$data['cs_message_content'] = (l$cs_message_content as String?);
    }
    if (data.containsKey('cs_message_date')) {
      final l$cs_message_date = data['cs_message_date'];
      result$data['cs_message_date'] = l$cs_message_date == null
          ? null
          : DateTime.parse((l$cs_message_date as String));
    }
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = (l$cs_message_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$cs_message_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  UUID? get cs_agent_user_id => (_$data['cs_agent_user_id'] as UUID?);
  String? get cs_message_content => (_$data['cs_message_content'] as String?);
  DateTime? get cs_message_date => (_$data['cs_message_date'] as DateTime?);
  int? get cs_message_id => (_$data['cs_message_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('cs_agent_user_id')) {
      final l$cs_agent_user_id = cs_agent_user_id;
      result$data['cs_agent_user_id'] =
          l$cs_agent_user_id == null ? null : uuidToJson(l$cs_agent_user_id);
    }
    if (_$data.containsKey('cs_message_content')) {
      final l$cs_message_content = cs_message_content;
      result$data['cs_message_content'] = l$cs_message_content;
    }
    if (_$data.containsKey('cs_message_date')) {
      final l$cs_message_date = cs_message_date;
      result$data['cs_message_date'] = l$cs_message_date?.toIso8601String();
    }
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_stream_cursor_value_input<
          Input$cs_message_stream_cursor_value_input>
      get copyWith => CopyWith$Input$cs_message_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$cs_agent_user_id = cs_agent_user_id;
    final lOther$cs_agent_user_id = other.cs_agent_user_id;
    if (_$data.containsKey('cs_agent_user_id') !=
        other._$data.containsKey('cs_agent_user_id')) {
      return false;
    }
    if (l$cs_agent_user_id != lOther$cs_agent_user_id) {
      return false;
    }
    final l$cs_message_content = cs_message_content;
    final lOther$cs_message_content = other.cs_message_content;
    if (_$data.containsKey('cs_message_content') !=
        other._$data.containsKey('cs_message_content')) {
      return false;
    }
    if (l$cs_message_content != lOther$cs_message_content) {
      return false;
    }
    final l$cs_message_date = cs_message_date;
    final lOther$cs_message_date = other.cs_message_date;
    if (_$data.containsKey('cs_message_date') !=
        other._$data.containsKey('cs_message_date')) {
      return false;
    }
    if (l$cs_message_date != lOther$cs_message_date) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$cs_agent_user_id = cs_agent_user_id;
    final l$cs_message_content = cs_message_content;
    final l$cs_message_date = cs_message_date;
    final l$cs_message_id = cs_message_id;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('cs_agent_user_id') ? l$cs_agent_user_id : const {},
      _$data.containsKey('cs_message_content')
          ? l$cs_message_content
          : const {},
      _$data.containsKey('cs_message_date') ? l$cs_message_date : const {},
      _$data.containsKey('cs_message_id') ? l$cs_message_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$cs_message_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$cs_message_stream_cursor_value_input(
    Input$cs_message_stream_cursor_value_input instance,
    TRes Function(Input$cs_message_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$cs_message_stream_cursor_value_input;

  factory CopyWith$Input$cs_message_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    int? cs_message_id,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$cs_message_stream_cursor_value_input<TRes>
    implements CopyWith$Input$cs_message_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$cs_message_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$cs_message_stream_cursor_value_input _instance;

  final TRes Function(Input$cs_message_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? cs_agent_user_id = _undefined,
    Object? cs_message_content = _undefined,
    Object? cs_message_date = _undefined,
    Object? cs_message_id = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$cs_message_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (cs_agent_user_id != _undefined)
          'cs_agent_user_id': (cs_agent_user_id as UUID?),
        if (cs_message_content != _undefined)
          'cs_message_content': (cs_message_content as String?),
        if (cs_message_date != _undefined)
          'cs_message_date': (cs_message_date as DateTime?),
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_stream_cursor_value_input<TRes>
    implements CopyWith$Input$cs_message_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$cs_message_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    UUID? cs_agent_user_id,
    String? cs_message_content,
    DateTime? cs_message_date,
    int? cs_message_id,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$cs_message_sum_order_by {
  factory Input$cs_message_sum_order_by({Enum$order_by? cs_message_id}) =>
      Input$cs_message_sum_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_sum_order_by._(this._$data);

  factory Input$cs_message_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_sum_order_by<Input$cs_message_sum_order_by>
      get copyWith => CopyWith$Input$cs_message_sum_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_sum_order_by<TRes> {
  factory CopyWith$Input$cs_message_sum_order_by(
    Input$cs_message_sum_order_by instance,
    TRes Function(Input$cs_message_sum_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_sum_order_by;

  factory CopyWith$Input$cs_message_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_sum_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_sum_order_by<TRes>
    implements CopyWith$Input$cs_message_sum_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_sum_order_by _instance;

  final TRes Function(Input$cs_message_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_sum_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_sum_order_by<TRes>
    implements CopyWith$Input$cs_message_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_sum_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$cs_message_updates {
  factory Input$cs_message_updates({
    Input$cs_message_set_input? $_set,
    required Input$cs_message_bool_exp where,
  }) =>
      Input$cs_message_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$cs_message_updates._(this._$data);

  factory Input$cs_message_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$cs_message_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$cs_message_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$cs_message_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$cs_message_set_input? get $_set =>
      (_$data['_set'] as Input$cs_message_set_input?);
  Input$cs_message_bool_exp get where =>
      (_$data['where'] as Input$cs_message_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$cs_message_updates<Input$cs_message_updates> get copyWith =>
      CopyWith$Input$cs_message_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$cs_message_updates<TRes> {
  factory CopyWith$Input$cs_message_updates(
    Input$cs_message_updates instance,
    TRes Function(Input$cs_message_updates) then,
  ) = _CopyWithImpl$Input$cs_message_updates;

  factory CopyWith$Input$cs_message_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_updates;

  TRes call({
    Input$cs_message_set_input? $_set,
    Input$cs_message_bool_exp? where,
  });
  CopyWith$Input$cs_message_set_input<TRes> get $_set;
  CopyWith$Input$cs_message_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$cs_message_updates<TRes>
    implements CopyWith$Input$cs_message_updates<TRes> {
  _CopyWithImpl$Input$cs_message_updates(
    this._instance,
    this._then,
  );

  final Input$cs_message_updates _instance;

  final TRes Function(Input$cs_message_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$cs_message_updates._({
        ..._instance._$data,
        if ($_set != _undefined) '_set': ($_set as Input$cs_message_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$cs_message_bool_exp),
      }));
  CopyWith$Input$cs_message_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$cs_message_set_input.stub(_then(_instance))
        : CopyWith$Input$cs_message_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$cs_message_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$cs_message_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$cs_message_updates<TRes>
    implements CopyWith$Input$cs_message_updates<TRes> {
  _CopyWithStubImpl$Input$cs_message_updates(this._res);

  TRes _res;

  call({
    Input$cs_message_set_input? $_set,
    Input$cs_message_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$cs_message_set_input<TRes> get $_set =>
      CopyWith$Input$cs_message_set_input.stub(_res);
  CopyWith$Input$cs_message_bool_exp<TRes> get where =>
      CopyWith$Input$cs_message_bool_exp.stub(_res);
}

class Input$cs_message_var_pop_order_by {
  factory Input$cs_message_var_pop_order_by({Enum$order_by? cs_message_id}) =>
      Input$cs_message_var_pop_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_var_pop_order_by._(this._$data);

  factory Input$cs_message_var_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_var_pop_order_by<Input$cs_message_var_pop_order_by>
      get copyWith => CopyWith$Input$cs_message_var_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_var_pop_order_by<TRes> {
  factory CopyWith$Input$cs_message_var_pop_order_by(
    Input$cs_message_var_pop_order_by instance,
    TRes Function(Input$cs_message_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_var_pop_order_by;

  factory CopyWith$Input$cs_message_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_var_pop_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_var_pop_order_by<TRes>
    implements CopyWith$Input$cs_message_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_var_pop_order_by _instance;

  final TRes Function(Input$cs_message_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_var_pop_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_var_pop_order_by<TRes>
    implements CopyWith$Input$cs_message_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_var_pop_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$cs_message_var_samp_order_by {
  factory Input$cs_message_var_samp_order_by({Enum$order_by? cs_message_id}) =>
      Input$cs_message_var_samp_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_var_samp_order_by._(this._$data);

  factory Input$cs_message_var_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_var_samp_order_by<
          Input$cs_message_var_samp_order_by>
      get copyWith => CopyWith$Input$cs_message_var_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_var_samp_order_by<TRes> {
  factory CopyWith$Input$cs_message_var_samp_order_by(
    Input$cs_message_var_samp_order_by instance,
    TRes Function(Input$cs_message_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_var_samp_order_by;

  factory CopyWith$Input$cs_message_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_var_samp_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_var_samp_order_by<TRes>
    implements CopyWith$Input$cs_message_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_var_samp_order_by _instance;

  final TRes Function(Input$cs_message_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_var_samp_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_var_samp_order_by<TRes>
    implements CopyWith$Input$cs_message_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_var_samp_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$cs_message_variance_order_by {
  factory Input$cs_message_variance_order_by({Enum$order_by? cs_message_id}) =>
      Input$cs_message_variance_order_by._({
        if (cs_message_id != null) r'cs_message_id': cs_message_id,
      });

  Input$cs_message_variance_order_by._(this._$data);

  factory Input$cs_message_variance_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('cs_message_id')) {
      final l$cs_message_id = data['cs_message_id'];
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : fromJson$Enum$order_by((l$cs_message_id as String));
    }
    return Input$cs_message_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get cs_message_id =>
      (_$data['cs_message_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('cs_message_id')) {
      final l$cs_message_id = cs_message_id;
      result$data['cs_message_id'] = l$cs_message_id == null
          ? null
          : toJson$Enum$order_by(l$cs_message_id);
    }
    return result$data;
  }

  CopyWith$Input$cs_message_variance_order_by<
          Input$cs_message_variance_order_by>
      get copyWith => CopyWith$Input$cs_message_variance_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$cs_message_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$cs_message_id = cs_message_id;
    final lOther$cs_message_id = other.cs_message_id;
    if (_$data.containsKey('cs_message_id') !=
        other._$data.containsKey('cs_message_id')) {
      return false;
    }
    if (l$cs_message_id != lOther$cs_message_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$cs_message_id = cs_message_id;
    return Object.hashAll(
        [_$data.containsKey('cs_message_id') ? l$cs_message_id : const {}]);
  }
}

abstract class CopyWith$Input$cs_message_variance_order_by<TRes> {
  factory CopyWith$Input$cs_message_variance_order_by(
    Input$cs_message_variance_order_by instance,
    TRes Function(Input$cs_message_variance_order_by) then,
  ) = _CopyWithImpl$Input$cs_message_variance_order_by;

  factory CopyWith$Input$cs_message_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$cs_message_variance_order_by;

  TRes call({Enum$order_by? cs_message_id});
}

class _CopyWithImpl$Input$cs_message_variance_order_by<TRes>
    implements CopyWith$Input$cs_message_variance_order_by<TRes> {
  _CopyWithImpl$Input$cs_message_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$cs_message_variance_order_by _instance;

  final TRes Function(Input$cs_message_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? cs_message_id = _undefined}) =>
      _then(Input$cs_message_variance_order_by._({
        ..._instance._$data,
        if (cs_message_id != _undefined)
          'cs_message_id': (cs_message_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$cs_message_variance_order_by<TRes>
    implements CopyWith$Input$cs_message_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$cs_message_variance_order_by(this._res);

  TRes _res;

  call({Enum$order_by? cs_message_id}) => _res;
}

class Input$date_comparison_exp {
  factory Input$date_comparison_exp({
    DateTime? $_eq,
    DateTime? $_gt,
    DateTime? $_gte,
    List<DateTime>? $_in,
    bool? $_is_null,
    DateTime? $_lt,
    DateTime? $_lte,
    DateTime? $_neq,
    List<DateTime>? $_nin,
  }) =>
      Input$date_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$date_comparison_exp._(this._$data);

  factory Input$date_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] =
          l$$_eq == null ? null : DateTime.parse((l$$_eq as String));
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] =
          l$$_gt == null ? null : DateTime.parse((l$$_gt as String));
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] =
          l$$_gte == null ? null : DateTime.parse((l$$_gte as String));
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] = (l$$_in as List<dynamic>?)
          ?.map((e) => DateTime.parse((e as String)))
          .toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] =
          l$$_lt == null ? null : DateTime.parse((l$$_lt as String));
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] =
          l$$_lte == null ? null : DateTime.parse((l$$_lte as String));
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] =
          l$$_neq == null ? null : DateTime.parse((l$$_neq as String));
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] = (l$$_nin as List<dynamic>?)
          ?.map((e) => DateTime.parse((e as String)))
          .toList();
    }
    return Input$date_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get $_eq => (_$data['_eq'] as DateTime?);
  DateTime? get $_gt => (_$data['_gt'] as DateTime?);
  DateTime? get $_gte => (_$data['_gte'] as DateTime?);
  List<DateTime>? get $_in => (_$data['_in'] as List<DateTime>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  DateTime? get $_lt => (_$data['_lt'] as DateTime?);
  DateTime? get $_lte => (_$data['_lte'] as DateTime?);
  DateTime? get $_neq => (_$data['_neq'] as DateTime?);
  List<DateTime>? get $_nin => (_$data['_nin'] as List<DateTime>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq?.toIso8601String();
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt?.toIso8601String();
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte?.toIso8601String();
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e.toIso8601String()).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt?.toIso8601String();
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte?.toIso8601String();
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq?.toIso8601String();
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e.toIso8601String()).toList();
    }
    return result$data;
  }

  CopyWith$Input$date_comparison_exp<Input$date_comparison_exp> get copyWith =>
      CopyWith$Input$date_comparison_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$date_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$date_comparison_exp<TRes> {
  factory CopyWith$Input$date_comparison_exp(
    Input$date_comparison_exp instance,
    TRes Function(Input$date_comparison_exp) then,
  ) = _CopyWithImpl$Input$date_comparison_exp;

  factory CopyWith$Input$date_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$date_comparison_exp;

  TRes call({
    DateTime? $_eq,
    DateTime? $_gt,
    DateTime? $_gte,
    List<DateTime>? $_in,
    bool? $_is_null,
    DateTime? $_lt,
    DateTime? $_lte,
    DateTime? $_neq,
    List<DateTime>? $_nin,
  });
}

class _CopyWithImpl$Input$date_comparison_exp<TRes>
    implements CopyWith$Input$date_comparison_exp<TRes> {
  _CopyWithImpl$Input$date_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$date_comparison_exp _instance;

  final TRes Function(Input$date_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$date_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as DateTime?),
        if ($_gt != _undefined) '_gt': ($_gt as DateTime?),
        if ($_gte != _undefined) '_gte': ($_gte as DateTime?),
        if ($_in != _undefined) '_in': ($_in as List<DateTime>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as DateTime?),
        if ($_lte != _undefined) '_lte': ($_lte as DateTime?),
        if ($_neq != _undefined) '_neq': ($_neq as DateTime?),
        if ($_nin != _undefined) '_nin': ($_nin as List<DateTime>?),
      }));
}

class _CopyWithStubImpl$Input$date_comparison_exp<TRes>
    implements CopyWith$Input$date_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$date_comparison_exp(this._res);

  TRes _res;

  call({
    DateTime? $_eq,
    DateTime? $_gt,
    DateTime? $_gte,
    List<DateTime>? $_in,
    bool? $_is_null,
    DateTime? $_lt,
    DateTime? $_lte,
    DateTime? $_neq,
    List<DateTime>? $_nin,
  }) =>
      _res;
}

class Input$files_aggregate_bool_exp {
  factory Input$files_aggregate_bool_exp({
    Input$files_aggregate_bool_exp_bool_and? bool_and,
    Input$files_aggregate_bool_exp_bool_or? bool_or,
    Input$files_aggregate_bool_exp_count? count,
  }) =>
      Input$files_aggregate_bool_exp._({
        if (bool_and != null) r'bool_and': bool_and,
        if (bool_or != null) r'bool_or': bool_or,
        if (count != null) r'count': count,
      });

  Input$files_aggregate_bool_exp._(this._$data);

  factory Input$files_aggregate_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bool_and')) {
      final l$bool_and = data['bool_and'];
      result$data['bool_and'] = l$bool_and == null
          ? null
          : Input$files_aggregate_bool_exp_bool_and.fromJson(
              (l$bool_and as Map<String, dynamic>));
    }
    if (data.containsKey('bool_or')) {
      final l$bool_or = data['bool_or'];
      result$data['bool_or'] = l$bool_or == null
          ? null
          : Input$files_aggregate_bool_exp_bool_or.fromJson(
              (l$bool_or as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$files_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$files_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$files_aggregate_bool_exp_bool_and? get bool_and =>
      (_$data['bool_and'] as Input$files_aggregate_bool_exp_bool_and?);
  Input$files_aggregate_bool_exp_bool_or? get bool_or =>
      (_$data['bool_or'] as Input$files_aggregate_bool_exp_bool_or?);
  Input$files_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$files_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bool_and')) {
      final l$bool_and = bool_and;
      result$data['bool_and'] = l$bool_and?.toJson();
    }
    if (_$data.containsKey('bool_or')) {
      final l$bool_or = bool_or;
      result$data['bool_or'] = l$bool_or?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$files_aggregate_bool_exp<Input$files_aggregate_bool_exp>
      get copyWith => CopyWith$Input$files_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bool_and = bool_and;
    final lOther$bool_and = other.bool_and;
    if (_$data.containsKey('bool_and') !=
        other._$data.containsKey('bool_and')) {
      return false;
    }
    if (l$bool_and != lOther$bool_and) {
      return false;
    }
    final l$bool_or = bool_or;
    final lOther$bool_or = other.bool_or;
    if (_$data.containsKey('bool_or') != other._$data.containsKey('bool_or')) {
      return false;
    }
    if (l$bool_or != lOther$bool_or) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bool_and = bool_and;
    final l$bool_or = bool_or;
    final l$count = count;
    return Object.hashAll([
      _$data.containsKey('bool_and') ? l$bool_and : const {},
      _$data.containsKey('bool_or') ? l$bool_or : const {},
      _$data.containsKey('count') ? l$count : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$files_aggregate_bool_exp(
    Input$files_aggregate_bool_exp instance,
    TRes Function(Input$files_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$files_aggregate_bool_exp;

  factory CopyWith$Input$files_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$files_aggregate_bool_exp;

  TRes call({
    Input$files_aggregate_bool_exp_bool_and? bool_and,
    Input$files_aggregate_bool_exp_bool_or? bool_or,
    Input$files_aggregate_bool_exp_count? count,
  });
  CopyWith$Input$files_aggregate_bool_exp_bool_and<TRes> get bool_and;
  CopyWith$Input$files_aggregate_bool_exp_bool_or<TRes> get bool_or;
  CopyWith$Input$files_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$files_aggregate_bool_exp<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$files_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$files_aggregate_bool_exp _instance;

  final TRes Function(Input$files_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bool_and = _undefined,
    Object? bool_or = _undefined,
    Object? count = _undefined,
  }) =>
      _then(Input$files_aggregate_bool_exp._({
        ..._instance._$data,
        if (bool_and != _undefined)
          'bool_and': (bool_and as Input$files_aggregate_bool_exp_bool_and?),
        if (bool_or != _undefined)
          'bool_or': (bool_or as Input$files_aggregate_bool_exp_bool_or?),
        if (count != _undefined)
          'count': (count as Input$files_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$files_aggregate_bool_exp_bool_and<TRes> get bool_and {
    final local$bool_and = _instance.bool_and;
    return local$bool_and == null
        ? CopyWith$Input$files_aggregate_bool_exp_bool_and.stub(
            _then(_instance))
        : CopyWith$Input$files_aggregate_bool_exp_bool_and(
            local$bool_and, (e) => call(bool_and: e));
  }

  CopyWith$Input$files_aggregate_bool_exp_bool_or<TRes> get bool_or {
    final local$bool_or = _instance.bool_or;
    return local$bool_or == null
        ? CopyWith$Input$files_aggregate_bool_exp_bool_or.stub(_then(_instance))
        : CopyWith$Input$files_aggregate_bool_exp_bool_or(
            local$bool_or, (e) => call(bool_or: e));
  }

  CopyWith$Input$files_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$files_aggregate_bool_exp_count.stub(_then(_instance))
        : CopyWith$Input$files_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$files_aggregate_bool_exp<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$files_aggregate_bool_exp(this._res);

  TRes _res;

  call({
    Input$files_aggregate_bool_exp_bool_and? bool_and,
    Input$files_aggregate_bool_exp_bool_or? bool_or,
    Input$files_aggregate_bool_exp_count? count,
  }) =>
      _res;
  CopyWith$Input$files_aggregate_bool_exp_bool_and<TRes> get bool_and =>
      CopyWith$Input$files_aggregate_bool_exp_bool_and.stub(_res);
  CopyWith$Input$files_aggregate_bool_exp_bool_or<TRes> get bool_or =>
      CopyWith$Input$files_aggregate_bool_exp_bool_or.stub(_res);
  CopyWith$Input$files_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$files_aggregate_bool_exp_count.stub(_res);
}

class Input$files_aggregate_bool_exp_bool_and {
  factory Input$files_aggregate_bool_exp_bool_and({
    required Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
        arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$files_aggregate_bool_exp_bool_and._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$files_aggregate_bool_exp_bool_and._(this._$data);

  factory Input$files_aggregate_bool_exp_bool_and.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$files_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$files_aggregate_bool_exp_bool_and._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$files_bool_exp? get filter =>
      (_$data['filter'] as Input$files_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$files_aggregate_bool_exp_bool_and<
          Input$files_aggregate_bool_exp_bool_and>
      get copyWith => CopyWith$Input$files_aggregate_bool_exp_bool_and(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_aggregate_bool_exp_bool_and) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$files_aggregate_bool_exp_bool_and<TRes> {
  factory CopyWith$Input$files_aggregate_bool_exp_bool_and(
    Input$files_aggregate_bool_exp_bool_and instance,
    TRes Function(Input$files_aggregate_bool_exp_bool_and) then,
  ) = _CopyWithImpl$Input$files_aggregate_bool_exp_bool_and;

  factory CopyWith$Input$files_aggregate_bool_exp_bool_and.stub(TRes res) =
      _CopyWithStubImpl$Input$files_aggregate_bool_exp_bool_and;

  TRes call({
    Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$files_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$files_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithImpl$Input$files_aggregate_bool_exp_bool_and(
    this._instance,
    this._then,
  );

  final Input$files_aggregate_bool_exp_bool_and _instance;

  final TRes Function(Input$files_aggregate_bool_exp_bool_and) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$files_aggregate_bool_exp_bool_and._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$files_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$files_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$files_bool_exp.stub(_then(_instance))
        : CopyWith$Input$files_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$files_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithStubImpl$Input$files_aggregate_bool_exp_bool_and(this._res);

  TRes _res;

  call({
    Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$files_bool_exp<TRes> get filter =>
      CopyWith$Input$files_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$files_aggregate_bool_exp_bool_or {
  factory Input$files_aggregate_bool_exp_bool_or({
    required Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
        arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$files_aggregate_bool_exp_bool_or._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$files_aggregate_bool_exp_bool_or._(this._$data);

  factory Input$files_aggregate_bool_exp_bool_or.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$files_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$files_aggregate_bool_exp_bool_or._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$files_bool_exp? get filter =>
      (_$data['filter'] as Input$files_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$files_aggregate_bool_exp_bool_or<
          Input$files_aggregate_bool_exp_bool_or>
      get copyWith => CopyWith$Input$files_aggregate_bool_exp_bool_or(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_aggregate_bool_exp_bool_or) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$files_aggregate_bool_exp_bool_or<TRes> {
  factory CopyWith$Input$files_aggregate_bool_exp_bool_or(
    Input$files_aggregate_bool_exp_bool_or instance,
    TRes Function(Input$files_aggregate_bool_exp_bool_or) then,
  ) = _CopyWithImpl$Input$files_aggregate_bool_exp_bool_or;

  factory CopyWith$Input$files_aggregate_bool_exp_bool_or.stub(TRes res) =
      _CopyWithStubImpl$Input$files_aggregate_bool_exp_bool_or;

  TRes call({
    Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$files_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$files_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithImpl$Input$files_aggregate_bool_exp_bool_or(
    this._instance,
    this._then,
  );

  final Input$files_aggregate_bool_exp_bool_or _instance;

  final TRes Function(Input$files_aggregate_bool_exp_bool_or) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$files_aggregate_bool_exp_bool_or._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$files_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$files_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$files_bool_exp.stub(_then(_instance))
        : CopyWith$Input$files_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$files_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithStubImpl$Input$files_aggregate_bool_exp_bool_or(this._res);

  TRes _res;

  call({
    Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$files_bool_exp<TRes> get filter =>
      CopyWith$Input$files_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$files_aggregate_bool_exp_count {
  factory Input$files_aggregate_bool_exp_count({
    List<Enum$files_select_column>? arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$files_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$files_aggregate_bool_exp_count._(this._$data);

  factory Input$files_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$files_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$files_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$files_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$files_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$files_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$files_bool_exp? get filter =>
      (_$data['filter'] as Input$files_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] =
          l$arguments?.map((e) => toJson$Enum$files_select_column(e)).toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$files_aggregate_bool_exp_count<
          Input$files_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$files_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$files_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$files_aggregate_bool_exp_count(
    Input$files_aggregate_bool_exp_count instance,
    TRes Function(Input$files_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$files_aggregate_bool_exp_count;

  factory CopyWith$Input$files_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$files_aggregate_bool_exp_count;

  TRes call({
    List<Enum$files_select_column>? arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$files_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$files_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$files_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$files_aggregate_bool_exp_count _instance;

  final TRes Function(Input$files_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$files_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$files_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$files_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$files_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$files_bool_exp.stub(_then(_instance))
        : CopyWith$Input$files_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$files_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$files_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$files_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$files_select_column>? arguments,
    bool? distinct,
    Input$files_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$files_bool_exp<TRes> get filter =>
      CopyWith$Input$files_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$files_aggregate_order_by {
  factory Input$files_aggregate_order_by({
    Input$files_avg_order_by? avg,
    Enum$order_by? count,
    Input$files_max_order_by? max,
    Input$files_min_order_by? min,
    Input$files_stddev_order_by? stddev,
    Input$files_stddev_pop_order_by? stddev_pop,
    Input$files_stddev_samp_order_by? stddev_samp,
    Input$files_sum_order_by? sum,
    Input$files_var_pop_order_by? var_pop,
    Input$files_var_samp_order_by? var_samp,
    Input$files_variance_order_by? variance,
  }) =>
      Input$files_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$files_aggregate_order_by._(this._$data);

  factory Input$files_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$files_avg_order_by.fromJson((l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$files_max_order_by.fromJson((l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$files_min_order_by.fromJson((l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$files_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$files_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$files_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$files_sum_order_by.fromJson((l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$files_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$files_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$files_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$files_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$files_avg_order_by? get avg =>
      (_$data['avg'] as Input$files_avg_order_by?);
  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$files_max_order_by? get max =>
      (_$data['max'] as Input$files_max_order_by?);
  Input$files_min_order_by? get min =>
      (_$data['min'] as Input$files_min_order_by?);
  Input$files_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$files_stddev_order_by?);
  Input$files_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$files_stddev_pop_order_by?);
  Input$files_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$files_stddev_samp_order_by?);
  Input$files_sum_order_by? get sum =>
      (_$data['sum'] as Input$files_sum_order_by?);
  Input$files_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$files_var_pop_order_by?);
  Input$files_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$files_var_samp_order_by?);
  Input$files_variance_order_by? get variance =>
      (_$data['variance'] as Input$files_variance_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$files_aggregate_order_by<Input$files_aggregate_order_by>
      get copyWith => CopyWith$Input$files_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_aggregate_order_by<TRes> {
  factory CopyWith$Input$files_aggregate_order_by(
    Input$files_aggregate_order_by instance,
    TRes Function(Input$files_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$files_aggregate_order_by;

  factory CopyWith$Input$files_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_aggregate_order_by;

  TRes call({
    Input$files_avg_order_by? avg,
    Enum$order_by? count,
    Input$files_max_order_by? max,
    Input$files_min_order_by? min,
    Input$files_stddev_order_by? stddev,
    Input$files_stddev_pop_order_by? stddev_pop,
    Input$files_stddev_samp_order_by? stddev_samp,
    Input$files_sum_order_by? sum,
    Input$files_var_pop_order_by? var_pop,
    Input$files_var_samp_order_by? var_samp,
    Input$files_variance_order_by? variance,
  });
  CopyWith$Input$files_avg_order_by<TRes> get avg;
  CopyWith$Input$files_max_order_by<TRes> get max;
  CopyWith$Input$files_min_order_by<TRes> get min;
  CopyWith$Input$files_stddev_order_by<TRes> get stddev;
  CopyWith$Input$files_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$files_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$files_sum_order_by<TRes> get sum;
  CopyWith$Input$files_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$files_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$files_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$files_aggregate_order_by<TRes>
    implements CopyWith$Input$files_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$files_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$files_aggregate_order_by _instance;

  final TRes Function(Input$files_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$files_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$files_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$files_max_order_by?),
        if (min != _undefined) 'min': (min as Input$files_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$files_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$files_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp': (stddev_samp as Input$files_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$files_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$files_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$files_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$files_variance_order_by?),
      }));
  CopyWith$Input$files_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$files_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$files_avg_order_by(local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$files_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$files_max_order_by.stub(_then(_instance))
        : CopyWith$Input$files_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$files_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$files_min_order_by.stub(_then(_instance))
        : CopyWith$Input$files_min_order_by(local$min, (e) => call(min: e));
  }

  CopyWith$Input$files_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$files_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$files_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$files_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$files_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$files_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$files_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$files_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$files_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$files_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$files_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$files_sum_order_by(local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$files_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$files_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$files_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$files_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$files_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$files_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$files_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$files_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$files_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$files_aggregate_order_by<TRes>
    implements CopyWith$Input$files_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$files_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$files_avg_order_by? avg,
    Enum$order_by? count,
    Input$files_max_order_by? max,
    Input$files_min_order_by? min,
    Input$files_stddev_order_by? stddev,
    Input$files_stddev_pop_order_by? stddev_pop,
    Input$files_stddev_samp_order_by? stddev_samp,
    Input$files_sum_order_by? sum,
    Input$files_var_pop_order_by? var_pop,
    Input$files_var_samp_order_by? var_samp,
    Input$files_variance_order_by? variance,
  }) =>
      _res;
  CopyWith$Input$files_avg_order_by<TRes> get avg =>
      CopyWith$Input$files_avg_order_by.stub(_res);
  CopyWith$Input$files_max_order_by<TRes> get max =>
      CopyWith$Input$files_max_order_by.stub(_res);
  CopyWith$Input$files_min_order_by<TRes> get min =>
      CopyWith$Input$files_min_order_by.stub(_res);
  CopyWith$Input$files_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$files_stddev_order_by.stub(_res);
  CopyWith$Input$files_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$files_stddev_pop_order_by.stub(_res);
  CopyWith$Input$files_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$files_stddev_samp_order_by.stub(_res);
  CopyWith$Input$files_sum_order_by<TRes> get sum =>
      CopyWith$Input$files_sum_order_by.stub(_res);
  CopyWith$Input$files_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$files_var_pop_order_by.stub(_res);
  CopyWith$Input$files_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$files_var_samp_order_by.stub(_res);
  CopyWith$Input$files_variance_order_by<TRes> get variance =>
      CopyWith$Input$files_variance_order_by.stub(_res);
}

class Input$files_arr_rel_insert_input {
  factory Input$files_arr_rel_insert_input({
    required List<Input$files_insert_input> data,
    Input$files_on_conflict? on_conflict,
  }) =>
      Input$files_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$files_arr_rel_insert_input._(this._$data);

  factory Input$files_arr_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$files_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$files_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$files_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$files_insert_input> get data =>
      (_$data['data'] as List<Input$files_insert_input>);
  Input$files_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$files_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$files_arr_rel_insert_input<Input$files_arr_rel_insert_input>
      get copyWith => CopyWith$Input$files_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$files_arr_rel_insert_input(
    Input$files_arr_rel_insert_input instance,
    TRes Function(Input$files_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$files_arr_rel_insert_input;

  factory CopyWith$Input$files_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$files_arr_rel_insert_input;

  TRes call({
    List<Input$files_insert_input>? data,
    Input$files_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$files_insert_input> Function(
              Iterable<
                  CopyWith$Input$files_insert_input<Input$files_insert_input>>)
          _fn);
  CopyWith$Input$files_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$files_arr_rel_insert_input<TRes>
    implements CopyWith$Input$files_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$files_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$files_arr_rel_insert_input _instance;

  final TRes Function(Input$files_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$files_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$files_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$files_on_conflict?),
      }));
  TRes data(
          Iterable<Input$files_insert_input> Function(
                  Iterable<
                      CopyWith$Input$files_insert_input<
                          Input$files_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data.map((e) => CopyWith$Input$files_insert_input(
                e,
                (i) => i,
              ))).toList());
  CopyWith$Input$files_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$files_on_conflict.stub(_then(_instance))
        : CopyWith$Input$files_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$files_arr_rel_insert_input<TRes>
    implements CopyWith$Input$files_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$files_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$files_insert_input>? data,
    Input$files_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$files_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$files_on_conflict.stub(_res);
}

class Input$files_avg_order_by {
  factory Input$files_avg_order_by({Enum$order_by? size}) =>
      Input$files_avg_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_avg_order_by._(this._$data);

  factory Input$files_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_avg_order_by<Input$files_avg_order_by> get copyWith =>
      CopyWith$Input$files_avg_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_avg_order_by<TRes> {
  factory CopyWith$Input$files_avg_order_by(
    Input$files_avg_order_by instance,
    TRes Function(Input$files_avg_order_by) then,
  ) = _CopyWithImpl$Input$files_avg_order_by;

  factory CopyWith$Input$files_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_avg_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_avg_order_by<TRes>
    implements CopyWith$Input$files_avg_order_by<TRes> {
  _CopyWithImpl$Input$files_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$files_avg_order_by _instance;

  final TRes Function(Input$files_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) => _then(Input$files_avg_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_avg_order_by<TRes>
    implements CopyWith$Input$files_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$files_avg_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$files_bool_exp {
  factory Input$files_bool_exp({
    List<Input$files_bool_exp>? $_and,
    Input$files_bool_exp? $_not,
    List<Input$files_bool_exp>? $_or,
    Input$buckets_bool_exp? bucket,
    Input$String_comparison_exp? bucketId,
    Input$timestamptz_comparison_exp? createdAt,
    Input$String_comparison_exp? etag,
    Input$uuid_comparison_exp? id,
    Input$Boolean_comparison_exp? isUploaded,
    Input$String_comparison_exp? mimeType,
    Input$String_comparison_exp? name,
    Input$Int_comparison_exp? size,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$uuid_comparison_exp? uploadedByUserId,
  }) =>
      Input$files_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (bucket != null) r'bucket': bucket,
        if (bucketId != null) r'bucketId': bucketId,
        if (createdAt != null) r'createdAt': createdAt,
        if (etag != null) r'etag': etag,
        if (id != null) r'id': id,
        if (isUploaded != null) r'isUploaded': isUploaded,
        if (mimeType != null) r'mimeType': mimeType,
        if (name != null) r'name': name,
        if (size != null) r'size': size,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (uploadedByUserId != null) r'uploadedByUserId': uploadedByUserId,
      });

  Input$files_bool_exp._(this._$data);

  factory Input$files_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$files_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$files_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$files_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('bucket')) {
      final l$bucket = data['bucket'];
      result$data['bucket'] = l$bucket == null
          ? null
          : Input$buckets_bool_exp.fromJson((l$bucket as Map<String, dynamic>));
    }
    if (data.containsKey('bucketId')) {
      final l$bucketId = data['bucketId'];
      result$data['bucketId'] = l$bucketId == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$bucketId as Map<String, dynamic>));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$createdAt as Map<String, dynamic>));
    }
    if (data.containsKey('etag')) {
      final l$etag = data['etag'];
      result$data['etag'] = l$etag == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$etag as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$uuid_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('isUploaded')) {
      final l$isUploaded = data['isUploaded'];
      result$data['isUploaded'] = l$isUploaded == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$isUploaded as Map<String, dynamic>));
    }
    if (data.containsKey('mimeType')) {
      final l$mimeType = data['mimeType'];
      result$data['mimeType'] = l$mimeType == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$mimeType as Map<String, dynamic>));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = l$name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$name as Map<String, dynamic>));
    }
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] = l$size == null
          ? null
          : Input$Int_comparison_exp.fromJson((l$size as Map<String, dynamic>));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updatedAt as Map<String, dynamic>));
    }
    if (data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = data['uploadedByUserId'];
      result$data['uploadedByUserId'] = l$uploadedByUserId == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$uploadedByUserId as Map<String, dynamic>));
    }
    return Input$files_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$files_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$files_bool_exp>?);
  Input$files_bool_exp? get $_not => (_$data['_not'] as Input$files_bool_exp?);
  List<Input$files_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$files_bool_exp>?);
  Input$buckets_bool_exp? get bucket =>
      (_$data['bucket'] as Input$buckets_bool_exp?);
  Input$String_comparison_exp? get bucketId =>
      (_$data['bucketId'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get createdAt =>
      (_$data['createdAt'] as Input$timestamptz_comparison_exp?);
  Input$String_comparison_exp? get etag =>
      (_$data['etag'] as Input$String_comparison_exp?);
  Input$uuid_comparison_exp? get id =>
      (_$data['id'] as Input$uuid_comparison_exp?);
  Input$Boolean_comparison_exp? get isUploaded =>
      (_$data['isUploaded'] as Input$Boolean_comparison_exp?);
  Input$String_comparison_exp? get mimeType =>
      (_$data['mimeType'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get name =>
      (_$data['name'] as Input$String_comparison_exp?);
  Input$Int_comparison_exp? get size =>
      (_$data['size'] as Input$Int_comparison_exp?);
  Input$timestamptz_comparison_exp? get updatedAt =>
      (_$data['updatedAt'] as Input$timestamptz_comparison_exp?);
  Input$uuid_comparison_exp? get uploadedByUserId =>
      (_$data['uploadedByUserId'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('bucket')) {
      final l$bucket = bucket;
      result$data['bucket'] = l$bucket?.toJson();
    }
    if (_$data.containsKey('bucketId')) {
      final l$bucketId = bucketId;
      result$data['bucketId'] = l$bucketId?.toJson();
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toJson();
    }
    if (_$data.containsKey('etag')) {
      final l$etag = etag;
      result$data['etag'] = l$etag?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('isUploaded')) {
      final l$isUploaded = isUploaded;
      result$data['isUploaded'] = l$isUploaded?.toJson();
    }
    if (_$data.containsKey('mimeType')) {
      final l$mimeType = mimeType;
      result$data['mimeType'] = l$mimeType?.toJson();
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name?.toJson();
    }
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] = l$size?.toJson();
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toJson();
    }
    if (_$data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = uploadedByUserId;
      result$data['uploadedByUserId'] = l$uploadedByUserId?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$files_bool_exp<Input$files_bool_exp> get copyWith =>
      CopyWith$Input$files_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$bucket = bucket;
    final lOther$bucket = other.bucket;
    if (_$data.containsKey('bucket') != other._$data.containsKey('bucket')) {
      return false;
    }
    if (l$bucket != lOther$bucket) {
      return false;
    }
    final l$bucketId = bucketId;
    final lOther$bucketId = other.bucketId;
    if (_$data.containsKey('bucketId') !=
        other._$data.containsKey('bucketId')) {
      return false;
    }
    if (l$bucketId != lOther$bucketId) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$etag = etag;
    final lOther$etag = other.etag;
    if (_$data.containsKey('etag') != other._$data.containsKey('etag')) {
      return false;
    }
    if (l$etag != lOther$etag) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$isUploaded = isUploaded;
    final lOther$isUploaded = other.isUploaded;
    if (_$data.containsKey('isUploaded') !=
        other._$data.containsKey('isUploaded')) {
      return false;
    }
    if (l$isUploaded != lOther$isUploaded) {
      return false;
    }
    final l$mimeType = mimeType;
    final lOther$mimeType = other.mimeType;
    if (_$data.containsKey('mimeType') !=
        other._$data.containsKey('mimeType')) {
      return false;
    }
    if (l$mimeType != lOther$mimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$uploadedByUserId = uploadedByUserId;
    final lOther$uploadedByUserId = other.uploadedByUserId;
    if (_$data.containsKey('uploadedByUserId') !=
        other._$data.containsKey('uploadedByUserId')) {
      return false;
    }
    if (l$uploadedByUserId != lOther$uploadedByUserId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$bucket = bucket;
    final l$bucketId = bucketId;
    final l$createdAt = createdAt;
    final l$etag = etag;
    final l$id = id;
    final l$isUploaded = isUploaded;
    final l$mimeType = mimeType;
    final l$name = name;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$uploadedByUserId = uploadedByUserId;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('bucket') ? l$bucket : const {},
      _$data.containsKey('bucketId') ? l$bucketId : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('etag') ? l$etag : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('isUploaded') ? l$isUploaded : const {},
      _$data.containsKey('mimeType') ? l$mimeType : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('size') ? l$size : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('uploadedByUserId') ? l$uploadedByUserId : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_bool_exp<TRes> {
  factory CopyWith$Input$files_bool_exp(
    Input$files_bool_exp instance,
    TRes Function(Input$files_bool_exp) then,
  ) = _CopyWithImpl$Input$files_bool_exp;

  factory CopyWith$Input$files_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$files_bool_exp;

  TRes call({
    List<Input$files_bool_exp>? $_and,
    Input$files_bool_exp? $_not,
    List<Input$files_bool_exp>? $_or,
    Input$buckets_bool_exp? bucket,
    Input$String_comparison_exp? bucketId,
    Input$timestamptz_comparison_exp? createdAt,
    Input$String_comparison_exp? etag,
    Input$uuid_comparison_exp? id,
    Input$Boolean_comparison_exp? isUploaded,
    Input$String_comparison_exp? mimeType,
    Input$String_comparison_exp? name,
    Input$Int_comparison_exp? size,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$uuid_comparison_exp? uploadedByUserId,
  });
  TRes $_and(
      Iterable<Input$files_bool_exp>? Function(
              Iterable<CopyWith$Input$files_bool_exp<Input$files_bool_exp>>?)
          _fn);
  CopyWith$Input$files_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$files_bool_exp>? Function(
              Iterable<CopyWith$Input$files_bool_exp<Input$files_bool_exp>>?)
          _fn);
  CopyWith$Input$buckets_bool_exp<TRes> get bucket;
  CopyWith$Input$String_comparison_exp<TRes> get bucketId;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt;
  CopyWith$Input$String_comparison_exp<TRes> get etag;
  CopyWith$Input$uuid_comparison_exp<TRes> get id;
  CopyWith$Input$Boolean_comparison_exp<TRes> get isUploaded;
  CopyWith$Input$String_comparison_exp<TRes> get mimeType;
  CopyWith$Input$String_comparison_exp<TRes> get name;
  CopyWith$Input$Int_comparison_exp<TRes> get size;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt;
  CopyWith$Input$uuid_comparison_exp<TRes> get uploadedByUserId;
}

class _CopyWithImpl$Input$files_bool_exp<TRes>
    implements CopyWith$Input$files_bool_exp<TRes> {
  _CopyWithImpl$Input$files_bool_exp(
    this._instance,
    this._then,
  );

  final Input$files_bool_exp _instance;

  final TRes Function(Input$files_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? bucket = _undefined,
    Object? bucketId = _undefined,
    Object? createdAt = _undefined,
    Object? etag = _undefined,
    Object? id = _undefined,
    Object? isUploaded = _undefined,
    Object? mimeType = _undefined,
    Object? name = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? uploadedByUserId = _undefined,
  }) =>
      _then(Input$files_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined) '_and': ($_and as List<Input$files_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$files_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$files_bool_exp>?),
        if (bucket != _undefined) 'bucket': (bucket as Input$buckets_bool_exp?),
        if (bucketId != _undefined)
          'bucketId': (bucketId as Input$String_comparison_exp?),
        if (createdAt != _undefined)
          'createdAt': (createdAt as Input$timestamptz_comparison_exp?),
        if (etag != _undefined) 'etag': (etag as Input$String_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$uuid_comparison_exp?),
        if (isUploaded != _undefined)
          'isUploaded': (isUploaded as Input$Boolean_comparison_exp?),
        if (mimeType != _undefined)
          'mimeType': (mimeType as Input$String_comparison_exp?),
        if (name != _undefined) 'name': (name as Input$String_comparison_exp?),
        if (size != _undefined) 'size': (size as Input$Int_comparison_exp?),
        if (updatedAt != _undefined)
          'updatedAt': (updatedAt as Input$timestamptz_comparison_exp?),
        if (uploadedByUserId != _undefined)
          'uploadedByUserId': (uploadedByUserId as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$files_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$files_bool_exp<Input$files_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$files_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$files_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$files_bool_exp.stub(_then(_instance))
        : CopyWith$Input$files_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$files_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$files_bool_exp<Input$files_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$files_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$buckets_bool_exp<TRes> get bucket {
    final local$bucket = _instance.bucket;
    return local$bucket == null
        ? CopyWith$Input$buckets_bool_exp.stub(_then(_instance))
        : CopyWith$Input$buckets_bool_exp(local$bucket, (e) => call(bucket: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get bucketId {
    final local$bucketId = _instance.bucketId;
    return local$bucketId == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$bucketId, (e) => call(bucketId: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt {
    final local$createdAt = _instance.createdAt;
    return local$createdAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$createdAt, (e) => call(createdAt: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get etag {
    final local$etag = _instance.etag;
    return local$etag == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$etag, (e) => call(etag: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get isUploaded {
    final local$isUploaded = _instance.isUploaded;
    return local$isUploaded == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$isUploaded, (e) => call(isUploaded: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get mimeType {
    final local$mimeType = _instance.mimeType;
    return local$mimeType == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$mimeType, (e) => call(mimeType: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get name {
    final local$name = _instance.name;
    return local$name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$name, (e) => call(name: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$size, (e) => call(size: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt {
    final local$updatedAt = _instance.updatedAt;
    return local$updatedAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updatedAt, (e) => call(updatedAt: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get uploadedByUserId {
    final local$uploadedByUserId = _instance.uploadedByUserId;
    return local$uploadedByUserId == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$uploadedByUserId, (e) => call(uploadedByUserId: e));
  }
}

class _CopyWithStubImpl$Input$files_bool_exp<TRes>
    implements CopyWith$Input$files_bool_exp<TRes> {
  _CopyWithStubImpl$Input$files_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$files_bool_exp>? $_and,
    Input$files_bool_exp? $_not,
    List<Input$files_bool_exp>? $_or,
    Input$buckets_bool_exp? bucket,
    Input$String_comparison_exp? bucketId,
    Input$timestamptz_comparison_exp? createdAt,
    Input$String_comparison_exp? etag,
    Input$uuid_comparison_exp? id,
    Input$Boolean_comparison_exp? isUploaded,
    Input$String_comparison_exp? mimeType,
    Input$String_comparison_exp? name,
    Input$Int_comparison_exp? size,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$uuid_comparison_exp? uploadedByUserId,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$files_bool_exp<TRes> get $_not =>
      CopyWith$Input$files_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$buckets_bool_exp<TRes> get bucket =>
      CopyWith$Input$buckets_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get bucketId =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get etag =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get isUploaded =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get mimeType =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get size =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get uploadedByUserId =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$files_inc_input {
  factory Input$files_inc_input({int? size}) => Input$files_inc_input._({
        if (size != null) r'size': size,
      });

  Input$files_inc_input._(this._$data);

  factory Input$files_inc_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] = (l$size as int?);
    }
    return Input$files_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get size => (_$data['size'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] = l$size;
    }
    return result$data;
  }

  CopyWith$Input$files_inc_input<Input$files_inc_input> get copyWith =>
      CopyWith$Input$files_inc_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_inc_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_inc_input<TRes> {
  factory CopyWith$Input$files_inc_input(
    Input$files_inc_input instance,
    TRes Function(Input$files_inc_input) then,
  ) = _CopyWithImpl$Input$files_inc_input;

  factory CopyWith$Input$files_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$files_inc_input;

  TRes call({int? size});
}

class _CopyWithImpl$Input$files_inc_input<TRes>
    implements CopyWith$Input$files_inc_input<TRes> {
  _CopyWithImpl$Input$files_inc_input(
    this._instance,
    this._then,
  );

  final Input$files_inc_input _instance;

  final TRes Function(Input$files_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) => _then(Input$files_inc_input._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as int?),
      }));
}

class _CopyWithStubImpl$Input$files_inc_input<TRes>
    implements CopyWith$Input$files_inc_input<TRes> {
  _CopyWithStubImpl$Input$files_inc_input(this._res);

  TRes _res;

  call({int? size}) => _res;
}

class Input$files_insert_input {
  factory Input$files_insert_input({
    Input$buckets_obj_rel_insert_input? bucket,
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  }) =>
      Input$files_insert_input._({
        if (bucket != null) r'bucket': bucket,
        if (bucketId != null) r'bucketId': bucketId,
        if (createdAt != null) r'createdAt': createdAt,
        if (etag != null) r'etag': etag,
        if (id != null) r'id': id,
        if (isUploaded != null) r'isUploaded': isUploaded,
        if (mimeType != null) r'mimeType': mimeType,
        if (name != null) r'name': name,
        if (size != null) r'size': size,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (uploadedByUserId != null) r'uploadedByUserId': uploadedByUserId,
      });

  Input$files_insert_input._(this._$data);

  factory Input$files_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bucket')) {
      final l$bucket = data['bucket'];
      result$data['bucket'] = l$bucket == null
          ? null
          : Input$buckets_obj_rel_insert_input.fromJson(
              (l$bucket as Map<String, dynamic>));
    }
    if (data.containsKey('bucketId')) {
      final l$bucketId = data['bucketId'];
      result$data['bucketId'] = (l$bucketId as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('etag')) {
      final l$etag = data['etag'];
      result$data['etag'] = (l$etag as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('isUploaded')) {
      final l$isUploaded = data['isUploaded'];
      result$data['isUploaded'] = (l$isUploaded as bool?);
    }
    if (data.containsKey('mimeType')) {
      final l$mimeType = data['mimeType'];
      result$data['mimeType'] = (l$mimeType as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] = (l$size as int?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    if (data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = data['uploadedByUserId'];
      result$data['uploadedByUserId'] =
          l$uploadedByUserId == null ? null : uuidFromJson(l$uploadedByUserId);
    }
    return Input$files_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$buckets_obj_rel_insert_input? get bucket =>
      (_$data['bucket'] as Input$buckets_obj_rel_insert_input?);
  String? get bucketId => (_$data['bucketId'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  String? get etag => (_$data['etag'] as String?);
  UUID? get id => (_$data['id'] as UUID?);
  bool? get isUploaded => (_$data['isUploaded'] as bool?);
  String? get mimeType => (_$data['mimeType'] as String?);
  String? get name => (_$data['name'] as String?);
  int? get size => (_$data['size'] as int?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  UUID? get uploadedByUserId => (_$data['uploadedByUserId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bucket')) {
      final l$bucket = bucket;
      result$data['bucket'] = l$bucket?.toJson();
    }
    if (_$data.containsKey('bucketId')) {
      final l$bucketId = bucketId;
      result$data['bucketId'] = l$bucketId;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('etag')) {
      final l$etag = etag;
      result$data['etag'] = l$etag;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('isUploaded')) {
      final l$isUploaded = isUploaded;
      result$data['isUploaded'] = l$isUploaded;
    }
    if (_$data.containsKey('mimeType')) {
      final l$mimeType = mimeType;
      result$data['mimeType'] = l$mimeType;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] = l$size;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    if (_$data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = uploadedByUserId;
      result$data['uploadedByUserId'] =
          l$uploadedByUserId == null ? null : uuidToJson(l$uploadedByUserId);
    }
    return result$data;
  }

  CopyWith$Input$files_insert_input<Input$files_insert_input> get copyWith =>
      CopyWith$Input$files_insert_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bucket = bucket;
    final lOther$bucket = other.bucket;
    if (_$data.containsKey('bucket') != other._$data.containsKey('bucket')) {
      return false;
    }
    if (l$bucket != lOther$bucket) {
      return false;
    }
    final l$bucketId = bucketId;
    final lOther$bucketId = other.bucketId;
    if (_$data.containsKey('bucketId') !=
        other._$data.containsKey('bucketId')) {
      return false;
    }
    if (l$bucketId != lOther$bucketId) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$etag = etag;
    final lOther$etag = other.etag;
    if (_$data.containsKey('etag') != other._$data.containsKey('etag')) {
      return false;
    }
    if (l$etag != lOther$etag) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$isUploaded = isUploaded;
    final lOther$isUploaded = other.isUploaded;
    if (_$data.containsKey('isUploaded') !=
        other._$data.containsKey('isUploaded')) {
      return false;
    }
    if (l$isUploaded != lOther$isUploaded) {
      return false;
    }
    final l$mimeType = mimeType;
    final lOther$mimeType = other.mimeType;
    if (_$data.containsKey('mimeType') !=
        other._$data.containsKey('mimeType')) {
      return false;
    }
    if (l$mimeType != lOther$mimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$uploadedByUserId = uploadedByUserId;
    final lOther$uploadedByUserId = other.uploadedByUserId;
    if (_$data.containsKey('uploadedByUserId') !=
        other._$data.containsKey('uploadedByUserId')) {
      return false;
    }
    if (l$uploadedByUserId != lOther$uploadedByUserId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bucket = bucket;
    final l$bucketId = bucketId;
    final l$createdAt = createdAt;
    final l$etag = etag;
    final l$id = id;
    final l$isUploaded = isUploaded;
    final l$mimeType = mimeType;
    final l$name = name;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$uploadedByUserId = uploadedByUserId;
    return Object.hashAll([
      _$data.containsKey('bucket') ? l$bucket : const {},
      _$data.containsKey('bucketId') ? l$bucketId : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('etag') ? l$etag : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('isUploaded') ? l$isUploaded : const {},
      _$data.containsKey('mimeType') ? l$mimeType : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('size') ? l$size : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('uploadedByUserId') ? l$uploadedByUserId : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_insert_input<TRes> {
  factory CopyWith$Input$files_insert_input(
    Input$files_insert_input instance,
    TRes Function(Input$files_insert_input) then,
  ) = _CopyWithImpl$Input$files_insert_input;

  factory CopyWith$Input$files_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$files_insert_input;

  TRes call({
    Input$buckets_obj_rel_insert_input? bucket,
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  });
  CopyWith$Input$buckets_obj_rel_insert_input<TRes> get bucket;
}

class _CopyWithImpl$Input$files_insert_input<TRes>
    implements CopyWith$Input$files_insert_input<TRes> {
  _CopyWithImpl$Input$files_insert_input(
    this._instance,
    this._then,
  );

  final Input$files_insert_input _instance;

  final TRes Function(Input$files_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bucket = _undefined,
    Object? bucketId = _undefined,
    Object? createdAt = _undefined,
    Object? etag = _undefined,
    Object? id = _undefined,
    Object? isUploaded = _undefined,
    Object? mimeType = _undefined,
    Object? name = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? uploadedByUserId = _undefined,
  }) =>
      _then(Input$files_insert_input._({
        ..._instance._$data,
        if (bucket != _undefined)
          'bucket': (bucket as Input$buckets_obj_rel_insert_input?),
        if (bucketId != _undefined) 'bucketId': (bucketId as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (etag != _undefined) 'etag': (etag as String?),
        if (id != _undefined) 'id': (id as UUID?),
        if (isUploaded != _undefined) 'isUploaded': (isUploaded as bool?),
        if (mimeType != _undefined) 'mimeType': (mimeType as String?),
        if (name != _undefined) 'name': (name as String?),
        if (size != _undefined) 'size': (size as int?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
        if (uploadedByUserId != _undefined)
          'uploadedByUserId': (uploadedByUserId as UUID?),
      }));
  CopyWith$Input$buckets_obj_rel_insert_input<TRes> get bucket {
    final local$bucket = _instance.bucket;
    return local$bucket == null
        ? CopyWith$Input$buckets_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$buckets_obj_rel_insert_input(
            local$bucket, (e) => call(bucket: e));
  }
}

class _CopyWithStubImpl$Input$files_insert_input<TRes>
    implements CopyWith$Input$files_insert_input<TRes> {
  _CopyWithStubImpl$Input$files_insert_input(this._res);

  TRes _res;

  call({
    Input$buckets_obj_rel_insert_input? bucket,
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  }) =>
      _res;
  CopyWith$Input$buckets_obj_rel_insert_input<TRes> get bucket =>
      CopyWith$Input$buckets_obj_rel_insert_input.stub(_res);
}

class Input$files_max_order_by {
  factory Input$files_max_order_by({
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  }) =>
      Input$files_max_order_by._({
        if (bucketId != null) r'bucketId': bucketId,
        if (createdAt != null) r'createdAt': createdAt,
        if (etag != null) r'etag': etag,
        if (id != null) r'id': id,
        if (mimeType != null) r'mimeType': mimeType,
        if (name != null) r'name': name,
        if (size != null) r'size': size,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (uploadedByUserId != null) r'uploadedByUserId': uploadedByUserId,
      });

  Input$files_max_order_by._(this._$data);

  factory Input$files_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bucketId')) {
      final l$bucketId = data['bucketId'];
      result$data['bucketId'] = l$bucketId == null
          ? null
          : fromJson$Enum$order_by((l$bucketId as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('etag')) {
      final l$etag = data['etag'];
      result$data['etag'] =
          l$etag == null ? null : fromJson$Enum$order_by((l$etag as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('mimeType')) {
      final l$mimeType = data['mimeType'];
      result$data['mimeType'] = l$mimeType == null
          ? null
          : fromJson$Enum$order_by((l$mimeType as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    if (data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = data['uploadedByUserId'];
      result$data['uploadedByUserId'] = l$uploadedByUserId == null
          ? null
          : fromJson$Enum$order_by((l$uploadedByUserId as String));
    }
    return Input$files_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get bucketId => (_$data['bucketId'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get etag => (_$data['etag'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get mimeType => (_$data['mimeType'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Enum$order_by? get uploadedByUserId =>
      (_$data['uploadedByUserId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bucketId')) {
      final l$bucketId = bucketId;
      result$data['bucketId'] =
          l$bucketId == null ? null : toJson$Enum$order_by(l$bucketId);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('etag')) {
      final l$etag = etag;
      result$data['etag'] =
          l$etag == null ? null : toJson$Enum$order_by(l$etag);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('mimeType')) {
      final l$mimeType = mimeType;
      result$data['mimeType'] =
          l$mimeType == null ? null : toJson$Enum$order_by(l$mimeType);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    if (_$data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = uploadedByUserId;
      result$data['uploadedByUserId'] = l$uploadedByUserId == null
          ? null
          : toJson$Enum$order_by(l$uploadedByUserId);
    }
    return result$data;
  }

  CopyWith$Input$files_max_order_by<Input$files_max_order_by> get copyWith =>
      CopyWith$Input$files_max_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bucketId = bucketId;
    final lOther$bucketId = other.bucketId;
    if (_$data.containsKey('bucketId') !=
        other._$data.containsKey('bucketId')) {
      return false;
    }
    if (l$bucketId != lOther$bucketId) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$etag = etag;
    final lOther$etag = other.etag;
    if (_$data.containsKey('etag') != other._$data.containsKey('etag')) {
      return false;
    }
    if (l$etag != lOther$etag) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$mimeType = mimeType;
    final lOther$mimeType = other.mimeType;
    if (_$data.containsKey('mimeType') !=
        other._$data.containsKey('mimeType')) {
      return false;
    }
    if (l$mimeType != lOther$mimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$uploadedByUserId = uploadedByUserId;
    final lOther$uploadedByUserId = other.uploadedByUserId;
    if (_$data.containsKey('uploadedByUserId') !=
        other._$data.containsKey('uploadedByUserId')) {
      return false;
    }
    if (l$uploadedByUserId != lOther$uploadedByUserId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bucketId = bucketId;
    final l$createdAt = createdAt;
    final l$etag = etag;
    final l$id = id;
    final l$mimeType = mimeType;
    final l$name = name;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$uploadedByUserId = uploadedByUserId;
    return Object.hashAll([
      _$data.containsKey('bucketId') ? l$bucketId : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('etag') ? l$etag : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('mimeType') ? l$mimeType : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('size') ? l$size : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('uploadedByUserId') ? l$uploadedByUserId : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_max_order_by<TRes> {
  factory CopyWith$Input$files_max_order_by(
    Input$files_max_order_by instance,
    TRes Function(Input$files_max_order_by) then,
  ) = _CopyWithImpl$Input$files_max_order_by;

  factory CopyWith$Input$files_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_max_order_by;

  TRes call({
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  });
}

class _CopyWithImpl$Input$files_max_order_by<TRes>
    implements CopyWith$Input$files_max_order_by<TRes> {
  _CopyWithImpl$Input$files_max_order_by(
    this._instance,
    this._then,
  );

  final Input$files_max_order_by _instance;

  final TRes Function(Input$files_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bucketId = _undefined,
    Object? createdAt = _undefined,
    Object? etag = _undefined,
    Object? id = _undefined,
    Object? mimeType = _undefined,
    Object? name = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? uploadedByUserId = _undefined,
  }) =>
      _then(Input$files_max_order_by._({
        ..._instance._$data,
        if (bucketId != _undefined) 'bucketId': (bucketId as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (etag != _undefined) 'etag': (etag as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (mimeType != _undefined) 'mimeType': (mimeType as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (size != _undefined) 'size': (size as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
        if (uploadedByUserId != _undefined)
          'uploadedByUserId': (uploadedByUserId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_max_order_by<TRes>
    implements CopyWith$Input$files_max_order_by<TRes> {
  _CopyWithStubImpl$Input$files_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  }) =>
      _res;
}

class Input$files_min_order_by {
  factory Input$files_min_order_by({
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  }) =>
      Input$files_min_order_by._({
        if (bucketId != null) r'bucketId': bucketId,
        if (createdAt != null) r'createdAt': createdAt,
        if (etag != null) r'etag': etag,
        if (id != null) r'id': id,
        if (mimeType != null) r'mimeType': mimeType,
        if (name != null) r'name': name,
        if (size != null) r'size': size,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (uploadedByUserId != null) r'uploadedByUserId': uploadedByUserId,
      });

  Input$files_min_order_by._(this._$data);

  factory Input$files_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bucketId')) {
      final l$bucketId = data['bucketId'];
      result$data['bucketId'] = l$bucketId == null
          ? null
          : fromJson$Enum$order_by((l$bucketId as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('etag')) {
      final l$etag = data['etag'];
      result$data['etag'] =
          l$etag == null ? null : fromJson$Enum$order_by((l$etag as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('mimeType')) {
      final l$mimeType = data['mimeType'];
      result$data['mimeType'] = l$mimeType == null
          ? null
          : fromJson$Enum$order_by((l$mimeType as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    if (data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = data['uploadedByUserId'];
      result$data['uploadedByUserId'] = l$uploadedByUserId == null
          ? null
          : fromJson$Enum$order_by((l$uploadedByUserId as String));
    }
    return Input$files_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get bucketId => (_$data['bucketId'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get etag => (_$data['etag'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get mimeType => (_$data['mimeType'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Enum$order_by? get uploadedByUserId =>
      (_$data['uploadedByUserId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bucketId')) {
      final l$bucketId = bucketId;
      result$data['bucketId'] =
          l$bucketId == null ? null : toJson$Enum$order_by(l$bucketId);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('etag')) {
      final l$etag = etag;
      result$data['etag'] =
          l$etag == null ? null : toJson$Enum$order_by(l$etag);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('mimeType')) {
      final l$mimeType = mimeType;
      result$data['mimeType'] =
          l$mimeType == null ? null : toJson$Enum$order_by(l$mimeType);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    if (_$data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = uploadedByUserId;
      result$data['uploadedByUserId'] = l$uploadedByUserId == null
          ? null
          : toJson$Enum$order_by(l$uploadedByUserId);
    }
    return result$data;
  }

  CopyWith$Input$files_min_order_by<Input$files_min_order_by> get copyWith =>
      CopyWith$Input$files_min_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bucketId = bucketId;
    final lOther$bucketId = other.bucketId;
    if (_$data.containsKey('bucketId') !=
        other._$data.containsKey('bucketId')) {
      return false;
    }
    if (l$bucketId != lOther$bucketId) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$etag = etag;
    final lOther$etag = other.etag;
    if (_$data.containsKey('etag') != other._$data.containsKey('etag')) {
      return false;
    }
    if (l$etag != lOther$etag) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$mimeType = mimeType;
    final lOther$mimeType = other.mimeType;
    if (_$data.containsKey('mimeType') !=
        other._$data.containsKey('mimeType')) {
      return false;
    }
    if (l$mimeType != lOther$mimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$uploadedByUserId = uploadedByUserId;
    final lOther$uploadedByUserId = other.uploadedByUserId;
    if (_$data.containsKey('uploadedByUserId') !=
        other._$data.containsKey('uploadedByUserId')) {
      return false;
    }
    if (l$uploadedByUserId != lOther$uploadedByUserId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bucketId = bucketId;
    final l$createdAt = createdAt;
    final l$etag = etag;
    final l$id = id;
    final l$mimeType = mimeType;
    final l$name = name;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$uploadedByUserId = uploadedByUserId;
    return Object.hashAll([
      _$data.containsKey('bucketId') ? l$bucketId : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('etag') ? l$etag : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('mimeType') ? l$mimeType : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('size') ? l$size : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('uploadedByUserId') ? l$uploadedByUserId : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_min_order_by<TRes> {
  factory CopyWith$Input$files_min_order_by(
    Input$files_min_order_by instance,
    TRes Function(Input$files_min_order_by) then,
  ) = _CopyWithImpl$Input$files_min_order_by;

  factory CopyWith$Input$files_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_min_order_by;

  TRes call({
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  });
}

class _CopyWithImpl$Input$files_min_order_by<TRes>
    implements CopyWith$Input$files_min_order_by<TRes> {
  _CopyWithImpl$Input$files_min_order_by(
    this._instance,
    this._then,
  );

  final Input$files_min_order_by _instance;

  final TRes Function(Input$files_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bucketId = _undefined,
    Object? createdAt = _undefined,
    Object? etag = _undefined,
    Object? id = _undefined,
    Object? mimeType = _undefined,
    Object? name = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? uploadedByUserId = _undefined,
  }) =>
      _then(Input$files_min_order_by._({
        ..._instance._$data,
        if (bucketId != _undefined) 'bucketId': (bucketId as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (etag != _undefined) 'etag': (etag as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (mimeType != _undefined) 'mimeType': (mimeType as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (size != _undefined) 'size': (size as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
        if (uploadedByUserId != _undefined)
          'uploadedByUserId': (uploadedByUserId as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_min_order_by<TRes>
    implements CopyWith$Input$files_min_order_by<TRes> {
  _CopyWithStubImpl$Input$files_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  }) =>
      _res;
}

class Input$files_on_conflict {
  factory Input$files_on_conflict({
    required Enum$files_constraint constraint,
    required List<Enum$files_update_column> update_columns,
    Input$files_bool_exp? where,
  }) =>
      Input$files_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$files_on_conflict._(this._$data);

  factory Input$files_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$files_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$files_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$files_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$files_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$files_constraint get constraint =>
      (_$data['constraint'] as Enum$files_constraint);
  List<Enum$files_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$files_update_column>);
  Input$files_bool_exp? get where => (_$data['where'] as Input$files_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$files_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$files_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$files_on_conflict<Input$files_on_conflict> get copyWith =>
      CopyWith$Input$files_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_on_conflict<TRes> {
  factory CopyWith$Input$files_on_conflict(
    Input$files_on_conflict instance,
    TRes Function(Input$files_on_conflict) then,
  ) = _CopyWithImpl$Input$files_on_conflict;

  factory CopyWith$Input$files_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$files_on_conflict;

  TRes call({
    Enum$files_constraint? constraint,
    List<Enum$files_update_column>? update_columns,
    Input$files_bool_exp? where,
  });
  CopyWith$Input$files_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$files_on_conflict<TRes>
    implements CopyWith$Input$files_on_conflict<TRes> {
  _CopyWithImpl$Input$files_on_conflict(
    this._instance,
    this._then,
  );

  final Input$files_on_conflict _instance;

  final TRes Function(Input$files_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$files_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$files_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns as List<Enum$files_update_column>),
        if (where != _undefined) 'where': (where as Input$files_bool_exp?),
      }));
  CopyWith$Input$files_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$files_bool_exp.stub(_then(_instance))
        : CopyWith$Input$files_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$files_on_conflict<TRes>
    implements CopyWith$Input$files_on_conflict<TRes> {
  _CopyWithStubImpl$Input$files_on_conflict(this._res);

  TRes _res;

  call({
    Enum$files_constraint? constraint,
    List<Enum$files_update_column>? update_columns,
    Input$files_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$files_bool_exp<TRes> get where =>
      CopyWith$Input$files_bool_exp.stub(_res);
}

class Input$files_order_by {
  factory Input$files_order_by({
    Input$buckets_order_by? bucket,
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? isUploaded,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  }) =>
      Input$files_order_by._({
        if (bucket != null) r'bucket': bucket,
        if (bucketId != null) r'bucketId': bucketId,
        if (createdAt != null) r'createdAt': createdAt,
        if (etag != null) r'etag': etag,
        if (id != null) r'id': id,
        if (isUploaded != null) r'isUploaded': isUploaded,
        if (mimeType != null) r'mimeType': mimeType,
        if (name != null) r'name': name,
        if (size != null) r'size': size,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (uploadedByUserId != null) r'uploadedByUserId': uploadedByUserId,
      });

  Input$files_order_by._(this._$data);

  factory Input$files_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bucket')) {
      final l$bucket = data['bucket'];
      result$data['bucket'] = l$bucket == null
          ? null
          : Input$buckets_order_by.fromJson((l$bucket as Map<String, dynamic>));
    }
    if (data.containsKey('bucketId')) {
      final l$bucketId = data['bucketId'];
      result$data['bucketId'] = l$bucketId == null
          ? null
          : fromJson$Enum$order_by((l$bucketId as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('etag')) {
      final l$etag = data['etag'];
      result$data['etag'] =
          l$etag == null ? null : fromJson$Enum$order_by((l$etag as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('isUploaded')) {
      final l$isUploaded = data['isUploaded'];
      result$data['isUploaded'] = l$isUploaded == null
          ? null
          : fromJson$Enum$order_by((l$isUploaded as String));
    }
    if (data.containsKey('mimeType')) {
      final l$mimeType = data['mimeType'];
      result$data['mimeType'] = l$mimeType == null
          ? null
          : fromJson$Enum$order_by((l$mimeType as String));
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] =
          l$name == null ? null : fromJson$Enum$order_by((l$name as String));
    }
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    if (data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = data['uploadedByUserId'];
      result$data['uploadedByUserId'] = l$uploadedByUserId == null
          ? null
          : fromJson$Enum$order_by((l$uploadedByUserId as String));
    }
    return Input$files_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$buckets_order_by? get bucket =>
      (_$data['bucket'] as Input$buckets_order_by?);
  Enum$order_by? get bucketId => (_$data['bucketId'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get etag => (_$data['etag'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get isUploaded => (_$data['isUploaded'] as Enum$order_by?);
  Enum$order_by? get mimeType => (_$data['mimeType'] as Enum$order_by?);
  Enum$order_by? get name => (_$data['name'] as Enum$order_by?);
  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Enum$order_by? get uploadedByUserId =>
      (_$data['uploadedByUserId'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bucket')) {
      final l$bucket = bucket;
      result$data['bucket'] = l$bucket?.toJson();
    }
    if (_$data.containsKey('bucketId')) {
      final l$bucketId = bucketId;
      result$data['bucketId'] =
          l$bucketId == null ? null : toJson$Enum$order_by(l$bucketId);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('etag')) {
      final l$etag = etag;
      result$data['etag'] =
          l$etag == null ? null : toJson$Enum$order_by(l$etag);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('isUploaded')) {
      final l$isUploaded = isUploaded;
      result$data['isUploaded'] =
          l$isUploaded == null ? null : toJson$Enum$order_by(l$isUploaded);
    }
    if (_$data.containsKey('mimeType')) {
      final l$mimeType = mimeType;
      result$data['mimeType'] =
          l$mimeType == null ? null : toJson$Enum$order_by(l$mimeType);
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] =
          l$name == null ? null : toJson$Enum$order_by(l$name);
    }
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    if (_$data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = uploadedByUserId;
      result$data['uploadedByUserId'] = l$uploadedByUserId == null
          ? null
          : toJson$Enum$order_by(l$uploadedByUserId);
    }
    return result$data;
  }

  CopyWith$Input$files_order_by<Input$files_order_by> get copyWith =>
      CopyWith$Input$files_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$bucket = bucket;
    final lOther$bucket = other.bucket;
    if (_$data.containsKey('bucket') != other._$data.containsKey('bucket')) {
      return false;
    }
    if (l$bucket != lOther$bucket) {
      return false;
    }
    final l$bucketId = bucketId;
    final lOther$bucketId = other.bucketId;
    if (_$data.containsKey('bucketId') !=
        other._$data.containsKey('bucketId')) {
      return false;
    }
    if (l$bucketId != lOther$bucketId) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$etag = etag;
    final lOther$etag = other.etag;
    if (_$data.containsKey('etag') != other._$data.containsKey('etag')) {
      return false;
    }
    if (l$etag != lOther$etag) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$isUploaded = isUploaded;
    final lOther$isUploaded = other.isUploaded;
    if (_$data.containsKey('isUploaded') !=
        other._$data.containsKey('isUploaded')) {
      return false;
    }
    if (l$isUploaded != lOther$isUploaded) {
      return false;
    }
    final l$mimeType = mimeType;
    final lOther$mimeType = other.mimeType;
    if (_$data.containsKey('mimeType') !=
        other._$data.containsKey('mimeType')) {
      return false;
    }
    if (l$mimeType != lOther$mimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$uploadedByUserId = uploadedByUserId;
    final lOther$uploadedByUserId = other.uploadedByUserId;
    if (_$data.containsKey('uploadedByUserId') !=
        other._$data.containsKey('uploadedByUserId')) {
      return false;
    }
    if (l$uploadedByUserId != lOther$uploadedByUserId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bucket = bucket;
    final l$bucketId = bucketId;
    final l$createdAt = createdAt;
    final l$etag = etag;
    final l$id = id;
    final l$isUploaded = isUploaded;
    final l$mimeType = mimeType;
    final l$name = name;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$uploadedByUserId = uploadedByUserId;
    return Object.hashAll([
      _$data.containsKey('bucket') ? l$bucket : const {},
      _$data.containsKey('bucketId') ? l$bucketId : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('etag') ? l$etag : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('isUploaded') ? l$isUploaded : const {},
      _$data.containsKey('mimeType') ? l$mimeType : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('size') ? l$size : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('uploadedByUserId') ? l$uploadedByUserId : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_order_by<TRes> {
  factory CopyWith$Input$files_order_by(
    Input$files_order_by instance,
    TRes Function(Input$files_order_by) then,
  ) = _CopyWithImpl$Input$files_order_by;

  factory CopyWith$Input$files_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_order_by;

  TRes call({
    Input$buckets_order_by? bucket,
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? isUploaded,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  });
  CopyWith$Input$buckets_order_by<TRes> get bucket;
}

class _CopyWithImpl$Input$files_order_by<TRes>
    implements CopyWith$Input$files_order_by<TRes> {
  _CopyWithImpl$Input$files_order_by(
    this._instance,
    this._then,
  );

  final Input$files_order_by _instance;

  final TRes Function(Input$files_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bucket = _undefined,
    Object? bucketId = _undefined,
    Object? createdAt = _undefined,
    Object? etag = _undefined,
    Object? id = _undefined,
    Object? isUploaded = _undefined,
    Object? mimeType = _undefined,
    Object? name = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? uploadedByUserId = _undefined,
  }) =>
      _then(Input$files_order_by._({
        ..._instance._$data,
        if (bucket != _undefined) 'bucket': (bucket as Input$buckets_order_by?),
        if (bucketId != _undefined) 'bucketId': (bucketId as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (etag != _undefined) 'etag': (etag as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (isUploaded != _undefined)
          'isUploaded': (isUploaded as Enum$order_by?),
        if (mimeType != _undefined) 'mimeType': (mimeType as Enum$order_by?),
        if (name != _undefined) 'name': (name as Enum$order_by?),
        if (size != _undefined) 'size': (size as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
        if (uploadedByUserId != _undefined)
          'uploadedByUserId': (uploadedByUserId as Enum$order_by?),
      }));
  CopyWith$Input$buckets_order_by<TRes> get bucket {
    final local$bucket = _instance.bucket;
    return local$bucket == null
        ? CopyWith$Input$buckets_order_by.stub(_then(_instance))
        : CopyWith$Input$buckets_order_by(local$bucket, (e) => call(bucket: e));
  }
}

class _CopyWithStubImpl$Input$files_order_by<TRes>
    implements CopyWith$Input$files_order_by<TRes> {
  _CopyWithStubImpl$Input$files_order_by(this._res);

  TRes _res;

  call({
    Input$buckets_order_by? bucket,
    Enum$order_by? bucketId,
    Enum$order_by? createdAt,
    Enum$order_by? etag,
    Enum$order_by? id,
    Enum$order_by? isUploaded,
    Enum$order_by? mimeType,
    Enum$order_by? name,
    Enum$order_by? size,
    Enum$order_by? updatedAt,
    Enum$order_by? uploadedByUserId,
  }) =>
      _res;
  CopyWith$Input$buckets_order_by<TRes> get bucket =>
      CopyWith$Input$buckets_order_by.stub(_res);
}

class Input$files_pk_columns_input {
  factory Input$files_pk_columns_input({required UUID id}) =>
      Input$files_pk_columns_input._({
        r'id': id,
      });

  Input$files_pk_columns_input._(this._$data);

  factory Input$files_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = uuidFromJson(l$id);
    return Input$files_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get id => (_$data['id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = uuidToJson(l$id);
    return result$data;
  }

  CopyWith$Input$files_pk_columns_input<Input$files_pk_columns_input>
      get copyWith => CopyWith$Input$files_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$files_pk_columns_input<TRes> {
  factory CopyWith$Input$files_pk_columns_input(
    Input$files_pk_columns_input instance,
    TRes Function(Input$files_pk_columns_input) then,
  ) = _CopyWithImpl$Input$files_pk_columns_input;

  factory CopyWith$Input$files_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$files_pk_columns_input;

  TRes call({UUID? id});
}

class _CopyWithImpl$Input$files_pk_columns_input<TRes>
    implements CopyWith$Input$files_pk_columns_input<TRes> {
  _CopyWithImpl$Input$files_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$files_pk_columns_input _instance;

  final TRes Function(Input$files_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) => _then(Input$files_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as UUID),
      }));
}

class _CopyWithStubImpl$Input$files_pk_columns_input<TRes>
    implements CopyWith$Input$files_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$files_pk_columns_input(this._res);

  TRes _res;

  call({UUID? id}) => _res;
}

class Input$files_set_input {
  factory Input$files_set_input({
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  }) =>
      Input$files_set_input._({
        if (bucketId != null) r'bucketId': bucketId,
        if (createdAt != null) r'createdAt': createdAt,
        if (etag != null) r'etag': etag,
        if (id != null) r'id': id,
        if (isUploaded != null) r'isUploaded': isUploaded,
        if (mimeType != null) r'mimeType': mimeType,
        if (name != null) r'name': name,
        if (size != null) r'size': size,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (uploadedByUserId != null) r'uploadedByUserId': uploadedByUserId,
      });

  Input$files_set_input._(this._$data);

  factory Input$files_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bucketId')) {
      final l$bucketId = data['bucketId'];
      result$data['bucketId'] = (l$bucketId as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('etag')) {
      final l$etag = data['etag'];
      result$data['etag'] = (l$etag as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('isUploaded')) {
      final l$isUploaded = data['isUploaded'];
      result$data['isUploaded'] = (l$isUploaded as bool?);
    }
    if (data.containsKey('mimeType')) {
      final l$mimeType = data['mimeType'];
      result$data['mimeType'] = (l$mimeType as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] = (l$size as int?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    if (data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = data['uploadedByUserId'];
      result$data['uploadedByUserId'] =
          l$uploadedByUserId == null ? null : uuidFromJson(l$uploadedByUserId);
    }
    return Input$files_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get bucketId => (_$data['bucketId'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  String? get etag => (_$data['etag'] as String?);
  UUID? get id => (_$data['id'] as UUID?);
  bool? get isUploaded => (_$data['isUploaded'] as bool?);
  String? get mimeType => (_$data['mimeType'] as String?);
  String? get name => (_$data['name'] as String?);
  int? get size => (_$data['size'] as int?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  UUID? get uploadedByUserId => (_$data['uploadedByUserId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bucketId')) {
      final l$bucketId = bucketId;
      result$data['bucketId'] = l$bucketId;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('etag')) {
      final l$etag = etag;
      result$data['etag'] = l$etag;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('isUploaded')) {
      final l$isUploaded = isUploaded;
      result$data['isUploaded'] = l$isUploaded;
    }
    if (_$data.containsKey('mimeType')) {
      final l$mimeType = mimeType;
      result$data['mimeType'] = l$mimeType;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] = l$size;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    if (_$data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = uploadedByUserId;
      result$data['uploadedByUserId'] =
          l$uploadedByUserId == null ? null : uuidToJson(l$uploadedByUserId);
    }
    return result$data;
  }

  CopyWith$Input$files_set_input<Input$files_set_input> get copyWith =>
      CopyWith$Input$files_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_set_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$bucketId = bucketId;
    final lOther$bucketId = other.bucketId;
    if (_$data.containsKey('bucketId') !=
        other._$data.containsKey('bucketId')) {
      return false;
    }
    if (l$bucketId != lOther$bucketId) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$etag = etag;
    final lOther$etag = other.etag;
    if (_$data.containsKey('etag') != other._$data.containsKey('etag')) {
      return false;
    }
    if (l$etag != lOther$etag) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$isUploaded = isUploaded;
    final lOther$isUploaded = other.isUploaded;
    if (_$data.containsKey('isUploaded') !=
        other._$data.containsKey('isUploaded')) {
      return false;
    }
    if (l$isUploaded != lOther$isUploaded) {
      return false;
    }
    final l$mimeType = mimeType;
    final lOther$mimeType = other.mimeType;
    if (_$data.containsKey('mimeType') !=
        other._$data.containsKey('mimeType')) {
      return false;
    }
    if (l$mimeType != lOther$mimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$uploadedByUserId = uploadedByUserId;
    final lOther$uploadedByUserId = other.uploadedByUserId;
    if (_$data.containsKey('uploadedByUserId') !=
        other._$data.containsKey('uploadedByUserId')) {
      return false;
    }
    if (l$uploadedByUserId != lOther$uploadedByUserId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bucketId = bucketId;
    final l$createdAt = createdAt;
    final l$etag = etag;
    final l$id = id;
    final l$isUploaded = isUploaded;
    final l$mimeType = mimeType;
    final l$name = name;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$uploadedByUserId = uploadedByUserId;
    return Object.hashAll([
      _$data.containsKey('bucketId') ? l$bucketId : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('etag') ? l$etag : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('isUploaded') ? l$isUploaded : const {},
      _$data.containsKey('mimeType') ? l$mimeType : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('size') ? l$size : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('uploadedByUserId') ? l$uploadedByUserId : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_set_input<TRes> {
  factory CopyWith$Input$files_set_input(
    Input$files_set_input instance,
    TRes Function(Input$files_set_input) then,
  ) = _CopyWithImpl$Input$files_set_input;

  factory CopyWith$Input$files_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$files_set_input;

  TRes call({
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  });
}

class _CopyWithImpl$Input$files_set_input<TRes>
    implements CopyWith$Input$files_set_input<TRes> {
  _CopyWithImpl$Input$files_set_input(
    this._instance,
    this._then,
  );

  final Input$files_set_input _instance;

  final TRes Function(Input$files_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bucketId = _undefined,
    Object? createdAt = _undefined,
    Object? etag = _undefined,
    Object? id = _undefined,
    Object? isUploaded = _undefined,
    Object? mimeType = _undefined,
    Object? name = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? uploadedByUserId = _undefined,
  }) =>
      _then(Input$files_set_input._({
        ..._instance._$data,
        if (bucketId != _undefined) 'bucketId': (bucketId as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (etag != _undefined) 'etag': (etag as String?),
        if (id != _undefined) 'id': (id as UUID?),
        if (isUploaded != _undefined) 'isUploaded': (isUploaded as bool?),
        if (mimeType != _undefined) 'mimeType': (mimeType as String?),
        if (name != _undefined) 'name': (name as String?),
        if (size != _undefined) 'size': (size as int?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
        if (uploadedByUserId != _undefined)
          'uploadedByUserId': (uploadedByUserId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$files_set_input<TRes>
    implements CopyWith$Input$files_set_input<TRes> {
  _CopyWithStubImpl$Input$files_set_input(this._res);

  TRes _res;

  call({
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  }) =>
      _res;
}

class Input$files_stddev_order_by {
  factory Input$files_stddev_order_by({Enum$order_by? size}) =>
      Input$files_stddev_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_stddev_order_by._(this._$data);

  factory Input$files_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_stddev_order_by<Input$files_stddev_order_by>
      get copyWith => CopyWith$Input$files_stddev_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_stddev_order_by<TRes> {
  factory CopyWith$Input$files_stddev_order_by(
    Input$files_stddev_order_by instance,
    TRes Function(Input$files_stddev_order_by) then,
  ) = _CopyWithImpl$Input$files_stddev_order_by;

  factory CopyWith$Input$files_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_stddev_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_stddev_order_by<TRes>
    implements CopyWith$Input$files_stddev_order_by<TRes> {
  _CopyWithImpl$Input$files_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$files_stddev_order_by _instance;

  final TRes Function(Input$files_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) =>
      _then(Input$files_stddev_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_stddev_order_by<TRes>
    implements CopyWith$Input$files_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$files_stddev_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$files_stddev_pop_order_by {
  factory Input$files_stddev_pop_order_by({Enum$order_by? size}) =>
      Input$files_stddev_pop_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_stddev_pop_order_by._(this._$data);

  factory Input$files_stddev_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_stddev_pop_order_by<Input$files_stddev_pop_order_by>
      get copyWith => CopyWith$Input$files_stddev_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$files_stddev_pop_order_by(
    Input$files_stddev_pop_order_by instance,
    TRes Function(Input$files_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$files_stddev_pop_order_by;

  factory CopyWith$Input$files_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_stddev_pop_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_stddev_pop_order_by<TRes>
    implements CopyWith$Input$files_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$files_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$files_stddev_pop_order_by _instance;

  final TRes Function(Input$files_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) =>
      _then(Input$files_stddev_pop_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_stddev_pop_order_by<TRes>
    implements CopyWith$Input$files_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$files_stddev_pop_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$files_stddev_samp_order_by {
  factory Input$files_stddev_samp_order_by({Enum$order_by? size}) =>
      Input$files_stddev_samp_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_stddev_samp_order_by._(this._$data);

  factory Input$files_stddev_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_stddev_samp_order_by<Input$files_stddev_samp_order_by>
      get copyWith => CopyWith$Input$files_stddev_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$files_stddev_samp_order_by(
    Input$files_stddev_samp_order_by instance,
    TRes Function(Input$files_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$files_stddev_samp_order_by;

  factory CopyWith$Input$files_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_stddev_samp_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_stddev_samp_order_by<TRes>
    implements CopyWith$Input$files_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$files_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$files_stddev_samp_order_by _instance;

  final TRes Function(Input$files_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) =>
      _then(Input$files_stddev_samp_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_stddev_samp_order_by<TRes>
    implements CopyWith$Input$files_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$files_stddev_samp_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$files_stream_cursor_input {
  factory Input$files_stream_cursor_input({
    required Input$files_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$files_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$files_stream_cursor_input._(this._$data);

  factory Input$files_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$files_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$files_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$files_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$files_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$files_stream_cursor_input<Input$files_stream_cursor_input>
      get copyWith => CopyWith$Input$files_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_stream_cursor_input<TRes> {
  factory CopyWith$Input$files_stream_cursor_input(
    Input$files_stream_cursor_input instance,
    TRes Function(Input$files_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$files_stream_cursor_input;

  factory CopyWith$Input$files_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$files_stream_cursor_input;

  TRes call({
    Input$files_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$files_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$files_stream_cursor_input<TRes>
    implements CopyWith$Input$files_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$files_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$files_stream_cursor_input _instance;

  final TRes Function(Input$files_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$files_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$files_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$files_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$files_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$files_stream_cursor_input<TRes>
    implements CopyWith$Input$files_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$files_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$files_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$files_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$files_stream_cursor_value_input.stub(_res);
}

class Input$files_stream_cursor_value_input {
  factory Input$files_stream_cursor_value_input({
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  }) =>
      Input$files_stream_cursor_value_input._({
        if (bucketId != null) r'bucketId': bucketId,
        if (createdAt != null) r'createdAt': createdAt,
        if (etag != null) r'etag': etag,
        if (id != null) r'id': id,
        if (isUploaded != null) r'isUploaded': isUploaded,
        if (mimeType != null) r'mimeType': mimeType,
        if (name != null) r'name': name,
        if (size != null) r'size': size,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (uploadedByUserId != null) r'uploadedByUserId': uploadedByUserId,
      });

  Input$files_stream_cursor_value_input._(this._$data);

  factory Input$files_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bucketId')) {
      final l$bucketId = data['bucketId'];
      result$data['bucketId'] = (l$bucketId as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('etag')) {
      final l$etag = data['etag'];
      result$data['etag'] = (l$etag as String?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('isUploaded')) {
      final l$isUploaded = data['isUploaded'];
      result$data['isUploaded'] = (l$isUploaded as bool?);
    }
    if (data.containsKey('mimeType')) {
      final l$mimeType = data['mimeType'];
      result$data['mimeType'] = (l$mimeType as String?);
    }
    if (data.containsKey('name')) {
      final l$name = data['name'];
      result$data['name'] = (l$name as String?);
    }
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] = (l$size as int?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    if (data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = data['uploadedByUserId'];
      result$data['uploadedByUserId'] =
          l$uploadedByUserId == null ? null : uuidFromJson(l$uploadedByUserId);
    }
    return Input$files_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get bucketId => (_$data['bucketId'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  String? get etag => (_$data['etag'] as String?);
  UUID? get id => (_$data['id'] as UUID?);
  bool? get isUploaded => (_$data['isUploaded'] as bool?);
  String? get mimeType => (_$data['mimeType'] as String?);
  String? get name => (_$data['name'] as String?);
  int? get size => (_$data['size'] as int?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  UUID? get uploadedByUserId => (_$data['uploadedByUserId'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bucketId')) {
      final l$bucketId = bucketId;
      result$data['bucketId'] = l$bucketId;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('etag')) {
      final l$etag = etag;
      result$data['etag'] = l$etag;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('isUploaded')) {
      final l$isUploaded = isUploaded;
      result$data['isUploaded'] = l$isUploaded;
    }
    if (_$data.containsKey('mimeType')) {
      final l$mimeType = mimeType;
      result$data['mimeType'] = l$mimeType;
    }
    if (_$data.containsKey('name')) {
      final l$name = name;
      result$data['name'] = l$name;
    }
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] = l$size;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    if (_$data.containsKey('uploadedByUserId')) {
      final l$uploadedByUserId = uploadedByUserId;
      result$data['uploadedByUserId'] =
          l$uploadedByUserId == null ? null : uuidToJson(l$uploadedByUserId);
    }
    return result$data;
  }

  CopyWith$Input$files_stream_cursor_value_input<
          Input$files_stream_cursor_value_input>
      get copyWith => CopyWith$Input$files_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bucketId = bucketId;
    final lOther$bucketId = other.bucketId;
    if (_$data.containsKey('bucketId') !=
        other._$data.containsKey('bucketId')) {
      return false;
    }
    if (l$bucketId != lOther$bucketId) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$etag = etag;
    final lOther$etag = other.etag;
    if (_$data.containsKey('etag') != other._$data.containsKey('etag')) {
      return false;
    }
    if (l$etag != lOther$etag) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$isUploaded = isUploaded;
    final lOther$isUploaded = other.isUploaded;
    if (_$data.containsKey('isUploaded') !=
        other._$data.containsKey('isUploaded')) {
      return false;
    }
    if (l$isUploaded != lOther$isUploaded) {
      return false;
    }
    final l$mimeType = mimeType;
    final lOther$mimeType = other.mimeType;
    if (_$data.containsKey('mimeType') !=
        other._$data.containsKey('mimeType')) {
      return false;
    }
    if (l$mimeType != lOther$mimeType) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (_$data.containsKey('name') != other._$data.containsKey('name')) {
      return false;
    }
    if (l$name != lOther$name) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$uploadedByUserId = uploadedByUserId;
    final lOther$uploadedByUserId = other.uploadedByUserId;
    if (_$data.containsKey('uploadedByUserId') !=
        other._$data.containsKey('uploadedByUserId')) {
      return false;
    }
    if (l$uploadedByUserId != lOther$uploadedByUserId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bucketId = bucketId;
    final l$createdAt = createdAt;
    final l$etag = etag;
    final l$id = id;
    final l$isUploaded = isUploaded;
    final l$mimeType = mimeType;
    final l$name = name;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$uploadedByUserId = uploadedByUserId;
    return Object.hashAll([
      _$data.containsKey('bucketId') ? l$bucketId : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('etag') ? l$etag : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('isUploaded') ? l$isUploaded : const {},
      _$data.containsKey('mimeType') ? l$mimeType : const {},
      _$data.containsKey('name') ? l$name : const {},
      _$data.containsKey('size') ? l$size : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('uploadedByUserId') ? l$uploadedByUserId : const {},
    ]);
  }
}

abstract class CopyWith$Input$files_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$files_stream_cursor_value_input(
    Input$files_stream_cursor_value_input instance,
    TRes Function(Input$files_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$files_stream_cursor_value_input;

  factory CopyWith$Input$files_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$files_stream_cursor_value_input;

  TRes call({
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  });
}

class _CopyWithImpl$Input$files_stream_cursor_value_input<TRes>
    implements CopyWith$Input$files_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$files_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$files_stream_cursor_value_input _instance;

  final TRes Function(Input$files_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bucketId = _undefined,
    Object? createdAt = _undefined,
    Object? etag = _undefined,
    Object? id = _undefined,
    Object? isUploaded = _undefined,
    Object? mimeType = _undefined,
    Object? name = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? uploadedByUserId = _undefined,
  }) =>
      _then(Input$files_stream_cursor_value_input._({
        ..._instance._$data,
        if (bucketId != _undefined) 'bucketId': (bucketId as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (etag != _undefined) 'etag': (etag as String?),
        if (id != _undefined) 'id': (id as UUID?),
        if (isUploaded != _undefined) 'isUploaded': (isUploaded as bool?),
        if (mimeType != _undefined) 'mimeType': (mimeType as String?),
        if (name != _undefined) 'name': (name as String?),
        if (size != _undefined) 'size': (size as int?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
        if (uploadedByUserId != _undefined)
          'uploadedByUserId': (uploadedByUserId as UUID?),
      }));
}

class _CopyWithStubImpl$Input$files_stream_cursor_value_input<TRes>
    implements CopyWith$Input$files_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$files_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? bucketId,
    DateTime? createdAt,
    String? etag,
    UUID? id,
    bool? isUploaded,
    String? mimeType,
    String? name,
    int? size,
    DateTime? updatedAt,
    UUID? uploadedByUserId,
  }) =>
      _res;
}

class Input$files_sum_order_by {
  factory Input$files_sum_order_by({Enum$order_by? size}) =>
      Input$files_sum_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_sum_order_by._(this._$data);

  factory Input$files_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_sum_order_by<Input$files_sum_order_by> get copyWith =>
      CopyWith$Input$files_sum_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_sum_order_by<TRes> {
  factory CopyWith$Input$files_sum_order_by(
    Input$files_sum_order_by instance,
    TRes Function(Input$files_sum_order_by) then,
  ) = _CopyWithImpl$Input$files_sum_order_by;

  factory CopyWith$Input$files_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_sum_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_sum_order_by<TRes>
    implements CopyWith$Input$files_sum_order_by<TRes> {
  _CopyWithImpl$Input$files_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$files_sum_order_by _instance;

  final TRes Function(Input$files_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) => _then(Input$files_sum_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_sum_order_by<TRes>
    implements CopyWith$Input$files_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$files_sum_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$files_updates {
  factory Input$files_updates({
    Input$files_inc_input? $_inc,
    Input$files_set_input? $_set,
    required Input$files_bool_exp where,
  }) =>
      Input$files_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$files_updates._(this._$data);

  factory Input$files_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$files_inc_input.fromJson((l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$files_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$files_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$files_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$files_inc_input? get $_inc =>
      (_$data['_inc'] as Input$files_inc_input?);
  Input$files_set_input? get $_set =>
      (_$data['_set'] as Input$files_set_input?);
  Input$files_bool_exp get where => (_$data['where'] as Input$files_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$files_updates<Input$files_updates> get copyWith =>
      CopyWith$Input$files_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$files_updates<TRes> {
  factory CopyWith$Input$files_updates(
    Input$files_updates instance,
    TRes Function(Input$files_updates) then,
  ) = _CopyWithImpl$Input$files_updates;

  factory CopyWith$Input$files_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$files_updates;

  TRes call({
    Input$files_inc_input? $_inc,
    Input$files_set_input? $_set,
    Input$files_bool_exp? where,
  });
  CopyWith$Input$files_inc_input<TRes> get $_inc;
  CopyWith$Input$files_set_input<TRes> get $_set;
  CopyWith$Input$files_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$files_updates<TRes>
    implements CopyWith$Input$files_updates<TRes> {
  _CopyWithImpl$Input$files_updates(
    this._instance,
    this._then,
  );

  final Input$files_updates _instance;

  final TRes Function(Input$files_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$files_updates._({
        ..._instance._$data,
        if ($_inc != _undefined) '_inc': ($_inc as Input$files_inc_input?),
        if ($_set != _undefined) '_set': ($_set as Input$files_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$files_bool_exp),
      }));
  CopyWith$Input$files_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$files_inc_input.stub(_then(_instance))
        : CopyWith$Input$files_inc_input(local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$files_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$files_set_input.stub(_then(_instance))
        : CopyWith$Input$files_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$files_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$files_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$files_updates<TRes>
    implements CopyWith$Input$files_updates<TRes> {
  _CopyWithStubImpl$Input$files_updates(this._res);

  TRes _res;

  call({
    Input$files_inc_input? $_inc,
    Input$files_set_input? $_set,
    Input$files_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$files_inc_input<TRes> get $_inc =>
      CopyWith$Input$files_inc_input.stub(_res);
  CopyWith$Input$files_set_input<TRes> get $_set =>
      CopyWith$Input$files_set_input.stub(_res);
  CopyWith$Input$files_bool_exp<TRes> get where =>
      CopyWith$Input$files_bool_exp.stub(_res);
}

class Input$files_var_pop_order_by {
  factory Input$files_var_pop_order_by({Enum$order_by? size}) =>
      Input$files_var_pop_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_var_pop_order_by._(this._$data);

  factory Input$files_var_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_var_pop_order_by<Input$files_var_pop_order_by>
      get copyWith => CopyWith$Input$files_var_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_var_pop_order_by<TRes> {
  factory CopyWith$Input$files_var_pop_order_by(
    Input$files_var_pop_order_by instance,
    TRes Function(Input$files_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$files_var_pop_order_by;

  factory CopyWith$Input$files_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_var_pop_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_var_pop_order_by<TRes>
    implements CopyWith$Input$files_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$files_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$files_var_pop_order_by _instance;

  final TRes Function(Input$files_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) =>
      _then(Input$files_var_pop_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_var_pop_order_by<TRes>
    implements CopyWith$Input$files_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$files_var_pop_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$files_var_samp_order_by {
  factory Input$files_var_samp_order_by({Enum$order_by? size}) =>
      Input$files_var_samp_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_var_samp_order_by._(this._$data);

  factory Input$files_var_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_var_samp_order_by<Input$files_var_samp_order_by>
      get copyWith => CopyWith$Input$files_var_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_var_samp_order_by<TRes> {
  factory CopyWith$Input$files_var_samp_order_by(
    Input$files_var_samp_order_by instance,
    TRes Function(Input$files_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$files_var_samp_order_by;

  factory CopyWith$Input$files_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_var_samp_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_var_samp_order_by<TRes>
    implements CopyWith$Input$files_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$files_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$files_var_samp_order_by _instance;

  final TRes Function(Input$files_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) =>
      _then(Input$files_var_samp_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_var_samp_order_by<TRes>
    implements CopyWith$Input$files_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$files_var_samp_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$files_variance_order_by {
  factory Input$files_variance_order_by({Enum$order_by? size}) =>
      Input$files_variance_order_by._({
        if (size != null) r'size': size,
      });

  Input$files_variance_order_by._(this._$data);

  factory Input$files_variance_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('size')) {
      final l$size = data['size'];
      result$data['size'] =
          l$size == null ? null : fromJson$Enum$order_by((l$size as String));
    }
    return Input$files_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get size => (_$data['size'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('size')) {
      final l$size = size;
      result$data['size'] =
          l$size == null ? null : toJson$Enum$order_by(l$size);
    }
    return result$data;
  }

  CopyWith$Input$files_variance_order_by<Input$files_variance_order_by>
      get copyWith => CopyWith$Input$files_variance_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$files_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (_$data.containsKey('size') != other._$data.containsKey('size')) {
      return false;
    }
    if (l$size != lOther$size) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$size = size;
    return Object.hashAll([_$data.containsKey('size') ? l$size : const {}]);
  }
}

abstract class CopyWith$Input$files_variance_order_by<TRes> {
  factory CopyWith$Input$files_variance_order_by(
    Input$files_variance_order_by instance,
    TRes Function(Input$files_variance_order_by) then,
  ) = _CopyWithImpl$Input$files_variance_order_by;

  factory CopyWith$Input$files_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$files_variance_order_by;

  TRes call({Enum$order_by? size});
}

class _CopyWithImpl$Input$files_variance_order_by<TRes>
    implements CopyWith$Input$files_variance_order_by<TRes> {
  _CopyWithImpl$Input$files_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$files_variance_order_by _instance;

  final TRes Function(Input$files_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? size = _undefined}) =>
      _then(Input$files_variance_order_by._({
        ..._instance._$data,
        if (size != _undefined) 'size': (size as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$files_variance_order_by<TRes>
    implements CopyWith$Input$files_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$files_variance_order_by(this._res);

  TRes _res;

  call({Enum$order_by? size}) => _res;
}

class Input$investment_aggregate_bool_exp {
  factory Input$investment_aggregate_bool_exp(
          {Input$investment_aggregate_bool_exp_count? count}) =>
      Input$investment_aggregate_bool_exp._({
        if (count != null) r'count': count,
      });

  Input$investment_aggregate_bool_exp._(this._$data);

  factory Input$investment_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$investment_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$investment_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investment_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$investment_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investment_aggregate_bool_exp<
          Input$investment_aggregate_bool_exp>
      get copyWith => CopyWith$Input$investment_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    return Object.hashAll([_$data.containsKey('count') ? l$count : const {}]);
  }
}

abstract class CopyWith$Input$investment_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$investment_aggregate_bool_exp(
    Input$investment_aggregate_bool_exp instance,
    TRes Function(Input$investment_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$investment_aggregate_bool_exp;

  factory CopyWith$Input$investment_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_aggregate_bool_exp;

  TRes call({Input$investment_aggregate_bool_exp_count? count});
  CopyWith$Input$investment_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$investment_aggregate_bool_exp<TRes>
    implements CopyWith$Input$investment_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$investment_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$investment_aggregate_bool_exp _instance;

  final TRes Function(Input$investment_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? count = _undefined}) =>
      _then(Input$investment_aggregate_bool_exp._({
        ..._instance._$data,
        if (count != _undefined)
          'count': (count as Input$investment_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$investment_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$investment_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$investment_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$investment_aggregate_bool_exp<TRes>
    implements CopyWith$Input$investment_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$investment_aggregate_bool_exp(this._res);

  TRes _res;

  call({Input$investment_aggregate_bool_exp_count? count}) => _res;
  CopyWith$Input$investment_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$investment_aggregate_bool_exp_count.stub(_res);
}

class Input$investment_aggregate_bool_exp_count {
  factory Input$investment_aggregate_bool_exp_count({
    List<Enum$investment_select_column>? arguments,
    bool? distinct,
    Input$investment_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$investment_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$investment_aggregate_bool_exp_count._(this._$data);

  factory Input$investment_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$investment_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$investment_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$investment_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$investment_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$investment_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$investment_bool_exp? get filter =>
      (_$data['filter'] as Input$investment_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$investment_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$investment_aggregate_bool_exp_count<
          Input$investment_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$investment_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$investment_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$investment_aggregate_bool_exp_count(
    Input$investment_aggregate_bool_exp_count instance,
    TRes Function(Input$investment_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$investment_aggregate_bool_exp_count;

  factory CopyWith$Input$investment_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_aggregate_bool_exp_count;

  TRes call({
    List<Enum$investment_select_column>? arguments,
    bool? distinct,
    Input$investment_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$investment_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$investment_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$investment_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$investment_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$investment_aggregate_bool_exp_count _instance;

  final TRes Function(Input$investment_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$investment_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$investment_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$investment_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$investment_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$investment_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$investment_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$investment_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$investment_select_column>? arguments,
    bool? distinct,
    Input$investment_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$investment_bool_exp<TRes> get filter =>
      CopyWith$Input$investment_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$investment_aggregate_order_by {
  factory Input$investment_aggregate_order_by({
    Input$investment_avg_order_by? avg,
    Enum$order_by? count,
    Input$investment_max_order_by? max,
    Input$investment_min_order_by? min,
    Input$investment_stddev_order_by? stddev,
    Input$investment_stddev_pop_order_by? stddev_pop,
    Input$investment_stddev_samp_order_by? stddev_samp,
    Input$investment_sum_order_by? sum,
    Input$investment_var_pop_order_by? var_pop,
    Input$investment_var_samp_order_by? var_samp,
    Input$investment_variance_order_by? variance,
  }) =>
      Input$investment_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$investment_aggregate_order_by._(this._$data);

  factory Input$investment_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$investment_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$investment_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$investment_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$investment_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$investment_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$investment_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$investment_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$investment_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$investment_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$investment_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$investment_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investment_avg_order_by? get avg =>
      (_$data['avg'] as Input$investment_avg_order_by?);
  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$investment_max_order_by? get max =>
      (_$data['max'] as Input$investment_max_order_by?);
  Input$investment_min_order_by? get min =>
      (_$data['min'] as Input$investment_min_order_by?);
  Input$investment_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$investment_stddev_order_by?);
  Input$investment_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$investment_stddev_pop_order_by?);
  Input$investment_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$investment_stddev_samp_order_by?);
  Input$investment_sum_order_by? get sum =>
      (_$data['sum'] as Input$investment_sum_order_by?);
  Input$investment_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$investment_var_pop_order_by?);
  Input$investment_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$investment_var_samp_order_by?);
  Input$investment_variance_order_by? get variance =>
      (_$data['variance'] as Input$investment_variance_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investment_aggregate_order_by<
          Input$investment_aggregate_order_by>
      get copyWith => CopyWith$Input$investment_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_aggregate_order_by<TRes> {
  factory CopyWith$Input$investment_aggregate_order_by(
    Input$investment_aggregate_order_by instance,
    TRes Function(Input$investment_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$investment_aggregate_order_by;

  factory CopyWith$Input$investment_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_aggregate_order_by;

  TRes call({
    Input$investment_avg_order_by? avg,
    Enum$order_by? count,
    Input$investment_max_order_by? max,
    Input$investment_min_order_by? min,
    Input$investment_stddev_order_by? stddev,
    Input$investment_stddev_pop_order_by? stddev_pop,
    Input$investment_stddev_samp_order_by? stddev_samp,
    Input$investment_sum_order_by? sum,
    Input$investment_var_pop_order_by? var_pop,
    Input$investment_var_samp_order_by? var_samp,
    Input$investment_variance_order_by? variance,
  });
  CopyWith$Input$investment_avg_order_by<TRes> get avg;
  CopyWith$Input$investment_max_order_by<TRes> get max;
  CopyWith$Input$investment_min_order_by<TRes> get min;
  CopyWith$Input$investment_stddev_order_by<TRes> get stddev;
  CopyWith$Input$investment_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$investment_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$investment_sum_order_by<TRes> get sum;
  CopyWith$Input$investment_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$investment_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$investment_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$investment_aggregate_order_by<TRes>
    implements CopyWith$Input$investment_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$investment_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_aggregate_order_by _instance;

  final TRes Function(Input$investment_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$investment_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$investment_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$investment_max_order_by?),
        if (min != _undefined) 'min': (min as Input$investment_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$investment_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$investment_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp':
              (stddev_samp as Input$investment_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$investment_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$investment_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$investment_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$investment_variance_order_by?),
      }));
  CopyWith$Input$investment_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$investment_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_avg_order_by(
            local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$investment_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$investment_max_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$investment_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$investment_min_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_min_order_by(
            local$min, (e) => call(min: e));
  }

  CopyWith$Input$investment_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$investment_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$investment_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$investment_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$investment_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$investment_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$investment_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$investment_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_sum_order_by(
            local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$investment_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$investment_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$investment_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$investment_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$investment_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$investment_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$investment_aggregate_order_by<TRes>
    implements CopyWith$Input$investment_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$investment_avg_order_by? avg,
    Enum$order_by? count,
    Input$investment_max_order_by? max,
    Input$investment_min_order_by? min,
    Input$investment_stddev_order_by? stddev,
    Input$investment_stddev_pop_order_by? stddev_pop,
    Input$investment_stddev_samp_order_by? stddev_samp,
    Input$investment_sum_order_by? sum,
    Input$investment_var_pop_order_by? var_pop,
    Input$investment_var_samp_order_by? var_samp,
    Input$investment_variance_order_by? variance,
  }) =>
      _res;
  CopyWith$Input$investment_avg_order_by<TRes> get avg =>
      CopyWith$Input$investment_avg_order_by.stub(_res);
  CopyWith$Input$investment_max_order_by<TRes> get max =>
      CopyWith$Input$investment_max_order_by.stub(_res);
  CopyWith$Input$investment_min_order_by<TRes> get min =>
      CopyWith$Input$investment_min_order_by.stub(_res);
  CopyWith$Input$investment_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$investment_stddev_order_by.stub(_res);
  CopyWith$Input$investment_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$investment_stddev_pop_order_by.stub(_res);
  CopyWith$Input$investment_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$investment_stddev_samp_order_by.stub(_res);
  CopyWith$Input$investment_sum_order_by<TRes> get sum =>
      CopyWith$Input$investment_sum_order_by.stub(_res);
  CopyWith$Input$investment_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$investment_var_pop_order_by.stub(_res);
  CopyWith$Input$investment_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$investment_var_samp_order_by.stub(_res);
  CopyWith$Input$investment_variance_order_by<TRes> get variance =>
      CopyWith$Input$investment_variance_order_by.stub(_res);
}

class Input$investment_arr_rel_insert_input {
  factory Input$investment_arr_rel_insert_input({
    required List<Input$investment_insert_input> data,
    Input$investment_on_conflict? on_conflict,
  }) =>
      Input$investment_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$investment_arr_rel_insert_input._(this._$data);

  factory Input$investment_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$investment_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$investment_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$investment_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$investment_insert_input> get data =>
      (_$data['data'] as List<Input$investment_insert_input>);
  Input$investment_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$investment_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investment_arr_rel_insert_input<
          Input$investment_arr_rel_insert_input>
      get copyWith => CopyWith$Input$investment_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$investment_arr_rel_insert_input(
    Input$investment_arr_rel_insert_input instance,
    TRes Function(Input$investment_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$investment_arr_rel_insert_input;

  factory CopyWith$Input$investment_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_arr_rel_insert_input;

  TRes call({
    List<Input$investment_insert_input>? data,
    Input$investment_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$investment_insert_input> Function(
              Iterable<
                  CopyWith$Input$investment_insert_input<
                      Input$investment_insert_input>>)
          _fn);
  CopyWith$Input$investment_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$investment_arr_rel_insert_input<TRes>
    implements CopyWith$Input$investment_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$investment_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$investment_arr_rel_insert_input _instance;

  final TRes Function(Input$investment_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$investment_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$investment_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$investment_on_conflict?),
      }));
  TRes data(
          Iterable<Input$investment_insert_input> Function(
                  Iterable<
                      CopyWith$Input$investment_insert_input<
                          Input$investment_insert_input>>)
              _fn) =>
      call(
          data: _fn(
              _instance.data.map((e) => CopyWith$Input$investment_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$investment_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$investment_on_conflict.stub(_then(_instance))
        : CopyWith$Input$investment_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$investment_arr_rel_insert_input<TRes>
    implements CopyWith$Input$investment_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$investment_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$investment_insert_input>? data,
    Input$investment_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$investment_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$investment_on_conflict.stub(_res);
}

class Input$investment_avg_order_by {
  factory Input$investment_avg_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_avg_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_avg_order_by._(this._$data);

  factory Input$investment_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_avg_order_by<Input$investment_avg_order_by>
      get copyWith => CopyWith$Input$investment_avg_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_avg_order_by<TRes> {
  factory CopyWith$Input$investment_avg_order_by(
    Input$investment_avg_order_by instance,
    TRes Function(Input$investment_avg_order_by) then,
  ) = _CopyWithImpl$Input$investment_avg_order_by;

  factory CopyWith$Input$investment_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_avg_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_avg_order_by<TRes>
    implements CopyWith$Input$investment_avg_order_by<TRes> {
  _CopyWithImpl$Input$investment_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_avg_order_by _instance;

  final TRes Function(Input$investment_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_avg_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_avg_order_by<TRes>
    implements CopyWith$Input$investment_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investment_bool_exp {
  factory Input$investment_bool_exp({
    List<Input$investment_bool_exp>? $_and,
    Input$investment_bool_exp? $_not,
    List<Input$investment_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$Int_comparison_exp? investment_amount,
    Input$Int_comparison_exp? investment_id,
    Input$investor_bool_exp? investor,
    Input$Int_comparison_exp? investor_id,
    Input$payment_investment_bool_exp? payment_investment,
    Input$proposal_bool_exp? proposal,
    Input$Int_comparison_exp? proposal_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      Input$investment_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor != null) r'investor': investor,
        if (investor_id != null) r'investor_id': investor_id,
        if (payment_investment != null)
          r'payment_investment': payment_investment,
        if (proposal != null) r'proposal': proposal,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$investment_bool_exp._(this._$data);

  factory Input$investment_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$investment_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$investment_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$investment_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$investment_amount as Map<String, dynamic>));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$investment_id as Map<String, dynamic>));
    }
    if (data.containsKey('investor')) {
      final l$investor = data['investor'];
      result$data['investor'] = l$investor == null
          ? null
          : Input$investor_bool_exp.fromJson(
              (l$investor as Map<String, dynamic>));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$investor_id as Map<String, dynamic>));
    }
    if (data.containsKey('payment_investment')) {
      final l$payment_investment = data['payment_investment'];
      result$data['payment_investment'] = l$payment_investment == null
          ? null
          : Input$payment_investment_bool_exp.fromJson(
              (l$payment_investment as Map<String, dynamic>));
    }
    if (data.containsKey('proposal')) {
      final l$proposal = data['proposal'];
      result$data['proposal'] = l$proposal == null
          ? null
          : Input$proposal_bool_exp.fromJson(
              (l$proposal as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$proposal_id as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    return Input$investment_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$investment_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$investment_bool_exp>?);
  Input$investment_bool_exp? get $_not =>
      (_$data['_not'] as Input$investment_bool_exp?);
  List<Input$investment_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$investment_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$Int_comparison_exp? get investment_amount =>
      (_$data['investment_amount'] as Input$Int_comparison_exp?);
  Input$Int_comparison_exp? get investment_id =>
      (_$data['investment_id'] as Input$Int_comparison_exp?);
  Input$investor_bool_exp? get investor =>
      (_$data['investor'] as Input$investor_bool_exp?);
  Input$Int_comparison_exp? get investor_id =>
      (_$data['investor_id'] as Input$Int_comparison_exp?);
  Input$payment_investment_bool_exp? get payment_investment =>
      (_$data['payment_investment'] as Input$payment_investment_bool_exp?);
  Input$proposal_bool_exp? get proposal =>
      (_$data['proposal'] as Input$proposal_bool_exp?);
  Input$Int_comparison_exp? get proposal_id =>
      (_$data['proposal_id'] as Input$Int_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount?.toJson();
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id?.toJson();
    }
    if (_$data.containsKey('investor')) {
      final l$investor = investor;
      result$data['investor'] = l$investor?.toJson();
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] = l$investor_id?.toJson();
    }
    if (_$data.containsKey('payment_investment')) {
      final l$payment_investment = payment_investment;
      result$data['payment_investment'] = l$payment_investment?.toJson();
    }
    if (_$data.containsKey('proposal')) {
      final l$proposal = proposal;
      result$data['proposal'] = l$proposal?.toJson();
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] = l$proposal_id?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investment_bool_exp<Input$investment_bool_exp> get copyWith =>
      CopyWith$Input$investment_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor = investor;
    final lOther$investor = other.investor;
    if (_$data.containsKey('investor') !=
        other._$data.containsKey('investor')) {
      return false;
    }
    if (l$investor != lOther$investor) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$payment_investment = payment_investment;
    final lOther$payment_investment = other.payment_investment;
    if (_$data.containsKey('payment_investment') !=
        other._$data.containsKey('payment_investment')) {
      return false;
    }
    if (l$payment_investment != lOther$payment_investment) {
      return false;
    }
    final l$proposal = proposal;
    final lOther$proposal = other.proposal;
    if (_$data.containsKey('proposal') !=
        other._$data.containsKey('proposal')) {
      return false;
    }
    if (l$proposal != lOther$proposal) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor = investor;
    final l$investor_id = investor_id;
    final l$payment_investment = payment_investment;
    final l$proposal = proposal;
    final l$proposal_id = proposal_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor') ? l$investor : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('payment_investment')
          ? l$payment_investment
          : const {},
      _$data.containsKey('proposal') ? l$proposal : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_bool_exp<TRes> {
  factory CopyWith$Input$investment_bool_exp(
    Input$investment_bool_exp instance,
    TRes Function(Input$investment_bool_exp) then,
  ) = _CopyWithImpl$Input$investment_bool_exp;

  factory CopyWith$Input$investment_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_bool_exp;

  TRes call({
    List<Input$investment_bool_exp>? $_and,
    Input$investment_bool_exp? $_not,
    List<Input$investment_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$Int_comparison_exp? investment_amount,
    Input$Int_comparison_exp? investment_id,
    Input$investor_bool_exp? investor,
    Input$Int_comparison_exp? investor_id,
    Input$payment_investment_bool_exp? payment_investment,
    Input$proposal_bool_exp? proposal,
    Input$Int_comparison_exp? proposal_id,
    Input$timestamptz_comparison_exp? updated_at,
  });
  TRes $_and(
      Iterable<Input$investment_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$investment_bool_exp<
                      Input$investment_bool_exp>>?)
          _fn);
  CopyWith$Input$investment_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$investment_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$investment_bool_exp<
                      Input$investment_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$Int_comparison_exp<TRes> get investment_amount;
  CopyWith$Input$Int_comparison_exp<TRes> get investment_id;
  CopyWith$Input$investor_bool_exp<TRes> get investor;
  CopyWith$Input$Int_comparison_exp<TRes> get investor_id;
  CopyWith$Input$payment_investment_bool_exp<TRes> get payment_investment;
  CopyWith$Input$proposal_bool_exp<TRes> get proposal;
  CopyWith$Input$Int_comparison_exp<TRes> get proposal_id;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
}

class _CopyWithImpl$Input$investment_bool_exp<TRes>
    implements CopyWith$Input$investment_bool_exp<TRes> {
  _CopyWithImpl$Input$investment_bool_exp(
    this._instance,
    this._then,
  );

  final Input$investment_bool_exp _instance;

  final TRes Function(Input$investment_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor = _undefined,
    Object? investor_id = _undefined,
    Object? payment_investment = _undefined,
    Object? proposal = _undefined,
    Object? proposal_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$investment_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$investment_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$investment_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$investment_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Input$Int_comparison_exp?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Input$Int_comparison_exp?),
        if (investor != _undefined)
          'investor': (investor as Input$investor_bool_exp?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Input$Int_comparison_exp?),
        if (payment_investment != _undefined)
          'payment_investment':
              (payment_investment as Input$payment_investment_bool_exp?),
        if (proposal != _undefined)
          'proposal': (proposal as Input$proposal_bool_exp?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Input$Int_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$investment_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$investment_bool_exp<
                          Input$investment_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(
              _instance.$_and?.map((e) => CopyWith$Input$investment_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$investment_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$investment_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$investment_bool_exp<
                          Input$investment_bool_exp>>?)
              _fn) =>
      call(
          $_or:
              _fn(_instance.$_or?.map((e) => CopyWith$Input$investment_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get investment_amount {
    final local$investment_amount = _instance.investment_amount;
    return local$investment_amount == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$investment_amount, (e) => call(investment_amount: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get investment_id {
    final local$investment_id = _instance.investment_id;
    return local$investment_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$investment_id, (e) => call(investment_id: e));
  }

  CopyWith$Input$investor_bool_exp<TRes> get investor {
    final local$investor = _instance.investor;
    return local$investor == null
        ? CopyWith$Input$investor_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investor_bool_exp(
            local$investor, (e) => call(investor: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get investor_id {
    final local$investor_id = _instance.investor_id;
    return local$investor_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$investor_id, (e) => call(investor_id: e));
  }

  CopyWith$Input$payment_investment_bool_exp<TRes> get payment_investment {
    final local$payment_investment = _instance.payment_investment;
    return local$payment_investment == null
        ? CopyWith$Input$payment_investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_investment_bool_exp(
            local$payment_investment, (e) => call(payment_investment: e));
  }

  CopyWith$Input$proposal_bool_exp<TRes> get proposal {
    final local$proposal = _instance.proposal;
    return local$proposal == null
        ? CopyWith$Input$proposal_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_bool_exp(
            local$proposal, (e) => call(proposal: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get proposal_id {
    final local$proposal_id = _instance.proposal_id;
    return local$proposal_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$proposal_id, (e) => call(proposal_id: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }
}

class _CopyWithStubImpl$Input$investment_bool_exp<TRes>
    implements CopyWith$Input$investment_bool_exp<TRes> {
  _CopyWithStubImpl$Input$investment_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$investment_bool_exp>? $_and,
    Input$investment_bool_exp? $_not,
    List<Input$investment_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$Int_comparison_exp? investment_amount,
    Input$Int_comparison_exp? investment_id,
    Input$investor_bool_exp? investor,
    Input$Int_comparison_exp? investor_id,
    Input$payment_investment_bool_exp? payment_investment,
    Input$proposal_bool_exp? proposal,
    Input$Int_comparison_exp? proposal_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$investment_bool_exp<TRes> get $_not =>
      CopyWith$Input$investment_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get investment_amount =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get investment_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$investor_bool_exp<TRes> get investor =>
      CopyWith$Input$investor_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get investor_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$payment_investment_bool_exp<TRes> get payment_investment =>
      CopyWith$Input$payment_investment_bool_exp.stub(_res);
  CopyWith$Input$proposal_bool_exp<TRes> get proposal =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get proposal_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$investment_inc_input {
  factory Input$investment_inc_input({
    int? investment_amount,
    int? investor_id,
    int? proposal_id,
  }) =>
      Input$investment_inc_input._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_inc_input._(this._$data);

  factory Input$investment_inc_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = (l$investment_amount as int?);
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = (l$investor_id as int?);
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = (l$proposal_id as int?);
    }
    return Input$investment_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get investment_amount => (_$data['investment_amount'] as int?);
  int? get investor_id => (_$data['investor_id'] as int?);
  int? get proposal_id => (_$data['proposal_id'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount;
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] = l$investor_id;
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] = l$proposal_id;
    }
    return result$data;
  }

  CopyWith$Input$investment_inc_input<Input$investment_inc_input>
      get copyWith => CopyWith$Input$investment_inc_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_inc_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_inc_input<TRes> {
  factory CopyWith$Input$investment_inc_input(
    Input$investment_inc_input instance,
    TRes Function(Input$investment_inc_input) then,
  ) = _CopyWithImpl$Input$investment_inc_input;

  factory CopyWith$Input$investment_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_inc_input;

  TRes call({
    int? investment_amount,
    int? investor_id,
    int? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_inc_input<TRes>
    implements CopyWith$Input$investment_inc_input<TRes> {
  _CopyWithImpl$Input$investment_inc_input(
    this._instance,
    this._then,
  );

  final Input$investment_inc_input _instance;

  final TRes Function(Input$investment_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_inc_input._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as int?),
        if (investor_id != _undefined) 'investor_id': (investor_id as int?),
        if (proposal_id != _undefined) 'proposal_id': (proposal_id as int?),
      }));
}

class _CopyWithStubImpl$Input$investment_inc_input<TRes>
    implements CopyWith$Input$investment_inc_input<TRes> {
  _CopyWithStubImpl$Input$investment_inc_input(this._res);

  TRes _res;

  call({
    int? investment_amount,
    int? investor_id,
    int? proposal_id,
  }) =>
      _res;
}

class Input$investment_insert_input {
  factory Input$investment_insert_input({
    DateTime? created_at,
    int? investment_amount,
    Input$investor_obj_rel_insert_input? investor,
    int? investor_id,
    Input$payment_investment_obj_rel_insert_input? payment_investment,
    Input$proposal_obj_rel_insert_input? proposal,
    int? proposal_id,
    DateTime? updated_at,
  }) =>
      Input$investment_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investor != null) r'investor': investor,
        if (investor_id != null) r'investor_id': investor_id,
        if (payment_investment != null)
          r'payment_investment': payment_investment,
        if (proposal != null) r'proposal': proposal,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$investment_insert_input._(this._$data);

  factory Input$investment_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = (l$investment_amount as int?);
    }
    if (data.containsKey('investor')) {
      final l$investor = data['investor'];
      result$data['investor'] = l$investor == null
          ? null
          : Input$investor_obj_rel_insert_input.fromJson(
              (l$investor as Map<String, dynamic>));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = (l$investor_id as int?);
    }
    if (data.containsKey('payment_investment')) {
      final l$payment_investment = data['payment_investment'];
      result$data['payment_investment'] = l$payment_investment == null
          ? null
          : Input$payment_investment_obj_rel_insert_input.fromJson(
              (l$payment_investment as Map<String, dynamic>));
    }
    if (data.containsKey('proposal')) {
      final l$proposal = data['proposal'];
      result$data['proposal'] = l$proposal == null
          ? null
          : Input$proposal_obj_rel_insert_input.fromJson(
              (l$proposal as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = (l$proposal_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$investment_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get investment_amount => (_$data['investment_amount'] as int?);
  Input$investor_obj_rel_insert_input? get investor =>
      (_$data['investor'] as Input$investor_obj_rel_insert_input?);
  int? get investor_id => (_$data['investor_id'] as int?);
  Input$payment_investment_obj_rel_insert_input? get payment_investment =>
      (_$data['payment_investment']
          as Input$payment_investment_obj_rel_insert_input?);
  Input$proposal_obj_rel_insert_input? get proposal =>
      (_$data['proposal'] as Input$proposal_obj_rel_insert_input?);
  int? get proposal_id => (_$data['proposal_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount;
    }
    if (_$data.containsKey('investor')) {
      final l$investor = investor;
      result$data['investor'] = l$investor?.toJson();
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] = l$investor_id;
    }
    if (_$data.containsKey('payment_investment')) {
      final l$payment_investment = payment_investment;
      result$data['payment_investment'] = l$payment_investment?.toJson();
    }
    if (_$data.containsKey('proposal')) {
      final l$proposal = proposal;
      result$data['proposal'] = l$proposal?.toJson();
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] = l$proposal_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$investment_insert_input<Input$investment_insert_input>
      get copyWith => CopyWith$Input$investment_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investor = investor;
    final lOther$investor = other.investor;
    if (_$data.containsKey('investor') !=
        other._$data.containsKey('investor')) {
      return false;
    }
    if (l$investor != lOther$investor) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$payment_investment = payment_investment;
    final lOther$payment_investment = other.payment_investment;
    if (_$data.containsKey('payment_investment') !=
        other._$data.containsKey('payment_investment')) {
      return false;
    }
    if (l$payment_investment != lOther$payment_investment) {
      return false;
    }
    final l$proposal = proposal;
    final lOther$proposal = other.proposal;
    if (_$data.containsKey('proposal') !=
        other._$data.containsKey('proposal')) {
      return false;
    }
    if (l$proposal != lOther$proposal) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_amount = investment_amount;
    final l$investor = investor;
    final l$investor_id = investor_id;
    final l$payment_investment = payment_investment;
    final l$proposal = proposal;
    final l$proposal_id = proposal_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investor') ? l$investor : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('payment_investment')
          ? l$payment_investment
          : const {},
      _$data.containsKey('proposal') ? l$proposal : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_insert_input<TRes> {
  factory CopyWith$Input$investment_insert_input(
    Input$investment_insert_input instance,
    TRes Function(Input$investment_insert_input) then,
  ) = _CopyWithImpl$Input$investment_insert_input;

  factory CopyWith$Input$investment_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_insert_input;

  TRes call({
    DateTime? created_at,
    int? investment_amount,
    Input$investor_obj_rel_insert_input? investor,
    int? investor_id,
    Input$payment_investment_obj_rel_insert_input? payment_investment,
    Input$proposal_obj_rel_insert_input? proposal,
    int? proposal_id,
    DateTime? updated_at,
  });
  CopyWith$Input$investor_obj_rel_insert_input<TRes> get investor;
  CopyWith$Input$payment_investment_obj_rel_insert_input<TRes>
      get payment_investment;
  CopyWith$Input$proposal_obj_rel_insert_input<TRes> get proposal;
}

class _CopyWithImpl$Input$investment_insert_input<TRes>
    implements CopyWith$Input$investment_insert_input<TRes> {
  _CopyWithImpl$Input$investment_insert_input(
    this._instance,
    this._then,
  );

  final Input$investment_insert_input _instance;

  final TRes Function(Input$investment_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_amount = _undefined,
    Object? investor = _undefined,
    Object? investor_id = _undefined,
    Object? payment_investment = _undefined,
    Object? proposal = _undefined,
    Object? proposal_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$investment_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as int?),
        if (investor != _undefined)
          'investor': (investor as Input$investor_obj_rel_insert_input?),
        if (investor_id != _undefined) 'investor_id': (investor_id as int?),
        if (payment_investment != _undefined)
          'payment_investment': (payment_investment
              as Input$payment_investment_obj_rel_insert_input?),
        if (proposal != _undefined)
          'proposal': (proposal as Input$proposal_obj_rel_insert_input?),
        if (proposal_id != _undefined) 'proposal_id': (proposal_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
  CopyWith$Input$investor_obj_rel_insert_input<TRes> get investor {
    final local$investor = _instance.investor;
    return local$investor == null
        ? CopyWith$Input$investor_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$investor_obj_rel_insert_input(
            local$investor, (e) => call(investor: e));
  }

  CopyWith$Input$payment_investment_obj_rel_insert_input<TRes>
      get payment_investment {
    final local$payment_investment = _instance.payment_investment;
    return local$payment_investment == null
        ? CopyWith$Input$payment_investment_obj_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$payment_investment_obj_rel_insert_input(
            local$payment_investment, (e) => call(payment_investment: e));
  }

  CopyWith$Input$proposal_obj_rel_insert_input<TRes> get proposal {
    final local$proposal = _instance.proposal;
    return local$proposal == null
        ? CopyWith$Input$proposal_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$proposal_obj_rel_insert_input(
            local$proposal, (e) => call(proposal: e));
  }
}

class _CopyWithStubImpl$Input$investment_insert_input<TRes>
    implements CopyWith$Input$investment_insert_input<TRes> {
  _CopyWithStubImpl$Input$investment_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? investment_amount,
    Input$investor_obj_rel_insert_input? investor,
    int? investor_id,
    Input$payment_investment_obj_rel_insert_input? payment_investment,
    Input$proposal_obj_rel_insert_input? proposal,
    int? proposal_id,
    DateTime? updated_at,
  }) =>
      _res;
  CopyWith$Input$investor_obj_rel_insert_input<TRes> get investor =>
      CopyWith$Input$investor_obj_rel_insert_input.stub(_res);
  CopyWith$Input$payment_investment_obj_rel_insert_input<TRes>
      get payment_investment =>
          CopyWith$Input$payment_investment_obj_rel_insert_input.stub(_res);
  CopyWith$Input$proposal_obj_rel_insert_input<TRes> get proposal =>
      CopyWith$Input$proposal_obj_rel_insert_input.stub(_res);
}

class Input$investment_max_order_by {
  factory Input$investment_max_order_by({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  }) =>
      Input$investment_max_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$investment_max_order_by._(this._$data);

  factory Input$investment_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$investment_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$investment_max_order_by<Input$investment_max_order_by>
      get copyWith => CopyWith$Input$investment_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_max_order_by<TRes> {
  factory CopyWith$Input$investment_max_order_by(
    Input$investment_max_order_by instance,
    TRes Function(Input$investment_max_order_by) then,
  ) = _CopyWithImpl$Input$investment_max_order_by;

  factory CopyWith$Input$investment_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_max_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$investment_max_order_by<TRes>
    implements CopyWith$Input$investment_max_order_by<TRes> {
  _CopyWithImpl$Input$investment_max_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_max_order_by _instance;

  final TRes Function(Input$investment_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$investment_max_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_max_order_by<TRes>
    implements CopyWith$Input$investment_max_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$investment_min_order_by {
  factory Input$investment_min_order_by({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  }) =>
      Input$investment_min_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$investment_min_order_by._(this._$data);

  factory Input$investment_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$investment_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$investment_min_order_by<Input$investment_min_order_by>
      get copyWith => CopyWith$Input$investment_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_min_order_by<TRes> {
  factory CopyWith$Input$investment_min_order_by(
    Input$investment_min_order_by instance,
    TRes Function(Input$investment_min_order_by) then,
  ) = _CopyWithImpl$Input$investment_min_order_by;

  factory CopyWith$Input$investment_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_min_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$investment_min_order_by<TRes>
    implements CopyWith$Input$investment_min_order_by<TRes> {
  _CopyWithImpl$Input$investment_min_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_min_order_by _instance;

  final TRes Function(Input$investment_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$investment_min_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_min_order_by<TRes>
    implements CopyWith$Input$investment_min_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$investment_obj_rel_insert_input {
  factory Input$investment_obj_rel_insert_input({
    required Input$investment_insert_input data,
    Input$investment_on_conflict? on_conflict,
  }) =>
      Input$investment_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$investment_obj_rel_insert_input._(this._$data);

  factory Input$investment_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = Input$investment_insert_input.fromJson(
        (l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$investment_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$investment_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investment_insert_input get data =>
      (_$data['data'] as Input$investment_insert_input);
  Input$investment_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$investment_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investment_obj_rel_insert_input<
          Input$investment_obj_rel_insert_input>
      get copyWith => CopyWith$Input$investment_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$investment_obj_rel_insert_input(
    Input$investment_obj_rel_insert_input instance,
    TRes Function(Input$investment_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$investment_obj_rel_insert_input;

  factory CopyWith$Input$investment_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_obj_rel_insert_input;

  TRes call({
    Input$investment_insert_input? data,
    Input$investment_on_conflict? on_conflict,
  });
  CopyWith$Input$investment_insert_input<TRes> get data;
  CopyWith$Input$investment_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$investment_obj_rel_insert_input<TRes>
    implements CopyWith$Input$investment_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$investment_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$investment_obj_rel_insert_input _instance;

  final TRes Function(Input$investment_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$investment_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$investment_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$investment_on_conflict?),
      }));
  CopyWith$Input$investment_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$investment_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$investment_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$investment_on_conflict.stub(_then(_instance))
        : CopyWith$Input$investment_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$investment_obj_rel_insert_input<TRes>
    implements CopyWith$Input$investment_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$investment_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$investment_insert_input? data,
    Input$investment_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$investment_insert_input<TRes> get data =>
      CopyWith$Input$investment_insert_input.stub(_res);
  CopyWith$Input$investment_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$investment_on_conflict.stub(_res);
}

class Input$investment_on_conflict {
  factory Input$investment_on_conflict({
    required Enum$investment_constraint constraint,
    required List<Enum$investment_update_column> update_columns,
    Input$investment_bool_exp? where,
  }) =>
      Input$investment_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$investment_on_conflict._(this._$data);

  factory Input$investment_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$investment_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$investment_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$investment_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$investment_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$investment_constraint get constraint =>
      (_$data['constraint'] as Enum$investment_constraint);
  List<Enum$investment_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$investment_update_column>);
  Input$investment_bool_exp? get where =>
      (_$data['where'] as Input$investment_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$investment_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$investment_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investment_on_conflict<Input$investment_on_conflict>
      get copyWith => CopyWith$Input$investment_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_on_conflict<TRes> {
  factory CopyWith$Input$investment_on_conflict(
    Input$investment_on_conflict instance,
    TRes Function(Input$investment_on_conflict) then,
  ) = _CopyWithImpl$Input$investment_on_conflict;

  factory CopyWith$Input$investment_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_on_conflict;

  TRes call({
    Enum$investment_constraint? constraint,
    List<Enum$investment_update_column>? update_columns,
    Input$investment_bool_exp? where,
  });
  CopyWith$Input$investment_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$investment_on_conflict<TRes>
    implements CopyWith$Input$investment_on_conflict<TRes> {
  _CopyWithImpl$Input$investment_on_conflict(
    this._instance,
    this._then,
  );

  final Input$investment_on_conflict _instance;

  final TRes Function(Input$investment_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$investment_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$investment_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$investment_update_column>),
        if (where != _undefined) 'where': (where as Input$investment_bool_exp?),
      }));
  CopyWith$Input$investment_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$investment_on_conflict<TRes>
    implements CopyWith$Input$investment_on_conflict<TRes> {
  _CopyWithStubImpl$Input$investment_on_conflict(this._res);

  TRes _res;

  call({
    Enum$investment_constraint? constraint,
    List<Enum$investment_update_column>? update_columns,
    Input$investment_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$investment_bool_exp<TRes> get where =>
      CopyWith$Input$investment_bool_exp.stub(_res);
}

class Input$investment_order_by {
  factory Input$investment_order_by({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Input$investor_order_by? investor,
    Enum$order_by? investor_id,
    Input$payment_investment_order_by? payment_investment,
    Input$proposal_order_by? proposal,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  }) =>
      Input$investment_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor != null) r'investor': investor,
        if (investor_id != null) r'investor_id': investor_id,
        if (payment_investment != null)
          r'payment_investment': payment_investment,
        if (proposal != null) r'proposal': proposal,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$investment_order_by._(this._$data);

  factory Input$investment_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor')) {
      final l$investor = data['investor'];
      result$data['investor'] = l$investor == null
          ? null
          : Input$investor_order_by.fromJson(
              (l$investor as Map<String, dynamic>));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('payment_investment')) {
      final l$payment_investment = data['payment_investment'];
      result$data['payment_investment'] = l$payment_investment == null
          ? null
          : Input$payment_investment_order_by.fromJson(
              (l$payment_investment as Map<String, dynamic>));
    }
    if (data.containsKey('proposal')) {
      final l$proposal = data['proposal'];
      result$data['proposal'] = l$proposal == null
          ? null
          : Input$proposal_order_by.fromJson(
              (l$proposal as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$investment_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Input$investor_order_by? get investor =>
      (_$data['investor'] as Input$investor_order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Input$payment_investment_order_by? get payment_investment =>
      (_$data['payment_investment'] as Input$payment_investment_order_by?);
  Input$proposal_order_by? get proposal =>
      (_$data['proposal'] as Input$proposal_order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor')) {
      final l$investor = investor;
      result$data['investor'] = l$investor?.toJson();
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('payment_investment')) {
      final l$payment_investment = payment_investment;
      result$data['payment_investment'] = l$payment_investment?.toJson();
    }
    if (_$data.containsKey('proposal')) {
      final l$proposal = proposal;
      result$data['proposal'] = l$proposal?.toJson();
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$investment_order_by<Input$investment_order_by> get copyWith =>
      CopyWith$Input$investment_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor = investor;
    final lOther$investor = other.investor;
    if (_$data.containsKey('investor') !=
        other._$data.containsKey('investor')) {
      return false;
    }
    if (l$investor != lOther$investor) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$payment_investment = payment_investment;
    final lOther$payment_investment = other.payment_investment;
    if (_$data.containsKey('payment_investment') !=
        other._$data.containsKey('payment_investment')) {
      return false;
    }
    if (l$payment_investment != lOther$payment_investment) {
      return false;
    }
    final l$proposal = proposal;
    final lOther$proposal = other.proposal;
    if (_$data.containsKey('proposal') !=
        other._$data.containsKey('proposal')) {
      return false;
    }
    if (l$proposal != lOther$proposal) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor = investor;
    final l$investor_id = investor_id;
    final l$payment_investment = payment_investment;
    final l$proposal = proposal;
    final l$proposal_id = proposal_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor') ? l$investor : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('payment_investment')
          ? l$payment_investment
          : const {},
      _$data.containsKey('proposal') ? l$proposal : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_order_by<TRes> {
  factory CopyWith$Input$investment_order_by(
    Input$investment_order_by instance,
    TRes Function(Input$investment_order_by) then,
  ) = _CopyWithImpl$Input$investment_order_by;

  factory CopyWith$Input$investment_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Input$investor_order_by? investor,
    Enum$order_by? investor_id,
    Input$payment_investment_order_by? payment_investment,
    Input$proposal_order_by? proposal,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  });
  CopyWith$Input$investor_order_by<TRes> get investor;
  CopyWith$Input$payment_investment_order_by<TRes> get payment_investment;
  CopyWith$Input$proposal_order_by<TRes> get proposal;
}

class _CopyWithImpl$Input$investment_order_by<TRes>
    implements CopyWith$Input$investment_order_by<TRes> {
  _CopyWithImpl$Input$investment_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_order_by _instance;

  final TRes Function(Input$investment_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor = _undefined,
    Object? investor_id = _undefined,
    Object? payment_investment = _undefined,
    Object? proposal = _undefined,
    Object? proposal_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$investment_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor != _undefined)
          'investor': (investor as Input$investor_order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (payment_investment != _undefined)
          'payment_investment':
              (payment_investment as Input$payment_investment_order_by?),
        if (proposal != _undefined)
          'proposal': (proposal as Input$proposal_order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
  CopyWith$Input$investor_order_by<TRes> get investor {
    final local$investor = _instance.investor;
    return local$investor == null
        ? CopyWith$Input$investor_order_by.stub(_then(_instance))
        : CopyWith$Input$investor_order_by(
            local$investor, (e) => call(investor: e));
  }

  CopyWith$Input$payment_investment_order_by<TRes> get payment_investment {
    final local$payment_investment = _instance.payment_investment;
    return local$payment_investment == null
        ? CopyWith$Input$payment_investment_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_investment_order_by(
            local$payment_investment, (e) => call(payment_investment: e));
  }

  CopyWith$Input$proposal_order_by<TRes> get proposal {
    final local$proposal = _instance.proposal;
    return local$proposal == null
        ? CopyWith$Input$proposal_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_order_by(
            local$proposal, (e) => call(proposal: e));
  }
}

class _CopyWithStubImpl$Input$investment_order_by<TRes>
    implements CopyWith$Input$investment_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Input$investor_order_by? investor,
    Enum$order_by? investor_id,
    Input$payment_investment_order_by? payment_investment,
    Input$proposal_order_by? proposal,
    Enum$order_by? proposal_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
  CopyWith$Input$investor_order_by<TRes> get investor =>
      CopyWith$Input$investor_order_by.stub(_res);
  CopyWith$Input$payment_investment_order_by<TRes> get payment_investment =>
      CopyWith$Input$payment_investment_order_by.stub(_res);
  CopyWith$Input$proposal_order_by<TRes> get proposal =>
      CopyWith$Input$proposal_order_by.stub(_res);
}

class Input$investment_pk_columns_input {
  factory Input$investment_pk_columns_input({required int investment_id}) =>
      Input$investment_pk_columns_input._({
        r'investment_id': investment_id,
      });

  Input$investment_pk_columns_input._(this._$data);

  factory Input$investment_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$investment_id = data['investment_id'];
    result$data['investment_id'] = (l$investment_id as int);
    return Input$investment_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int get investment_id => (_$data['investment_id'] as int);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$investment_id = investment_id;
    result$data['investment_id'] = l$investment_id;
    return result$data;
  }

  CopyWith$Input$investment_pk_columns_input<Input$investment_pk_columns_input>
      get copyWith => CopyWith$Input$investment_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_id = investment_id;
    return Object.hashAll([l$investment_id]);
  }
}

abstract class CopyWith$Input$investment_pk_columns_input<TRes> {
  factory CopyWith$Input$investment_pk_columns_input(
    Input$investment_pk_columns_input instance,
    TRes Function(Input$investment_pk_columns_input) then,
  ) = _CopyWithImpl$Input$investment_pk_columns_input;

  factory CopyWith$Input$investment_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_pk_columns_input;

  TRes call({int? investment_id});
}

class _CopyWithImpl$Input$investment_pk_columns_input<TRes>
    implements CopyWith$Input$investment_pk_columns_input<TRes> {
  _CopyWithImpl$Input$investment_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$investment_pk_columns_input _instance;

  final TRes Function(Input$investment_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? investment_id = _undefined}) =>
      _then(Input$investment_pk_columns_input._({
        ..._instance._$data,
        if (investment_id != _undefined && investment_id != null)
          'investment_id': (investment_id as int),
      }));
}

class _CopyWithStubImpl$Input$investment_pk_columns_input<TRes>
    implements CopyWith$Input$investment_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$investment_pk_columns_input(this._res);

  TRes _res;

  call({int? investment_id}) => _res;
}

class Input$investment_set_input {
  factory Input$investment_set_input({
    DateTime? created_at,
    int? investment_amount,
    int? investor_id,
    int? proposal_id,
    DateTime? updated_at,
  }) =>
      Input$investment_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$investment_set_input._(this._$data);

  factory Input$investment_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = (l$investment_amount as int?);
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = (l$investor_id as int?);
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = (l$proposal_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$investment_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get investment_amount => (_$data['investment_amount'] as int?);
  int? get investor_id => (_$data['investor_id'] as int?);
  int? get proposal_id => (_$data['proposal_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount;
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] = l$investor_id;
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] = l$proposal_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$investment_set_input<Input$investment_set_input>
      get copyWith => CopyWith$Input$investment_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_amount = investment_amount;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_set_input<TRes> {
  factory CopyWith$Input$investment_set_input(
    Input$investment_set_input instance,
    TRes Function(Input$investment_set_input) then,
  ) = _CopyWithImpl$Input$investment_set_input;

  factory CopyWith$Input$investment_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_set_input;

  TRes call({
    DateTime? created_at,
    int? investment_amount,
    int? investor_id,
    int? proposal_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$investment_set_input<TRes>
    implements CopyWith$Input$investment_set_input<TRes> {
  _CopyWithImpl$Input$investment_set_input(
    this._instance,
    this._then,
  );

  final Input$investment_set_input _instance;

  final TRes Function(Input$investment_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_amount = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$investment_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as int?),
        if (investor_id != _undefined) 'investor_id': (investor_id as int?),
        if (proposal_id != _undefined) 'proposal_id': (proposal_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$investment_set_input<TRes>
    implements CopyWith$Input$investment_set_input<TRes> {
  _CopyWithStubImpl$Input$investment_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? investment_amount,
    int? investor_id,
    int? proposal_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$investment_stddev_order_by {
  factory Input$investment_stddev_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_stddev_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_stddev_order_by._(this._$data);

  factory Input$investment_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_stddev_order_by<Input$investment_stddev_order_by>
      get copyWith => CopyWith$Input$investment_stddev_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_stddev_order_by<TRes> {
  factory CopyWith$Input$investment_stddev_order_by(
    Input$investment_stddev_order_by instance,
    TRes Function(Input$investment_stddev_order_by) then,
  ) = _CopyWithImpl$Input$investment_stddev_order_by;

  factory CopyWith$Input$investment_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_stddev_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_stddev_order_by<TRes>
    implements CopyWith$Input$investment_stddev_order_by<TRes> {
  _CopyWithImpl$Input$investment_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_stddev_order_by _instance;

  final TRes Function(Input$investment_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_stddev_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_stddev_order_by<TRes>
    implements CopyWith$Input$investment_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investment_stddev_pop_order_by {
  factory Input$investment_stddev_pop_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_stddev_pop_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_stddev_pop_order_by._(this._$data);

  factory Input$investment_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_stddev_pop_order_by<
          Input$investment_stddev_pop_order_by>
      get copyWith => CopyWith$Input$investment_stddev_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$investment_stddev_pop_order_by(
    Input$investment_stddev_pop_order_by instance,
    TRes Function(Input$investment_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$investment_stddev_pop_order_by;

  factory CopyWith$Input$investment_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_stddev_pop_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_stddev_pop_order_by<TRes>
    implements CopyWith$Input$investment_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$investment_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_stddev_pop_order_by _instance;

  final TRes Function(Input$investment_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_stddev_pop_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_stddev_pop_order_by<TRes>
    implements CopyWith$Input$investment_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investment_stddev_samp_order_by {
  factory Input$investment_stddev_samp_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_stddev_samp_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_stddev_samp_order_by._(this._$data);

  factory Input$investment_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_stddev_samp_order_by<
          Input$investment_stddev_samp_order_by>
      get copyWith => CopyWith$Input$investment_stddev_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$investment_stddev_samp_order_by(
    Input$investment_stddev_samp_order_by instance,
    TRes Function(Input$investment_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$investment_stddev_samp_order_by;

  factory CopyWith$Input$investment_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_stddev_samp_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_stddev_samp_order_by<TRes>
    implements CopyWith$Input$investment_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$investment_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_stddev_samp_order_by _instance;

  final TRes Function(Input$investment_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_stddev_samp_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_stddev_samp_order_by<TRes>
    implements CopyWith$Input$investment_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investment_stream_cursor_input {
  factory Input$investment_stream_cursor_input({
    required Input$investment_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$investment_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$investment_stream_cursor_input._(this._$data);

  factory Input$investment_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$investment_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$investment_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investment_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$investment_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$investment_stream_cursor_input<
          Input$investment_stream_cursor_input>
      get copyWith => CopyWith$Input$investment_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_stream_cursor_input<TRes> {
  factory CopyWith$Input$investment_stream_cursor_input(
    Input$investment_stream_cursor_input instance,
    TRes Function(Input$investment_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$investment_stream_cursor_input;

  factory CopyWith$Input$investment_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_stream_cursor_input;

  TRes call({
    Input$investment_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$investment_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$investment_stream_cursor_input<TRes>
    implements CopyWith$Input$investment_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$investment_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$investment_stream_cursor_input _instance;

  final TRes Function(Input$investment_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$investment_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$investment_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$investment_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$investment_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$investment_stream_cursor_input<TRes>
    implements CopyWith$Input$investment_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$investment_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$investment_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$investment_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$investment_stream_cursor_value_input.stub(_res);
}

class Input$investment_stream_cursor_value_input {
  factory Input$investment_stream_cursor_value_input({
    DateTime? created_at,
    int? investment_amount,
    int? investment_id,
    int? investor_id,
    int? proposal_id,
    DateTime? updated_at,
  }) =>
      Input$investment_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$investment_stream_cursor_value_input._(this._$data);

  factory Input$investment_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = (l$investment_amount as int?);
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = (l$investment_id as int?);
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = (l$investor_id as int?);
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = (l$proposal_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$investment_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get investment_amount => (_$data['investment_amount'] as int?);
  int? get investment_id => (_$data['investment_id'] as int?);
  int? get investor_id => (_$data['investor_id'] as int?);
  int? get proposal_id => (_$data['proposal_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount;
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id;
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] = l$investor_id;
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] = l$proposal_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$investment_stream_cursor_value_input<
          Input$investment_stream_cursor_value_input>
      get copyWith => CopyWith$Input$investment_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$investment_stream_cursor_value_input(
    Input$investment_stream_cursor_value_input instance,
    TRes Function(Input$investment_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$investment_stream_cursor_value_input;

  factory CopyWith$Input$investment_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    int? investment_amount,
    int? investment_id,
    int? investor_id,
    int? proposal_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$investment_stream_cursor_value_input<TRes>
    implements CopyWith$Input$investment_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$investment_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$investment_stream_cursor_value_input _instance;

  final TRes Function(Input$investment_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$investment_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as int?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as int?),
        if (investor_id != _undefined) 'investor_id': (investor_id as int?),
        if (proposal_id != _undefined) 'proposal_id': (proposal_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$investment_stream_cursor_value_input<TRes>
    implements CopyWith$Input$investment_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$investment_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? investment_amount,
    int? investment_id,
    int? investor_id,
    int? proposal_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$investment_sum_order_by {
  factory Input$investment_sum_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_sum_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_sum_order_by._(this._$data);

  factory Input$investment_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_sum_order_by<Input$investment_sum_order_by>
      get copyWith => CopyWith$Input$investment_sum_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_sum_order_by<TRes> {
  factory CopyWith$Input$investment_sum_order_by(
    Input$investment_sum_order_by instance,
    TRes Function(Input$investment_sum_order_by) then,
  ) = _CopyWithImpl$Input$investment_sum_order_by;

  factory CopyWith$Input$investment_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_sum_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_sum_order_by<TRes>
    implements CopyWith$Input$investment_sum_order_by<TRes> {
  _CopyWithImpl$Input$investment_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_sum_order_by _instance;

  final TRes Function(Input$investment_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_sum_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_sum_order_by<TRes>
    implements CopyWith$Input$investment_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investment_updates {
  factory Input$investment_updates({
    Input$investment_inc_input? $_inc,
    Input$investment_set_input? $_set,
    required Input$investment_bool_exp where,
  }) =>
      Input$investment_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$investment_updates._(this._$data);

  factory Input$investment_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$investment_inc_input.fromJson(
              (l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$investment_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$investment_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$investment_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investment_inc_input? get $_inc =>
      (_$data['_inc'] as Input$investment_inc_input?);
  Input$investment_set_input? get $_set =>
      (_$data['_set'] as Input$investment_set_input?);
  Input$investment_bool_exp get where =>
      (_$data['where'] as Input$investment_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$investment_updates<Input$investment_updates> get copyWith =>
      CopyWith$Input$investment_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$investment_updates<TRes> {
  factory CopyWith$Input$investment_updates(
    Input$investment_updates instance,
    TRes Function(Input$investment_updates) then,
  ) = _CopyWithImpl$Input$investment_updates;

  factory CopyWith$Input$investment_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_updates;

  TRes call({
    Input$investment_inc_input? $_inc,
    Input$investment_set_input? $_set,
    Input$investment_bool_exp? where,
  });
  CopyWith$Input$investment_inc_input<TRes> get $_inc;
  CopyWith$Input$investment_set_input<TRes> get $_set;
  CopyWith$Input$investment_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$investment_updates<TRes>
    implements CopyWith$Input$investment_updates<TRes> {
  _CopyWithImpl$Input$investment_updates(
    this._instance,
    this._then,
  );

  final Input$investment_updates _instance;

  final TRes Function(Input$investment_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$investment_updates._({
        ..._instance._$data,
        if ($_inc != _undefined) '_inc': ($_inc as Input$investment_inc_input?),
        if ($_set != _undefined) '_set': ($_set as Input$investment_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$investment_bool_exp),
      }));
  CopyWith$Input$investment_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$investment_inc_input.stub(_then(_instance))
        : CopyWith$Input$investment_inc_input(
            local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$investment_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$investment_set_input.stub(_then(_instance))
        : CopyWith$Input$investment_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$investment_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$investment_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$investment_updates<TRes>
    implements CopyWith$Input$investment_updates<TRes> {
  _CopyWithStubImpl$Input$investment_updates(this._res);

  TRes _res;

  call({
    Input$investment_inc_input? $_inc,
    Input$investment_set_input? $_set,
    Input$investment_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$investment_inc_input<TRes> get $_inc =>
      CopyWith$Input$investment_inc_input.stub(_res);
  CopyWith$Input$investment_set_input<TRes> get $_set =>
      CopyWith$Input$investment_set_input.stub(_res);
  CopyWith$Input$investment_bool_exp<TRes> get where =>
      CopyWith$Input$investment_bool_exp.stub(_res);
}

class Input$investment_var_pop_order_by {
  factory Input$investment_var_pop_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_var_pop_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_var_pop_order_by._(this._$data);

  factory Input$investment_var_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_var_pop_order_by<Input$investment_var_pop_order_by>
      get copyWith => CopyWith$Input$investment_var_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_var_pop_order_by<TRes> {
  factory CopyWith$Input$investment_var_pop_order_by(
    Input$investment_var_pop_order_by instance,
    TRes Function(Input$investment_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$investment_var_pop_order_by;

  factory CopyWith$Input$investment_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_var_pop_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_var_pop_order_by<TRes>
    implements CopyWith$Input$investment_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$investment_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_var_pop_order_by _instance;

  final TRes Function(Input$investment_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_var_pop_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_var_pop_order_by<TRes>
    implements CopyWith$Input$investment_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investment_var_samp_order_by {
  factory Input$investment_var_samp_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_var_samp_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_var_samp_order_by._(this._$data);

  factory Input$investment_var_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_var_samp_order_by<
          Input$investment_var_samp_order_by>
      get copyWith => CopyWith$Input$investment_var_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_var_samp_order_by<TRes> {
  factory CopyWith$Input$investment_var_samp_order_by(
    Input$investment_var_samp_order_by instance,
    TRes Function(Input$investment_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$investment_var_samp_order_by;

  factory CopyWith$Input$investment_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_var_samp_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_var_samp_order_by<TRes>
    implements CopyWith$Input$investment_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$investment_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_var_samp_order_by _instance;

  final TRes Function(Input$investment_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_var_samp_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_var_samp_order_by<TRes>
    implements CopyWith$Input$investment_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investment_variance_order_by {
  factory Input$investment_variance_order_by({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      Input$investment_variance_order_by._({
        if (investment_amount != null) r'investment_amount': investment_amount,
        if (investment_id != null) r'investment_id': investment_id,
        if (investor_id != null) r'investor_id': investor_id,
        if (proposal_id != null) r'proposal_id': proposal_id,
      });

  Input$investment_variance_order_by._(this._$data);

  factory Input$investment_variance_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_amount')) {
      final l$investment_amount = data['investment_amount'];
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : fromJson$Enum$order_by((l$investment_amount as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    return Input$investment_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get investment_amount =>
      (_$data['investment_amount'] as Enum$order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_amount')) {
      final l$investment_amount = investment_amount;
      result$data['investment_amount'] = l$investment_amount == null
          ? null
          : toJson$Enum$order_by(l$investment_amount);
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    return result$data;
  }

  CopyWith$Input$investment_variance_order_by<
          Input$investment_variance_order_by>
      get copyWith => CopyWith$Input$investment_variance_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investment_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_amount = investment_amount;
    final lOther$investment_amount = other.investment_amount;
    if (_$data.containsKey('investment_amount') !=
        other._$data.containsKey('investment_amount')) {
      return false;
    }
    if (l$investment_amount != lOther$investment_amount) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_amount = investment_amount;
    final l$investment_id = investment_id;
    final l$investor_id = investor_id;
    final l$proposal_id = proposal_id;
    return Object.hashAll([
      _$data.containsKey('investment_amount') ? l$investment_amount : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investment_variance_order_by<TRes> {
  factory CopyWith$Input$investment_variance_order_by(
    Input$investment_variance_order_by instance,
    TRes Function(Input$investment_variance_order_by) then,
  ) = _CopyWithImpl$Input$investment_variance_order_by;

  factory CopyWith$Input$investment_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investment_variance_order_by;

  TRes call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  });
}

class _CopyWithImpl$Input$investment_variance_order_by<TRes>
    implements CopyWith$Input$investment_variance_order_by<TRes> {
  _CopyWithImpl$Input$investment_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$investment_variance_order_by _instance;

  final TRes Function(Input$investment_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? investment_amount = _undefined,
    Object? investment_id = _undefined,
    Object? investor_id = _undefined,
    Object? proposal_id = _undefined,
  }) =>
      _then(Input$investment_variance_order_by._({
        ..._instance._$data,
        if (investment_amount != _undefined)
          'investment_amount': (investment_amount as Enum$order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$investment_variance_order_by<TRes>
    implements CopyWith$Input$investment_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$investment_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? investment_amount,
    Enum$order_by? investment_id,
    Enum$order_by? investor_id,
    Enum$order_by? proposal_id,
  }) =>
      _res;
}

class Input$investor_bool_exp {
  factory Input$investor_bool_exp({
    List<Input$investor_bool_exp>? $_and,
    Input$investor_bool_exp? $_not,
    List<Input$investor_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investments,
    Input$investment_aggregate_bool_exp? investments_aggregate,
    Input$Int_comparison_exp? investor_id,
    Input$Int_comparison_exp? investor_investment_amount,
    Input$String_comparison_exp? investor_name,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      Input$investor_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (investments != null) r'investments': investments,
        if (investments_aggregate != null)
          r'investments_aggregate': investments_aggregate,
        if (investor_id != null) r'investor_id': investor_id,
        if (investor_investment_amount != null)
          r'investor_investment_amount': investor_investment_amount,
        if (investor_name != null) r'investor_name': investor_name,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$investor_bool_exp._(this._$data);

  factory Input$investor_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$investor_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$investor_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$investor_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('investments')) {
      final l$investments = data['investments'];
      result$data['investments'] = l$investments == null
          ? null
          : Input$investment_bool_exp.fromJson(
              (l$investments as Map<String, dynamic>));
    }
    if (data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = data['investments_aggregate'];
      result$data['investments_aggregate'] = l$investments_aggregate == null
          ? null
          : Input$investment_aggregate_bool_exp.fromJson(
              (l$investments_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$investor_id as Map<String, dynamic>));
    }
    if (data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = data['investor_investment_amount'];
      result$data['investor_investment_amount'] =
          l$investor_investment_amount == null
              ? null
              : Input$Int_comparison_exp.fromJson(
                  (l$investor_investment_amount as Map<String, dynamic>));
    }
    if (data.containsKey('investor_name')) {
      final l$investor_name = data['investor_name'];
      result$data['investor_name'] = l$investor_name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$investor_name as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$user_id as Map<String, dynamic>));
    }
    return Input$investor_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$investor_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$investor_bool_exp>?);
  Input$investor_bool_exp? get $_not =>
      (_$data['_not'] as Input$investor_bool_exp?);
  List<Input$investor_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$investor_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$investment_bool_exp? get investments =>
      (_$data['investments'] as Input$investment_bool_exp?);
  Input$investment_aggregate_bool_exp? get investments_aggregate =>
      (_$data['investments_aggregate'] as Input$investment_aggregate_bool_exp?);
  Input$Int_comparison_exp? get investor_id =>
      (_$data['investor_id'] as Input$Int_comparison_exp?);
  Input$Int_comparison_exp? get investor_investment_amount =>
      (_$data['investor_investment_amount'] as Input$Int_comparison_exp?);
  Input$String_comparison_exp? get investor_name =>
      (_$data['investor_name'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get user_id =>
      (_$data['user_id'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('investments')) {
      final l$investments = investments;
      result$data['investments'] = l$investments?.toJson();
    }
    if (_$data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = investments_aggregate;
      result$data['investments_aggregate'] = l$investments_aggregate?.toJson();
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] = l$investor_id?.toJson();
    }
    if (_$data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = investor_investment_amount;
      result$data['investor_investment_amount'] =
          l$investor_investment_amount?.toJson();
    }
    if (_$data.containsKey('investor_name')) {
      final l$investor_name = investor_name;
      result$data['investor_name'] = l$investor_name?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investor_bool_exp<Input$investor_bool_exp> get copyWith =>
      CopyWith$Input$investor_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investments = investments;
    final lOther$investments = other.investments;
    if (_$data.containsKey('investments') !=
        other._$data.containsKey('investments')) {
      return false;
    }
    if (l$investments != lOther$investments) {
      return false;
    }
    final l$investments_aggregate = investments_aggregate;
    final lOther$investments_aggregate = other.investments_aggregate;
    if (_$data.containsKey('investments_aggregate') !=
        other._$data.containsKey('investments_aggregate')) {
      return false;
    }
    if (l$investments_aggregate != lOther$investments_aggregate) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$investor_investment_amount = investor_investment_amount;
    final lOther$investor_investment_amount = other.investor_investment_amount;
    if (_$data.containsKey('investor_investment_amount') !=
        other._$data.containsKey('investor_investment_amount')) {
      return false;
    }
    if (l$investor_investment_amount != lOther$investor_investment_amount) {
      return false;
    }
    final l$investor_name = investor_name;
    final lOther$investor_name = other.investor_name;
    if (_$data.containsKey('investor_name') !=
        other._$data.containsKey('investor_name')) {
      return false;
    }
    if (l$investor_name != lOther$investor_name) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$investments = investments;
    final l$investments_aggregate = investments_aggregate;
    final l$investor_id = investor_id;
    final l$investor_investment_amount = investor_investment_amount;
    final l$investor_name = investor_name;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investments') ? l$investments : const {},
      _$data.containsKey('investments_aggregate')
          ? l$investments_aggregate
          : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('investor_investment_amount')
          ? l$investor_investment_amount
          : const {},
      _$data.containsKey('investor_name') ? l$investor_name : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_bool_exp<TRes> {
  factory CopyWith$Input$investor_bool_exp(
    Input$investor_bool_exp instance,
    TRes Function(Input$investor_bool_exp) then,
  ) = _CopyWithImpl$Input$investor_bool_exp;

  factory CopyWith$Input$investor_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_bool_exp;

  TRes call({
    List<Input$investor_bool_exp>? $_and,
    Input$investor_bool_exp? $_not,
    List<Input$investor_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investments,
    Input$investment_aggregate_bool_exp? investments_aggregate,
    Input$Int_comparison_exp? investor_id,
    Input$Int_comparison_exp? investor_investment_amount,
    Input$String_comparison_exp? investor_name,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  });
  TRes $_and(
      Iterable<Input$investor_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$investor_bool_exp<Input$investor_bool_exp>>?)
          _fn);
  CopyWith$Input$investor_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$investor_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$investor_bool_exp<Input$investor_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$investment_bool_exp<TRes> get investments;
  CopyWith$Input$investment_aggregate_bool_exp<TRes> get investments_aggregate;
  CopyWith$Input$Int_comparison_exp<TRes> get investor_id;
  CopyWith$Input$Int_comparison_exp<TRes> get investor_investment_amount;
  CopyWith$Input$String_comparison_exp<TRes> get investor_name;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id;
}

class _CopyWithImpl$Input$investor_bool_exp<TRes>
    implements CopyWith$Input$investor_bool_exp<TRes> {
  _CopyWithImpl$Input$investor_bool_exp(
    this._instance,
    this._then,
  );

  final Input$investor_bool_exp _instance;

  final TRes Function(Input$investor_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? investments = _undefined,
    Object? investments_aggregate = _undefined,
    Object? investor_id = _undefined,
    Object? investor_investment_amount = _undefined,
    Object? investor_name = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$investor_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$investor_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$investor_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$investor_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (investments != _undefined)
          'investments': (investments as Input$investment_bool_exp?),
        if (investments_aggregate != _undefined)
          'investments_aggregate':
              (investments_aggregate as Input$investment_aggregate_bool_exp?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Input$Int_comparison_exp?),
        if (investor_investment_amount != _undefined)
          'investor_investment_amount':
              (investor_investment_amount as Input$Int_comparison_exp?),
        if (investor_name != _undefined)
          'investor_name': (investor_name as Input$String_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (user_id != _undefined)
          'user_id': (user_id as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$investor_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$investor_bool_exp<
                          Input$investor_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$investor_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$investor_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$investor_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investor_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$investor_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$investor_bool_exp<
                          Input$investor_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$investor_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$investment_bool_exp<TRes> get investments {
    final local$investments = _instance.investments;
    return local$investments == null
        ? CopyWith$Input$investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_bool_exp(
            local$investments, (e) => call(investments: e));
  }

  CopyWith$Input$investment_aggregate_bool_exp<TRes> get investments_aggregate {
    final local$investments_aggregate = _instance.investments_aggregate;
    return local$investments_aggregate == null
        ? CopyWith$Input$investment_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_aggregate_bool_exp(
            local$investments_aggregate, (e) => call(investments_aggregate: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get investor_id {
    final local$investor_id = _instance.investor_id;
    return local$investor_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$investor_id, (e) => call(investor_id: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get investor_investment_amount {
    final local$investor_investment_amount =
        _instance.investor_investment_amount;
    return local$investor_investment_amount == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(local$investor_investment_amount,
            (e) => call(investor_investment_amount: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get investor_name {
    final local$investor_name = _instance.investor_name;
    return local$investor_name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$investor_name, (e) => call(investor_name: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get user_id {
    final local$user_id = _instance.user_id;
    return local$user_id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$user_id, (e) => call(user_id: e));
  }
}

class _CopyWithStubImpl$Input$investor_bool_exp<TRes>
    implements CopyWith$Input$investor_bool_exp<TRes> {
  _CopyWithStubImpl$Input$investor_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$investor_bool_exp>? $_and,
    Input$investor_bool_exp? $_not,
    List<Input$investor_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investments,
    Input$investment_aggregate_bool_exp? investments_aggregate,
    Input$Int_comparison_exp? investor_id,
    Input$Int_comparison_exp? investor_investment_amount,
    Input$String_comparison_exp? investor_name,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$investor_bool_exp<TRes> get $_not =>
      CopyWith$Input$investor_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$investment_bool_exp<TRes> get investments =>
      CopyWith$Input$investment_bool_exp.stub(_res);
  CopyWith$Input$investment_aggregate_bool_exp<TRes>
      get investments_aggregate =>
          CopyWith$Input$investment_aggregate_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get investor_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get investor_investment_amount =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get investor_name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$investor_inc_input {
  factory Input$investor_inc_input({int? investor_investment_amount}) =>
      Input$investor_inc_input._({
        if (investor_investment_amount != null)
          r'investor_investment_amount': investor_investment_amount,
      });

  Input$investor_inc_input._(this._$data);

  factory Input$investor_inc_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = data['investor_investment_amount'];
      result$data['investor_investment_amount'] =
          (l$investor_investment_amount as int?);
    }
    return Input$investor_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get investor_investment_amount =>
      (_$data['investor_investment_amount'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = investor_investment_amount;
      result$data['investor_investment_amount'] = l$investor_investment_amount;
    }
    return result$data;
  }

  CopyWith$Input$investor_inc_input<Input$investor_inc_input> get copyWith =>
      CopyWith$Input$investor_inc_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_inc_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investor_investment_amount = investor_investment_amount;
    final lOther$investor_investment_amount = other.investor_investment_amount;
    if (_$data.containsKey('investor_investment_amount') !=
        other._$data.containsKey('investor_investment_amount')) {
      return false;
    }
    if (l$investor_investment_amount != lOther$investor_investment_amount) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investor_investment_amount = investor_investment_amount;
    return Object.hashAll([
      _$data.containsKey('investor_investment_amount')
          ? l$investor_investment_amount
          : const {}
    ]);
  }
}

abstract class CopyWith$Input$investor_inc_input<TRes> {
  factory CopyWith$Input$investor_inc_input(
    Input$investor_inc_input instance,
    TRes Function(Input$investor_inc_input) then,
  ) = _CopyWithImpl$Input$investor_inc_input;

  factory CopyWith$Input$investor_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_inc_input;

  TRes call({int? investor_investment_amount});
}

class _CopyWithImpl$Input$investor_inc_input<TRes>
    implements CopyWith$Input$investor_inc_input<TRes> {
  _CopyWithImpl$Input$investor_inc_input(
    this._instance,
    this._then,
  );

  final Input$investor_inc_input _instance;

  final TRes Function(Input$investor_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? investor_investment_amount = _undefined}) =>
      _then(Input$investor_inc_input._({
        ..._instance._$data,
        if (investor_investment_amount != _undefined)
          'investor_investment_amount': (investor_investment_amount as int?),
      }));
}

class _CopyWithStubImpl$Input$investor_inc_input<TRes>
    implements CopyWith$Input$investor_inc_input<TRes> {
  _CopyWithStubImpl$Input$investor_inc_input(this._res);

  TRes _res;

  call({int? investor_investment_amount}) => _res;
}

class Input$investor_insert_input {
  factory Input$investor_insert_input({
    DateTime? created_at,
    Input$investment_arr_rel_insert_input? investments,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      Input$investor_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (investments != null) r'investments': investments,
        if (investor_investment_amount != null)
          r'investor_investment_amount': investor_investment_amount,
        if (investor_name != null) r'investor_name': investor_name,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$investor_insert_input._(this._$data);

  factory Input$investor_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investments')) {
      final l$investments = data['investments'];
      result$data['investments'] = l$investments == null
          ? null
          : Input$investment_arr_rel_insert_input.fromJson(
              (l$investments as Map<String, dynamic>));
    }
    if (data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = data['investor_investment_amount'];
      result$data['investor_investment_amount'] =
          (l$investor_investment_amount as int?);
    }
    if (data.containsKey('investor_name')) {
      final l$investor_name = data['investor_name'];
      result$data['investor_name'] = (l$investor_name as String?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$investor_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  Input$investment_arr_rel_insert_input? get investments =>
      (_$data['investments'] as Input$investment_arr_rel_insert_input?);
  int? get investor_investment_amount =>
      (_$data['investor_investment_amount'] as int?);
  String? get investor_name => (_$data['investor_name'] as String?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investments')) {
      final l$investments = investments;
      result$data['investments'] = l$investments?.toJson();
    }
    if (_$data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = investor_investment_amount;
      result$data['investor_investment_amount'] = l$investor_investment_amount;
    }
    if (_$data.containsKey('investor_name')) {
      final l$investor_name = investor_name;
      result$data['investor_name'] = l$investor_name;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$investor_insert_input<Input$investor_insert_input>
      get copyWith => CopyWith$Input$investor_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investments = investments;
    final lOther$investments = other.investments;
    if (_$data.containsKey('investments') !=
        other._$data.containsKey('investments')) {
      return false;
    }
    if (l$investments != lOther$investments) {
      return false;
    }
    final l$investor_investment_amount = investor_investment_amount;
    final lOther$investor_investment_amount = other.investor_investment_amount;
    if (_$data.containsKey('investor_investment_amount') !=
        other._$data.containsKey('investor_investment_amount')) {
      return false;
    }
    if (l$investor_investment_amount != lOther$investor_investment_amount) {
      return false;
    }
    final l$investor_name = investor_name;
    final lOther$investor_name = other.investor_name;
    if (_$data.containsKey('investor_name') !=
        other._$data.containsKey('investor_name')) {
      return false;
    }
    if (l$investor_name != lOther$investor_name) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investments = investments;
    final l$investor_investment_amount = investor_investment_amount;
    final l$investor_name = investor_name;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investments') ? l$investments : const {},
      _$data.containsKey('investor_investment_amount')
          ? l$investor_investment_amount
          : const {},
      _$data.containsKey('investor_name') ? l$investor_name : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_insert_input<TRes> {
  factory CopyWith$Input$investor_insert_input(
    Input$investor_insert_input instance,
    TRes Function(Input$investor_insert_input) then,
  ) = _CopyWithImpl$Input$investor_insert_input;

  factory CopyWith$Input$investor_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_insert_input;

  TRes call({
    DateTime? created_at,
    Input$investment_arr_rel_insert_input? investments,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  });
  CopyWith$Input$investment_arr_rel_insert_input<TRes> get investments;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$investor_insert_input<TRes>
    implements CopyWith$Input$investor_insert_input<TRes> {
  _CopyWithImpl$Input$investor_insert_input(
    this._instance,
    this._then,
  );

  final Input$investor_insert_input _instance;

  final TRes Function(Input$investor_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investments = _undefined,
    Object? investor_investment_amount = _undefined,
    Object? investor_name = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$investor_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investments != _undefined)
          'investments':
              (investments as Input$investment_arr_rel_insert_input?),
        if (investor_investment_amount != _undefined)
          'investor_investment_amount': (investor_investment_amount as int?),
        if (investor_name != _undefined)
          'investor_name': (investor_name as String?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
  CopyWith$Input$investment_arr_rel_insert_input<TRes> get investments {
    final local$investments = _instance.investments;
    return local$investments == null
        ? CopyWith$Input$investment_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$investment_arr_rel_insert_input(
            local$investments, (e) => call(investments: e));
  }

  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$investor_insert_input<TRes>
    implements CopyWith$Input$investor_insert_input<TRes> {
  _CopyWithStubImpl$Input$investor_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    Input$investment_arr_rel_insert_input? investments,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      _res;
  CopyWith$Input$investment_arr_rel_insert_input<TRes> get investments =>
      CopyWith$Input$investment_arr_rel_insert_input.stub(_res);
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$investor_obj_rel_insert_input {
  factory Input$investor_obj_rel_insert_input({
    required Input$investor_insert_input data,
    Input$investor_on_conflict? on_conflict,
  }) =>
      Input$investor_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$investor_obj_rel_insert_input._(this._$data);

  factory Input$investor_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$investor_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$investor_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$investor_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investor_insert_input get data =>
      (_$data['data'] as Input$investor_insert_input);
  Input$investor_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$investor_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investor_obj_rel_insert_input<
          Input$investor_obj_rel_insert_input>
      get copyWith => CopyWith$Input$investor_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$investor_obj_rel_insert_input(
    Input$investor_obj_rel_insert_input instance,
    TRes Function(Input$investor_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$investor_obj_rel_insert_input;

  factory CopyWith$Input$investor_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_obj_rel_insert_input;

  TRes call({
    Input$investor_insert_input? data,
    Input$investor_on_conflict? on_conflict,
  });
  CopyWith$Input$investor_insert_input<TRes> get data;
  CopyWith$Input$investor_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$investor_obj_rel_insert_input<TRes>
    implements CopyWith$Input$investor_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$investor_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$investor_obj_rel_insert_input _instance;

  final TRes Function(Input$investor_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$investor_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$investor_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$investor_on_conflict?),
      }));
  CopyWith$Input$investor_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$investor_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$investor_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$investor_on_conflict.stub(_then(_instance))
        : CopyWith$Input$investor_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$investor_obj_rel_insert_input<TRes>
    implements CopyWith$Input$investor_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$investor_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$investor_insert_input? data,
    Input$investor_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$investor_insert_input<TRes> get data =>
      CopyWith$Input$investor_insert_input.stub(_res);
  CopyWith$Input$investor_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$investor_on_conflict.stub(_res);
}

class Input$investor_on_conflict {
  factory Input$investor_on_conflict({
    required Enum$investor_constraint constraint,
    required List<Enum$investor_update_column> update_columns,
    Input$investor_bool_exp? where,
  }) =>
      Input$investor_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$investor_on_conflict._(this._$data);

  factory Input$investor_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$investor_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$investor_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$investor_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$investor_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$investor_constraint get constraint =>
      (_$data['constraint'] as Enum$investor_constraint);
  List<Enum$investor_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$investor_update_column>);
  Input$investor_bool_exp? get where =>
      (_$data['where'] as Input$investor_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$investor_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$investor_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$investor_on_conflict<Input$investor_on_conflict>
      get copyWith => CopyWith$Input$investor_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_on_conflict<TRes> {
  factory CopyWith$Input$investor_on_conflict(
    Input$investor_on_conflict instance,
    TRes Function(Input$investor_on_conflict) then,
  ) = _CopyWithImpl$Input$investor_on_conflict;

  factory CopyWith$Input$investor_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_on_conflict;

  TRes call({
    Enum$investor_constraint? constraint,
    List<Enum$investor_update_column>? update_columns,
    Input$investor_bool_exp? where,
  });
  CopyWith$Input$investor_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$investor_on_conflict<TRes>
    implements CopyWith$Input$investor_on_conflict<TRes> {
  _CopyWithImpl$Input$investor_on_conflict(
    this._instance,
    this._then,
  );

  final Input$investor_on_conflict _instance;

  final TRes Function(Input$investor_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$investor_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$investor_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$investor_update_column>),
        if (where != _undefined) 'where': (where as Input$investor_bool_exp?),
      }));
  CopyWith$Input$investor_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$investor_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investor_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$investor_on_conflict<TRes>
    implements CopyWith$Input$investor_on_conflict<TRes> {
  _CopyWithStubImpl$Input$investor_on_conflict(this._res);

  TRes _res;

  call({
    Enum$investor_constraint? constraint,
    List<Enum$investor_update_column>? update_columns,
    Input$investor_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$investor_bool_exp<TRes> get where =>
      CopyWith$Input$investor_bool_exp.stub(_res);
}

class Input$investor_order_by {
  factory Input$investor_order_by({
    Enum$order_by? created_at,
    Input$investment_aggregate_order_by? investments_aggregate,
    Enum$order_by? investor_id,
    Enum$order_by? investor_investment_amount,
    Enum$order_by? investor_name,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      Input$investor_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (investments_aggregate != null)
          r'investments_aggregate': investments_aggregate,
        if (investor_id != null) r'investor_id': investor_id,
        if (investor_investment_amount != null)
          r'investor_investment_amount': investor_investment_amount,
        if (investor_name != null) r'investor_name': investor_name,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$investor_order_by._(this._$data);

  factory Input$investor_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = data['investments_aggregate'];
      result$data['investments_aggregate'] = l$investments_aggregate == null
          ? null
          : Input$investment_aggregate_order_by.fromJson(
              (l$investments_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = l$investor_id == null
          ? null
          : fromJson$Enum$order_by((l$investor_id as String));
    }
    if (data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = data['investor_investment_amount'];
      result$data['investor_investment_amount'] =
          l$investor_investment_amount == null
              ? null
              : fromJson$Enum$order_by(
                  (l$investor_investment_amount as String));
    }
    if (data.containsKey('investor_name')) {
      final l$investor_name = data['investor_name'];
      result$data['investor_name'] = l$investor_name == null
          ? null
          : fromJson$Enum$order_by((l$investor_name as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : fromJson$Enum$order_by((l$user_id as String));
    }
    return Input$investor_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Input$investment_aggregate_order_by? get investments_aggregate =>
      (_$data['investments_aggregate'] as Input$investment_aggregate_order_by?);
  Enum$order_by? get investor_id => (_$data['investor_id'] as Enum$order_by?);
  Enum$order_by? get investor_investment_amount =>
      (_$data['investor_investment_amount'] as Enum$order_by?);
  Enum$order_by? get investor_name =>
      (_$data['investor_name'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get user_id => (_$data['user_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = investments_aggregate;
      result$data['investments_aggregate'] = l$investments_aggregate?.toJson();
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] =
          l$investor_id == null ? null : toJson$Enum$order_by(l$investor_id);
    }
    if (_$data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = investor_investment_amount;
      result$data['investor_investment_amount'] =
          l$investor_investment_amount == null
              ? null
              : toJson$Enum$order_by(l$investor_investment_amount);
    }
    if (_$data.containsKey('investor_name')) {
      final l$investor_name = investor_name;
      result$data['investor_name'] = l$investor_name == null
          ? null
          : toJson$Enum$order_by(l$investor_name);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] =
          l$user_id == null ? null : toJson$Enum$order_by(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$investor_order_by<Input$investor_order_by> get copyWith =>
      CopyWith$Input$investor_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investments_aggregate = investments_aggregate;
    final lOther$investments_aggregate = other.investments_aggregate;
    if (_$data.containsKey('investments_aggregate') !=
        other._$data.containsKey('investments_aggregate')) {
      return false;
    }
    if (l$investments_aggregate != lOther$investments_aggregate) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$investor_investment_amount = investor_investment_amount;
    final lOther$investor_investment_amount = other.investor_investment_amount;
    if (_$data.containsKey('investor_investment_amount') !=
        other._$data.containsKey('investor_investment_amount')) {
      return false;
    }
    if (l$investor_investment_amount != lOther$investor_investment_amount) {
      return false;
    }
    final l$investor_name = investor_name;
    final lOther$investor_name = other.investor_name;
    if (_$data.containsKey('investor_name') !=
        other._$data.containsKey('investor_name')) {
      return false;
    }
    if (l$investor_name != lOther$investor_name) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investments_aggregate = investments_aggregate;
    final l$investor_id = investor_id;
    final l$investor_investment_amount = investor_investment_amount;
    final l$investor_name = investor_name;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investments_aggregate')
          ? l$investments_aggregate
          : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('investor_investment_amount')
          ? l$investor_investment_amount
          : const {},
      _$data.containsKey('investor_name') ? l$investor_name : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_order_by<TRes> {
  factory CopyWith$Input$investor_order_by(
    Input$investor_order_by instance,
    TRes Function(Input$investor_order_by) then,
  ) = _CopyWithImpl$Input$investor_order_by;

  factory CopyWith$Input$investor_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_order_by;

  TRes call({
    Enum$order_by? created_at,
    Input$investment_aggregate_order_by? investments_aggregate,
    Enum$order_by? investor_id,
    Enum$order_by? investor_investment_amount,
    Enum$order_by? investor_name,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  });
  CopyWith$Input$investment_aggregate_order_by<TRes> get investments_aggregate;
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$investor_order_by<TRes>
    implements CopyWith$Input$investor_order_by<TRes> {
  _CopyWithImpl$Input$investor_order_by(
    this._instance,
    this._then,
  );

  final Input$investor_order_by _instance;

  final TRes Function(Input$investor_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investments_aggregate = _undefined,
    Object? investor_id = _undefined,
    Object? investor_investment_amount = _undefined,
    Object? investor_name = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$investor_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (investments_aggregate != _undefined)
          'investments_aggregate':
              (investments_aggregate as Input$investment_aggregate_order_by?),
        if (investor_id != _undefined)
          'investor_id': (investor_id as Enum$order_by?),
        if (investor_investment_amount != _undefined)
          'investor_investment_amount':
              (investor_investment_amount as Enum$order_by?),
        if (investor_name != _undefined)
          'investor_name': (investor_name as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (user_id != _undefined) 'user_id': (user_id as Enum$order_by?),
      }));
  CopyWith$Input$investment_aggregate_order_by<TRes> get investments_aggregate {
    final local$investments_aggregate = _instance.investments_aggregate;
    return local$investments_aggregate == null
        ? CopyWith$Input$investment_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_aggregate_order_by(
            local$investments_aggregate, (e) => call(investments_aggregate: e));
  }

  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$investor_order_by<TRes>
    implements CopyWith$Input$investor_order_by<TRes> {
  _CopyWithStubImpl$Input$investor_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Input$investment_aggregate_order_by? investments_aggregate,
    Enum$order_by? investor_id,
    Enum$order_by? investor_investment_amount,
    Enum$order_by? investor_name,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      _res;
  CopyWith$Input$investment_aggregate_order_by<TRes>
      get investments_aggregate =>
          CopyWith$Input$investment_aggregate_order_by.stub(_res);
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$investor_pk_columns_input {
  factory Input$investor_pk_columns_input({required int investor_id}) =>
      Input$investor_pk_columns_input._({
        r'investor_id': investor_id,
      });

  Input$investor_pk_columns_input._(this._$data);

  factory Input$investor_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$investor_id = data['investor_id'];
    result$data['investor_id'] = (l$investor_id as int);
    return Input$investor_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int get investor_id => (_$data['investor_id'] as int);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$investor_id = investor_id;
    result$data['investor_id'] = l$investor_id;
    return result$data;
  }

  CopyWith$Input$investor_pk_columns_input<Input$investor_pk_columns_input>
      get copyWith => CopyWith$Input$investor_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investor_id = investor_id;
    return Object.hashAll([l$investor_id]);
  }
}

abstract class CopyWith$Input$investor_pk_columns_input<TRes> {
  factory CopyWith$Input$investor_pk_columns_input(
    Input$investor_pk_columns_input instance,
    TRes Function(Input$investor_pk_columns_input) then,
  ) = _CopyWithImpl$Input$investor_pk_columns_input;

  factory CopyWith$Input$investor_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_pk_columns_input;

  TRes call({int? investor_id});
}

class _CopyWithImpl$Input$investor_pk_columns_input<TRes>
    implements CopyWith$Input$investor_pk_columns_input<TRes> {
  _CopyWithImpl$Input$investor_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$investor_pk_columns_input _instance;

  final TRes Function(Input$investor_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? investor_id = _undefined}) =>
      _then(Input$investor_pk_columns_input._({
        ..._instance._$data,
        if (investor_id != _undefined && investor_id != null)
          'investor_id': (investor_id as int),
      }));
}

class _CopyWithStubImpl$Input$investor_pk_columns_input<TRes>
    implements CopyWith$Input$investor_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$investor_pk_columns_input(this._res);

  TRes _res;

  call({int? investor_id}) => _res;
}

class Input$investor_set_input {
  factory Input$investor_set_input({
    DateTime? created_at,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$investor_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (investor_investment_amount != null)
          r'investor_investment_amount': investor_investment_amount,
        if (investor_name != null) r'investor_name': investor_name,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$investor_set_input._(this._$data);

  factory Input$investor_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = data['investor_investment_amount'];
      result$data['investor_investment_amount'] =
          (l$investor_investment_amount as int?);
    }
    if (data.containsKey('investor_name')) {
      final l$investor_name = data['investor_name'];
      result$data['investor_name'] = (l$investor_name as String?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$investor_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get investor_investment_amount =>
      (_$data['investor_investment_amount'] as int?);
  String? get investor_name => (_$data['investor_name'] as String?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = investor_investment_amount;
      result$data['investor_investment_amount'] = l$investor_investment_amount;
    }
    if (_$data.containsKey('investor_name')) {
      final l$investor_name = investor_name;
      result$data['investor_name'] = l$investor_name;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$investor_set_input<Input$investor_set_input> get copyWith =>
      CopyWith$Input$investor_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investor_investment_amount = investor_investment_amount;
    final lOther$investor_investment_amount = other.investor_investment_amount;
    if (_$data.containsKey('investor_investment_amount') !=
        other._$data.containsKey('investor_investment_amount')) {
      return false;
    }
    if (l$investor_investment_amount != lOther$investor_investment_amount) {
      return false;
    }
    final l$investor_name = investor_name;
    final lOther$investor_name = other.investor_name;
    if (_$data.containsKey('investor_name') !=
        other._$data.containsKey('investor_name')) {
      return false;
    }
    if (l$investor_name != lOther$investor_name) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investor_investment_amount = investor_investment_amount;
    final l$investor_name = investor_name;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investor_investment_amount')
          ? l$investor_investment_amount
          : const {},
      _$data.containsKey('investor_name') ? l$investor_name : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_set_input<TRes> {
  factory CopyWith$Input$investor_set_input(
    Input$investor_set_input instance,
    TRes Function(Input$investor_set_input) then,
  ) = _CopyWithImpl$Input$investor_set_input;

  factory CopyWith$Input$investor_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_set_input;

  TRes call({
    DateTime? created_at,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$investor_set_input<TRes>
    implements CopyWith$Input$investor_set_input<TRes> {
  _CopyWithImpl$Input$investor_set_input(
    this._instance,
    this._then,
  );

  final Input$investor_set_input _instance;

  final TRes Function(Input$investor_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investor_investment_amount = _undefined,
    Object? investor_name = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$investor_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investor_investment_amount != _undefined)
          'investor_investment_amount': (investor_investment_amount as int?),
        if (investor_name != _undefined)
          'investor_name': (investor_name as String?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$investor_set_input<TRes>
    implements CopyWith$Input$investor_set_input<TRes> {
  _CopyWithStubImpl$Input$investor_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$investor_stream_cursor_input {
  factory Input$investor_stream_cursor_input({
    required Input$investor_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$investor_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$investor_stream_cursor_input._(this._$data);

  factory Input$investor_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$investor_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$investor_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investor_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$investor_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$investor_stream_cursor_input<
          Input$investor_stream_cursor_input>
      get copyWith => CopyWith$Input$investor_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_stream_cursor_input<TRes> {
  factory CopyWith$Input$investor_stream_cursor_input(
    Input$investor_stream_cursor_input instance,
    TRes Function(Input$investor_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$investor_stream_cursor_input;

  factory CopyWith$Input$investor_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_stream_cursor_input;

  TRes call({
    Input$investor_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$investor_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$investor_stream_cursor_input<TRes>
    implements CopyWith$Input$investor_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$investor_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$investor_stream_cursor_input _instance;

  final TRes Function(Input$investor_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$investor_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$investor_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$investor_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$investor_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$investor_stream_cursor_input<TRes>
    implements CopyWith$Input$investor_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$investor_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$investor_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$investor_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$investor_stream_cursor_value_input.stub(_res);
}

class Input$investor_stream_cursor_value_input {
  factory Input$investor_stream_cursor_value_input({
    DateTime? created_at,
    int? investor_id,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$investor_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (investor_id != null) r'investor_id': investor_id,
        if (investor_investment_amount != null)
          r'investor_investment_amount': investor_investment_amount,
        if (investor_name != null) r'investor_name': investor_name,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$investor_stream_cursor_value_input._(this._$data);

  factory Input$investor_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investor_id')) {
      final l$investor_id = data['investor_id'];
      result$data['investor_id'] = (l$investor_id as int?);
    }
    if (data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = data['investor_investment_amount'];
      result$data['investor_investment_amount'] =
          (l$investor_investment_amount as int?);
    }
    if (data.containsKey('investor_name')) {
      final l$investor_name = data['investor_name'];
      result$data['investor_name'] = (l$investor_name as String?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$investor_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get investor_id => (_$data['investor_id'] as int?);
  int? get investor_investment_amount =>
      (_$data['investor_investment_amount'] as int?);
  String? get investor_name => (_$data['investor_name'] as String?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investor_id')) {
      final l$investor_id = investor_id;
      result$data['investor_id'] = l$investor_id;
    }
    if (_$data.containsKey('investor_investment_amount')) {
      final l$investor_investment_amount = investor_investment_amount;
      result$data['investor_investment_amount'] = l$investor_investment_amount;
    }
    if (_$data.containsKey('investor_name')) {
      final l$investor_name = investor_name;
      result$data['investor_name'] = l$investor_name;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$investor_stream_cursor_value_input<
          Input$investor_stream_cursor_value_input>
      get copyWith => CopyWith$Input$investor_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investor_id = investor_id;
    final lOther$investor_id = other.investor_id;
    if (_$data.containsKey('investor_id') !=
        other._$data.containsKey('investor_id')) {
      return false;
    }
    if (l$investor_id != lOther$investor_id) {
      return false;
    }
    final l$investor_investment_amount = investor_investment_amount;
    final lOther$investor_investment_amount = other.investor_investment_amount;
    if (_$data.containsKey('investor_investment_amount') !=
        other._$data.containsKey('investor_investment_amount')) {
      return false;
    }
    if (l$investor_investment_amount != lOther$investor_investment_amount) {
      return false;
    }
    final l$investor_name = investor_name;
    final lOther$investor_name = other.investor_name;
    if (_$data.containsKey('investor_name') !=
        other._$data.containsKey('investor_name')) {
      return false;
    }
    if (l$investor_name != lOther$investor_name) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investor_id = investor_id;
    final l$investor_investment_amount = investor_investment_amount;
    final l$investor_name = investor_name;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investor_id') ? l$investor_id : const {},
      _$data.containsKey('investor_investment_amount')
          ? l$investor_investment_amount
          : const {},
      _$data.containsKey('investor_name') ? l$investor_name : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$investor_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$investor_stream_cursor_value_input(
    Input$investor_stream_cursor_value_input instance,
    TRes Function(Input$investor_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$investor_stream_cursor_value_input;

  factory CopyWith$Input$investor_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    int? investor_id,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$investor_stream_cursor_value_input<TRes>
    implements CopyWith$Input$investor_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$investor_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$investor_stream_cursor_value_input _instance;

  final TRes Function(Input$investor_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investor_id = _undefined,
    Object? investor_investment_amount = _undefined,
    Object? investor_name = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$investor_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investor_id != _undefined) 'investor_id': (investor_id as int?),
        if (investor_investment_amount != _undefined)
          'investor_investment_amount': (investor_investment_amount as int?),
        if (investor_name != _undefined)
          'investor_name': (investor_name as String?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$investor_stream_cursor_value_input<TRes>
    implements CopyWith$Input$investor_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$investor_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? investor_id,
    int? investor_investment_amount,
    String? investor_name,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$investor_updates {
  factory Input$investor_updates({
    Input$investor_inc_input? $_inc,
    Input$investor_set_input? $_set,
    required Input$investor_bool_exp where,
  }) =>
      Input$investor_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$investor_updates._(this._$data);

  factory Input$investor_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$investor_inc_input.fromJson(
              (l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$investor_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$investor_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$investor_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$investor_inc_input? get $_inc =>
      (_$data['_inc'] as Input$investor_inc_input?);
  Input$investor_set_input? get $_set =>
      (_$data['_set'] as Input$investor_set_input?);
  Input$investor_bool_exp get where =>
      (_$data['where'] as Input$investor_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$investor_updates<Input$investor_updates> get copyWith =>
      CopyWith$Input$investor_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$investor_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$investor_updates<TRes> {
  factory CopyWith$Input$investor_updates(
    Input$investor_updates instance,
    TRes Function(Input$investor_updates) then,
  ) = _CopyWithImpl$Input$investor_updates;

  factory CopyWith$Input$investor_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$investor_updates;

  TRes call({
    Input$investor_inc_input? $_inc,
    Input$investor_set_input? $_set,
    Input$investor_bool_exp? where,
  });
  CopyWith$Input$investor_inc_input<TRes> get $_inc;
  CopyWith$Input$investor_set_input<TRes> get $_set;
  CopyWith$Input$investor_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$investor_updates<TRes>
    implements CopyWith$Input$investor_updates<TRes> {
  _CopyWithImpl$Input$investor_updates(
    this._instance,
    this._then,
  );

  final Input$investor_updates _instance;

  final TRes Function(Input$investor_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$investor_updates._({
        ..._instance._$data,
        if ($_inc != _undefined) '_inc': ($_inc as Input$investor_inc_input?),
        if ($_set != _undefined) '_set': ($_set as Input$investor_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$investor_bool_exp),
      }));
  CopyWith$Input$investor_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$investor_inc_input.stub(_then(_instance))
        : CopyWith$Input$investor_inc_input(local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$investor_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$investor_set_input.stub(_then(_instance))
        : CopyWith$Input$investor_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$investor_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$investor_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$investor_updates<TRes>
    implements CopyWith$Input$investor_updates<TRes> {
  _CopyWithStubImpl$Input$investor_updates(this._res);

  TRes _res;

  call({
    Input$investor_inc_input? $_inc,
    Input$investor_set_input? $_set,
    Input$investor_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$investor_inc_input<TRes> get $_inc =>
      CopyWith$Input$investor_inc_input.stub(_res);
  CopyWith$Input$investor_set_input<TRes> get $_set =>
      CopyWith$Input$investor_set_input.stub(_res);
  CopyWith$Input$investor_bool_exp<TRes> get where =>
      CopyWith$Input$investor_bool_exp.stub(_res);
}

class Input$jsonb_cast_exp {
  factory Input$jsonb_cast_exp({Input$String_comparison_exp? $String}) =>
      Input$jsonb_cast_exp._({
        if ($String != null) r'String': $String,
      });

  Input$jsonb_cast_exp._(this._$data);

  factory Input$jsonb_cast_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('String')) {
      final l$$String = data['String'];
      result$data['String'] = l$$String == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$$String as Map<String, dynamic>));
    }
    return Input$jsonb_cast_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$String_comparison_exp? get $String =>
      (_$data['String'] as Input$String_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('String')) {
      final l$$String = $String;
      result$data['String'] = l$$String?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$jsonb_cast_exp<Input$jsonb_cast_exp> get copyWith =>
      CopyWith$Input$jsonb_cast_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$jsonb_cast_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$String = $String;
    final lOther$$String = other.$String;
    if (_$data.containsKey('String') != other._$data.containsKey('String')) {
      return false;
    }
    if (l$$String != lOther$$String) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$String = $String;
    return Object.hashAll(
        [_$data.containsKey('String') ? l$$String : const {}]);
  }
}

abstract class CopyWith$Input$jsonb_cast_exp<TRes> {
  factory CopyWith$Input$jsonb_cast_exp(
    Input$jsonb_cast_exp instance,
    TRes Function(Input$jsonb_cast_exp) then,
  ) = _CopyWithImpl$Input$jsonb_cast_exp;

  factory CopyWith$Input$jsonb_cast_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$jsonb_cast_exp;

  TRes call({Input$String_comparison_exp? $String});
  CopyWith$Input$String_comparison_exp<TRes> get $String;
}

class _CopyWithImpl$Input$jsonb_cast_exp<TRes>
    implements CopyWith$Input$jsonb_cast_exp<TRes> {
  _CopyWithImpl$Input$jsonb_cast_exp(
    this._instance,
    this._then,
  );

  final Input$jsonb_cast_exp _instance;

  final TRes Function(Input$jsonb_cast_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? $String = _undefined}) => _then(Input$jsonb_cast_exp._({
        ..._instance._$data,
        if ($String != _undefined)
          'String': ($String as Input$String_comparison_exp?),
      }));
  CopyWith$Input$String_comparison_exp<TRes> get $String {
    final local$$String = _instance.$String;
    return local$$String == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$$String, (e) => call($String: e));
  }
}

class _CopyWithStubImpl$Input$jsonb_cast_exp<TRes>
    implements CopyWith$Input$jsonb_cast_exp<TRes> {
  _CopyWithStubImpl$Input$jsonb_cast_exp(this._res);

  TRes _res;

  call({Input$String_comparison_exp? $String}) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get $String =>
      CopyWith$Input$String_comparison_exp.stub(_res);
}

class Input$jsonb_comparison_exp {
  factory Input$jsonb_comparison_exp({
    Input$jsonb_cast_exp? $_cast,
    JSONB? $_contained_in,
    JSONB? $_contains,
    JSONB? $_eq,
    JSONB? $_gt,
    JSONB? $_gte,
    String? $_has_key,
    List<String>? $_has_keys_all,
    List<String>? $_has_keys_any,
    List<JSONB>? $_in,
    bool? $_is_null,
    JSONB? $_lt,
    JSONB? $_lte,
    JSONB? $_neq,
    List<JSONB>? $_nin,
  }) =>
      Input$jsonb_comparison_exp._({
        if ($_cast != null) r'_cast': $_cast,
        if ($_contained_in != null) r'_contained_in': $_contained_in,
        if ($_contains != null) r'_contains': $_contains,
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_has_key != null) r'_has_key': $_has_key,
        if ($_has_keys_all != null) r'_has_keys_all': $_has_keys_all,
        if ($_has_keys_any != null) r'_has_keys_any': $_has_keys_any,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$jsonb_comparison_exp._(this._$data);

  factory Input$jsonb_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_cast')) {
      final l$$_cast = data['_cast'];
      result$data['_cast'] = l$$_cast == null
          ? null
          : Input$jsonb_cast_exp.fromJson((l$$_cast as Map<String, dynamic>));
    }
    if (data.containsKey('_contained_in')) {
      final l$$_contained_in = data['_contained_in'];
      result$data['_contained_in'] =
          l$$_contained_in == null ? null : jsonbFromJson(l$$_contained_in);
    }
    if (data.containsKey('_contains')) {
      final l$$_contains = data['_contains'];
      result$data['_contains'] =
          l$$_contains == null ? null : jsonbFromJson(l$$_contains);
    }
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = l$$_eq == null ? null : jsonbFromJson(l$$_eq);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = l$$_gt == null ? null : jsonbFromJson(l$$_gt);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = l$$_gte == null ? null : jsonbFromJson(l$$_gte);
    }
    if (data.containsKey('_has_key')) {
      final l$$_has_key = data['_has_key'];
      result$data['_has_key'] = (l$$_has_key as String?);
    }
    if (data.containsKey('_has_keys_all')) {
      final l$$_has_keys_all = data['_has_keys_all'];
      result$data['_has_keys_all'] = (l$$_has_keys_all as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('_has_keys_any')) {
      final l$$_has_keys_any = data['_has_keys_any'];
      result$data['_has_keys_any'] = (l$$_has_keys_any as List<dynamic>?)
          ?.map((e) => (e as String))
          .toList();
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => jsonbFromJson(e)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = l$$_lt == null ? null : jsonbFromJson(l$$_lt);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = l$$_lte == null ? null : jsonbFromJson(l$$_lte);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = l$$_neq == null ? null : jsonbFromJson(l$$_neq);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => jsonbFromJson(e)).toList();
    }
    return Input$jsonb_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$jsonb_cast_exp? get $_cast =>
      (_$data['_cast'] as Input$jsonb_cast_exp?);
  JSONB? get $_contained_in => (_$data['_contained_in'] as JSONB?);
  JSONB? get $_contains => (_$data['_contains'] as JSONB?);
  JSONB? get $_eq => (_$data['_eq'] as JSONB?);
  JSONB? get $_gt => (_$data['_gt'] as JSONB?);
  JSONB? get $_gte => (_$data['_gte'] as JSONB?);
  String? get $_has_key => (_$data['_has_key'] as String?);
  List<String>? get $_has_keys_all =>
      (_$data['_has_keys_all'] as List<String>?);
  List<String>? get $_has_keys_any =>
      (_$data['_has_keys_any'] as List<String>?);
  List<JSONB>? get $_in => (_$data['_in'] as List<JSONB>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  JSONB? get $_lt => (_$data['_lt'] as JSONB?);
  JSONB? get $_lte => (_$data['_lte'] as JSONB?);
  JSONB? get $_neq => (_$data['_neq'] as JSONB?);
  List<JSONB>? get $_nin => (_$data['_nin'] as List<JSONB>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_cast')) {
      final l$$_cast = $_cast;
      result$data['_cast'] = l$$_cast?.toJson();
    }
    if (_$data.containsKey('_contained_in')) {
      final l$$_contained_in = $_contained_in;
      result$data['_contained_in'] =
          l$$_contained_in == null ? null : jsonbToJson(l$$_contained_in);
    }
    if (_$data.containsKey('_contains')) {
      final l$$_contains = $_contains;
      result$data['_contains'] =
          l$$_contains == null ? null : jsonbToJson(l$$_contains);
    }
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq == null ? null : jsonbToJson(l$$_eq);
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt == null ? null : jsonbToJson(l$$_gt);
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte == null ? null : jsonbToJson(l$$_gte);
    }
    if (_$data.containsKey('_has_key')) {
      final l$$_has_key = $_has_key;
      result$data['_has_key'] = l$$_has_key;
    }
    if (_$data.containsKey('_has_keys_all')) {
      final l$$_has_keys_all = $_has_keys_all;
      result$data['_has_keys_all'] = l$$_has_keys_all?.map((e) => e).toList();
    }
    if (_$data.containsKey('_has_keys_any')) {
      final l$$_has_keys_any = $_has_keys_any;
      result$data['_has_keys_any'] = l$$_has_keys_any?.map((e) => e).toList();
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => jsonbToJson(e)).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt == null ? null : jsonbToJson(l$$_lt);
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte == null ? null : jsonbToJson(l$$_lte);
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq == null ? null : jsonbToJson(l$$_neq);
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => jsonbToJson(e)).toList();
    }
    return result$data;
  }

  CopyWith$Input$jsonb_comparison_exp<Input$jsonb_comparison_exp>
      get copyWith => CopyWith$Input$jsonb_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$jsonb_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_cast = $_cast;
    final lOther$$_cast = other.$_cast;
    if (_$data.containsKey('_cast') != other._$data.containsKey('_cast')) {
      return false;
    }
    if (l$$_cast != lOther$$_cast) {
      return false;
    }
    final l$$_contained_in = $_contained_in;
    final lOther$$_contained_in = other.$_contained_in;
    if (_$data.containsKey('_contained_in') !=
        other._$data.containsKey('_contained_in')) {
      return false;
    }
    if (l$$_contained_in != lOther$$_contained_in) {
      return false;
    }
    final l$$_contains = $_contains;
    final lOther$$_contains = other.$_contains;
    if (_$data.containsKey('_contains') !=
        other._$data.containsKey('_contains')) {
      return false;
    }
    if (l$$_contains != lOther$$_contains) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_has_key = $_has_key;
    final lOther$$_has_key = other.$_has_key;
    if (_$data.containsKey('_has_key') !=
        other._$data.containsKey('_has_key')) {
      return false;
    }
    if (l$$_has_key != lOther$$_has_key) {
      return false;
    }
    final l$$_has_keys_all = $_has_keys_all;
    final lOther$$_has_keys_all = other.$_has_keys_all;
    if (_$data.containsKey('_has_keys_all') !=
        other._$data.containsKey('_has_keys_all')) {
      return false;
    }
    if (l$$_has_keys_all != null && lOther$$_has_keys_all != null) {
      if (l$$_has_keys_all.length != lOther$$_has_keys_all.length) {
        return false;
      }
      for (int i = 0; i < l$$_has_keys_all.length; i++) {
        final l$$_has_keys_all$entry = l$$_has_keys_all[i];
        final lOther$$_has_keys_all$entry = lOther$$_has_keys_all[i];
        if (l$$_has_keys_all$entry != lOther$$_has_keys_all$entry) {
          return false;
        }
      }
    } else if (l$$_has_keys_all != lOther$$_has_keys_all) {
      return false;
    }
    final l$$_has_keys_any = $_has_keys_any;
    final lOther$$_has_keys_any = other.$_has_keys_any;
    if (_$data.containsKey('_has_keys_any') !=
        other._$data.containsKey('_has_keys_any')) {
      return false;
    }
    if (l$$_has_keys_any != null && lOther$$_has_keys_any != null) {
      if (l$$_has_keys_any.length != lOther$$_has_keys_any.length) {
        return false;
      }
      for (int i = 0; i < l$$_has_keys_any.length; i++) {
        final l$$_has_keys_any$entry = l$$_has_keys_any[i];
        final lOther$$_has_keys_any$entry = lOther$$_has_keys_any[i];
        if (l$$_has_keys_any$entry != lOther$$_has_keys_any$entry) {
          return false;
        }
      }
    } else if (l$$_has_keys_any != lOther$$_has_keys_any) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_cast = $_cast;
    final l$$_contained_in = $_contained_in;
    final l$$_contains = $_contains;
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_has_key = $_has_key;
    final l$$_has_keys_all = $_has_keys_all;
    final l$$_has_keys_any = $_has_keys_any;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_cast') ? l$$_cast : const {},
      _$data.containsKey('_contained_in') ? l$$_contained_in : const {},
      _$data.containsKey('_contains') ? l$$_contains : const {},
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_has_key') ? l$$_has_key : const {},
      _$data.containsKey('_has_keys_all')
          ? l$$_has_keys_all == null
              ? null
              : Object.hashAll(l$$_has_keys_all.map((v) => v))
          : const {},
      _$data.containsKey('_has_keys_any')
          ? l$$_has_keys_any == null
              ? null
              : Object.hashAll(l$$_has_keys_any.map((v) => v))
          : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$jsonb_comparison_exp<TRes> {
  factory CopyWith$Input$jsonb_comparison_exp(
    Input$jsonb_comparison_exp instance,
    TRes Function(Input$jsonb_comparison_exp) then,
  ) = _CopyWithImpl$Input$jsonb_comparison_exp;

  factory CopyWith$Input$jsonb_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$jsonb_comparison_exp;

  TRes call({
    Input$jsonb_cast_exp? $_cast,
    JSONB? $_contained_in,
    JSONB? $_contains,
    JSONB? $_eq,
    JSONB? $_gt,
    JSONB? $_gte,
    String? $_has_key,
    List<String>? $_has_keys_all,
    List<String>? $_has_keys_any,
    List<JSONB>? $_in,
    bool? $_is_null,
    JSONB? $_lt,
    JSONB? $_lte,
    JSONB? $_neq,
    List<JSONB>? $_nin,
  });
  CopyWith$Input$jsonb_cast_exp<TRes> get $_cast;
}

class _CopyWithImpl$Input$jsonb_comparison_exp<TRes>
    implements CopyWith$Input$jsonb_comparison_exp<TRes> {
  _CopyWithImpl$Input$jsonb_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$jsonb_comparison_exp _instance;

  final TRes Function(Input$jsonb_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_cast = _undefined,
    Object? $_contained_in = _undefined,
    Object? $_contains = _undefined,
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_has_key = _undefined,
    Object? $_has_keys_all = _undefined,
    Object? $_has_keys_any = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$jsonb_comparison_exp._({
        ..._instance._$data,
        if ($_cast != _undefined) '_cast': ($_cast as Input$jsonb_cast_exp?),
        if ($_contained_in != _undefined)
          '_contained_in': ($_contained_in as JSONB?),
        if ($_contains != _undefined) '_contains': ($_contains as JSONB?),
        if ($_eq != _undefined) '_eq': ($_eq as JSONB?),
        if ($_gt != _undefined) '_gt': ($_gt as JSONB?),
        if ($_gte != _undefined) '_gte': ($_gte as JSONB?),
        if ($_has_key != _undefined) '_has_key': ($_has_key as String?),
        if ($_has_keys_all != _undefined)
          '_has_keys_all': ($_has_keys_all as List<String>?),
        if ($_has_keys_any != _undefined)
          '_has_keys_any': ($_has_keys_any as List<String>?),
        if ($_in != _undefined) '_in': ($_in as List<JSONB>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as JSONB?),
        if ($_lte != _undefined) '_lte': ($_lte as JSONB?),
        if ($_neq != _undefined) '_neq': ($_neq as JSONB?),
        if ($_nin != _undefined) '_nin': ($_nin as List<JSONB>?),
      }));
  CopyWith$Input$jsonb_cast_exp<TRes> get $_cast {
    final local$$_cast = _instance.$_cast;
    return local$$_cast == null
        ? CopyWith$Input$jsonb_cast_exp.stub(_then(_instance))
        : CopyWith$Input$jsonb_cast_exp(local$$_cast, (e) => call($_cast: e));
  }
}

class _CopyWithStubImpl$Input$jsonb_comparison_exp<TRes>
    implements CopyWith$Input$jsonb_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$jsonb_comparison_exp(this._res);

  TRes _res;

  call({
    Input$jsonb_cast_exp? $_cast,
    JSONB? $_contained_in,
    JSONB? $_contains,
    JSONB? $_eq,
    JSONB? $_gt,
    JSONB? $_gte,
    String? $_has_key,
    List<String>? $_has_keys_all,
    List<String>? $_has_keys_any,
    List<JSONB>? $_in,
    bool? $_is_null,
    JSONB? $_lt,
    JSONB? $_lte,
    JSONB? $_neq,
    List<JSONB>? $_nin,
  }) =>
      _res;
  CopyWith$Input$jsonb_cast_exp<TRes> get $_cast =>
      CopyWith$Input$jsonb_cast_exp.stub(_res);
}

class Input$payment_due_aggregate_bool_exp {
  factory Input$payment_due_aggregate_bool_exp({
    Input$payment_due_aggregate_bool_exp_bool_and? bool_and,
    Input$payment_due_aggregate_bool_exp_bool_or? bool_or,
    Input$payment_due_aggregate_bool_exp_count? count,
  }) =>
      Input$payment_due_aggregate_bool_exp._({
        if (bool_and != null) r'bool_and': bool_and,
        if (bool_or != null) r'bool_or': bool_or,
        if (count != null) r'count': count,
      });

  Input$payment_due_aggregate_bool_exp._(this._$data);

  factory Input$payment_due_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bool_and')) {
      final l$bool_and = data['bool_and'];
      result$data['bool_and'] = l$bool_and == null
          ? null
          : Input$payment_due_aggregate_bool_exp_bool_and.fromJson(
              (l$bool_and as Map<String, dynamic>));
    }
    if (data.containsKey('bool_or')) {
      final l$bool_or = data['bool_or'];
      result$data['bool_or'] = l$bool_or == null
          ? null
          : Input$payment_due_aggregate_bool_exp_bool_or.fromJson(
              (l$bool_or as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$payment_due_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$payment_due_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$payment_due_aggregate_bool_exp_bool_and? get bool_and =>
      (_$data['bool_and'] as Input$payment_due_aggregate_bool_exp_bool_and?);
  Input$payment_due_aggregate_bool_exp_bool_or? get bool_or =>
      (_$data['bool_or'] as Input$payment_due_aggregate_bool_exp_bool_or?);
  Input$payment_due_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$payment_due_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bool_and')) {
      final l$bool_and = bool_and;
      result$data['bool_and'] = l$bool_and?.toJson();
    }
    if (_$data.containsKey('bool_or')) {
      final l$bool_or = bool_or;
      result$data['bool_or'] = l$bool_or?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_aggregate_bool_exp<
          Input$payment_due_aggregate_bool_exp>
      get copyWith => CopyWith$Input$payment_due_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bool_and = bool_and;
    final lOther$bool_and = other.bool_and;
    if (_$data.containsKey('bool_and') !=
        other._$data.containsKey('bool_and')) {
      return false;
    }
    if (l$bool_and != lOther$bool_and) {
      return false;
    }
    final l$bool_or = bool_or;
    final lOther$bool_or = other.bool_or;
    if (_$data.containsKey('bool_or') != other._$data.containsKey('bool_or')) {
      return false;
    }
    if (l$bool_or != lOther$bool_or) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bool_and = bool_and;
    final l$bool_or = bool_or;
    final l$count = count;
    return Object.hashAll([
      _$data.containsKey('bool_and') ? l$bool_and : const {},
      _$data.containsKey('bool_or') ? l$bool_or : const {},
      _$data.containsKey('count') ? l$count : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$payment_due_aggregate_bool_exp(
    Input$payment_due_aggregate_bool_exp instance,
    TRes Function(Input$payment_due_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$payment_due_aggregate_bool_exp;

  factory CopyWith$Input$payment_due_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp;

  TRes call({
    Input$payment_due_aggregate_bool_exp_bool_and? bool_and,
    Input$payment_due_aggregate_bool_exp_bool_or? bool_or,
    Input$payment_due_aggregate_bool_exp_count? count,
  });
  CopyWith$Input$payment_due_aggregate_bool_exp_bool_and<TRes> get bool_and;
  CopyWith$Input$payment_due_aggregate_bool_exp_bool_or<TRes> get bool_or;
  CopyWith$Input$payment_due_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$payment_due_aggregate_bool_exp<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$payment_due_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$payment_due_aggregate_bool_exp _instance;

  final TRes Function(Input$payment_due_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bool_and = _undefined,
    Object? bool_or = _undefined,
    Object? count = _undefined,
  }) =>
      _then(Input$payment_due_aggregate_bool_exp._({
        ..._instance._$data,
        if (bool_and != _undefined)
          'bool_and':
              (bool_and as Input$payment_due_aggregate_bool_exp_bool_and?),
        if (bool_or != _undefined)
          'bool_or': (bool_or as Input$payment_due_aggregate_bool_exp_bool_or?),
        if (count != _undefined)
          'count': (count as Input$payment_due_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$payment_due_aggregate_bool_exp_bool_and<TRes> get bool_and {
    final local$bool_and = _instance.bool_and;
    return local$bool_and == null
        ? CopyWith$Input$payment_due_aggregate_bool_exp_bool_and.stub(
            _then(_instance))
        : CopyWith$Input$payment_due_aggregate_bool_exp_bool_and(
            local$bool_and, (e) => call(bool_and: e));
  }

  CopyWith$Input$payment_due_aggregate_bool_exp_bool_or<TRes> get bool_or {
    final local$bool_or = _instance.bool_or;
    return local$bool_or == null
        ? CopyWith$Input$payment_due_aggregate_bool_exp_bool_or.stub(
            _then(_instance))
        : CopyWith$Input$payment_due_aggregate_bool_exp_bool_or(
            local$bool_or, (e) => call(bool_or: e));
  }

  CopyWith$Input$payment_due_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$payment_due_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$payment_due_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp(this._res);

  TRes _res;

  call({
    Input$payment_due_aggregate_bool_exp_bool_and? bool_and,
    Input$payment_due_aggregate_bool_exp_bool_or? bool_or,
    Input$payment_due_aggregate_bool_exp_count? count,
  }) =>
      _res;
  CopyWith$Input$payment_due_aggregate_bool_exp_bool_and<TRes> get bool_and =>
      CopyWith$Input$payment_due_aggregate_bool_exp_bool_and.stub(_res);
  CopyWith$Input$payment_due_aggregate_bool_exp_bool_or<TRes> get bool_or =>
      CopyWith$Input$payment_due_aggregate_bool_exp_bool_or.stub(_res);
  CopyWith$Input$payment_due_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$payment_due_aggregate_bool_exp_count.stub(_res);
}

class Input$payment_due_aggregate_bool_exp_bool_and {
  factory Input$payment_due_aggregate_bool_exp_bool_and({
    required Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
        arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$payment_due_aggregate_bool_exp_bool_and._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$payment_due_aggregate_bool_exp_bool_and._(this._$data);

  factory Input$payment_due_aggregate_bool_exp_bool_and.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$payment_due_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$payment_due_aggregate_bool_exp_bool_and._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$payment_due_bool_exp? get filter =>
      (_$data['filter'] as Input$payment_due_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$payment_due_aggregate_bool_exp_bool_and<
          Input$payment_due_aggregate_bool_exp_bool_and>
      get copyWith => CopyWith$Input$payment_due_aggregate_bool_exp_bool_and(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_aggregate_bool_exp_bool_and) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$payment_due_aggregate_bool_exp_bool_and<TRes> {
  factory CopyWith$Input$payment_due_aggregate_bool_exp_bool_and(
    Input$payment_due_aggregate_bool_exp_bool_and instance,
    TRes Function(Input$payment_due_aggregate_bool_exp_bool_and) then,
  ) = _CopyWithImpl$Input$payment_due_aggregate_bool_exp_bool_and;

  factory CopyWith$Input$payment_due_aggregate_bool_exp_bool_and.stub(
          TRes res) =
      _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_bool_and;

  TRes call({
    Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$payment_due_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$payment_due_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithImpl$Input$payment_due_aggregate_bool_exp_bool_and(
    this._instance,
    this._then,
  );

  final Input$payment_due_aggregate_bool_exp_bool_and _instance;

  final TRes Function(Input$payment_due_aggregate_bool_exp_bool_and) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$payment_due_aggregate_bool_exp_bool_and._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$payment_due_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$payment_due_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$payment_due_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_due_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_bool_and(this._res);

  TRes _res;

  call({
    Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$payment_due_bool_exp<TRes> get filter =>
      CopyWith$Input$payment_due_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$payment_due_aggregate_bool_exp_bool_or {
  factory Input$payment_due_aggregate_bool_exp_bool_or({
    required Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
        arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$payment_due_aggregate_bool_exp_bool_or._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$payment_due_aggregate_bool_exp_bool_or._(this._$data);

  factory Input$payment_due_aggregate_bool_exp_bool_or.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$payment_due_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$payment_due_aggregate_bool_exp_bool_or._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$payment_due_bool_exp? get filter =>
      (_$data['filter'] as Input$payment_due_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$payment_due_aggregate_bool_exp_bool_or<
          Input$payment_due_aggregate_bool_exp_bool_or>
      get copyWith => CopyWith$Input$payment_due_aggregate_bool_exp_bool_or(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_aggregate_bool_exp_bool_or) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$payment_due_aggregate_bool_exp_bool_or<TRes> {
  factory CopyWith$Input$payment_due_aggregate_bool_exp_bool_or(
    Input$payment_due_aggregate_bool_exp_bool_or instance,
    TRes Function(Input$payment_due_aggregate_bool_exp_bool_or) then,
  ) = _CopyWithImpl$Input$payment_due_aggregate_bool_exp_bool_or;

  factory CopyWith$Input$payment_due_aggregate_bool_exp_bool_or.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_bool_or;

  TRes call({
    Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$payment_due_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$payment_due_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithImpl$Input$payment_due_aggregate_bool_exp_bool_or(
    this._instance,
    this._then,
  );

  final Input$payment_due_aggregate_bool_exp_bool_or _instance;

  final TRes Function(Input$payment_due_aggregate_bool_exp_bool_or) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$payment_due_aggregate_bool_exp_bool_or._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$payment_due_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$payment_due_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$payment_due_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_due_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_bool_or(this._res);

  TRes _res;

  call({
    Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$payment_due_bool_exp<TRes> get filter =>
      CopyWith$Input$payment_due_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$payment_due_aggregate_bool_exp_count {
  factory Input$payment_due_aggregate_bool_exp_count({
    List<Enum$payment_due_select_column>? arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$payment_due_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$payment_due_aggregate_bool_exp_count._(this._$data);

  factory Input$payment_due_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$payment_due_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$payment_due_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$payment_due_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$payment_due_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$payment_due_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$payment_due_bool_exp? get filter =>
      (_$data['filter'] as Input$payment_due_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$payment_due_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$payment_due_aggregate_bool_exp_count<
          Input$payment_due_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$payment_due_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$payment_due_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$payment_due_aggregate_bool_exp_count(
    Input$payment_due_aggregate_bool_exp_count instance,
    TRes Function(Input$payment_due_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$payment_due_aggregate_bool_exp_count;

  factory CopyWith$Input$payment_due_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_count;

  TRes call({
    List<Enum$payment_due_select_column>? arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$payment_due_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$payment_due_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$payment_due_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$payment_due_aggregate_bool_exp_count _instance;

  final TRes Function(Input$payment_due_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$payment_due_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$payment_due_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$payment_due_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$payment_due_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$payment_due_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_due_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$payment_due_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$payment_due_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$payment_due_select_column>? arguments,
    bool? distinct,
    Input$payment_due_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$payment_due_bool_exp<TRes> get filter =>
      CopyWith$Input$payment_due_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$payment_due_aggregate_order_by {
  factory Input$payment_due_aggregate_order_by({
    Input$payment_due_avg_order_by? avg,
    Enum$order_by? count,
    Input$payment_due_max_order_by? max,
    Input$payment_due_min_order_by? min,
    Input$payment_due_stddev_order_by? stddev,
    Input$payment_due_stddev_pop_order_by? stddev_pop,
    Input$payment_due_stddev_samp_order_by? stddev_samp,
    Input$payment_due_sum_order_by? sum,
    Input$payment_due_var_pop_order_by? var_pop,
    Input$payment_due_var_samp_order_by? var_samp,
    Input$payment_due_variance_order_by? variance,
  }) =>
      Input$payment_due_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$payment_due_aggregate_order_by._(this._$data);

  factory Input$payment_due_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$payment_due_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$payment_due_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$payment_due_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$payment_due_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$payment_due_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$payment_due_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$payment_due_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$payment_due_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$payment_due_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$payment_due_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$payment_due_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$payment_due_avg_order_by? get avg =>
      (_$data['avg'] as Input$payment_due_avg_order_by?);
  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$payment_due_max_order_by? get max =>
      (_$data['max'] as Input$payment_due_max_order_by?);
  Input$payment_due_min_order_by? get min =>
      (_$data['min'] as Input$payment_due_min_order_by?);
  Input$payment_due_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$payment_due_stddev_order_by?);
  Input$payment_due_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$payment_due_stddev_pop_order_by?);
  Input$payment_due_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$payment_due_stddev_samp_order_by?);
  Input$payment_due_sum_order_by? get sum =>
      (_$data['sum'] as Input$payment_due_sum_order_by?);
  Input$payment_due_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$payment_due_var_pop_order_by?);
  Input$payment_due_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$payment_due_var_samp_order_by?);
  Input$payment_due_variance_order_by? get variance =>
      (_$data['variance'] as Input$payment_due_variance_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_aggregate_order_by<
          Input$payment_due_aggregate_order_by>
      get copyWith => CopyWith$Input$payment_due_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_aggregate_order_by<TRes> {
  factory CopyWith$Input$payment_due_aggregate_order_by(
    Input$payment_due_aggregate_order_by instance,
    TRes Function(Input$payment_due_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_aggregate_order_by;

  factory CopyWith$Input$payment_due_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_aggregate_order_by;

  TRes call({
    Input$payment_due_avg_order_by? avg,
    Enum$order_by? count,
    Input$payment_due_max_order_by? max,
    Input$payment_due_min_order_by? min,
    Input$payment_due_stddev_order_by? stddev,
    Input$payment_due_stddev_pop_order_by? stddev_pop,
    Input$payment_due_stddev_samp_order_by? stddev_samp,
    Input$payment_due_sum_order_by? sum,
    Input$payment_due_var_pop_order_by? var_pop,
    Input$payment_due_var_samp_order_by? var_samp,
    Input$payment_due_variance_order_by? variance,
  });
  CopyWith$Input$payment_due_avg_order_by<TRes> get avg;
  CopyWith$Input$payment_due_max_order_by<TRes> get max;
  CopyWith$Input$payment_due_min_order_by<TRes> get min;
  CopyWith$Input$payment_due_stddev_order_by<TRes> get stddev;
  CopyWith$Input$payment_due_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$payment_due_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$payment_due_sum_order_by<TRes> get sum;
  CopyWith$Input$payment_due_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$payment_due_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$payment_due_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$payment_due_aggregate_order_by<TRes>
    implements CopyWith$Input$payment_due_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_aggregate_order_by _instance;

  final TRes Function(Input$payment_due_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$payment_due_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$payment_due_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$payment_due_max_order_by?),
        if (min != _undefined) 'min': (min as Input$payment_due_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$payment_due_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$payment_due_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp':
              (stddev_samp as Input$payment_due_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$payment_due_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$payment_due_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$payment_due_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$payment_due_variance_order_by?),
      }));
  CopyWith$Input$payment_due_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$payment_due_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_avg_order_by(
            local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$payment_due_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$payment_due_max_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_max_order_by(
            local$max, (e) => call(max: e));
  }

  CopyWith$Input$payment_due_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$payment_due_min_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_min_order_by(
            local$min, (e) => call(min: e));
  }

  CopyWith$Input$payment_due_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$payment_due_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$payment_due_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$payment_due_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$payment_due_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$payment_due_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$payment_due_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$payment_due_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_sum_order_by(
            local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$payment_due_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$payment_due_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$payment_due_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$payment_due_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$payment_due_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$payment_due_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_aggregate_order_by<TRes>
    implements CopyWith$Input$payment_due_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$payment_due_avg_order_by? avg,
    Enum$order_by? count,
    Input$payment_due_max_order_by? max,
    Input$payment_due_min_order_by? min,
    Input$payment_due_stddev_order_by? stddev,
    Input$payment_due_stddev_pop_order_by? stddev_pop,
    Input$payment_due_stddev_samp_order_by? stddev_samp,
    Input$payment_due_sum_order_by? sum,
    Input$payment_due_var_pop_order_by? var_pop,
    Input$payment_due_var_samp_order_by? var_samp,
    Input$payment_due_variance_order_by? variance,
  }) =>
      _res;
  CopyWith$Input$payment_due_avg_order_by<TRes> get avg =>
      CopyWith$Input$payment_due_avg_order_by.stub(_res);
  CopyWith$Input$payment_due_max_order_by<TRes> get max =>
      CopyWith$Input$payment_due_max_order_by.stub(_res);
  CopyWith$Input$payment_due_min_order_by<TRes> get min =>
      CopyWith$Input$payment_due_min_order_by.stub(_res);
  CopyWith$Input$payment_due_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$payment_due_stddev_order_by.stub(_res);
  CopyWith$Input$payment_due_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$payment_due_stddev_pop_order_by.stub(_res);
  CopyWith$Input$payment_due_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$payment_due_stddev_samp_order_by.stub(_res);
  CopyWith$Input$payment_due_sum_order_by<TRes> get sum =>
      CopyWith$Input$payment_due_sum_order_by.stub(_res);
  CopyWith$Input$payment_due_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$payment_due_var_pop_order_by.stub(_res);
  CopyWith$Input$payment_due_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$payment_due_var_samp_order_by.stub(_res);
  CopyWith$Input$payment_due_variance_order_by<TRes> get variance =>
      CopyWith$Input$payment_due_variance_order_by.stub(_res);
}

class Input$payment_due_arr_rel_insert_input {
  factory Input$payment_due_arr_rel_insert_input({
    required List<Input$payment_due_insert_input> data,
    Input$payment_due_on_conflict? on_conflict,
  }) =>
      Input$payment_due_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$payment_due_arr_rel_insert_input._(this._$data);

  factory Input$payment_due_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) => Input$payment_due_insert_input.fromJson(
            (e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$payment_due_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$payment_due_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$payment_due_insert_input> get data =>
      (_$data['data'] as List<Input$payment_due_insert_input>);
  Input$payment_due_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$payment_due_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_arr_rel_insert_input<
          Input$payment_due_arr_rel_insert_input>
      get copyWith => CopyWith$Input$payment_due_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$payment_due_arr_rel_insert_input(
    Input$payment_due_arr_rel_insert_input instance,
    TRes Function(Input$payment_due_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$payment_due_arr_rel_insert_input;

  factory CopyWith$Input$payment_due_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_arr_rel_insert_input;

  TRes call({
    List<Input$payment_due_insert_input>? data,
    Input$payment_due_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$payment_due_insert_input> Function(
              Iterable<
                  CopyWith$Input$payment_due_insert_input<
                      Input$payment_due_insert_input>>)
          _fn);
  CopyWith$Input$payment_due_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$payment_due_arr_rel_insert_input<TRes>
    implements CopyWith$Input$payment_due_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$payment_due_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$payment_due_arr_rel_insert_input _instance;

  final TRes Function(Input$payment_due_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$payment_due_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$payment_due_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$payment_due_on_conflict?),
      }));
  TRes data(
          Iterable<Input$payment_due_insert_input> Function(
                  Iterable<
                      CopyWith$Input$payment_due_insert_input<
                          Input$payment_due_insert_input>>)
              _fn) =>
      call(
          data: _fn(
              _instance.data.map((e) => CopyWith$Input$payment_due_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$payment_due_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$payment_due_on_conflict.stub(_then(_instance))
        : CopyWith$Input$payment_due_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_arr_rel_insert_input<TRes>
    implements CopyWith$Input$payment_due_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$payment_due_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$payment_due_insert_input>? data,
    Input$payment_due_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$payment_due_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$payment_due_on_conflict.stub(_res);
}

class Input$payment_due_avg_order_by {
  factory Input$payment_due_avg_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_avg_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_avg_order_by._(this._$data);

  factory Input$payment_due_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_avg_order_by<Input$payment_due_avg_order_by>
      get copyWith => CopyWith$Input$payment_due_avg_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_avg_order_by<TRes> {
  factory CopyWith$Input$payment_due_avg_order_by(
    Input$payment_due_avg_order_by instance,
    TRes Function(Input$payment_due_avg_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_avg_order_by;

  factory CopyWith$Input$payment_due_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_avg_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_avg_order_by<TRes>
    implements CopyWith$Input$payment_due_avg_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_avg_order_by _instance;

  final TRes Function(Input$payment_due_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_avg_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_avg_order_by<TRes>
    implements CopyWith$Input$payment_due_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_bool_exp {
  factory Input$payment_due_bool_exp({
    List<Input$payment_due_bool_exp>? $_and,
    Input$payment_due_bool_exp? $_not,
    List<Input$payment_due_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$timestamptz_comparison_exp? deadline,
    Input$Boolean_comparison_exp? fulfilled,
    Input$Int_comparison_exp? payment_due,
    Input$uuid_comparison_exp? payment_due_id,
    Input$umkm_bool_exp? umkm,
    Input$Int_comparison_exp? umkm_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      Input$payment_due_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (deadline != null) r'deadline': deadline,
        if (fulfilled != null) r'fulfilled': fulfilled,
        if (payment_due != null) r'payment_due': payment_due,
        if (payment_due_id != null) r'payment_due_id': payment_due_id,
        if (umkm != null) r'umkm': umkm,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_due_bool_exp._(this._$data);

  factory Input$payment_due_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$payment_due_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$payment_due_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$payment_due_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('deadline')) {
      final l$deadline = data['deadline'];
      result$data['deadline'] = l$deadline == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$deadline as Map<String, dynamic>));
    }
    if (data.containsKey('fulfilled')) {
      final l$fulfilled = data['fulfilled'];
      result$data['fulfilled'] = l$fulfilled == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$fulfilled as Map<String, dynamic>));
    }
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$payment_due as Map<String, dynamic>));
    }
    if (data.containsKey('payment_due_id')) {
      final l$payment_due_id = data['payment_due_id'];
      result$data['payment_due_id'] = l$payment_due_id == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$payment_due_id as Map<String, dynamic>));
    }
    if (data.containsKey('umkm')) {
      final l$umkm = data['umkm'];
      result$data['umkm'] = l$umkm == null
          ? null
          : Input$umkm_bool_exp.fromJson((l$umkm as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$umkm_id as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    return Input$payment_due_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$payment_due_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$payment_due_bool_exp>?);
  Input$payment_due_bool_exp? get $_not =>
      (_$data['_not'] as Input$payment_due_bool_exp?);
  List<Input$payment_due_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$payment_due_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$timestamptz_comparison_exp? get deadline =>
      (_$data['deadline'] as Input$timestamptz_comparison_exp?);
  Input$Boolean_comparison_exp? get fulfilled =>
      (_$data['fulfilled'] as Input$Boolean_comparison_exp?);
  Input$Int_comparison_exp? get payment_due =>
      (_$data['payment_due'] as Input$Int_comparison_exp?);
  Input$uuid_comparison_exp? get payment_due_id =>
      (_$data['payment_due_id'] as Input$uuid_comparison_exp?);
  Input$umkm_bool_exp? get umkm => (_$data['umkm'] as Input$umkm_bool_exp?);
  Input$Int_comparison_exp? get umkm_id =>
      (_$data['umkm_id'] as Input$Int_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('deadline')) {
      final l$deadline = deadline;
      result$data['deadline'] = l$deadline?.toJson();
    }
    if (_$data.containsKey('fulfilled')) {
      final l$fulfilled = fulfilled;
      result$data['fulfilled'] = l$fulfilled?.toJson();
    }
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] = l$payment_due?.toJson();
    }
    if (_$data.containsKey('payment_due_id')) {
      final l$payment_due_id = payment_due_id;
      result$data['payment_due_id'] = l$payment_due_id?.toJson();
    }
    if (_$data.containsKey('umkm')) {
      final l$umkm = umkm;
      result$data['umkm'] = l$umkm?.toJson();
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_bool_exp<Input$payment_due_bool_exp>
      get copyWith => CopyWith$Input$payment_due_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$deadline = deadline;
    final lOther$deadline = other.deadline;
    if (_$data.containsKey('deadline') !=
        other._$data.containsKey('deadline')) {
      return false;
    }
    if (l$deadline != lOther$deadline) {
      return false;
    }
    final l$fulfilled = fulfilled;
    final lOther$fulfilled = other.fulfilled;
    if (_$data.containsKey('fulfilled') !=
        other._$data.containsKey('fulfilled')) {
      return false;
    }
    if (l$fulfilled != lOther$fulfilled) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (_$data.containsKey('payment_due_id') !=
        other._$data.containsKey('payment_due_id')) {
      return false;
    }
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    final l$umkm = umkm;
    final lOther$umkm = other.umkm;
    if (_$data.containsKey('umkm') != other._$data.containsKey('umkm')) {
      return false;
    }
    if (l$umkm != lOther$umkm) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$deadline = deadline;
    final l$fulfilled = fulfilled;
    final l$payment_due = payment_due;
    final l$payment_due_id = payment_due_id;
    final l$umkm = umkm;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('deadline') ? l$deadline : const {},
      _$data.containsKey('fulfilled') ? l$fulfilled : const {},
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('payment_due_id') ? l$payment_due_id : const {},
      _$data.containsKey('umkm') ? l$umkm : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_bool_exp<TRes> {
  factory CopyWith$Input$payment_due_bool_exp(
    Input$payment_due_bool_exp instance,
    TRes Function(Input$payment_due_bool_exp) then,
  ) = _CopyWithImpl$Input$payment_due_bool_exp;

  factory CopyWith$Input$payment_due_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_bool_exp;

  TRes call({
    List<Input$payment_due_bool_exp>? $_and,
    Input$payment_due_bool_exp? $_not,
    List<Input$payment_due_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$timestamptz_comparison_exp? deadline,
    Input$Boolean_comparison_exp? fulfilled,
    Input$Int_comparison_exp? payment_due,
    Input$uuid_comparison_exp? payment_due_id,
    Input$umkm_bool_exp? umkm,
    Input$Int_comparison_exp? umkm_id,
    Input$timestamptz_comparison_exp? updated_at,
  });
  TRes $_and(
      Iterable<Input$payment_due_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$payment_due_bool_exp<
                      Input$payment_due_bool_exp>>?)
          _fn);
  CopyWith$Input$payment_due_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$payment_due_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$payment_due_bool_exp<
                      Input$payment_due_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get deadline;
  CopyWith$Input$Boolean_comparison_exp<TRes> get fulfilled;
  CopyWith$Input$Int_comparison_exp<TRes> get payment_due;
  CopyWith$Input$uuid_comparison_exp<TRes> get payment_due_id;
  CopyWith$Input$umkm_bool_exp<TRes> get umkm;
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
}

class _CopyWithImpl$Input$payment_due_bool_exp<TRes>
    implements CopyWith$Input$payment_due_bool_exp<TRes> {
  _CopyWithImpl$Input$payment_due_bool_exp(
    this._instance,
    this._then,
  );

  final Input$payment_due_bool_exp _instance;

  final TRes Function(Input$payment_due_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? deadline = _undefined,
    Object? fulfilled = _undefined,
    Object? payment_due = _undefined,
    Object? payment_due_id = _undefined,
    Object? umkm = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_due_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$payment_due_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$payment_due_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$payment_due_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (deadline != _undefined)
          'deadline': (deadline as Input$timestamptz_comparison_exp?),
        if (fulfilled != _undefined)
          'fulfilled': (fulfilled as Input$Boolean_comparison_exp?),
        if (payment_due != _undefined)
          'payment_due': (payment_due as Input$Int_comparison_exp?),
        if (payment_due_id != _undefined)
          'payment_due_id': (payment_due_id as Input$uuid_comparison_exp?),
        if (umkm != _undefined) 'umkm': (umkm as Input$umkm_bool_exp?),
        if (umkm_id != _undefined)
          'umkm_id': (umkm_id as Input$Int_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$payment_due_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$payment_due_bool_exp<
                          Input$payment_due_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(
              _instance.$_and?.map((e) => CopyWith$Input$payment_due_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$payment_due_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$payment_due_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_due_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$payment_due_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$payment_due_bool_exp<
                          Input$payment_due_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(
              _instance.$_or?.map((e) => CopyWith$Input$payment_due_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get deadline {
    final local$deadline = _instance.deadline;
    return local$deadline == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$deadline, (e) => call(deadline: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get fulfilled {
    final local$fulfilled = _instance.fulfilled;
    return local$fulfilled == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$fulfilled, (e) => call(fulfilled: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get payment_due {
    final local$payment_due = _instance.payment_due;
    return local$payment_due == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$payment_due, (e) => call(payment_due: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get payment_due_id {
    final local$payment_due_id = _instance.payment_due_id;
    return local$payment_due_id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$payment_due_id, (e) => call(payment_due_id: e));
  }

  CopyWith$Input$umkm_bool_exp<TRes> get umkm {
    final local$umkm = _instance.umkm;
    return local$umkm == null
        ? CopyWith$Input$umkm_bool_exp.stub(_then(_instance))
        : CopyWith$Input$umkm_bool_exp(local$umkm, (e) => call(umkm: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id {
    final local$umkm_id = _instance.umkm_id;
    return local$umkm_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$umkm_id, (e) => call(umkm_id: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_bool_exp<TRes>
    implements CopyWith$Input$payment_due_bool_exp<TRes> {
  _CopyWithStubImpl$Input$payment_due_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$payment_due_bool_exp>? $_and,
    Input$payment_due_bool_exp? $_not,
    List<Input$payment_due_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$timestamptz_comparison_exp? deadline,
    Input$Boolean_comparison_exp? fulfilled,
    Input$Int_comparison_exp? payment_due,
    Input$uuid_comparison_exp? payment_due_id,
    Input$umkm_bool_exp? umkm,
    Input$Int_comparison_exp? umkm_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$payment_due_bool_exp<TRes> get $_not =>
      CopyWith$Input$payment_due_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get deadline =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get fulfilled =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get payment_due =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get payment_due_id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$umkm_bool_exp<TRes> get umkm =>
      CopyWith$Input$umkm_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$payment_due_inc_input {
  factory Input$payment_due_inc_input({
    int? payment_due,
    int? umkm_id,
  }) =>
      Input$payment_due_inc_input._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_inc_input._(this._$data);

  factory Input$payment_due_inc_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = (l$payment_due as int?);
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    return Input$payment_due_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get payment_due => (_$data['payment_due'] as int?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] = l$payment_due;
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    return result$data;
  }

  CopyWith$Input$payment_due_inc_input<Input$payment_due_inc_input>
      get copyWith => CopyWith$Input$payment_due_inc_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_inc_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_inc_input<TRes> {
  factory CopyWith$Input$payment_due_inc_input(
    Input$payment_due_inc_input instance,
    TRes Function(Input$payment_due_inc_input) then,
  ) = _CopyWithImpl$Input$payment_due_inc_input;

  factory CopyWith$Input$payment_due_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_inc_input;

  TRes call({
    int? payment_due,
    int? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_inc_input<TRes>
    implements CopyWith$Input$payment_due_inc_input<TRes> {
  _CopyWithImpl$Input$payment_due_inc_input(
    this._instance,
    this._then,
  );

  final Input$payment_due_inc_input _instance;

  final TRes Function(Input$payment_due_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_inc_input._({
        ..._instance._$data,
        if (payment_due != _undefined) 'payment_due': (payment_due as int?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_inc_input<TRes>
    implements CopyWith$Input$payment_due_inc_input<TRes> {
  _CopyWithStubImpl$Input$payment_due_inc_input(this._res);

  TRes _res;

  call({
    int? payment_due,
    int? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_insert_input {
  factory Input$payment_due_insert_input({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    Input$umkm_obj_rel_insert_input? umkm,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      Input$payment_due_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (deadline != null) r'deadline': deadline,
        if (fulfilled != null) r'fulfilled': fulfilled,
        if (payment_due != null) r'payment_due': payment_due,
        if (payment_due_id != null) r'payment_due_id': payment_due_id,
        if (umkm != null) r'umkm': umkm,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_due_insert_input._(this._$data);

  factory Input$payment_due_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('deadline')) {
      final l$deadline = data['deadline'];
      result$data['deadline'] =
          l$deadline == null ? null : DateTime.parse((l$deadline as String));
    }
    if (data.containsKey('fulfilled')) {
      final l$fulfilled = data['fulfilled'];
      result$data['fulfilled'] = (l$fulfilled as bool?);
    }
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = (l$payment_due as int?);
    }
    if (data.containsKey('payment_due_id')) {
      final l$payment_due_id = data['payment_due_id'];
      result$data['payment_due_id'] =
          l$payment_due_id == null ? null : uuidFromJson(l$payment_due_id);
    }
    if (data.containsKey('umkm')) {
      final l$umkm = data['umkm'];
      result$data['umkm'] = l$umkm == null
          ? null
          : Input$umkm_obj_rel_insert_input.fromJson(
              (l$umkm as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$payment_due_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  DateTime? get deadline => (_$data['deadline'] as DateTime?);
  bool? get fulfilled => (_$data['fulfilled'] as bool?);
  int? get payment_due => (_$data['payment_due'] as int?);
  UUID? get payment_due_id => (_$data['payment_due_id'] as UUID?);
  Input$umkm_obj_rel_insert_input? get umkm =>
      (_$data['umkm'] as Input$umkm_obj_rel_insert_input?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('deadline')) {
      final l$deadline = deadline;
      result$data['deadline'] = l$deadline?.toIso8601String();
    }
    if (_$data.containsKey('fulfilled')) {
      final l$fulfilled = fulfilled;
      result$data['fulfilled'] = l$fulfilled;
    }
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] = l$payment_due;
    }
    if (_$data.containsKey('payment_due_id')) {
      final l$payment_due_id = payment_due_id;
      result$data['payment_due_id'] =
          l$payment_due_id == null ? null : uuidToJson(l$payment_due_id);
    }
    if (_$data.containsKey('umkm')) {
      final l$umkm = umkm;
      result$data['umkm'] = l$umkm?.toJson();
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_insert_input<Input$payment_due_insert_input>
      get copyWith => CopyWith$Input$payment_due_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$deadline = deadline;
    final lOther$deadline = other.deadline;
    if (_$data.containsKey('deadline') !=
        other._$data.containsKey('deadline')) {
      return false;
    }
    if (l$deadline != lOther$deadline) {
      return false;
    }
    final l$fulfilled = fulfilled;
    final lOther$fulfilled = other.fulfilled;
    if (_$data.containsKey('fulfilled') !=
        other._$data.containsKey('fulfilled')) {
      return false;
    }
    if (l$fulfilled != lOther$fulfilled) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (_$data.containsKey('payment_due_id') !=
        other._$data.containsKey('payment_due_id')) {
      return false;
    }
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    final l$umkm = umkm;
    final lOther$umkm = other.umkm;
    if (_$data.containsKey('umkm') != other._$data.containsKey('umkm')) {
      return false;
    }
    if (l$umkm != lOther$umkm) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$deadline = deadline;
    final l$fulfilled = fulfilled;
    final l$payment_due = payment_due;
    final l$payment_due_id = payment_due_id;
    final l$umkm = umkm;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('deadline') ? l$deadline : const {},
      _$data.containsKey('fulfilled') ? l$fulfilled : const {},
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('payment_due_id') ? l$payment_due_id : const {},
      _$data.containsKey('umkm') ? l$umkm : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_insert_input<TRes> {
  factory CopyWith$Input$payment_due_insert_input(
    Input$payment_due_insert_input instance,
    TRes Function(Input$payment_due_insert_input) then,
  ) = _CopyWithImpl$Input$payment_due_insert_input;

  factory CopyWith$Input$payment_due_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_insert_input;

  TRes call({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    Input$umkm_obj_rel_insert_input? umkm,
    int? umkm_id,
    DateTime? updated_at,
  });
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get umkm;
}

class _CopyWithImpl$Input$payment_due_insert_input<TRes>
    implements CopyWith$Input$payment_due_insert_input<TRes> {
  _CopyWithImpl$Input$payment_due_insert_input(
    this._instance,
    this._then,
  );

  final Input$payment_due_insert_input _instance;

  final TRes Function(Input$payment_due_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? deadline = _undefined,
    Object? fulfilled = _undefined,
    Object? payment_due = _undefined,
    Object? payment_due_id = _undefined,
    Object? umkm = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_due_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (deadline != _undefined) 'deadline': (deadline as DateTime?),
        if (fulfilled != _undefined) 'fulfilled': (fulfilled as bool?),
        if (payment_due != _undefined) 'payment_due': (payment_due as int?),
        if (payment_due_id != _undefined)
          'payment_due_id': (payment_due_id as UUID?),
        if (umkm != _undefined)
          'umkm': (umkm as Input$umkm_obj_rel_insert_input?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get umkm {
    final local$umkm = _instance.umkm;
    return local$umkm == null
        ? CopyWith$Input$umkm_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$umkm_obj_rel_insert_input(
            local$umkm, (e) => call(umkm: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_insert_input<TRes>
    implements CopyWith$Input$payment_due_insert_input<TRes> {
  _CopyWithStubImpl$Input$payment_due_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    Input$umkm_obj_rel_insert_input? umkm,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      _res;
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get umkm =>
      CopyWith$Input$umkm_obj_rel_insert_input.stub(_res);
}

class Input$payment_due_max_order_by {
  factory Input$payment_due_max_order_by({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      Input$payment_due_max_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (deadline != null) r'deadline': deadline,
        if (payment_due != null) r'payment_due': payment_due,
        if (payment_due_id != null) r'payment_due_id': payment_due_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_due_max_order_by._(this._$data);

  factory Input$payment_due_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('deadline')) {
      final l$deadline = data['deadline'];
      result$data['deadline'] = l$deadline == null
          ? null
          : fromJson$Enum$order_by((l$deadline as String));
    }
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('payment_due_id')) {
      final l$payment_due_id = data['payment_due_id'];
      result$data['payment_due_id'] = l$payment_due_id == null
          ? null
          : fromJson$Enum$order_by((l$payment_due_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$payment_due_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get deadline => (_$data['deadline'] as Enum$order_by?);
  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get payment_due_id =>
      (_$data['payment_due_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('deadline')) {
      final l$deadline = deadline;
      result$data['deadline'] =
          l$deadline == null ? null : toJson$Enum$order_by(l$deadline);
    }
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('payment_due_id')) {
      final l$payment_due_id = payment_due_id;
      result$data['payment_due_id'] = l$payment_due_id == null
          ? null
          : toJson$Enum$order_by(l$payment_due_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_max_order_by<Input$payment_due_max_order_by>
      get copyWith => CopyWith$Input$payment_due_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$deadline = deadline;
    final lOther$deadline = other.deadline;
    if (_$data.containsKey('deadline') !=
        other._$data.containsKey('deadline')) {
      return false;
    }
    if (l$deadline != lOther$deadline) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (_$data.containsKey('payment_due_id') !=
        other._$data.containsKey('payment_due_id')) {
      return false;
    }
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$deadline = deadline;
    final l$payment_due = payment_due;
    final l$payment_due_id = payment_due_id;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('deadline') ? l$deadline : const {},
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('payment_due_id') ? l$payment_due_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_max_order_by<TRes> {
  factory CopyWith$Input$payment_due_max_order_by(
    Input$payment_due_max_order_by instance,
    TRes Function(Input$payment_due_max_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_max_order_by;

  factory CopyWith$Input$payment_due_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_max_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$payment_due_max_order_by<TRes>
    implements CopyWith$Input$payment_due_max_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_max_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_max_order_by _instance;

  final TRes Function(Input$payment_due_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? deadline = _undefined,
    Object? payment_due = _undefined,
    Object? payment_due_id = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_due_max_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (deadline != _undefined) 'deadline': (deadline as Enum$order_by?),
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (payment_due_id != _undefined)
          'payment_due_id': (payment_due_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_max_order_by<TRes>
    implements CopyWith$Input$payment_due_max_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$payment_due_min_order_by {
  factory Input$payment_due_min_order_by({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      Input$payment_due_min_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (deadline != null) r'deadline': deadline,
        if (payment_due != null) r'payment_due': payment_due,
        if (payment_due_id != null) r'payment_due_id': payment_due_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_due_min_order_by._(this._$data);

  factory Input$payment_due_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('deadline')) {
      final l$deadline = data['deadline'];
      result$data['deadline'] = l$deadline == null
          ? null
          : fromJson$Enum$order_by((l$deadline as String));
    }
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('payment_due_id')) {
      final l$payment_due_id = data['payment_due_id'];
      result$data['payment_due_id'] = l$payment_due_id == null
          ? null
          : fromJson$Enum$order_by((l$payment_due_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$payment_due_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get deadline => (_$data['deadline'] as Enum$order_by?);
  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get payment_due_id =>
      (_$data['payment_due_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('deadline')) {
      final l$deadline = deadline;
      result$data['deadline'] =
          l$deadline == null ? null : toJson$Enum$order_by(l$deadline);
    }
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('payment_due_id')) {
      final l$payment_due_id = payment_due_id;
      result$data['payment_due_id'] = l$payment_due_id == null
          ? null
          : toJson$Enum$order_by(l$payment_due_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_min_order_by<Input$payment_due_min_order_by>
      get copyWith => CopyWith$Input$payment_due_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$deadline = deadline;
    final lOther$deadline = other.deadline;
    if (_$data.containsKey('deadline') !=
        other._$data.containsKey('deadline')) {
      return false;
    }
    if (l$deadline != lOther$deadline) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (_$data.containsKey('payment_due_id') !=
        other._$data.containsKey('payment_due_id')) {
      return false;
    }
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$deadline = deadline;
    final l$payment_due = payment_due;
    final l$payment_due_id = payment_due_id;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('deadline') ? l$deadline : const {},
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('payment_due_id') ? l$payment_due_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_min_order_by<TRes> {
  factory CopyWith$Input$payment_due_min_order_by(
    Input$payment_due_min_order_by instance,
    TRes Function(Input$payment_due_min_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_min_order_by;

  factory CopyWith$Input$payment_due_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_min_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$payment_due_min_order_by<TRes>
    implements CopyWith$Input$payment_due_min_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_min_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_min_order_by _instance;

  final TRes Function(Input$payment_due_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? deadline = _undefined,
    Object? payment_due = _undefined,
    Object? payment_due_id = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_due_min_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (deadline != _undefined) 'deadline': (deadline as Enum$order_by?),
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (payment_due_id != _undefined)
          'payment_due_id': (payment_due_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_min_order_by<TRes>
    implements CopyWith$Input$payment_due_min_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$payment_due_on_conflict {
  factory Input$payment_due_on_conflict({
    required Enum$payment_due_constraint constraint,
    required List<Enum$payment_due_update_column> update_columns,
    Input$payment_due_bool_exp? where,
  }) =>
      Input$payment_due_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$payment_due_on_conflict._(this._$data);

  factory Input$payment_due_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$payment_due_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$payment_due_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$payment_due_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$payment_due_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$payment_due_constraint get constraint =>
      (_$data['constraint'] as Enum$payment_due_constraint);
  List<Enum$payment_due_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$payment_due_update_column>);
  Input$payment_due_bool_exp? get where =>
      (_$data['where'] as Input$payment_due_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$payment_due_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$payment_due_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_on_conflict<Input$payment_due_on_conflict>
      get copyWith => CopyWith$Input$payment_due_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_on_conflict<TRes> {
  factory CopyWith$Input$payment_due_on_conflict(
    Input$payment_due_on_conflict instance,
    TRes Function(Input$payment_due_on_conflict) then,
  ) = _CopyWithImpl$Input$payment_due_on_conflict;

  factory CopyWith$Input$payment_due_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_on_conflict;

  TRes call({
    Enum$payment_due_constraint? constraint,
    List<Enum$payment_due_update_column>? update_columns,
    Input$payment_due_bool_exp? where,
  });
  CopyWith$Input$payment_due_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$payment_due_on_conflict<TRes>
    implements CopyWith$Input$payment_due_on_conflict<TRes> {
  _CopyWithImpl$Input$payment_due_on_conflict(
    this._instance,
    this._then,
  );

  final Input$payment_due_on_conflict _instance;

  final TRes Function(Input$payment_due_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$payment_due_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$payment_due_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$payment_due_update_column>),
        if (where != _undefined)
          'where': (where as Input$payment_due_bool_exp?),
      }));
  CopyWith$Input$payment_due_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$payment_due_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_due_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_on_conflict<TRes>
    implements CopyWith$Input$payment_due_on_conflict<TRes> {
  _CopyWithStubImpl$Input$payment_due_on_conflict(this._res);

  TRes _res;

  call({
    Enum$payment_due_constraint? constraint,
    List<Enum$payment_due_update_column>? update_columns,
    Input$payment_due_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$payment_due_bool_exp<TRes> get where =>
      CopyWith$Input$payment_due_bool_exp.stub(_res);
}

class Input$payment_due_order_by {
  factory Input$payment_due_order_by({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? fulfilled,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Input$umkm_order_by? umkm,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      Input$payment_due_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (deadline != null) r'deadline': deadline,
        if (fulfilled != null) r'fulfilled': fulfilled,
        if (payment_due != null) r'payment_due': payment_due,
        if (payment_due_id != null) r'payment_due_id': payment_due_id,
        if (umkm != null) r'umkm': umkm,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_due_order_by._(this._$data);

  factory Input$payment_due_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('deadline')) {
      final l$deadline = data['deadline'];
      result$data['deadline'] = l$deadline == null
          ? null
          : fromJson$Enum$order_by((l$deadline as String));
    }
    if (data.containsKey('fulfilled')) {
      final l$fulfilled = data['fulfilled'];
      result$data['fulfilled'] = l$fulfilled == null
          ? null
          : fromJson$Enum$order_by((l$fulfilled as String));
    }
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('payment_due_id')) {
      final l$payment_due_id = data['payment_due_id'];
      result$data['payment_due_id'] = l$payment_due_id == null
          ? null
          : fromJson$Enum$order_by((l$payment_due_id as String));
    }
    if (data.containsKey('umkm')) {
      final l$umkm = data['umkm'];
      result$data['umkm'] = l$umkm == null
          ? null
          : Input$umkm_order_by.fromJson((l$umkm as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$payment_due_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get deadline => (_$data['deadline'] as Enum$order_by?);
  Enum$order_by? get fulfilled => (_$data['fulfilled'] as Enum$order_by?);
  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get payment_due_id =>
      (_$data['payment_due_id'] as Enum$order_by?);
  Input$umkm_order_by? get umkm => (_$data['umkm'] as Input$umkm_order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('deadline')) {
      final l$deadline = deadline;
      result$data['deadline'] =
          l$deadline == null ? null : toJson$Enum$order_by(l$deadline);
    }
    if (_$data.containsKey('fulfilled')) {
      final l$fulfilled = fulfilled;
      result$data['fulfilled'] =
          l$fulfilled == null ? null : toJson$Enum$order_by(l$fulfilled);
    }
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('payment_due_id')) {
      final l$payment_due_id = payment_due_id;
      result$data['payment_due_id'] = l$payment_due_id == null
          ? null
          : toJson$Enum$order_by(l$payment_due_id);
    }
    if (_$data.containsKey('umkm')) {
      final l$umkm = umkm;
      result$data['umkm'] = l$umkm?.toJson();
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_order_by<Input$payment_due_order_by>
      get copyWith => CopyWith$Input$payment_due_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$deadline = deadline;
    final lOther$deadline = other.deadline;
    if (_$data.containsKey('deadline') !=
        other._$data.containsKey('deadline')) {
      return false;
    }
    if (l$deadline != lOther$deadline) {
      return false;
    }
    final l$fulfilled = fulfilled;
    final lOther$fulfilled = other.fulfilled;
    if (_$data.containsKey('fulfilled') !=
        other._$data.containsKey('fulfilled')) {
      return false;
    }
    if (l$fulfilled != lOther$fulfilled) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (_$data.containsKey('payment_due_id') !=
        other._$data.containsKey('payment_due_id')) {
      return false;
    }
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    final l$umkm = umkm;
    final lOther$umkm = other.umkm;
    if (_$data.containsKey('umkm') != other._$data.containsKey('umkm')) {
      return false;
    }
    if (l$umkm != lOther$umkm) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$deadline = deadline;
    final l$fulfilled = fulfilled;
    final l$payment_due = payment_due;
    final l$payment_due_id = payment_due_id;
    final l$umkm = umkm;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('deadline') ? l$deadline : const {},
      _$data.containsKey('fulfilled') ? l$fulfilled : const {},
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('payment_due_id') ? l$payment_due_id : const {},
      _$data.containsKey('umkm') ? l$umkm : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_order_by<TRes> {
  factory CopyWith$Input$payment_due_order_by(
    Input$payment_due_order_by instance,
    TRes Function(Input$payment_due_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_order_by;

  factory CopyWith$Input$payment_due_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? fulfilled,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Input$umkm_order_by? umkm,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  });
  CopyWith$Input$umkm_order_by<TRes> get umkm;
}

class _CopyWithImpl$Input$payment_due_order_by<TRes>
    implements CopyWith$Input$payment_due_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_order_by _instance;

  final TRes Function(Input$payment_due_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? deadline = _undefined,
    Object? fulfilled = _undefined,
    Object? payment_due = _undefined,
    Object? payment_due_id = _undefined,
    Object? umkm = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_due_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (deadline != _undefined) 'deadline': (deadline as Enum$order_by?),
        if (fulfilled != _undefined) 'fulfilled': (fulfilled as Enum$order_by?),
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (payment_due_id != _undefined)
          'payment_due_id': (payment_due_id as Enum$order_by?),
        if (umkm != _undefined) 'umkm': (umkm as Input$umkm_order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
  CopyWith$Input$umkm_order_by<TRes> get umkm {
    final local$umkm = _instance.umkm;
    return local$umkm == null
        ? CopyWith$Input$umkm_order_by.stub(_then(_instance))
        : CopyWith$Input$umkm_order_by(local$umkm, (e) => call(umkm: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_order_by<TRes>
    implements CopyWith$Input$payment_due_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? deadline,
    Enum$order_by? fulfilled,
    Enum$order_by? payment_due,
    Enum$order_by? payment_due_id,
    Input$umkm_order_by? umkm,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
  CopyWith$Input$umkm_order_by<TRes> get umkm =>
      CopyWith$Input$umkm_order_by.stub(_res);
}

class Input$payment_due_pk_columns_input {
  factory Input$payment_due_pk_columns_input({required UUID payment_due_id}) =>
      Input$payment_due_pk_columns_input._({
        r'payment_due_id': payment_due_id,
      });

  Input$payment_due_pk_columns_input._(this._$data);

  factory Input$payment_due_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$payment_due_id = data['payment_due_id'];
    result$data['payment_due_id'] = uuidFromJson(l$payment_due_id);
    return Input$payment_due_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get payment_due_id => (_$data['payment_due_id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$payment_due_id = payment_due_id;
    result$data['payment_due_id'] = uuidToJson(l$payment_due_id);
    return result$data;
  }

  CopyWith$Input$payment_due_pk_columns_input<
          Input$payment_due_pk_columns_input>
      get copyWith => CopyWith$Input$payment_due_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due_id = payment_due_id;
    return Object.hashAll([l$payment_due_id]);
  }
}

abstract class CopyWith$Input$payment_due_pk_columns_input<TRes> {
  factory CopyWith$Input$payment_due_pk_columns_input(
    Input$payment_due_pk_columns_input instance,
    TRes Function(Input$payment_due_pk_columns_input) then,
  ) = _CopyWithImpl$Input$payment_due_pk_columns_input;

  factory CopyWith$Input$payment_due_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_pk_columns_input;

  TRes call({UUID? payment_due_id});
}

class _CopyWithImpl$Input$payment_due_pk_columns_input<TRes>
    implements CopyWith$Input$payment_due_pk_columns_input<TRes> {
  _CopyWithImpl$Input$payment_due_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$payment_due_pk_columns_input _instance;

  final TRes Function(Input$payment_due_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? payment_due_id = _undefined}) =>
      _then(Input$payment_due_pk_columns_input._({
        ..._instance._$data,
        if (payment_due_id != _undefined && payment_due_id != null)
          'payment_due_id': (payment_due_id as UUID),
      }));
}

class _CopyWithStubImpl$Input$payment_due_pk_columns_input<TRes>
    implements CopyWith$Input$payment_due_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$payment_due_pk_columns_input(this._res);

  TRes _res;

  call({UUID? payment_due_id}) => _res;
}

class Input$payment_due_set_input {
  factory Input$payment_due_set_input({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      Input$payment_due_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (deadline != null) r'deadline': deadline,
        if (fulfilled != null) r'fulfilled': fulfilled,
        if (payment_due != null) r'payment_due': payment_due,
        if (payment_due_id != null) r'payment_due_id': payment_due_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_due_set_input._(this._$data);

  factory Input$payment_due_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('deadline')) {
      final l$deadline = data['deadline'];
      result$data['deadline'] =
          l$deadline == null ? null : DateTime.parse((l$deadline as String));
    }
    if (data.containsKey('fulfilled')) {
      final l$fulfilled = data['fulfilled'];
      result$data['fulfilled'] = (l$fulfilled as bool?);
    }
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = (l$payment_due as int?);
    }
    if (data.containsKey('payment_due_id')) {
      final l$payment_due_id = data['payment_due_id'];
      result$data['payment_due_id'] =
          l$payment_due_id == null ? null : uuidFromJson(l$payment_due_id);
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$payment_due_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  DateTime? get deadline => (_$data['deadline'] as DateTime?);
  bool? get fulfilled => (_$data['fulfilled'] as bool?);
  int? get payment_due => (_$data['payment_due'] as int?);
  UUID? get payment_due_id => (_$data['payment_due_id'] as UUID?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('deadline')) {
      final l$deadline = deadline;
      result$data['deadline'] = l$deadline?.toIso8601String();
    }
    if (_$data.containsKey('fulfilled')) {
      final l$fulfilled = fulfilled;
      result$data['fulfilled'] = l$fulfilled;
    }
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] = l$payment_due;
    }
    if (_$data.containsKey('payment_due_id')) {
      final l$payment_due_id = payment_due_id;
      result$data['payment_due_id'] =
          l$payment_due_id == null ? null : uuidToJson(l$payment_due_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_set_input<Input$payment_due_set_input>
      get copyWith => CopyWith$Input$payment_due_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$deadline = deadline;
    final lOther$deadline = other.deadline;
    if (_$data.containsKey('deadline') !=
        other._$data.containsKey('deadline')) {
      return false;
    }
    if (l$deadline != lOther$deadline) {
      return false;
    }
    final l$fulfilled = fulfilled;
    final lOther$fulfilled = other.fulfilled;
    if (_$data.containsKey('fulfilled') !=
        other._$data.containsKey('fulfilled')) {
      return false;
    }
    if (l$fulfilled != lOther$fulfilled) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (_$data.containsKey('payment_due_id') !=
        other._$data.containsKey('payment_due_id')) {
      return false;
    }
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$deadline = deadline;
    final l$fulfilled = fulfilled;
    final l$payment_due = payment_due;
    final l$payment_due_id = payment_due_id;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('deadline') ? l$deadline : const {},
      _$data.containsKey('fulfilled') ? l$fulfilled : const {},
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('payment_due_id') ? l$payment_due_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_set_input<TRes> {
  factory CopyWith$Input$payment_due_set_input(
    Input$payment_due_set_input instance,
    TRes Function(Input$payment_due_set_input) then,
  ) = _CopyWithImpl$Input$payment_due_set_input;

  factory CopyWith$Input$payment_due_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_set_input;

  TRes call({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    int? umkm_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$payment_due_set_input<TRes>
    implements CopyWith$Input$payment_due_set_input<TRes> {
  _CopyWithImpl$Input$payment_due_set_input(
    this._instance,
    this._then,
  );

  final Input$payment_due_set_input _instance;

  final TRes Function(Input$payment_due_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? deadline = _undefined,
    Object? fulfilled = _undefined,
    Object? payment_due = _undefined,
    Object? payment_due_id = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_due_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (deadline != _undefined) 'deadline': (deadline as DateTime?),
        if (fulfilled != _undefined) 'fulfilled': (fulfilled as bool?),
        if (payment_due != _undefined) 'payment_due': (payment_due as int?),
        if (payment_due_id != _undefined)
          'payment_due_id': (payment_due_id as UUID?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_set_input<TRes>
    implements CopyWith$Input$payment_due_set_input<TRes> {
  _CopyWithStubImpl$Input$payment_due_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$payment_due_stddev_order_by {
  factory Input$payment_due_stddev_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_stddev_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_stddev_order_by._(this._$data);

  factory Input$payment_due_stddev_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_stddev_order_by<Input$payment_due_stddev_order_by>
      get copyWith => CopyWith$Input$payment_due_stddev_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_stddev_order_by<TRes> {
  factory CopyWith$Input$payment_due_stddev_order_by(
    Input$payment_due_stddev_order_by instance,
    TRes Function(Input$payment_due_stddev_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_stddev_order_by;

  factory CopyWith$Input$payment_due_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_stddev_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_stddev_order_by<TRes>
    implements CopyWith$Input$payment_due_stddev_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_stddev_order_by _instance;

  final TRes Function(Input$payment_due_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_stddev_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_stddev_order_by<TRes>
    implements CopyWith$Input$payment_due_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_stddev_pop_order_by {
  factory Input$payment_due_stddev_pop_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_stddev_pop_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_stddev_pop_order_by._(this._$data);

  factory Input$payment_due_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_stddev_pop_order_by<
          Input$payment_due_stddev_pop_order_by>
      get copyWith => CopyWith$Input$payment_due_stddev_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$payment_due_stddev_pop_order_by(
    Input$payment_due_stddev_pop_order_by instance,
    TRes Function(Input$payment_due_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_stddev_pop_order_by;

  factory CopyWith$Input$payment_due_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_stddev_pop_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_stddev_pop_order_by<TRes>
    implements CopyWith$Input$payment_due_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_stddev_pop_order_by _instance;

  final TRes Function(Input$payment_due_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_stddev_pop_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_stddev_pop_order_by<TRes>
    implements CopyWith$Input$payment_due_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_stddev_samp_order_by {
  factory Input$payment_due_stddev_samp_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_stddev_samp_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_stddev_samp_order_by._(this._$data);

  factory Input$payment_due_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_stddev_samp_order_by<
          Input$payment_due_stddev_samp_order_by>
      get copyWith => CopyWith$Input$payment_due_stddev_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$payment_due_stddev_samp_order_by(
    Input$payment_due_stddev_samp_order_by instance,
    TRes Function(Input$payment_due_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_stddev_samp_order_by;

  factory CopyWith$Input$payment_due_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_stddev_samp_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_stddev_samp_order_by<TRes>
    implements CopyWith$Input$payment_due_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_stddev_samp_order_by _instance;

  final TRes Function(Input$payment_due_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_stddev_samp_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_stddev_samp_order_by<TRes>
    implements CopyWith$Input$payment_due_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_stream_cursor_input {
  factory Input$payment_due_stream_cursor_input({
    required Input$payment_due_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$payment_due_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$payment_due_stream_cursor_input._(this._$data);

  factory Input$payment_due_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$payment_due_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$payment_due_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$payment_due_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$payment_due_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_stream_cursor_input<
          Input$payment_due_stream_cursor_input>
      get copyWith => CopyWith$Input$payment_due_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_stream_cursor_input<TRes> {
  factory CopyWith$Input$payment_due_stream_cursor_input(
    Input$payment_due_stream_cursor_input instance,
    TRes Function(Input$payment_due_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$payment_due_stream_cursor_input;

  factory CopyWith$Input$payment_due_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_stream_cursor_input;

  TRes call({
    Input$payment_due_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$payment_due_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$payment_due_stream_cursor_input<TRes>
    implements CopyWith$Input$payment_due_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$payment_due_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$payment_due_stream_cursor_input _instance;

  final TRes Function(Input$payment_due_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$payment_due_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$payment_due_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$payment_due_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$payment_due_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_stream_cursor_input<TRes>
    implements CopyWith$Input$payment_due_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$payment_due_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$payment_due_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$payment_due_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$payment_due_stream_cursor_value_input.stub(_res);
}

class Input$payment_due_stream_cursor_value_input {
  factory Input$payment_due_stream_cursor_value_input({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      Input$payment_due_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (deadline != null) r'deadline': deadline,
        if (fulfilled != null) r'fulfilled': fulfilled,
        if (payment_due != null) r'payment_due': payment_due,
        if (payment_due_id != null) r'payment_due_id': payment_due_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_due_stream_cursor_value_input._(this._$data);

  factory Input$payment_due_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('deadline')) {
      final l$deadline = data['deadline'];
      result$data['deadline'] =
          l$deadline == null ? null : DateTime.parse((l$deadline as String));
    }
    if (data.containsKey('fulfilled')) {
      final l$fulfilled = data['fulfilled'];
      result$data['fulfilled'] = (l$fulfilled as bool?);
    }
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = (l$payment_due as int?);
    }
    if (data.containsKey('payment_due_id')) {
      final l$payment_due_id = data['payment_due_id'];
      result$data['payment_due_id'] =
          l$payment_due_id == null ? null : uuidFromJson(l$payment_due_id);
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$payment_due_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  DateTime? get deadline => (_$data['deadline'] as DateTime?);
  bool? get fulfilled => (_$data['fulfilled'] as bool?);
  int? get payment_due => (_$data['payment_due'] as int?);
  UUID? get payment_due_id => (_$data['payment_due_id'] as UUID?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('deadline')) {
      final l$deadline = deadline;
      result$data['deadline'] = l$deadline?.toIso8601String();
    }
    if (_$data.containsKey('fulfilled')) {
      final l$fulfilled = fulfilled;
      result$data['fulfilled'] = l$fulfilled;
    }
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] = l$payment_due;
    }
    if (_$data.containsKey('payment_due_id')) {
      final l$payment_due_id = payment_due_id;
      result$data['payment_due_id'] =
          l$payment_due_id == null ? null : uuidToJson(l$payment_due_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$payment_due_stream_cursor_value_input<
          Input$payment_due_stream_cursor_value_input>
      get copyWith => CopyWith$Input$payment_due_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$deadline = deadline;
    final lOther$deadline = other.deadline;
    if (_$data.containsKey('deadline') !=
        other._$data.containsKey('deadline')) {
      return false;
    }
    if (l$deadline != lOther$deadline) {
      return false;
    }
    final l$fulfilled = fulfilled;
    final lOther$fulfilled = other.fulfilled;
    if (_$data.containsKey('fulfilled') !=
        other._$data.containsKey('fulfilled')) {
      return false;
    }
    if (l$fulfilled != lOther$fulfilled) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$payment_due_id = payment_due_id;
    final lOther$payment_due_id = other.payment_due_id;
    if (_$data.containsKey('payment_due_id') !=
        other._$data.containsKey('payment_due_id')) {
      return false;
    }
    if (l$payment_due_id != lOther$payment_due_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$deadline = deadline;
    final l$fulfilled = fulfilled;
    final l$payment_due = payment_due;
    final l$payment_due_id = payment_due_id;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('deadline') ? l$deadline : const {},
      _$data.containsKey('fulfilled') ? l$fulfilled : const {},
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('payment_due_id') ? l$payment_due_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$payment_due_stream_cursor_value_input(
    Input$payment_due_stream_cursor_value_input instance,
    TRes Function(Input$payment_due_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$payment_due_stream_cursor_value_input;

  factory CopyWith$Input$payment_due_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    int? umkm_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$payment_due_stream_cursor_value_input<TRes>
    implements CopyWith$Input$payment_due_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$payment_due_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$payment_due_stream_cursor_value_input _instance;

  final TRes Function(Input$payment_due_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? deadline = _undefined,
    Object? fulfilled = _undefined,
    Object? payment_due = _undefined,
    Object? payment_due_id = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_due_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (deadline != _undefined) 'deadline': (deadline as DateTime?),
        if (fulfilled != _undefined) 'fulfilled': (fulfilled as bool?),
        if (payment_due != _undefined) 'payment_due': (payment_due as int?),
        if (payment_due_id != _undefined)
          'payment_due_id': (payment_due_id as UUID?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_stream_cursor_value_input<TRes>
    implements CopyWith$Input$payment_due_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$payment_due_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    DateTime? deadline,
    bool? fulfilled,
    int? payment_due,
    UUID? payment_due_id,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$payment_due_sum_order_by {
  factory Input$payment_due_sum_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_sum_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_sum_order_by._(this._$data);

  factory Input$payment_due_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_sum_order_by<Input$payment_due_sum_order_by>
      get copyWith => CopyWith$Input$payment_due_sum_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_sum_order_by<TRes> {
  factory CopyWith$Input$payment_due_sum_order_by(
    Input$payment_due_sum_order_by instance,
    TRes Function(Input$payment_due_sum_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_sum_order_by;

  factory CopyWith$Input$payment_due_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_sum_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_sum_order_by<TRes>
    implements CopyWith$Input$payment_due_sum_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_sum_order_by _instance;

  final TRes Function(Input$payment_due_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_sum_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_sum_order_by<TRes>
    implements CopyWith$Input$payment_due_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_updates {
  factory Input$payment_due_updates({
    Input$payment_due_inc_input? $_inc,
    Input$payment_due_set_input? $_set,
    required Input$payment_due_bool_exp where,
  }) =>
      Input$payment_due_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$payment_due_updates._(this._$data);

  factory Input$payment_due_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$payment_due_inc_input.fromJson(
              (l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$payment_due_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$payment_due_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$payment_due_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$payment_due_inc_input? get $_inc =>
      (_$data['_inc'] as Input$payment_due_inc_input?);
  Input$payment_due_set_input? get $_set =>
      (_$data['_set'] as Input$payment_due_set_input?);
  Input$payment_due_bool_exp get where =>
      (_$data['where'] as Input$payment_due_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$payment_due_updates<Input$payment_due_updates> get copyWith =>
      CopyWith$Input$payment_due_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$payment_due_updates<TRes> {
  factory CopyWith$Input$payment_due_updates(
    Input$payment_due_updates instance,
    TRes Function(Input$payment_due_updates) then,
  ) = _CopyWithImpl$Input$payment_due_updates;

  factory CopyWith$Input$payment_due_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_updates;

  TRes call({
    Input$payment_due_inc_input? $_inc,
    Input$payment_due_set_input? $_set,
    Input$payment_due_bool_exp? where,
  });
  CopyWith$Input$payment_due_inc_input<TRes> get $_inc;
  CopyWith$Input$payment_due_set_input<TRes> get $_set;
  CopyWith$Input$payment_due_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$payment_due_updates<TRes>
    implements CopyWith$Input$payment_due_updates<TRes> {
  _CopyWithImpl$Input$payment_due_updates(
    this._instance,
    this._then,
  );

  final Input$payment_due_updates _instance;

  final TRes Function(Input$payment_due_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$payment_due_updates._({
        ..._instance._$data,
        if ($_inc != _undefined)
          '_inc': ($_inc as Input$payment_due_inc_input?),
        if ($_set != _undefined)
          '_set': ($_set as Input$payment_due_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$payment_due_bool_exp),
      }));
  CopyWith$Input$payment_due_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$payment_due_inc_input.stub(_then(_instance))
        : CopyWith$Input$payment_due_inc_input(
            local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$payment_due_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$payment_due_set_input.stub(_then(_instance))
        : CopyWith$Input$payment_due_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$payment_due_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$payment_due_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$payment_due_updates<TRes>
    implements CopyWith$Input$payment_due_updates<TRes> {
  _CopyWithStubImpl$Input$payment_due_updates(this._res);

  TRes _res;

  call({
    Input$payment_due_inc_input? $_inc,
    Input$payment_due_set_input? $_set,
    Input$payment_due_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$payment_due_inc_input<TRes> get $_inc =>
      CopyWith$Input$payment_due_inc_input.stub(_res);
  CopyWith$Input$payment_due_set_input<TRes> get $_set =>
      CopyWith$Input$payment_due_set_input.stub(_res);
  CopyWith$Input$payment_due_bool_exp<TRes> get where =>
      CopyWith$Input$payment_due_bool_exp.stub(_res);
}

class Input$payment_due_var_pop_order_by {
  factory Input$payment_due_var_pop_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_var_pop_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_var_pop_order_by._(this._$data);

  factory Input$payment_due_var_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_var_pop_order_by<
          Input$payment_due_var_pop_order_by>
      get copyWith => CopyWith$Input$payment_due_var_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_var_pop_order_by<TRes> {
  factory CopyWith$Input$payment_due_var_pop_order_by(
    Input$payment_due_var_pop_order_by instance,
    TRes Function(Input$payment_due_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_var_pop_order_by;

  factory CopyWith$Input$payment_due_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_var_pop_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_var_pop_order_by<TRes>
    implements CopyWith$Input$payment_due_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_var_pop_order_by _instance;

  final TRes Function(Input$payment_due_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_var_pop_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_var_pop_order_by<TRes>
    implements CopyWith$Input$payment_due_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_var_samp_order_by {
  factory Input$payment_due_var_samp_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_var_samp_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_var_samp_order_by._(this._$data);

  factory Input$payment_due_var_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_var_samp_order_by<
          Input$payment_due_var_samp_order_by>
      get copyWith => CopyWith$Input$payment_due_var_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_var_samp_order_by<TRes> {
  factory CopyWith$Input$payment_due_var_samp_order_by(
    Input$payment_due_var_samp_order_by instance,
    TRes Function(Input$payment_due_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_var_samp_order_by;

  factory CopyWith$Input$payment_due_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_var_samp_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_var_samp_order_by<TRes>
    implements CopyWith$Input$payment_due_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_var_samp_order_by _instance;

  final TRes Function(Input$payment_due_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_var_samp_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_var_samp_order_by<TRes>
    implements CopyWith$Input$payment_due_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_due_variance_order_by {
  factory Input$payment_due_variance_order_by({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      Input$payment_due_variance_order_by._({
        if (payment_due != null) r'payment_due': payment_due,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$payment_due_variance_order_by._(this._$data);

  factory Input$payment_due_variance_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('payment_due')) {
      final l$payment_due = data['payment_due'];
      result$data['payment_due'] = l$payment_due == null
          ? null
          : fromJson$Enum$order_by((l$payment_due as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$payment_due_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get payment_due => (_$data['payment_due'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('payment_due')) {
      final l$payment_due = payment_due;
      result$data['payment_due'] =
          l$payment_due == null ? null : toJson$Enum$order_by(l$payment_due);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$payment_due_variance_order_by<
          Input$payment_due_variance_order_by>
      get copyWith => CopyWith$Input$payment_due_variance_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_due_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_due = payment_due;
    final lOther$payment_due = other.payment_due;
    if (_$data.containsKey('payment_due') !=
        other._$data.containsKey('payment_due')) {
      return false;
    }
    if (l$payment_due != lOther$payment_due) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_due = payment_due;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('payment_due') ? l$payment_due : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_due_variance_order_by<TRes> {
  factory CopyWith$Input$payment_due_variance_order_by(
    Input$payment_due_variance_order_by instance,
    TRes Function(Input$payment_due_variance_order_by) then,
  ) = _CopyWithImpl$Input$payment_due_variance_order_by;

  factory CopyWith$Input$payment_due_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_due_variance_order_by;

  TRes call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$payment_due_variance_order_by<TRes>
    implements CopyWith$Input$payment_due_variance_order_by<TRes> {
  _CopyWithImpl$Input$payment_due_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_due_variance_order_by _instance;

  final TRes Function(Input$payment_due_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? payment_due = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$payment_due_variance_order_by._({
        ..._instance._$data,
        if (payment_due != _undefined)
          'payment_due': (payment_due as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$payment_due_variance_order_by<TRes>
    implements CopyWith$Input$payment_due_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_due_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? payment_due,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$payment_investment_bool_exp {
  factory Input$payment_investment_bool_exp({
    List<Input$payment_investment_bool_exp>? $_and,
    Input$payment_investment_bool_exp? $_not,
    List<Input$payment_investment_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investment,
    Input$Int_comparison_exp? investment_id,
    Input$Boolean_comparison_exp? payment_investment_fulfilled,
    Input$uuid_comparison_exp? payment_investment_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      Input$payment_investment_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (investment != null) r'investment': investment,
        if (investment_id != null) r'investment_id': investment_id,
        if (payment_investment_fulfilled != null)
          r'payment_investment_fulfilled': payment_investment_fulfilled,
        if (payment_investment_id != null)
          r'payment_investment_id': payment_investment_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_investment_bool_exp._(this._$data);

  factory Input$payment_investment_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) => Input$payment_investment_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$payment_investment_bool_exp.fromJson(
              (l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) => Input$payment_investment_bool_exp.fromJson(
              (e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('investment')) {
      final l$investment = data['investment'];
      result$data['investment'] = l$investment == null
          ? null
          : Input$investment_bool_exp.fromJson(
              (l$investment as Map<String, dynamic>));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$investment_id as Map<String, dynamic>));
    }
    if (data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled =
          data['payment_investment_fulfilled'];
      result$data['payment_investment_fulfilled'] =
          l$payment_investment_fulfilled == null
              ? null
              : Input$Boolean_comparison_exp.fromJson(
                  (l$payment_investment_fulfilled as Map<String, dynamic>));
    }
    if (data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = data['payment_investment_id'];
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$payment_investment_id as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    return Input$payment_investment_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$payment_investment_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$payment_investment_bool_exp>?);
  Input$payment_investment_bool_exp? get $_not =>
      (_$data['_not'] as Input$payment_investment_bool_exp?);
  List<Input$payment_investment_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$payment_investment_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$investment_bool_exp? get investment =>
      (_$data['investment'] as Input$investment_bool_exp?);
  Input$Int_comparison_exp? get investment_id =>
      (_$data['investment_id'] as Input$Int_comparison_exp?);
  Input$Boolean_comparison_exp? get payment_investment_fulfilled =>
      (_$data['payment_investment_fulfilled'] as Input$Boolean_comparison_exp?);
  Input$uuid_comparison_exp? get payment_investment_id =>
      (_$data['payment_investment_id'] as Input$uuid_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('investment')) {
      final l$investment = investment;
      result$data['investment'] = l$investment?.toJson();
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id?.toJson();
    }
    if (_$data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled = payment_investment_fulfilled;
      result$data['payment_investment_fulfilled'] =
          l$payment_investment_fulfilled?.toJson();
    }
    if (_$data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = payment_investment_id;
      result$data['payment_investment_id'] = l$payment_investment_id?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_bool_exp<Input$payment_investment_bool_exp>
      get copyWith => CopyWith$Input$payment_investment_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment = investment;
    final lOther$investment = other.investment;
    if (_$data.containsKey('investment') !=
        other._$data.containsKey('investment')) {
      return false;
    }
    if (l$investment != lOther$investment) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final lOther$payment_investment_fulfilled =
        other.payment_investment_fulfilled;
    if (_$data.containsKey('payment_investment_fulfilled') !=
        other._$data.containsKey('payment_investment_fulfilled')) {
      return false;
    }
    if (l$payment_investment_fulfilled != lOther$payment_investment_fulfilled) {
      return false;
    }
    final l$payment_investment_id = payment_investment_id;
    final lOther$payment_investment_id = other.payment_investment_id;
    if (_$data.containsKey('payment_investment_id') !=
        other._$data.containsKey('payment_investment_id')) {
      return false;
    }
    if (l$payment_investment_id != lOther$payment_investment_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$investment = investment;
    final l$investment_id = investment_id;
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final l$payment_investment_id = payment_investment_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment') ? l$investment : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('payment_investment_fulfilled')
          ? l$payment_investment_fulfilled
          : const {},
      _$data.containsKey('payment_investment_id')
          ? l$payment_investment_id
          : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_bool_exp<TRes> {
  factory CopyWith$Input$payment_investment_bool_exp(
    Input$payment_investment_bool_exp instance,
    TRes Function(Input$payment_investment_bool_exp) then,
  ) = _CopyWithImpl$Input$payment_investment_bool_exp;

  factory CopyWith$Input$payment_investment_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_bool_exp;

  TRes call({
    List<Input$payment_investment_bool_exp>? $_and,
    Input$payment_investment_bool_exp? $_not,
    List<Input$payment_investment_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investment,
    Input$Int_comparison_exp? investment_id,
    Input$Boolean_comparison_exp? payment_investment_fulfilled,
    Input$uuid_comparison_exp? payment_investment_id,
    Input$timestamptz_comparison_exp? updated_at,
  });
  TRes $_and(
      Iterable<Input$payment_investment_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$payment_investment_bool_exp<
                      Input$payment_investment_bool_exp>>?)
          _fn);
  CopyWith$Input$payment_investment_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$payment_investment_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$payment_investment_bool_exp<
                      Input$payment_investment_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$investment_bool_exp<TRes> get investment;
  CopyWith$Input$Int_comparison_exp<TRes> get investment_id;
  CopyWith$Input$Boolean_comparison_exp<TRes> get payment_investment_fulfilled;
  CopyWith$Input$uuid_comparison_exp<TRes> get payment_investment_id;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
}

class _CopyWithImpl$Input$payment_investment_bool_exp<TRes>
    implements CopyWith$Input$payment_investment_bool_exp<TRes> {
  _CopyWithImpl$Input$payment_investment_bool_exp(
    this._instance,
    this._then,
  );

  final Input$payment_investment_bool_exp _instance;

  final TRes Function(Input$payment_investment_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? investment = _undefined,
    Object? investment_id = _undefined,
    Object? payment_investment_fulfilled = _undefined,
    Object? payment_investment_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_investment_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$payment_investment_bool_exp>?),
        if ($_not != _undefined)
          '_not': ($_not as Input$payment_investment_bool_exp?),
        if ($_or != _undefined)
          '_or': ($_or as List<Input$payment_investment_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (investment != _undefined)
          'investment': (investment as Input$investment_bool_exp?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Input$Int_comparison_exp?),
        if (payment_investment_fulfilled != _undefined)
          'payment_investment_fulfilled':
              (payment_investment_fulfilled as Input$Boolean_comparison_exp?),
        if (payment_investment_id != _undefined)
          'payment_investment_id':
              (payment_investment_id as Input$uuid_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$payment_investment_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$payment_investment_bool_exp<
                          Input$payment_investment_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and
              ?.map((e) => CopyWith$Input$payment_investment_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$payment_investment_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$payment_investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_investment_bool_exp(
            local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$payment_investment_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$payment_investment_bool_exp<
                          Input$payment_investment_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or
              ?.map((e) => CopyWith$Input$payment_investment_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$investment_bool_exp<TRes> get investment {
    final local$investment = _instance.investment;
    return local$investment == null
        ? CopyWith$Input$investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_bool_exp(
            local$investment, (e) => call(investment: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get investment_id {
    final local$investment_id = _instance.investment_id;
    return local$investment_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$investment_id, (e) => call(investment_id: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get payment_investment_fulfilled {
    final local$payment_investment_fulfilled =
        _instance.payment_investment_fulfilled;
    return local$payment_investment_fulfilled == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$payment_investment_fulfilled,
            (e) => call(payment_investment_fulfilled: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get payment_investment_id {
    final local$payment_investment_id = _instance.payment_investment_id;
    return local$payment_investment_id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$payment_investment_id, (e) => call(payment_investment_id: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }
}

class _CopyWithStubImpl$Input$payment_investment_bool_exp<TRes>
    implements CopyWith$Input$payment_investment_bool_exp<TRes> {
  _CopyWithStubImpl$Input$payment_investment_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$payment_investment_bool_exp>? $_and,
    Input$payment_investment_bool_exp? $_not,
    List<Input$payment_investment_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investment,
    Input$Int_comparison_exp? investment_id,
    Input$Boolean_comparison_exp? payment_investment_fulfilled,
    Input$uuid_comparison_exp? payment_investment_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$payment_investment_bool_exp<TRes> get $_not =>
      CopyWith$Input$payment_investment_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$investment_bool_exp<TRes> get investment =>
      CopyWith$Input$investment_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get investment_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes>
      get payment_investment_fulfilled =>
          CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get payment_investment_id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$payment_investment_inc_input {
  factory Input$payment_investment_inc_input({int? investment_id}) =>
      Input$payment_investment_inc_input._({
        if (investment_id != null) r'investment_id': investment_id,
      });

  Input$payment_investment_inc_input._(this._$data);

  factory Input$payment_investment_inc_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = (l$investment_id as int?);
    }
    return Input$payment_investment_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get investment_id => (_$data['investment_id'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id;
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_inc_input<
          Input$payment_investment_inc_input>
      get copyWith => CopyWith$Input$payment_investment_inc_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_inc_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$investment_id = investment_id;
    return Object.hashAll(
        [_$data.containsKey('investment_id') ? l$investment_id : const {}]);
  }
}

abstract class CopyWith$Input$payment_investment_inc_input<TRes> {
  factory CopyWith$Input$payment_investment_inc_input(
    Input$payment_investment_inc_input instance,
    TRes Function(Input$payment_investment_inc_input) then,
  ) = _CopyWithImpl$Input$payment_investment_inc_input;

  factory CopyWith$Input$payment_investment_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_inc_input;

  TRes call({int? investment_id});
}

class _CopyWithImpl$Input$payment_investment_inc_input<TRes>
    implements CopyWith$Input$payment_investment_inc_input<TRes> {
  _CopyWithImpl$Input$payment_investment_inc_input(
    this._instance,
    this._then,
  );

  final Input$payment_investment_inc_input _instance;

  final TRes Function(Input$payment_investment_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? investment_id = _undefined}) =>
      _then(Input$payment_investment_inc_input._({
        ..._instance._$data,
        if (investment_id != _undefined)
          'investment_id': (investment_id as int?),
      }));
}

class _CopyWithStubImpl$Input$payment_investment_inc_input<TRes>
    implements CopyWith$Input$payment_investment_inc_input<TRes> {
  _CopyWithStubImpl$Input$payment_investment_inc_input(this._res);

  TRes _res;

  call({int? investment_id}) => _res;
}

class Input$payment_investment_insert_input {
  factory Input$payment_investment_insert_input({
    DateTime? created_at,
    Input$investment_obj_rel_insert_input? investment,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  }) =>
      Input$payment_investment_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (investment != null) r'investment': investment,
        if (investment_id != null) r'investment_id': investment_id,
        if (payment_investment_fulfilled != null)
          r'payment_investment_fulfilled': payment_investment_fulfilled,
        if (payment_investment_id != null)
          r'payment_investment_id': payment_investment_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_investment_insert_input._(this._$data);

  factory Input$payment_investment_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investment')) {
      final l$investment = data['investment'];
      result$data['investment'] = l$investment == null
          ? null
          : Input$investment_obj_rel_insert_input.fromJson(
              (l$investment as Map<String, dynamic>));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = (l$investment_id as int?);
    }
    if (data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled =
          data['payment_investment_fulfilled'];
      result$data['payment_investment_fulfilled'] =
          (l$payment_investment_fulfilled as bool?);
    }
    if (data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = data['payment_investment_id'];
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : uuidFromJson(l$payment_investment_id);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$payment_investment_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  Input$investment_obj_rel_insert_input? get investment =>
      (_$data['investment'] as Input$investment_obj_rel_insert_input?);
  int? get investment_id => (_$data['investment_id'] as int?);
  bool? get payment_investment_fulfilled =>
      (_$data['payment_investment_fulfilled'] as bool?);
  UUID? get payment_investment_id => (_$data['payment_investment_id'] as UUID?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investment')) {
      final l$investment = investment;
      result$data['investment'] = l$investment?.toJson();
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id;
    }
    if (_$data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled = payment_investment_fulfilled;
      result$data['payment_investment_fulfilled'] =
          l$payment_investment_fulfilled;
    }
    if (_$data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = payment_investment_id;
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : uuidToJson(l$payment_investment_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_insert_input<
          Input$payment_investment_insert_input>
      get copyWith => CopyWith$Input$payment_investment_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment = investment;
    final lOther$investment = other.investment;
    if (_$data.containsKey('investment') !=
        other._$data.containsKey('investment')) {
      return false;
    }
    if (l$investment != lOther$investment) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final lOther$payment_investment_fulfilled =
        other.payment_investment_fulfilled;
    if (_$data.containsKey('payment_investment_fulfilled') !=
        other._$data.containsKey('payment_investment_fulfilled')) {
      return false;
    }
    if (l$payment_investment_fulfilled != lOther$payment_investment_fulfilled) {
      return false;
    }
    final l$payment_investment_id = payment_investment_id;
    final lOther$payment_investment_id = other.payment_investment_id;
    if (_$data.containsKey('payment_investment_id') !=
        other._$data.containsKey('payment_investment_id')) {
      return false;
    }
    if (l$payment_investment_id != lOther$payment_investment_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment = investment;
    final l$investment_id = investment_id;
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final l$payment_investment_id = payment_investment_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment') ? l$investment : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('payment_investment_fulfilled')
          ? l$payment_investment_fulfilled
          : const {},
      _$data.containsKey('payment_investment_id')
          ? l$payment_investment_id
          : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_insert_input<TRes> {
  factory CopyWith$Input$payment_investment_insert_input(
    Input$payment_investment_insert_input instance,
    TRes Function(Input$payment_investment_insert_input) then,
  ) = _CopyWithImpl$Input$payment_investment_insert_input;

  factory CopyWith$Input$payment_investment_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_insert_input;

  TRes call({
    DateTime? created_at,
    Input$investment_obj_rel_insert_input? investment,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  });
  CopyWith$Input$investment_obj_rel_insert_input<TRes> get investment;
}

class _CopyWithImpl$Input$payment_investment_insert_input<TRes>
    implements CopyWith$Input$payment_investment_insert_input<TRes> {
  _CopyWithImpl$Input$payment_investment_insert_input(
    this._instance,
    this._then,
  );

  final Input$payment_investment_insert_input _instance;

  final TRes Function(Input$payment_investment_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment = _undefined,
    Object? investment_id = _undefined,
    Object? payment_investment_fulfilled = _undefined,
    Object? payment_investment_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_investment_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investment != _undefined)
          'investment': (investment as Input$investment_obj_rel_insert_input?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as int?),
        if (payment_investment_fulfilled != _undefined)
          'payment_investment_fulfilled':
              (payment_investment_fulfilled as bool?),
        if (payment_investment_id != _undefined)
          'payment_investment_id': (payment_investment_id as UUID?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
  CopyWith$Input$investment_obj_rel_insert_input<TRes> get investment {
    final local$investment = _instance.investment;
    return local$investment == null
        ? CopyWith$Input$investment_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$investment_obj_rel_insert_input(
            local$investment, (e) => call(investment: e));
  }
}

class _CopyWithStubImpl$Input$payment_investment_insert_input<TRes>
    implements CopyWith$Input$payment_investment_insert_input<TRes> {
  _CopyWithStubImpl$Input$payment_investment_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    Input$investment_obj_rel_insert_input? investment,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  }) =>
      _res;
  CopyWith$Input$investment_obj_rel_insert_input<TRes> get investment =>
      CopyWith$Input$investment_obj_rel_insert_input.stub(_res);
}

class Input$payment_investment_obj_rel_insert_input {
  factory Input$payment_investment_obj_rel_insert_input({
    required Input$payment_investment_insert_input data,
    Input$payment_investment_on_conflict? on_conflict,
  }) =>
      Input$payment_investment_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$payment_investment_obj_rel_insert_input._(this._$data);

  factory Input$payment_investment_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = Input$payment_investment_insert_input.fromJson(
        (l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$payment_investment_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$payment_investment_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$payment_investment_insert_input get data =>
      (_$data['data'] as Input$payment_investment_insert_input);
  Input$payment_investment_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$payment_investment_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_obj_rel_insert_input<
          Input$payment_investment_obj_rel_insert_input>
      get copyWith => CopyWith$Input$payment_investment_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$payment_investment_obj_rel_insert_input(
    Input$payment_investment_obj_rel_insert_input instance,
    TRes Function(Input$payment_investment_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$payment_investment_obj_rel_insert_input;

  factory CopyWith$Input$payment_investment_obj_rel_insert_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$payment_investment_obj_rel_insert_input;

  TRes call({
    Input$payment_investment_insert_input? data,
    Input$payment_investment_on_conflict? on_conflict,
  });
  CopyWith$Input$payment_investment_insert_input<TRes> get data;
  CopyWith$Input$payment_investment_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$payment_investment_obj_rel_insert_input<TRes>
    implements CopyWith$Input$payment_investment_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$payment_investment_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$payment_investment_obj_rel_insert_input _instance;

  final TRes Function(Input$payment_investment_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$payment_investment_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$payment_investment_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$payment_investment_on_conflict?),
      }));
  CopyWith$Input$payment_investment_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$payment_investment_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$payment_investment_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$payment_investment_on_conflict.stub(_then(_instance))
        : CopyWith$Input$payment_investment_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$payment_investment_obj_rel_insert_input<TRes>
    implements CopyWith$Input$payment_investment_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$payment_investment_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$payment_investment_insert_input? data,
    Input$payment_investment_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$payment_investment_insert_input<TRes> get data =>
      CopyWith$Input$payment_investment_insert_input.stub(_res);
  CopyWith$Input$payment_investment_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$payment_investment_on_conflict.stub(_res);
}

class Input$payment_investment_on_conflict {
  factory Input$payment_investment_on_conflict({
    required Enum$payment_investment_constraint constraint,
    required List<Enum$payment_investment_update_column> update_columns,
    Input$payment_investment_bool_exp? where,
  }) =>
      Input$payment_investment_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$payment_investment_on_conflict._(this._$data);

  factory Input$payment_investment_on_conflict.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$payment_investment_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) =>
            fromJson$Enum$payment_investment_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$payment_investment_bool_exp.fromJson(
              (l$where as Map<String, dynamic>));
    }
    return Input$payment_investment_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$payment_investment_constraint get constraint =>
      (_$data['constraint'] as Enum$payment_investment_constraint);
  List<Enum$payment_investment_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$payment_investment_update_column>);
  Input$payment_investment_bool_exp? get where =>
      (_$data['where'] as Input$payment_investment_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] =
        toJson$Enum$payment_investment_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$payment_investment_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_on_conflict<
          Input$payment_investment_on_conflict>
      get copyWith => CopyWith$Input$payment_investment_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_on_conflict<TRes> {
  factory CopyWith$Input$payment_investment_on_conflict(
    Input$payment_investment_on_conflict instance,
    TRes Function(Input$payment_investment_on_conflict) then,
  ) = _CopyWithImpl$Input$payment_investment_on_conflict;

  factory CopyWith$Input$payment_investment_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_on_conflict;

  TRes call({
    Enum$payment_investment_constraint? constraint,
    List<Enum$payment_investment_update_column>? update_columns,
    Input$payment_investment_bool_exp? where,
  });
  CopyWith$Input$payment_investment_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$payment_investment_on_conflict<TRes>
    implements CopyWith$Input$payment_investment_on_conflict<TRes> {
  _CopyWithImpl$Input$payment_investment_on_conflict(
    this._instance,
    this._then,
  );

  final Input$payment_investment_on_conflict _instance;

  final TRes Function(Input$payment_investment_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$payment_investment_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$payment_investment_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$payment_investment_update_column>),
        if (where != _undefined)
          'where': (where as Input$payment_investment_bool_exp?),
      }));
  CopyWith$Input$payment_investment_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$payment_investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_investment_bool_exp(
            local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$payment_investment_on_conflict<TRes>
    implements CopyWith$Input$payment_investment_on_conflict<TRes> {
  _CopyWithStubImpl$Input$payment_investment_on_conflict(this._res);

  TRes _res;

  call({
    Enum$payment_investment_constraint? constraint,
    List<Enum$payment_investment_update_column>? update_columns,
    Input$payment_investment_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$payment_investment_bool_exp<TRes> get where =>
      CopyWith$Input$payment_investment_bool_exp.stub(_res);
}

class Input$payment_investment_order_by {
  factory Input$payment_investment_order_by({
    Enum$order_by? created_at,
    Input$investment_order_by? investment,
    Enum$order_by? investment_id,
    Enum$order_by? payment_investment_fulfilled,
    Enum$order_by? payment_investment_id,
    Enum$order_by? updated_at,
  }) =>
      Input$payment_investment_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (investment != null) r'investment': investment,
        if (investment_id != null) r'investment_id': investment_id,
        if (payment_investment_fulfilled != null)
          r'payment_investment_fulfilled': payment_investment_fulfilled,
        if (payment_investment_id != null)
          r'payment_investment_id': payment_investment_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_investment_order_by._(this._$data);

  factory Input$payment_investment_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('investment')) {
      final l$investment = data['investment'];
      result$data['investment'] = l$investment == null
          ? null
          : Input$investment_order_by.fromJson(
              (l$investment as Map<String, dynamic>));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = l$investment_id == null
          ? null
          : fromJson$Enum$order_by((l$investment_id as String));
    }
    if (data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled =
          data['payment_investment_fulfilled'];
      result$data['payment_investment_fulfilled'] =
          l$payment_investment_fulfilled == null
              ? null
              : fromJson$Enum$order_by(
                  (l$payment_investment_fulfilled as String));
    }
    if (data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = data['payment_investment_id'];
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : fromJson$Enum$order_by((l$payment_investment_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$payment_investment_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Input$investment_order_by? get investment =>
      (_$data['investment'] as Input$investment_order_by?);
  Enum$order_by? get investment_id =>
      (_$data['investment_id'] as Enum$order_by?);
  Enum$order_by? get payment_investment_fulfilled =>
      (_$data['payment_investment_fulfilled'] as Enum$order_by?);
  Enum$order_by? get payment_investment_id =>
      (_$data['payment_investment_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('investment')) {
      final l$investment = investment;
      result$data['investment'] = l$investment?.toJson();
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id == null
          ? null
          : toJson$Enum$order_by(l$investment_id);
    }
    if (_$data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled = payment_investment_fulfilled;
      result$data['payment_investment_fulfilled'] =
          l$payment_investment_fulfilled == null
              ? null
              : toJson$Enum$order_by(l$payment_investment_fulfilled);
    }
    if (_$data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = payment_investment_id;
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : toJson$Enum$order_by(l$payment_investment_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_order_by<Input$payment_investment_order_by>
      get copyWith => CopyWith$Input$payment_investment_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment = investment;
    final lOther$investment = other.investment;
    if (_$data.containsKey('investment') !=
        other._$data.containsKey('investment')) {
      return false;
    }
    if (l$investment != lOther$investment) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final lOther$payment_investment_fulfilled =
        other.payment_investment_fulfilled;
    if (_$data.containsKey('payment_investment_fulfilled') !=
        other._$data.containsKey('payment_investment_fulfilled')) {
      return false;
    }
    if (l$payment_investment_fulfilled != lOther$payment_investment_fulfilled) {
      return false;
    }
    final l$payment_investment_id = payment_investment_id;
    final lOther$payment_investment_id = other.payment_investment_id;
    if (_$data.containsKey('payment_investment_id') !=
        other._$data.containsKey('payment_investment_id')) {
      return false;
    }
    if (l$payment_investment_id != lOther$payment_investment_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment = investment;
    final l$investment_id = investment_id;
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final l$payment_investment_id = payment_investment_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment') ? l$investment : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('payment_investment_fulfilled')
          ? l$payment_investment_fulfilled
          : const {},
      _$data.containsKey('payment_investment_id')
          ? l$payment_investment_id
          : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_order_by<TRes> {
  factory CopyWith$Input$payment_investment_order_by(
    Input$payment_investment_order_by instance,
    TRes Function(Input$payment_investment_order_by) then,
  ) = _CopyWithImpl$Input$payment_investment_order_by;

  factory CopyWith$Input$payment_investment_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_order_by;

  TRes call({
    Enum$order_by? created_at,
    Input$investment_order_by? investment,
    Enum$order_by? investment_id,
    Enum$order_by? payment_investment_fulfilled,
    Enum$order_by? payment_investment_id,
    Enum$order_by? updated_at,
  });
  CopyWith$Input$investment_order_by<TRes> get investment;
}

class _CopyWithImpl$Input$payment_investment_order_by<TRes>
    implements CopyWith$Input$payment_investment_order_by<TRes> {
  _CopyWithImpl$Input$payment_investment_order_by(
    this._instance,
    this._then,
  );

  final Input$payment_investment_order_by _instance;

  final TRes Function(Input$payment_investment_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment = _undefined,
    Object? investment_id = _undefined,
    Object? payment_investment_fulfilled = _undefined,
    Object? payment_investment_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_investment_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (investment != _undefined)
          'investment': (investment as Input$investment_order_by?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as Enum$order_by?),
        if (payment_investment_fulfilled != _undefined)
          'payment_investment_fulfilled':
              (payment_investment_fulfilled as Enum$order_by?),
        if (payment_investment_id != _undefined)
          'payment_investment_id': (payment_investment_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
  CopyWith$Input$investment_order_by<TRes> get investment {
    final local$investment = _instance.investment;
    return local$investment == null
        ? CopyWith$Input$investment_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_order_by(
            local$investment, (e) => call(investment: e));
  }
}

class _CopyWithStubImpl$Input$payment_investment_order_by<TRes>
    implements CopyWith$Input$payment_investment_order_by<TRes> {
  _CopyWithStubImpl$Input$payment_investment_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Input$investment_order_by? investment,
    Enum$order_by? investment_id,
    Enum$order_by? payment_investment_fulfilled,
    Enum$order_by? payment_investment_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
  CopyWith$Input$investment_order_by<TRes> get investment =>
      CopyWith$Input$investment_order_by.stub(_res);
}

class Input$payment_investment_pk_columns_input {
  factory Input$payment_investment_pk_columns_input(
          {required UUID payment_investment_id}) =>
      Input$payment_investment_pk_columns_input._({
        r'payment_investment_id': payment_investment_id,
      });

  Input$payment_investment_pk_columns_input._(this._$data);

  factory Input$payment_investment_pk_columns_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$payment_investment_id = data['payment_investment_id'];
    result$data['payment_investment_id'] =
        uuidFromJson(l$payment_investment_id);
    return Input$payment_investment_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get payment_investment_id => (_$data['payment_investment_id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$payment_investment_id = payment_investment_id;
    result$data['payment_investment_id'] = uuidToJson(l$payment_investment_id);
    return result$data;
  }

  CopyWith$Input$payment_investment_pk_columns_input<
          Input$payment_investment_pk_columns_input>
      get copyWith => CopyWith$Input$payment_investment_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$payment_investment_id = payment_investment_id;
    final lOther$payment_investment_id = other.payment_investment_id;
    if (l$payment_investment_id != lOther$payment_investment_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$payment_investment_id = payment_investment_id;
    return Object.hashAll([l$payment_investment_id]);
  }
}

abstract class CopyWith$Input$payment_investment_pk_columns_input<TRes> {
  factory CopyWith$Input$payment_investment_pk_columns_input(
    Input$payment_investment_pk_columns_input instance,
    TRes Function(Input$payment_investment_pk_columns_input) then,
  ) = _CopyWithImpl$Input$payment_investment_pk_columns_input;

  factory CopyWith$Input$payment_investment_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_pk_columns_input;

  TRes call({UUID? payment_investment_id});
}

class _CopyWithImpl$Input$payment_investment_pk_columns_input<TRes>
    implements CopyWith$Input$payment_investment_pk_columns_input<TRes> {
  _CopyWithImpl$Input$payment_investment_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$payment_investment_pk_columns_input _instance;

  final TRes Function(Input$payment_investment_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? payment_investment_id = _undefined}) =>
      _then(Input$payment_investment_pk_columns_input._({
        ..._instance._$data,
        if (payment_investment_id != _undefined &&
            payment_investment_id != null)
          'payment_investment_id': (payment_investment_id as UUID),
      }));
}

class _CopyWithStubImpl$Input$payment_investment_pk_columns_input<TRes>
    implements CopyWith$Input$payment_investment_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$payment_investment_pk_columns_input(this._res);

  TRes _res;

  call({UUID? payment_investment_id}) => _res;
}

class Input$payment_investment_set_input {
  factory Input$payment_investment_set_input({
    DateTime? created_at,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  }) =>
      Input$payment_investment_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (investment_id != null) r'investment_id': investment_id,
        if (payment_investment_fulfilled != null)
          r'payment_investment_fulfilled': payment_investment_fulfilled,
        if (payment_investment_id != null)
          r'payment_investment_id': payment_investment_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_investment_set_input._(this._$data);

  factory Input$payment_investment_set_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = (l$investment_id as int?);
    }
    if (data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled =
          data['payment_investment_fulfilled'];
      result$data['payment_investment_fulfilled'] =
          (l$payment_investment_fulfilled as bool?);
    }
    if (data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = data['payment_investment_id'];
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : uuidFromJson(l$payment_investment_id);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$payment_investment_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get investment_id => (_$data['investment_id'] as int?);
  bool? get payment_investment_fulfilled =>
      (_$data['payment_investment_fulfilled'] as bool?);
  UUID? get payment_investment_id => (_$data['payment_investment_id'] as UUID?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id;
    }
    if (_$data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled = payment_investment_fulfilled;
      result$data['payment_investment_fulfilled'] =
          l$payment_investment_fulfilled;
    }
    if (_$data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = payment_investment_id;
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : uuidToJson(l$payment_investment_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_set_input<
          Input$payment_investment_set_input>
      get copyWith => CopyWith$Input$payment_investment_set_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final lOther$payment_investment_fulfilled =
        other.payment_investment_fulfilled;
    if (_$data.containsKey('payment_investment_fulfilled') !=
        other._$data.containsKey('payment_investment_fulfilled')) {
      return false;
    }
    if (l$payment_investment_fulfilled != lOther$payment_investment_fulfilled) {
      return false;
    }
    final l$payment_investment_id = payment_investment_id;
    final lOther$payment_investment_id = other.payment_investment_id;
    if (_$data.containsKey('payment_investment_id') !=
        other._$data.containsKey('payment_investment_id')) {
      return false;
    }
    if (l$payment_investment_id != lOther$payment_investment_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_id = investment_id;
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final l$payment_investment_id = payment_investment_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('payment_investment_fulfilled')
          ? l$payment_investment_fulfilled
          : const {},
      _$data.containsKey('payment_investment_id')
          ? l$payment_investment_id
          : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_set_input<TRes> {
  factory CopyWith$Input$payment_investment_set_input(
    Input$payment_investment_set_input instance,
    TRes Function(Input$payment_investment_set_input) then,
  ) = _CopyWithImpl$Input$payment_investment_set_input;

  factory CopyWith$Input$payment_investment_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_set_input;

  TRes call({
    DateTime? created_at,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$payment_investment_set_input<TRes>
    implements CopyWith$Input$payment_investment_set_input<TRes> {
  _CopyWithImpl$Input$payment_investment_set_input(
    this._instance,
    this._then,
  );

  final Input$payment_investment_set_input _instance;

  final TRes Function(Input$payment_investment_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_id = _undefined,
    Object? payment_investment_fulfilled = _undefined,
    Object? payment_investment_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_investment_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as int?),
        if (payment_investment_fulfilled != _undefined)
          'payment_investment_fulfilled':
              (payment_investment_fulfilled as bool?),
        if (payment_investment_id != _undefined)
          'payment_investment_id': (payment_investment_id as UUID?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$payment_investment_set_input<TRes>
    implements CopyWith$Input$payment_investment_set_input<TRes> {
  _CopyWithStubImpl$Input$payment_investment_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$payment_investment_stream_cursor_input {
  factory Input$payment_investment_stream_cursor_input({
    required Input$payment_investment_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$payment_investment_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$payment_investment_stream_cursor_input._(this._$data);

  factory Input$payment_investment_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$payment_investment_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$payment_investment_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$payment_investment_stream_cursor_value_input get initial_value =>
      (_$data['initial_value']
          as Input$payment_investment_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_stream_cursor_input<
          Input$payment_investment_stream_cursor_input>
      get copyWith => CopyWith$Input$payment_investment_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_stream_cursor_input<TRes> {
  factory CopyWith$Input$payment_investment_stream_cursor_input(
    Input$payment_investment_stream_cursor_input instance,
    TRes Function(Input$payment_investment_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$payment_investment_stream_cursor_input;

  factory CopyWith$Input$payment_investment_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_stream_cursor_input;

  TRes call({
    Input$payment_investment_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$payment_investment_stream_cursor_value_input<TRes>
      get initial_value;
}

class _CopyWithImpl$Input$payment_investment_stream_cursor_input<TRes>
    implements CopyWith$Input$payment_investment_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$payment_investment_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$payment_investment_stream_cursor_input _instance;

  final TRes Function(Input$payment_investment_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$payment_investment_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value': (initial_value
              as Input$payment_investment_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$payment_investment_stream_cursor_value_input<TRes>
      get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$payment_investment_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$payment_investment_stream_cursor_input<TRes>
    implements CopyWith$Input$payment_investment_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$payment_investment_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$payment_investment_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$payment_investment_stream_cursor_value_input<TRes>
      get initial_value =>
          CopyWith$Input$payment_investment_stream_cursor_value_input.stub(
              _res);
}

class Input$payment_investment_stream_cursor_value_input {
  factory Input$payment_investment_stream_cursor_value_input({
    DateTime? created_at,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  }) =>
      Input$payment_investment_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (investment_id != null) r'investment_id': investment_id,
        if (payment_investment_fulfilled != null)
          r'payment_investment_fulfilled': payment_investment_fulfilled,
        if (payment_investment_id != null)
          r'payment_investment_id': payment_investment_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$payment_investment_stream_cursor_value_input._(this._$data);

  factory Input$payment_investment_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investment_id')) {
      final l$investment_id = data['investment_id'];
      result$data['investment_id'] = (l$investment_id as int?);
    }
    if (data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled =
          data['payment_investment_fulfilled'];
      result$data['payment_investment_fulfilled'] =
          (l$payment_investment_fulfilled as bool?);
    }
    if (data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = data['payment_investment_id'];
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : uuidFromJson(l$payment_investment_id);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$payment_investment_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get investment_id => (_$data['investment_id'] as int?);
  bool? get payment_investment_fulfilled =>
      (_$data['payment_investment_fulfilled'] as bool?);
  UUID? get payment_investment_id => (_$data['payment_investment_id'] as UUID?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investment_id')) {
      final l$investment_id = investment_id;
      result$data['investment_id'] = l$investment_id;
    }
    if (_$data.containsKey('payment_investment_fulfilled')) {
      final l$payment_investment_fulfilled = payment_investment_fulfilled;
      result$data['payment_investment_fulfilled'] =
          l$payment_investment_fulfilled;
    }
    if (_$data.containsKey('payment_investment_id')) {
      final l$payment_investment_id = payment_investment_id;
      result$data['payment_investment_id'] = l$payment_investment_id == null
          ? null
          : uuidToJson(l$payment_investment_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$payment_investment_stream_cursor_value_input<
          Input$payment_investment_stream_cursor_value_input>
      get copyWith =>
          CopyWith$Input$payment_investment_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investment_id = investment_id;
    final lOther$investment_id = other.investment_id;
    if (_$data.containsKey('investment_id') !=
        other._$data.containsKey('investment_id')) {
      return false;
    }
    if (l$investment_id != lOther$investment_id) {
      return false;
    }
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final lOther$payment_investment_fulfilled =
        other.payment_investment_fulfilled;
    if (_$data.containsKey('payment_investment_fulfilled') !=
        other._$data.containsKey('payment_investment_fulfilled')) {
      return false;
    }
    if (l$payment_investment_fulfilled != lOther$payment_investment_fulfilled) {
      return false;
    }
    final l$payment_investment_id = payment_investment_id;
    final lOther$payment_investment_id = other.payment_investment_id;
    if (_$data.containsKey('payment_investment_id') !=
        other._$data.containsKey('payment_investment_id')) {
      return false;
    }
    if (l$payment_investment_id != lOther$payment_investment_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investment_id = investment_id;
    final l$payment_investment_fulfilled = payment_investment_fulfilled;
    final l$payment_investment_id = payment_investment_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investment_id') ? l$investment_id : const {},
      _$data.containsKey('payment_investment_fulfilled')
          ? l$payment_investment_fulfilled
          : const {},
      _$data.containsKey('payment_investment_id')
          ? l$payment_investment_id
          : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_stream_cursor_value_input<
    TRes> {
  factory CopyWith$Input$payment_investment_stream_cursor_value_input(
    Input$payment_investment_stream_cursor_value_input instance,
    TRes Function(Input$payment_investment_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$payment_investment_stream_cursor_value_input;

  factory CopyWith$Input$payment_investment_stream_cursor_value_input.stub(
          TRes res) =
      _CopyWithStubImpl$Input$payment_investment_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$payment_investment_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$payment_investment_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$payment_investment_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$payment_investment_stream_cursor_value_input _instance;

  final TRes Function(Input$payment_investment_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investment_id = _undefined,
    Object? payment_investment_fulfilled = _undefined,
    Object? payment_investment_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$payment_investment_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investment_id != _undefined)
          'investment_id': (investment_id as int?),
        if (payment_investment_fulfilled != _undefined)
          'payment_investment_fulfilled':
              (payment_investment_fulfilled as bool?),
        if (payment_investment_id != _undefined)
          'payment_investment_id': (payment_investment_id as UUID?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$payment_investment_stream_cursor_value_input<TRes>
    implements
        CopyWith$Input$payment_investment_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$payment_investment_stream_cursor_value_input(
      this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? investment_id,
    bool? payment_investment_fulfilled,
    UUID? payment_investment_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$payment_investment_updates {
  factory Input$payment_investment_updates({
    Input$payment_investment_inc_input? $_inc,
    Input$payment_investment_set_input? $_set,
    required Input$payment_investment_bool_exp where,
  }) =>
      Input$payment_investment_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$payment_investment_updates._(this._$data);

  factory Input$payment_investment_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$payment_investment_inc_input.fromJson(
              (l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$payment_investment_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] = Input$payment_investment_bool_exp.fromJson(
        (l$where as Map<String, dynamic>));
    return Input$payment_investment_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$payment_investment_inc_input? get $_inc =>
      (_$data['_inc'] as Input$payment_investment_inc_input?);
  Input$payment_investment_set_input? get $_set =>
      (_$data['_set'] as Input$payment_investment_set_input?);
  Input$payment_investment_bool_exp get where =>
      (_$data['where'] as Input$payment_investment_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$payment_investment_updates<Input$payment_investment_updates>
      get copyWith => CopyWith$Input$payment_investment_updates(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$payment_investment_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$payment_investment_updates<TRes> {
  factory CopyWith$Input$payment_investment_updates(
    Input$payment_investment_updates instance,
    TRes Function(Input$payment_investment_updates) then,
  ) = _CopyWithImpl$Input$payment_investment_updates;

  factory CopyWith$Input$payment_investment_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$payment_investment_updates;

  TRes call({
    Input$payment_investment_inc_input? $_inc,
    Input$payment_investment_set_input? $_set,
    Input$payment_investment_bool_exp? where,
  });
  CopyWith$Input$payment_investment_inc_input<TRes> get $_inc;
  CopyWith$Input$payment_investment_set_input<TRes> get $_set;
  CopyWith$Input$payment_investment_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$payment_investment_updates<TRes>
    implements CopyWith$Input$payment_investment_updates<TRes> {
  _CopyWithImpl$Input$payment_investment_updates(
    this._instance,
    this._then,
  );

  final Input$payment_investment_updates _instance;

  final TRes Function(Input$payment_investment_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$payment_investment_updates._({
        ..._instance._$data,
        if ($_inc != _undefined)
          '_inc': ($_inc as Input$payment_investment_inc_input?),
        if ($_set != _undefined)
          '_set': ($_set as Input$payment_investment_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$payment_investment_bool_exp),
      }));
  CopyWith$Input$payment_investment_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$payment_investment_inc_input.stub(_then(_instance))
        : CopyWith$Input$payment_investment_inc_input(
            local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$payment_investment_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$payment_investment_set_input.stub(_then(_instance))
        : CopyWith$Input$payment_investment_set_input(
            local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$payment_investment_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$payment_investment_bool_exp(
        local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$payment_investment_updates<TRes>
    implements CopyWith$Input$payment_investment_updates<TRes> {
  _CopyWithStubImpl$Input$payment_investment_updates(this._res);

  TRes _res;

  call({
    Input$payment_investment_inc_input? $_inc,
    Input$payment_investment_set_input? $_set,
    Input$payment_investment_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$payment_investment_inc_input<TRes> get $_inc =>
      CopyWith$Input$payment_investment_inc_input.stub(_res);
  CopyWith$Input$payment_investment_set_input<TRes> get $_set =>
      CopyWith$Input$payment_investment_set_input.stub(_res);
  CopyWith$Input$payment_investment_bool_exp<TRes> get where =>
      CopyWith$Input$payment_investment_bool_exp.stub(_res);
}

class Input$profile_bool_exp {
  factory Input$profile_bool_exp({
    List<Input$profile_bool_exp>? $_and,
    Input$profile_bool_exp? $_not,
    List<Input$profile_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$String_comparison_exp? profile_address,
    Input$String_comparison_exp? profile_first_name,
    Input$Int_comparison_exp? profile_id,
    Input$String_comparison_exp? profile_ktp_no,
    Input$String_comparison_exp? profile_last_name,
    Input$String_comparison_exp? profile_npwp_no,
    Input$String_comparison_exp? profile_phone,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      Input$profile_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (profile_address != null) r'profile_address': profile_address,
        if (profile_first_name != null)
          r'profile_first_name': profile_first_name,
        if (profile_id != null) r'profile_id': profile_id,
        if (profile_ktp_no != null) r'profile_ktp_no': profile_ktp_no,
        if (profile_last_name != null) r'profile_last_name': profile_last_name,
        if (profile_npwp_no != null) r'profile_npwp_no': profile_npwp_no,
        if (profile_phone != null) r'profile_phone': profile_phone,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$profile_bool_exp._(this._$data);

  factory Input$profile_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$profile_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$profile_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$profile_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('profile_address')) {
      final l$profile_address = data['profile_address'];
      result$data['profile_address'] = l$profile_address == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$profile_address as Map<String, dynamic>));
    }
    if (data.containsKey('profile_first_name')) {
      final l$profile_first_name = data['profile_first_name'];
      result$data['profile_first_name'] = l$profile_first_name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$profile_first_name as Map<String, dynamic>));
    }
    if (data.containsKey('profile_id')) {
      final l$profile_id = data['profile_id'];
      result$data['profile_id'] = l$profile_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$profile_id as Map<String, dynamic>));
    }
    if (data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = data['profile_ktp_no'];
      result$data['profile_ktp_no'] = l$profile_ktp_no == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$profile_ktp_no as Map<String, dynamic>));
    }
    if (data.containsKey('profile_last_name')) {
      final l$profile_last_name = data['profile_last_name'];
      result$data['profile_last_name'] = l$profile_last_name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$profile_last_name as Map<String, dynamic>));
    }
    if (data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = data['profile_npwp_no'];
      result$data['profile_npwp_no'] = l$profile_npwp_no == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$profile_npwp_no as Map<String, dynamic>));
    }
    if (data.containsKey('profile_phone')) {
      final l$profile_phone = data['profile_phone'];
      result$data['profile_phone'] = l$profile_phone == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$profile_phone as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$user_id as Map<String, dynamic>));
    }
    return Input$profile_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$profile_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$profile_bool_exp>?);
  Input$profile_bool_exp? get $_not =>
      (_$data['_not'] as Input$profile_bool_exp?);
  List<Input$profile_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$profile_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$String_comparison_exp? get profile_address =>
      (_$data['profile_address'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get profile_first_name =>
      (_$data['profile_first_name'] as Input$String_comparison_exp?);
  Input$Int_comparison_exp? get profile_id =>
      (_$data['profile_id'] as Input$Int_comparison_exp?);
  Input$String_comparison_exp? get profile_ktp_no =>
      (_$data['profile_ktp_no'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get profile_last_name =>
      (_$data['profile_last_name'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get profile_npwp_no =>
      (_$data['profile_npwp_no'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get profile_phone =>
      (_$data['profile_phone'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get user_id =>
      (_$data['user_id'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('profile_address')) {
      final l$profile_address = profile_address;
      result$data['profile_address'] = l$profile_address?.toJson();
    }
    if (_$data.containsKey('profile_first_name')) {
      final l$profile_first_name = profile_first_name;
      result$data['profile_first_name'] = l$profile_first_name?.toJson();
    }
    if (_$data.containsKey('profile_id')) {
      final l$profile_id = profile_id;
      result$data['profile_id'] = l$profile_id?.toJson();
    }
    if (_$data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = profile_ktp_no;
      result$data['profile_ktp_no'] = l$profile_ktp_no?.toJson();
    }
    if (_$data.containsKey('profile_last_name')) {
      final l$profile_last_name = profile_last_name;
      result$data['profile_last_name'] = l$profile_last_name?.toJson();
    }
    if (_$data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = profile_npwp_no;
      result$data['profile_npwp_no'] = l$profile_npwp_no?.toJson();
    }
    if (_$data.containsKey('profile_phone')) {
      final l$profile_phone = profile_phone;
      result$data['profile_phone'] = l$profile_phone?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$profile_bool_exp<Input$profile_bool_exp> get copyWith =>
      CopyWith$Input$profile_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$profile_address = profile_address;
    final lOther$profile_address = other.profile_address;
    if (_$data.containsKey('profile_address') !=
        other._$data.containsKey('profile_address')) {
      return false;
    }
    if (l$profile_address != lOther$profile_address) {
      return false;
    }
    final l$profile_first_name = profile_first_name;
    final lOther$profile_first_name = other.profile_first_name;
    if (_$data.containsKey('profile_first_name') !=
        other._$data.containsKey('profile_first_name')) {
      return false;
    }
    if (l$profile_first_name != lOther$profile_first_name) {
      return false;
    }
    final l$profile_id = profile_id;
    final lOther$profile_id = other.profile_id;
    if (_$data.containsKey('profile_id') !=
        other._$data.containsKey('profile_id')) {
      return false;
    }
    if (l$profile_id != lOther$profile_id) {
      return false;
    }
    final l$profile_ktp_no = profile_ktp_no;
    final lOther$profile_ktp_no = other.profile_ktp_no;
    if (_$data.containsKey('profile_ktp_no') !=
        other._$data.containsKey('profile_ktp_no')) {
      return false;
    }
    if (l$profile_ktp_no != lOther$profile_ktp_no) {
      return false;
    }
    final l$profile_last_name = profile_last_name;
    final lOther$profile_last_name = other.profile_last_name;
    if (_$data.containsKey('profile_last_name') !=
        other._$data.containsKey('profile_last_name')) {
      return false;
    }
    if (l$profile_last_name != lOther$profile_last_name) {
      return false;
    }
    final l$profile_npwp_no = profile_npwp_no;
    final lOther$profile_npwp_no = other.profile_npwp_no;
    if (_$data.containsKey('profile_npwp_no') !=
        other._$data.containsKey('profile_npwp_no')) {
      return false;
    }
    if (l$profile_npwp_no != lOther$profile_npwp_no) {
      return false;
    }
    final l$profile_phone = profile_phone;
    final lOther$profile_phone = other.profile_phone;
    if (_$data.containsKey('profile_phone') !=
        other._$data.containsKey('profile_phone')) {
      return false;
    }
    if (l$profile_phone != lOther$profile_phone) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$profile_address = profile_address;
    final l$profile_first_name = profile_first_name;
    final l$profile_id = profile_id;
    final l$profile_ktp_no = profile_ktp_no;
    final l$profile_last_name = profile_last_name;
    final l$profile_npwp_no = profile_npwp_no;
    final l$profile_phone = profile_phone;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('profile_address') ? l$profile_address : const {},
      _$data.containsKey('profile_first_name')
          ? l$profile_first_name
          : const {},
      _$data.containsKey('profile_id') ? l$profile_id : const {},
      _$data.containsKey('profile_ktp_no') ? l$profile_ktp_no : const {},
      _$data.containsKey('profile_last_name') ? l$profile_last_name : const {},
      _$data.containsKey('profile_npwp_no') ? l$profile_npwp_no : const {},
      _$data.containsKey('profile_phone') ? l$profile_phone : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_bool_exp<TRes> {
  factory CopyWith$Input$profile_bool_exp(
    Input$profile_bool_exp instance,
    TRes Function(Input$profile_bool_exp) then,
  ) = _CopyWithImpl$Input$profile_bool_exp;

  factory CopyWith$Input$profile_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_bool_exp;

  TRes call({
    List<Input$profile_bool_exp>? $_and,
    Input$profile_bool_exp? $_not,
    List<Input$profile_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$String_comparison_exp? profile_address,
    Input$String_comparison_exp? profile_first_name,
    Input$Int_comparison_exp? profile_id,
    Input$String_comparison_exp? profile_ktp_no,
    Input$String_comparison_exp? profile_last_name,
    Input$String_comparison_exp? profile_npwp_no,
    Input$String_comparison_exp? profile_phone,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  });
  TRes $_and(
      Iterable<Input$profile_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$profile_bool_exp<Input$profile_bool_exp>>?)
          _fn);
  CopyWith$Input$profile_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$profile_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$profile_bool_exp<Input$profile_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$String_comparison_exp<TRes> get profile_address;
  CopyWith$Input$String_comparison_exp<TRes> get profile_first_name;
  CopyWith$Input$Int_comparison_exp<TRes> get profile_id;
  CopyWith$Input$String_comparison_exp<TRes> get profile_ktp_no;
  CopyWith$Input$String_comparison_exp<TRes> get profile_last_name;
  CopyWith$Input$String_comparison_exp<TRes> get profile_npwp_no;
  CopyWith$Input$String_comparison_exp<TRes> get profile_phone;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id;
}

class _CopyWithImpl$Input$profile_bool_exp<TRes>
    implements CopyWith$Input$profile_bool_exp<TRes> {
  _CopyWithImpl$Input$profile_bool_exp(
    this._instance,
    this._then,
  );

  final Input$profile_bool_exp _instance;

  final TRes Function(Input$profile_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? profile_address = _undefined,
    Object? profile_first_name = _undefined,
    Object? profile_id = _undefined,
    Object? profile_ktp_no = _undefined,
    Object? profile_last_name = _undefined,
    Object? profile_npwp_no = _undefined,
    Object? profile_phone = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$profile_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$profile_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$profile_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$profile_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (profile_address != _undefined)
          'profile_address': (profile_address as Input$String_comparison_exp?),
        if (profile_first_name != _undefined)
          'profile_first_name':
              (profile_first_name as Input$String_comparison_exp?),
        if (profile_id != _undefined)
          'profile_id': (profile_id as Input$Int_comparison_exp?),
        if (profile_ktp_no != _undefined)
          'profile_ktp_no': (profile_ktp_no as Input$String_comparison_exp?),
        if (profile_last_name != _undefined)
          'profile_last_name':
              (profile_last_name as Input$String_comparison_exp?),
        if (profile_npwp_no != _undefined)
          'profile_npwp_no': (profile_npwp_no as Input$String_comparison_exp?),
        if (profile_phone != _undefined)
          'profile_phone': (profile_phone as Input$String_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (user_id != _undefined)
          'user_id': (user_id as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$profile_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$profile_bool_exp<Input$profile_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$profile_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$profile_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$profile_bool_exp.stub(_then(_instance))
        : CopyWith$Input$profile_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$profile_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$profile_bool_exp<Input$profile_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$profile_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get profile_address {
    final local$profile_address = _instance.profile_address;
    return local$profile_address == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$profile_address, (e) => call(profile_address: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get profile_first_name {
    final local$profile_first_name = _instance.profile_first_name;
    return local$profile_first_name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$profile_first_name, (e) => call(profile_first_name: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get profile_id {
    final local$profile_id = _instance.profile_id;
    return local$profile_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$profile_id, (e) => call(profile_id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get profile_ktp_no {
    final local$profile_ktp_no = _instance.profile_ktp_no;
    return local$profile_ktp_no == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$profile_ktp_no, (e) => call(profile_ktp_no: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get profile_last_name {
    final local$profile_last_name = _instance.profile_last_name;
    return local$profile_last_name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$profile_last_name, (e) => call(profile_last_name: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get profile_npwp_no {
    final local$profile_npwp_no = _instance.profile_npwp_no;
    return local$profile_npwp_no == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$profile_npwp_no, (e) => call(profile_npwp_no: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get profile_phone {
    final local$profile_phone = _instance.profile_phone;
    return local$profile_phone == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$profile_phone, (e) => call(profile_phone: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get user_id {
    final local$user_id = _instance.user_id;
    return local$user_id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$user_id, (e) => call(user_id: e));
  }
}

class _CopyWithStubImpl$Input$profile_bool_exp<TRes>
    implements CopyWith$Input$profile_bool_exp<TRes> {
  _CopyWithStubImpl$Input$profile_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$profile_bool_exp>? $_and,
    Input$profile_bool_exp? $_not,
    List<Input$profile_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$String_comparison_exp? profile_address,
    Input$String_comparison_exp? profile_first_name,
    Input$Int_comparison_exp? profile_id,
    Input$String_comparison_exp? profile_ktp_no,
    Input$String_comparison_exp? profile_last_name,
    Input$String_comparison_exp? profile_npwp_no,
    Input$String_comparison_exp? profile_phone,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$profile_bool_exp<TRes> get $_not =>
      CopyWith$Input$profile_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get profile_address =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get profile_first_name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get profile_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get profile_ktp_no =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get profile_last_name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get profile_npwp_no =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get profile_phone =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$profile_insert_input {
  factory Input$profile_insert_input({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      Input$profile_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (profile_address != null) r'profile_address': profile_address,
        if (profile_first_name != null)
          r'profile_first_name': profile_first_name,
        if (profile_ktp_no != null) r'profile_ktp_no': profile_ktp_no,
        if (profile_last_name != null) r'profile_last_name': profile_last_name,
        if (profile_npwp_no != null) r'profile_npwp_no': profile_npwp_no,
        if (profile_phone != null) r'profile_phone': profile_phone,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$profile_insert_input._(this._$data);

  factory Input$profile_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('profile_address')) {
      final l$profile_address = data['profile_address'];
      result$data['profile_address'] = (l$profile_address as String?);
    }
    if (data.containsKey('profile_first_name')) {
      final l$profile_first_name = data['profile_first_name'];
      result$data['profile_first_name'] = (l$profile_first_name as String?);
    }
    if (data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = data['profile_ktp_no'];
      result$data['profile_ktp_no'] = (l$profile_ktp_no as String?);
    }
    if (data.containsKey('profile_last_name')) {
      final l$profile_last_name = data['profile_last_name'];
      result$data['profile_last_name'] = (l$profile_last_name as String?);
    }
    if (data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = data['profile_npwp_no'];
      result$data['profile_npwp_no'] = (l$profile_npwp_no as String?);
    }
    if (data.containsKey('profile_phone')) {
      final l$profile_phone = data['profile_phone'];
      result$data['profile_phone'] = (l$profile_phone as String?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$profile_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  String? get profile_address => (_$data['profile_address'] as String?);
  String? get profile_first_name => (_$data['profile_first_name'] as String?);
  String? get profile_ktp_no => (_$data['profile_ktp_no'] as String?);
  String? get profile_last_name => (_$data['profile_last_name'] as String?);
  String? get profile_npwp_no => (_$data['profile_npwp_no'] as String?);
  String? get profile_phone => (_$data['profile_phone'] as String?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('profile_address')) {
      final l$profile_address = profile_address;
      result$data['profile_address'] = l$profile_address;
    }
    if (_$data.containsKey('profile_first_name')) {
      final l$profile_first_name = profile_first_name;
      result$data['profile_first_name'] = l$profile_first_name;
    }
    if (_$data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = profile_ktp_no;
      result$data['profile_ktp_no'] = l$profile_ktp_no;
    }
    if (_$data.containsKey('profile_last_name')) {
      final l$profile_last_name = profile_last_name;
      result$data['profile_last_name'] = l$profile_last_name;
    }
    if (_$data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = profile_npwp_no;
      result$data['profile_npwp_no'] = l$profile_npwp_no;
    }
    if (_$data.containsKey('profile_phone')) {
      final l$profile_phone = profile_phone;
      result$data['profile_phone'] = l$profile_phone;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$profile_insert_input<Input$profile_insert_input>
      get copyWith => CopyWith$Input$profile_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$profile_address = profile_address;
    final lOther$profile_address = other.profile_address;
    if (_$data.containsKey('profile_address') !=
        other._$data.containsKey('profile_address')) {
      return false;
    }
    if (l$profile_address != lOther$profile_address) {
      return false;
    }
    final l$profile_first_name = profile_first_name;
    final lOther$profile_first_name = other.profile_first_name;
    if (_$data.containsKey('profile_first_name') !=
        other._$data.containsKey('profile_first_name')) {
      return false;
    }
    if (l$profile_first_name != lOther$profile_first_name) {
      return false;
    }
    final l$profile_ktp_no = profile_ktp_no;
    final lOther$profile_ktp_no = other.profile_ktp_no;
    if (_$data.containsKey('profile_ktp_no') !=
        other._$data.containsKey('profile_ktp_no')) {
      return false;
    }
    if (l$profile_ktp_no != lOther$profile_ktp_no) {
      return false;
    }
    final l$profile_last_name = profile_last_name;
    final lOther$profile_last_name = other.profile_last_name;
    if (_$data.containsKey('profile_last_name') !=
        other._$data.containsKey('profile_last_name')) {
      return false;
    }
    if (l$profile_last_name != lOther$profile_last_name) {
      return false;
    }
    final l$profile_npwp_no = profile_npwp_no;
    final lOther$profile_npwp_no = other.profile_npwp_no;
    if (_$data.containsKey('profile_npwp_no') !=
        other._$data.containsKey('profile_npwp_no')) {
      return false;
    }
    if (l$profile_npwp_no != lOther$profile_npwp_no) {
      return false;
    }
    final l$profile_phone = profile_phone;
    final lOther$profile_phone = other.profile_phone;
    if (_$data.containsKey('profile_phone') !=
        other._$data.containsKey('profile_phone')) {
      return false;
    }
    if (l$profile_phone != lOther$profile_phone) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$profile_address = profile_address;
    final l$profile_first_name = profile_first_name;
    final l$profile_ktp_no = profile_ktp_no;
    final l$profile_last_name = profile_last_name;
    final l$profile_npwp_no = profile_npwp_no;
    final l$profile_phone = profile_phone;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('profile_address') ? l$profile_address : const {},
      _$data.containsKey('profile_first_name')
          ? l$profile_first_name
          : const {},
      _$data.containsKey('profile_ktp_no') ? l$profile_ktp_no : const {},
      _$data.containsKey('profile_last_name') ? l$profile_last_name : const {},
      _$data.containsKey('profile_npwp_no') ? l$profile_npwp_no : const {},
      _$data.containsKey('profile_phone') ? l$profile_phone : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_insert_input<TRes> {
  factory CopyWith$Input$profile_insert_input(
    Input$profile_insert_input instance,
    TRes Function(Input$profile_insert_input) then,
  ) = _CopyWithImpl$Input$profile_insert_input;

  factory CopyWith$Input$profile_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_insert_input;

  TRes call({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  });
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$profile_insert_input<TRes>
    implements CopyWith$Input$profile_insert_input<TRes> {
  _CopyWithImpl$Input$profile_insert_input(
    this._instance,
    this._then,
  );

  final Input$profile_insert_input _instance;

  final TRes Function(Input$profile_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? profile_address = _undefined,
    Object? profile_first_name = _undefined,
    Object? profile_ktp_no = _undefined,
    Object? profile_last_name = _undefined,
    Object? profile_npwp_no = _undefined,
    Object? profile_phone = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$profile_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (profile_address != _undefined)
          'profile_address': (profile_address as String?),
        if (profile_first_name != _undefined)
          'profile_first_name': (profile_first_name as String?),
        if (profile_ktp_no != _undefined)
          'profile_ktp_no': (profile_ktp_no as String?),
        if (profile_last_name != _undefined)
          'profile_last_name': (profile_last_name as String?),
        if (profile_npwp_no != _undefined)
          'profile_npwp_no': (profile_npwp_no as String?),
        if (profile_phone != _undefined)
          'profile_phone': (profile_phone as String?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$profile_insert_input<TRes>
    implements CopyWith$Input$profile_insert_input<TRes> {
  _CopyWithStubImpl$Input$profile_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      _res;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$profile_obj_rel_insert_input {
  factory Input$profile_obj_rel_insert_input({
    required Input$profile_insert_input data,
    Input$profile_on_conflict? on_conflict,
  }) =>
      Input$profile_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$profile_obj_rel_insert_input._(this._$data);

  factory Input$profile_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$profile_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$profile_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$profile_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$profile_insert_input get data =>
      (_$data['data'] as Input$profile_insert_input);
  Input$profile_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$profile_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$profile_obj_rel_insert_input<
          Input$profile_obj_rel_insert_input>
      get copyWith => CopyWith$Input$profile_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$profile_obj_rel_insert_input(
    Input$profile_obj_rel_insert_input instance,
    TRes Function(Input$profile_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$profile_obj_rel_insert_input;

  factory CopyWith$Input$profile_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_obj_rel_insert_input;

  TRes call({
    Input$profile_insert_input? data,
    Input$profile_on_conflict? on_conflict,
  });
  CopyWith$Input$profile_insert_input<TRes> get data;
  CopyWith$Input$profile_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$profile_obj_rel_insert_input<TRes>
    implements CopyWith$Input$profile_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$profile_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$profile_obj_rel_insert_input _instance;

  final TRes Function(Input$profile_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$profile_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$profile_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$profile_on_conflict?),
      }));
  CopyWith$Input$profile_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$profile_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$profile_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$profile_on_conflict.stub(_then(_instance))
        : CopyWith$Input$profile_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$profile_obj_rel_insert_input<TRes>
    implements CopyWith$Input$profile_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$profile_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$profile_insert_input? data,
    Input$profile_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$profile_insert_input<TRes> get data =>
      CopyWith$Input$profile_insert_input.stub(_res);
  CopyWith$Input$profile_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$profile_on_conflict.stub(_res);
}

class Input$profile_on_conflict {
  factory Input$profile_on_conflict({
    required Enum$profile_constraint constraint,
    required List<Enum$profile_update_column> update_columns,
    Input$profile_bool_exp? where,
  }) =>
      Input$profile_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$profile_on_conflict._(this._$data);

  factory Input$profile_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$profile_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$profile_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$profile_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$profile_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$profile_constraint get constraint =>
      (_$data['constraint'] as Enum$profile_constraint);
  List<Enum$profile_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$profile_update_column>);
  Input$profile_bool_exp? get where =>
      (_$data['where'] as Input$profile_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$profile_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$profile_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$profile_on_conflict<Input$profile_on_conflict> get copyWith =>
      CopyWith$Input$profile_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_on_conflict<TRes> {
  factory CopyWith$Input$profile_on_conflict(
    Input$profile_on_conflict instance,
    TRes Function(Input$profile_on_conflict) then,
  ) = _CopyWithImpl$Input$profile_on_conflict;

  factory CopyWith$Input$profile_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_on_conflict;

  TRes call({
    Enum$profile_constraint? constraint,
    List<Enum$profile_update_column>? update_columns,
    Input$profile_bool_exp? where,
  });
  CopyWith$Input$profile_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$profile_on_conflict<TRes>
    implements CopyWith$Input$profile_on_conflict<TRes> {
  _CopyWithImpl$Input$profile_on_conflict(
    this._instance,
    this._then,
  );

  final Input$profile_on_conflict _instance;

  final TRes Function(Input$profile_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$profile_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$profile_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$profile_update_column>),
        if (where != _undefined) 'where': (where as Input$profile_bool_exp?),
      }));
  CopyWith$Input$profile_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$profile_bool_exp.stub(_then(_instance))
        : CopyWith$Input$profile_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$profile_on_conflict<TRes>
    implements CopyWith$Input$profile_on_conflict<TRes> {
  _CopyWithStubImpl$Input$profile_on_conflict(this._res);

  TRes _res;

  call({
    Enum$profile_constraint? constraint,
    List<Enum$profile_update_column>? update_columns,
    Input$profile_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$profile_bool_exp<TRes> get where =>
      CopyWith$Input$profile_bool_exp.stub(_res);
}

class Input$profile_order_by {
  factory Input$profile_order_by({
    Enum$order_by? created_at,
    Enum$order_by? profile_address,
    Enum$order_by? profile_first_name,
    Enum$order_by? profile_id,
    Enum$order_by? profile_ktp_no,
    Enum$order_by? profile_last_name,
    Enum$order_by? profile_npwp_no,
    Enum$order_by? profile_phone,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      Input$profile_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (profile_address != null) r'profile_address': profile_address,
        if (profile_first_name != null)
          r'profile_first_name': profile_first_name,
        if (profile_id != null) r'profile_id': profile_id,
        if (profile_ktp_no != null) r'profile_ktp_no': profile_ktp_no,
        if (profile_last_name != null) r'profile_last_name': profile_last_name,
        if (profile_npwp_no != null) r'profile_npwp_no': profile_npwp_no,
        if (profile_phone != null) r'profile_phone': profile_phone,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$profile_order_by._(this._$data);

  factory Input$profile_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('profile_address')) {
      final l$profile_address = data['profile_address'];
      result$data['profile_address'] = l$profile_address == null
          ? null
          : fromJson$Enum$order_by((l$profile_address as String));
    }
    if (data.containsKey('profile_first_name')) {
      final l$profile_first_name = data['profile_first_name'];
      result$data['profile_first_name'] = l$profile_first_name == null
          ? null
          : fromJson$Enum$order_by((l$profile_first_name as String));
    }
    if (data.containsKey('profile_id')) {
      final l$profile_id = data['profile_id'];
      result$data['profile_id'] = l$profile_id == null
          ? null
          : fromJson$Enum$order_by((l$profile_id as String));
    }
    if (data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = data['profile_ktp_no'];
      result$data['profile_ktp_no'] = l$profile_ktp_no == null
          ? null
          : fromJson$Enum$order_by((l$profile_ktp_no as String));
    }
    if (data.containsKey('profile_last_name')) {
      final l$profile_last_name = data['profile_last_name'];
      result$data['profile_last_name'] = l$profile_last_name == null
          ? null
          : fromJson$Enum$order_by((l$profile_last_name as String));
    }
    if (data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = data['profile_npwp_no'];
      result$data['profile_npwp_no'] = l$profile_npwp_no == null
          ? null
          : fromJson$Enum$order_by((l$profile_npwp_no as String));
    }
    if (data.containsKey('profile_phone')) {
      final l$profile_phone = data['profile_phone'];
      result$data['profile_phone'] = l$profile_phone == null
          ? null
          : fromJson$Enum$order_by((l$profile_phone as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : fromJson$Enum$order_by((l$user_id as String));
    }
    return Input$profile_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get profile_address =>
      (_$data['profile_address'] as Enum$order_by?);
  Enum$order_by? get profile_first_name =>
      (_$data['profile_first_name'] as Enum$order_by?);
  Enum$order_by? get profile_id => (_$data['profile_id'] as Enum$order_by?);
  Enum$order_by? get profile_ktp_no =>
      (_$data['profile_ktp_no'] as Enum$order_by?);
  Enum$order_by? get profile_last_name =>
      (_$data['profile_last_name'] as Enum$order_by?);
  Enum$order_by? get profile_npwp_no =>
      (_$data['profile_npwp_no'] as Enum$order_by?);
  Enum$order_by? get profile_phone =>
      (_$data['profile_phone'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get user_id => (_$data['user_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('profile_address')) {
      final l$profile_address = profile_address;
      result$data['profile_address'] = l$profile_address == null
          ? null
          : toJson$Enum$order_by(l$profile_address);
    }
    if (_$data.containsKey('profile_first_name')) {
      final l$profile_first_name = profile_first_name;
      result$data['profile_first_name'] = l$profile_first_name == null
          ? null
          : toJson$Enum$order_by(l$profile_first_name);
    }
    if (_$data.containsKey('profile_id')) {
      final l$profile_id = profile_id;
      result$data['profile_id'] =
          l$profile_id == null ? null : toJson$Enum$order_by(l$profile_id);
    }
    if (_$data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = profile_ktp_no;
      result$data['profile_ktp_no'] = l$profile_ktp_no == null
          ? null
          : toJson$Enum$order_by(l$profile_ktp_no);
    }
    if (_$data.containsKey('profile_last_name')) {
      final l$profile_last_name = profile_last_name;
      result$data['profile_last_name'] = l$profile_last_name == null
          ? null
          : toJson$Enum$order_by(l$profile_last_name);
    }
    if (_$data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = profile_npwp_no;
      result$data['profile_npwp_no'] = l$profile_npwp_no == null
          ? null
          : toJson$Enum$order_by(l$profile_npwp_no);
    }
    if (_$data.containsKey('profile_phone')) {
      final l$profile_phone = profile_phone;
      result$data['profile_phone'] = l$profile_phone == null
          ? null
          : toJson$Enum$order_by(l$profile_phone);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] =
          l$user_id == null ? null : toJson$Enum$order_by(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$profile_order_by<Input$profile_order_by> get copyWith =>
      CopyWith$Input$profile_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$profile_address = profile_address;
    final lOther$profile_address = other.profile_address;
    if (_$data.containsKey('profile_address') !=
        other._$data.containsKey('profile_address')) {
      return false;
    }
    if (l$profile_address != lOther$profile_address) {
      return false;
    }
    final l$profile_first_name = profile_first_name;
    final lOther$profile_first_name = other.profile_first_name;
    if (_$data.containsKey('profile_first_name') !=
        other._$data.containsKey('profile_first_name')) {
      return false;
    }
    if (l$profile_first_name != lOther$profile_first_name) {
      return false;
    }
    final l$profile_id = profile_id;
    final lOther$profile_id = other.profile_id;
    if (_$data.containsKey('profile_id') !=
        other._$data.containsKey('profile_id')) {
      return false;
    }
    if (l$profile_id != lOther$profile_id) {
      return false;
    }
    final l$profile_ktp_no = profile_ktp_no;
    final lOther$profile_ktp_no = other.profile_ktp_no;
    if (_$data.containsKey('profile_ktp_no') !=
        other._$data.containsKey('profile_ktp_no')) {
      return false;
    }
    if (l$profile_ktp_no != lOther$profile_ktp_no) {
      return false;
    }
    final l$profile_last_name = profile_last_name;
    final lOther$profile_last_name = other.profile_last_name;
    if (_$data.containsKey('profile_last_name') !=
        other._$data.containsKey('profile_last_name')) {
      return false;
    }
    if (l$profile_last_name != lOther$profile_last_name) {
      return false;
    }
    final l$profile_npwp_no = profile_npwp_no;
    final lOther$profile_npwp_no = other.profile_npwp_no;
    if (_$data.containsKey('profile_npwp_no') !=
        other._$data.containsKey('profile_npwp_no')) {
      return false;
    }
    if (l$profile_npwp_no != lOther$profile_npwp_no) {
      return false;
    }
    final l$profile_phone = profile_phone;
    final lOther$profile_phone = other.profile_phone;
    if (_$data.containsKey('profile_phone') !=
        other._$data.containsKey('profile_phone')) {
      return false;
    }
    if (l$profile_phone != lOther$profile_phone) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$profile_address = profile_address;
    final l$profile_first_name = profile_first_name;
    final l$profile_id = profile_id;
    final l$profile_ktp_no = profile_ktp_no;
    final l$profile_last_name = profile_last_name;
    final l$profile_npwp_no = profile_npwp_no;
    final l$profile_phone = profile_phone;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('profile_address') ? l$profile_address : const {},
      _$data.containsKey('profile_first_name')
          ? l$profile_first_name
          : const {},
      _$data.containsKey('profile_id') ? l$profile_id : const {},
      _$data.containsKey('profile_ktp_no') ? l$profile_ktp_no : const {},
      _$data.containsKey('profile_last_name') ? l$profile_last_name : const {},
      _$data.containsKey('profile_npwp_no') ? l$profile_npwp_no : const {},
      _$data.containsKey('profile_phone') ? l$profile_phone : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_order_by<TRes> {
  factory CopyWith$Input$profile_order_by(
    Input$profile_order_by instance,
    TRes Function(Input$profile_order_by) then,
  ) = _CopyWithImpl$Input$profile_order_by;

  factory CopyWith$Input$profile_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? profile_address,
    Enum$order_by? profile_first_name,
    Enum$order_by? profile_id,
    Enum$order_by? profile_ktp_no,
    Enum$order_by? profile_last_name,
    Enum$order_by? profile_npwp_no,
    Enum$order_by? profile_phone,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  });
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$profile_order_by<TRes>
    implements CopyWith$Input$profile_order_by<TRes> {
  _CopyWithImpl$Input$profile_order_by(
    this._instance,
    this._then,
  );

  final Input$profile_order_by _instance;

  final TRes Function(Input$profile_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? profile_address = _undefined,
    Object? profile_first_name = _undefined,
    Object? profile_id = _undefined,
    Object? profile_ktp_no = _undefined,
    Object? profile_last_name = _undefined,
    Object? profile_npwp_no = _undefined,
    Object? profile_phone = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$profile_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (profile_address != _undefined)
          'profile_address': (profile_address as Enum$order_by?),
        if (profile_first_name != _undefined)
          'profile_first_name': (profile_first_name as Enum$order_by?),
        if (profile_id != _undefined)
          'profile_id': (profile_id as Enum$order_by?),
        if (profile_ktp_no != _undefined)
          'profile_ktp_no': (profile_ktp_no as Enum$order_by?),
        if (profile_last_name != _undefined)
          'profile_last_name': (profile_last_name as Enum$order_by?),
        if (profile_npwp_no != _undefined)
          'profile_npwp_no': (profile_npwp_no as Enum$order_by?),
        if (profile_phone != _undefined)
          'profile_phone': (profile_phone as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (user_id != _undefined) 'user_id': (user_id as Enum$order_by?),
      }));
  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$profile_order_by<TRes>
    implements CopyWith$Input$profile_order_by<TRes> {
  _CopyWithStubImpl$Input$profile_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? profile_address,
    Enum$order_by? profile_first_name,
    Enum$order_by? profile_id,
    Enum$order_by? profile_ktp_no,
    Enum$order_by? profile_last_name,
    Enum$order_by? profile_npwp_no,
    Enum$order_by? profile_phone,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      _res;
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$profile_pk_columns_input {
  factory Input$profile_pk_columns_input({required int profile_id}) =>
      Input$profile_pk_columns_input._({
        r'profile_id': profile_id,
      });

  Input$profile_pk_columns_input._(this._$data);

  factory Input$profile_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$profile_id = data['profile_id'];
    result$data['profile_id'] = (l$profile_id as int);
    return Input$profile_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int get profile_id => (_$data['profile_id'] as int);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$profile_id = profile_id;
    result$data['profile_id'] = l$profile_id;
    return result$data;
  }

  CopyWith$Input$profile_pk_columns_input<Input$profile_pk_columns_input>
      get copyWith => CopyWith$Input$profile_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$profile_id = profile_id;
    final lOther$profile_id = other.profile_id;
    if (l$profile_id != lOther$profile_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$profile_id = profile_id;
    return Object.hashAll([l$profile_id]);
  }
}

abstract class CopyWith$Input$profile_pk_columns_input<TRes> {
  factory CopyWith$Input$profile_pk_columns_input(
    Input$profile_pk_columns_input instance,
    TRes Function(Input$profile_pk_columns_input) then,
  ) = _CopyWithImpl$Input$profile_pk_columns_input;

  factory CopyWith$Input$profile_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_pk_columns_input;

  TRes call({int? profile_id});
}

class _CopyWithImpl$Input$profile_pk_columns_input<TRes>
    implements CopyWith$Input$profile_pk_columns_input<TRes> {
  _CopyWithImpl$Input$profile_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$profile_pk_columns_input _instance;

  final TRes Function(Input$profile_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? profile_id = _undefined}) =>
      _then(Input$profile_pk_columns_input._({
        ..._instance._$data,
        if (profile_id != _undefined && profile_id != null)
          'profile_id': (profile_id as int),
      }));
}

class _CopyWithStubImpl$Input$profile_pk_columns_input<TRes>
    implements CopyWith$Input$profile_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$profile_pk_columns_input(this._res);

  TRes _res;

  call({int? profile_id}) => _res;
}

class Input$profile_set_input {
  factory Input$profile_set_input({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$profile_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (profile_address != null) r'profile_address': profile_address,
        if (profile_first_name != null)
          r'profile_first_name': profile_first_name,
        if (profile_ktp_no != null) r'profile_ktp_no': profile_ktp_no,
        if (profile_last_name != null) r'profile_last_name': profile_last_name,
        if (profile_npwp_no != null) r'profile_npwp_no': profile_npwp_no,
        if (profile_phone != null) r'profile_phone': profile_phone,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$profile_set_input._(this._$data);

  factory Input$profile_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('profile_address')) {
      final l$profile_address = data['profile_address'];
      result$data['profile_address'] = (l$profile_address as String?);
    }
    if (data.containsKey('profile_first_name')) {
      final l$profile_first_name = data['profile_first_name'];
      result$data['profile_first_name'] = (l$profile_first_name as String?);
    }
    if (data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = data['profile_ktp_no'];
      result$data['profile_ktp_no'] = (l$profile_ktp_no as String?);
    }
    if (data.containsKey('profile_last_name')) {
      final l$profile_last_name = data['profile_last_name'];
      result$data['profile_last_name'] = (l$profile_last_name as String?);
    }
    if (data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = data['profile_npwp_no'];
      result$data['profile_npwp_no'] = (l$profile_npwp_no as String?);
    }
    if (data.containsKey('profile_phone')) {
      final l$profile_phone = data['profile_phone'];
      result$data['profile_phone'] = (l$profile_phone as String?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$profile_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  String? get profile_address => (_$data['profile_address'] as String?);
  String? get profile_first_name => (_$data['profile_first_name'] as String?);
  String? get profile_ktp_no => (_$data['profile_ktp_no'] as String?);
  String? get profile_last_name => (_$data['profile_last_name'] as String?);
  String? get profile_npwp_no => (_$data['profile_npwp_no'] as String?);
  String? get profile_phone => (_$data['profile_phone'] as String?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('profile_address')) {
      final l$profile_address = profile_address;
      result$data['profile_address'] = l$profile_address;
    }
    if (_$data.containsKey('profile_first_name')) {
      final l$profile_first_name = profile_first_name;
      result$data['profile_first_name'] = l$profile_first_name;
    }
    if (_$data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = profile_ktp_no;
      result$data['profile_ktp_no'] = l$profile_ktp_no;
    }
    if (_$data.containsKey('profile_last_name')) {
      final l$profile_last_name = profile_last_name;
      result$data['profile_last_name'] = l$profile_last_name;
    }
    if (_$data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = profile_npwp_no;
      result$data['profile_npwp_no'] = l$profile_npwp_no;
    }
    if (_$data.containsKey('profile_phone')) {
      final l$profile_phone = profile_phone;
      result$data['profile_phone'] = l$profile_phone;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$profile_set_input<Input$profile_set_input> get copyWith =>
      CopyWith$Input$profile_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$profile_address = profile_address;
    final lOther$profile_address = other.profile_address;
    if (_$data.containsKey('profile_address') !=
        other._$data.containsKey('profile_address')) {
      return false;
    }
    if (l$profile_address != lOther$profile_address) {
      return false;
    }
    final l$profile_first_name = profile_first_name;
    final lOther$profile_first_name = other.profile_first_name;
    if (_$data.containsKey('profile_first_name') !=
        other._$data.containsKey('profile_first_name')) {
      return false;
    }
    if (l$profile_first_name != lOther$profile_first_name) {
      return false;
    }
    final l$profile_ktp_no = profile_ktp_no;
    final lOther$profile_ktp_no = other.profile_ktp_no;
    if (_$data.containsKey('profile_ktp_no') !=
        other._$data.containsKey('profile_ktp_no')) {
      return false;
    }
    if (l$profile_ktp_no != lOther$profile_ktp_no) {
      return false;
    }
    final l$profile_last_name = profile_last_name;
    final lOther$profile_last_name = other.profile_last_name;
    if (_$data.containsKey('profile_last_name') !=
        other._$data.containsKey('profile_last_name')) {
      return false;
    }
    if (l$profile_last_name != lOther$profile_last_name) {
      return false;
    }
    final l$profile_npwp_no = profile_npwp_no;
    final lOther$profile_npwp_no = other.profile_npwp_no;
    if (_$data.containsKey('profile_npwp_no') !=
        other._$data.containsKey('profile_npwp_no')) {
      return false;
    }
    if (l$profile_npwp_no != lOther$profile_npwp_no) {
      return false;
    }
    final l$profile_phone = profile_phone;
    final lOther$profile_phone = other.profile_phone;
    if (_$data.containsKey('profile_phone') !=
        other._$data.containsKey('profile_phone')) {
      return false;
    }
    if (l$profile_phone != lOther$profile_phone) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$profile_address = profile_address;
    final l$profile_first_name = profile_first_name;
    final l$profile_ktp_no = profile_ktp_no;
    final l$profile_last_name = profile_last_name;
    final l$profile_npwp_no = profile_npwp_no;
    final l$profile_phone = profile_phone;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('profile_address') ? l$profile_address : const {},
      _$data.containsKey('profile_first_name')
          ? l$profile_first_name
          : const {},
      _$data.containsKey('profile_ktp_no') ? l$profile_ktp_no : const {},
      _$data.containsKey('profile_last_name') ? l$profile_last_name : const {},
      _$data.containsKey('profile_npwp_no') ? l$profile_npwp_no : const {},
      _$data.containsKey('profile_phone') ? l$profile_phone : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_set_input<TRes> {
  factory CopyWith$Input$profile_set_input(
    Input$profile_set_input instance,
    TRes Function(Input$profile_set_input) then,
  ) = _CopyWithImpl$Input$profile_set_input;

  factory CopyWith$Input$profile_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_set_input;

  TRes call({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$profile_set_input<TRes>
    implements CopyWith$Input$profile_set_input<TRes> {
  _CopyWithImpl$Input$profile_set_input(
    this._instance,
    this._then,
  );

  final Input$profile_set_input _instance;

  final TRes Function(Input$profile_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? profile_address = _undefined,
    Object? profile_first_name = _undefined,
    Object? profile_ktp_no = _undefined,
    Object? profile_last_name = _undefined,
    Object? profile_npwp_no = _undefined,
    Object? profile_phone = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$profile_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (profile_address != _undefined)
          'profile_address': (profile_address as String?),
        if (profile_first_name != _undefined)
          'profile_first_name': (profile_first_name as String?),
        if (profile_ktp_no != _undefined)
          'profile_ktp_no': (profile_ktp_no as String?),
        if (profile_last_name != _undefined)
          'profile_last_name': (profile_last_name as String?),
        if (profile_npwp_no != _undefined)
          'profile_npwp_no': (profile_npwp_no as String?),
        if (profile_phone != _undefined)
          'profile_phone': (profile_phone as String?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$profile_set_input<TRes>
    implements CopyWith$Input$profile_set_input<TRes> {
  _CopyWithStubImpl$Input$profile_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$profile_stream_cursor_input {
  factory Input$profile_stream_cursor_input({
    required Input$profile_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$profile_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$profile_stream_cursor_input._(this._$data);

  factory Input$profile_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$profile_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$profile_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$profile_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$profile_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$profile_stream_cursor_input<Input$profile_stream_cursor_input>
      get copyWith => CopyWith$Input$profile_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_stream_cursor_input<TRes> {
  factory CopyWith$Input$profile_stream_cursor_input(
    Input$profile_stream_cursor_input instance,
    TRes Function(Input$profile_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$profile_stream_cursor_input;

  factory CopyWith$Input$profile_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_stream_cursor_input;

  TRes call({
    Input$profile_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$profile_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$profile_stream_cursor_input<TRes>
    implements CopyWith$Input$profile_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$profile_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$profile_stream_cursor_input _instance;

  final TRes Function(Input$profile_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$profile_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$profile_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$profile_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$profile_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$profile_stream_cursor_input<TRes>
    implements CopyWith$Input$profile_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$profile_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$profile_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$profile_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$profile_stream_cursor_value_input.stub(_res);
}

class Input$profile_stream_cursor_value_input {
  factory Input$profile_stream_cursor_value_input({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    int? profile_id,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$profile_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (profile_address != null) r'profile_address': profile_address,
        if (profile_first_name != null)
          r'profile_first_name': profile_first_name,
        if (profile_id != null) r'profile_id': profile_id,
        if (profile_ktp_no != null) r'profile_ktp_no': profile_ktp_no,
        if (profile_last_name != null) r'profile_last_name': profile_last_name,
        if (profile_npwp_no != null) r'profile_npwp_no': profile_npwp_no,
        if (profile_phone != null) r'profile_phone': profile_phone,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$profile_stream_cursor_value_input._(this._$data);

  factory Input$profile_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('profile_address')) {
      final l$profile_address = data['profile_address'];
      result$data['profile_address'] = (l$profile_address as String?);
    }
    if (data.containsKey('profile_first_name')) {
      final l$profile_first_name = data['profile_first_name'];
      result$data['profile_first_name'] = (l$profile_first_name as String?);
    }
    if (data.containsKey('profile_id')) {
      final l$profile_id = data['profile_id'];
      result$data['profile_id'] = (l$profile_id as int?);
    }
    if (data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = data['profile_ktp_no'];
      result$data['profile_ktp_no'] = (l$profile_ktp_no as String?);
    }
    if (data.containsKey('profile_last_name')) {
      final l$profile_last_name = data['profile_last_name'];
      result$data['profile_last_name'] = (l$profile_last_name as String?);
    }
    if (data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = data['profile_npwp_no'];
      result$data['profile_npwp_no'] = (l$profile_npwp_no as String?);
    }
    if (data.containsKey('profile_phone')) {
      final l$profile_phone = data['profile_phone'];
      result$data['profile_phone'] = (l$profile_phone as String?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$profile_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  String? get profile_address => (_$data['profile_address'] as String?);
  String? get profile_first_name => (_$data['profile_first_name'] as String?);
  int? get profile_id => (_$data['profile_id'] as int?);
  String? get profile_ktp_no => (_$data['profile_ktp_no'] as String?);
  String? get profile_last_name => (_$data['profile_last_name'] as String?);
  String? get profile_npwp_no => (_$data['profile_npwp_no'] as String?);
  String? get profile_phone => (_$data['profile_phone'] as String?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('profile_address')) {
      final l$profile_address = profile_address;
      result$data['profile_address'] = l$profile_address;
    }
    if (_$data.containsKey('profile_first_name')) {
      final l$profile_first_name = profile_first_name;
      result$data['profile_first_name'] = l$profile_first_name;
    }
    if (_$data.containsKey('profile_id')) {
      final l$profile_id = profile_id;
      result$data['profile_id'] = l$profile_id;
    }
    if (_$data.containsKey('profile_ktp_no')) {
      final l$profile_ktp_no = profile_ktp_no;
      result$data['profile_ktp_no'] = l$profile_ktp_no;
    }
    if (_$data.containsKey('profile_last_name')) {
      final l$profile_last_name = profile_last_name;
      result$data['profile_last_name'] = l$profile_last_name;
    }
    if (_$data.containsKey('profile_npwp_no')) {
      final l$profile_npwp_no = profile_npwp_no;
      result$data['profile_npwp_no'] = l$profile_npwp_no;
    }
    if (_$data.containsKey('profile_phone')) {
      final l$profile_phone = profile_phone;
      result$data['profile_phone'] = l$profile_phone;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$profile_stream_cursor_value_input<
          Input$profile_stream_cursor_value_input>
      get copyWith => CopyWith$Input$profile_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$profile_address = profile_address;
    final lOther$profile_address = other.profile_address;
    if (_$data.containsKey('profile_address') !=
        other._$data.containsKey('profile_address')) {
      return false;
    }
    if (l$profile_address != lOther$profile_address) {
      return false;
    }
    final l$profile_first_name = profile_first_name;
    final lOther$profile_first_name = other.profile_first_name;
    if (_$data.containsKey('profile_first_name') !=
        other._$data.containsKey('profile_first_name')) {
      return false;
    }
    if (l$profile_first_name != lOther$profile_first_name) {
      return false;
    }
    final l$profile_id = profile_id;
    final lOther$profile_id = other.profile_id;
    if (_$data.containsKey('profile_id') !=
        other._$data.containsKey('profile_id')) {
      return false;
    }
    if (l$profile_id != lOther$profile_id) {
      return false;
    }
    final l$profile_ktp_no = profile_ktp_no;
    final lOther$profile_ktp_no = other.profile_ktp_no;
    if (_$data.containsKey('profile_ktp_no') !=
        other._$data.containsKey('profile_ktp_no')) {
      return false;
    }
    if (l$profile_ktp_no != lOther$profile_ktp_no) {
      return false;
    }
    final l$profile_last_name = profile_last_name;
    final lOther$profile_last_name = other.profile_last_name;
    if (_$data.containsKey('profile_last_name') !=
        other._$data.containsKey('profile_last_name')) {
      return false;
    }
    if (l$profile_last_name != lOther$profile_last_name) {
      return false;
    }
    final l$profile_npwp_no = profile_npwp_no;
    final lOther$profile_npwp_no = other.profile_npwp_no;
    if (_$data.containsKey('profile_npwp_no') !=
        other._$data.containsKey('profile_npwp_no')) {
      return false;
    }
    if (l$profile_npwp_no != lOther$profile_npwp_no) {
      return false;
    }
    final l$profile_phone = profile_phone;
    final lOther$profile_phone = other.profile_phone;
    if (_$data.containsKey('profile_phone') !=
        other._$data.containsKey('profile_phone')) {
      return false;
    }
    if (l$profile_phone != lOther$profile_phone) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$profile_address = profile_address;
    final l$profile_first_name = profile_first_name;
    final l$profile_id = profile_id;
    final l$profile_ktp_no = profile_ktp_no;
    final l$profile_last_name = profile_last_name;
    final l$profile_npwp_no = profile_npwp_no;
    final l$profile_phone = profile_phone;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('profile_address') ? l$profile_address : const {},
      _$data.containsKey('profile_first_name')
          ? l$profile_first_name
          : const {},
      _$data.containsKey('profile_id') ? l$profile_id : const {},
      _$data.containsKey('profile_ktp_no') ? l$profile_ktp_no : const {},
      _$data.containsKey('profile_last_name') ? l$profile_last_name : const {},
      _$data.containsKey('profile_npwp_no') ? l$profile_npwp_no : const {},
      _$data.containsKey('profile_phone') ? l$profile_phone : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$profile_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$profile_stream_cursor_value_input(
    Input$profile_stream_cursor_value_input instance,
    TRes Function(Input$profile_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$profile_stream_cursor_value_input;

  factory CopyWith$Input$profile_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    int? profile_id,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$profile_stream_cursor_value_input<TRes>
    implements CopyWith$Input$profile_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$profile_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$profile_stream_cursor_value_input _instance;

  final TRes Function(Input$profile_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? profile_address = _undefined,
    Object? profile_first_name = _undefined,
    Object? profile_id = _undefined,
    Object? profile_ktp_no = _undefined,
    Object? profile_last_name = _undefined,
    Object? profile_npwp_no = _undefined,
    Object? profile_phone = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$profile_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (profile_address != _undefined)
          'profile_address': (profile_address as String?),
        if (profile_first_name != _undefined)
          'profile_first_name': (profile_first_name as String?),
        if (profile_id != _undefined) 'profile_id': (profile_id as int?),
        if (profile_ktp_no != _undefined)
          'profile_ktp_no': (profile_ktp_no as String?),
        if (profile_last_name != _undefined)
          'profile_last_name': (profile_last_name as String?),
        if (profile_npwp_no != _undefined)
          'profile_npwp_no': (profile_npwp_no as String?),
        if (profile_phone != _undefined)
          'profile_phone': (profile_phone as String?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$profile_stream_cursor_value_input<TRes>
    implements CopyWith$Input$profile_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$profile_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    String? profile_address,
    String? profile_first_name,
    int? profile_id,
    String? profile_ktp_no,
    String? profile_last_name,
    String? profile_npwp_no,
    String? profile_phone,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$profile_updates {
  factory Input$profile_updates({
    Input$profile_set_input? $_set,
    required Input$profile_bool_exp where,
  }) =>
      Input$profile_updates._({
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$profile_updates._(this._$data);

  factory Input$profile_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$profile_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$profile_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$profile_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$profile_set_input? get $_set =>
      (_$data['_set'] as Input$profile_set_input?);
  Input$profile_bool_exp get where =>
      (_$data['where'] as Input$profile_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$profile_updates<Input$profile_updates> get copyWith =>
      CopyWith$Input$profile_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$profile_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$profile_updates<TRes> {
  factory CopyWith$Input$profile_updates(
    Input$profile_updates instance,
    TRes Function(Input$profile_updates) then,
  ) = _CopyWithImpl$Input$profile_updates;

  factory CopyWith$Input$profile_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$profile_updates;

  TRes call({
    Input$profile_set_input? $_set,
    Input$profile_bool_exp? where,
  });
  CopyWith$Input$profile_set_input<TRes> get $_set;
  CopyWith$Input$profile_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$profile_updates<TRes>
    implements CopyWith$Input$profile_updates<TRes> {
  _CopyWithImpl$Input$profile_updates(
    this._instance,
    this._then,
  );

  final Input$profile_updates _instance;

  final TRes Function(Input$profile_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$profile_updates._({
        ..._instance._$data,
        if ($_set != _undefined) '_set': ($_set as Input$profile_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$profile_bool_exp),
      }));
  CopyWith$Input$profile_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$profile_set_input.stub(_then(_instance))
        : CopyWith$Input$profile_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$profile_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$profile_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$profile_updates<TRes>
    implements CopyWith$Input$profile_updates<TRes> {
  _CopyWithStubImpl$Input$profile_updates(this._res);

  TRes _res;

  call({
    Input$profile_set_input? $_set,
    Input$profile_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$profile_set_input<TRes> get $_set =>
      CopyWith$Input$profile_set_input.stub(_res);
  CopyWith$Input$profile_bool_exp<TRes> get where =>
      CopyWith$Input$profile_bool_exp.stub(_res);
}

class Input$proposal_aggregate_bool_exp {
  factory Input$proposal_aggregate_bool_exp({
    Input$proposal_aggregate_bool_exp_bool_and? bool_and,
    Input$proposal_aggregate_bool_exp_bool_or? bool_or,
    Input$proposal_aggregate_bool_exp_count? count,
  }) =>
      Input$proposal_aggregate_bool_exp._({
        if (bool_and != null) r'bool_and': bool_and,
        if (bool_or != null) r'bool_or': bool_or,
        if (count != null) r'count': count,
      });

  Input$proposal_aggregate_bool_exp._(this._$data);

  factory Input$proposal_aggregate_bool_exp.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bool_and')) {
      final l$bool_and = data['bool_and'];
      result$data['bool_and'] = l$bool_and == null
          ? null
          : Input$proposal_aggregate_bool_exp_bool_and.fromJson(
              (l$bool_and as Map<String, dynamic>));
    }
    if (data.containsKey('bool_or')) {
      final l$bool_or = data['bool_or'];
      result$data['bool_or'] = l$bool_or == null
          ? null
          : Input$proposal_aggregate_bool_exp_bool_or.fromJson(
              (l$bool_or as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$proposal_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$proposal_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$proposal_aggregate_bool_exp_bool_and? get bool_and =>
      (_$data['bool_and'] as Input$proposal_aggregate_bool_exp_bool_and?);
  Input$proposal_aggregate_bool_exp_bool_or? get bool_or =>
      (_$data['bool_or'] as Input$proposal_aggregate_bool_exp_bool_or?);
  Input$proposal_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$proposal_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bool_and')) {
      final l$bool_and = bool_and;
      result$data['bool_and'] = l$bool_and?.toJson();
    }
    if (_$data.containsKey('bool_or')) {
      final l$bool_or = bool_or;
      result$data['bool_or'] = l$bool_or?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$proposal_aggregate_bool_exp<Input$proposal_aggregate_bool_exp>
      get copyWith => CopyWith$Input$proposal_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bool_and = bool_and;
    final lOther$bool_and = other.bool_and;
    if (_$data.containsKey('bool_and') !=
        other._$data.containsKey('bool_and')) {
      return false;
    }
    if (l$bool_and != lOther$bool_and) {
      return false;
    }
    final l$bool_or = bool_or;
    final lOther$bool_or = other.bool_or;
    if (_$data.containsKey('bool_or') != other._$data.containsKey('bool_or')) {
      return false;
    }
    if (l$bool_or != lOther$bool_or) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bool_and = bool_and;
    final l$bool_or = bool_or;
    final l$count = count;
    return Object.hashAll([
      _$data.containsKey('bool_and') ? l$bool_and : const {},
      _$data.containsKey('bool_or') ? l$bool_or : const {},
      _$data.containsKey('count') ? l$count : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$proposal_aggregate_bool_exp(
    Input$proposal_aggregate_bool_exp instance,
    TRes Function(Input$proposal_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$proposal_aggregate_bool_exp;

  factory CopyWith$Input$proposal_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_aggregate_bool_exp;

  TRes call({
    Input$proposal_aggregate_bool_exp_bool_and? bool_and,
    Input$proposal_aggregate_bool_exp_bool_or? bool_or,
    Input$proposal_aggregate_bool_exp_count? count,
  });
  CopyWith$Input$proposal_aggregate_bool_exp_bool_and<TRes> get bool_and;
  CopyWith$Input$proposal_aggregate_bool_exp_bool_or<TRes> get bool_or;
  CopyWith$Input$proposal_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$proposal_aggregate_bool_exp<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$proposal_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$proposal_aggregate_bool_exp _instance;

  final TRes Function(Input$proposal_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bool_and = _undefined,
    Object? bool_or = _undefined,
    Object? count = _undefined,
  }) =>
      _then(Input$proposal_aggregate_bool_exp._({
        ..._instance._$data,
        if (bool_and != _undefined)
          'bool_and': (bool_and as Input$proposal_aggregate_bool_exp_bool_and?),
        if (bool_or != _undefined)
          'bool_or': (bool_or as Input$proposal_aggregate_bool_exp_bool_or?),
        if (count != _undefined)
          'count': (count as Input$proposal_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$proposal_aggregate_bool_exp_bool_and<TRes> get bool_and {
    final local$bool_and = _instance.bool_and;
    return local$bool_and == null
        ? CopyWith$Input$proposal_aggregate_bool_exp_bool_and.stub(
            _then(_instance))
        : CopyWith$Input$proposal_aggregate_bool_exp_bool_and(
            local$bool_and, (e) => call(bool_and: e));
  }

  CopyWith$Input$proposal_aggregate_bool_exp_bool_or<TRes> get bool_or {
    final local$bool_or = _instance.bool_or;
    return local$bool_or == null
        ? CopyWith$Input$proposal_aggregate_bool_exp_bool_or.stub(
            _then(_instance))
        : CopyWith$Input$proposal_aggregate_bool_exp_bool_or(
            local$bool_or, (e) => call(bool_or: e));
  }

  CopyWith$Input$proposal_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$proposal_aggregate_bool_exp_count.stub(
            _then(_instance))
        : CopyWith$Input$proposal_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$proposal_aggregate_bool_exp<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$proposal_aggregate_bool_exp(this._res);

  TRes _res;

  call({
    Input$proposal_aggregate_bool_exp_bool_and? bool_and,
    Input$proposal_aggregate_bool_exp_bool_or? bool_or,
    Input$proposal_aggregate_bool_exp_count? count,
  }) =>
      _res;
  CopyWith$Input$proposal_aggregate_bool_exp_bool_and<TRes> get bool_and =>
      CopyWith$Input$proposal_aggregate_bool_exp_bool_and.stub(_res);
  CopyWith$Input$proposal_aggregate_bool_exp_bool_or<TRes> get bool_or =>
      CopyWith$Input$proposal_aggregate_bool_exp_bool_or.stub(_res);
  CopyWith$Input$proposal_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$proposal_aggregate_bool_exp_count.stub(_res);
}

class Input$proposal_aggregate_bool_exp_bool_and {
  factory Input$proposal_aggregate_bool_exp_bool_and({
    required Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
        arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$proposal_aggregate_bool_exp_bool_and._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$proposal_aggregate_bool_exp_bool_and._(this._$data);

  factory Input$proposal_aggregate_bool_exp_bool_and.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$proposal_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$proposal_aggregate_bool_exp_bool_and._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$proposal_bool_exp? get filter =>
      (_$data['filter'] as Input$proposal_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$proposal_aggregate_bool_exp_bool_and<
          Input$proposal_aggregate_bool_exp_bool_and>
      get copyWith => CopyWith$Input$proposal_aggregate_bool_exp_bool_and(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_aggregate_bool_exp_bool_and) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$proposal_aggregate_bool_exp_bool_and<TRes> {
  factory CopyWith$Input$proposal_aggregate_bool_exp_bool_and(
    Input$proposal_aggregate_bool_exp_bool_and instance,
    TRes Function(Input$proposal_aggregate_bool_exp_bool_and) then,
  ) = _CopyWithImpl$Input$proposal_aggregate_bool_exp_bool_and;

  factory CopyWith$Input$proposal_aggregate_bool_exp_bool_and.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_bool_and;

  TRes call({
    Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$proposal_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$proposal_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithImpl$Input$proposal_aggregate_bool_exp_bool_and(
    this._instance,
    this._then,
  );

  final Input$proposal_aggregate_bool_exp_bool_and _instance;

  final TRes Function(Input$proposal_aggregate_bool_exp_bool_and) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$proposal_aggregate_bool_exp_bool_and._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$proposal_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$proposal_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$proposal_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_bool_and(this._res);

  TRes _res;

  call({
    Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$proposal_bool_exp<TRes> get filter =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$proposal_aggregate_bool_exp_bool_or {
  factory Input$proposal_aggregate_bool_exp_bool_or({
    required Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
        arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$proposal_aggregate_bool_exp_bool_or._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$proposal_aggregate_bool_exp_bool_or._(this._$data);

  factory Input$proposal_aggregate_bool_exp_bool_or.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$proposal_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$proposal_aggregate_bool_exp_bool_or._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$proposal_bool_exp? get filter =>
      (_$data['filter'] as Input$proposal_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$proposal_aggregate_bool_exp_bool_or<
          Input$proposal_aggregate_bool_exp_bool_or>
      get copyWith => CopyWith$Input$proposal_aggregate_bool_exp_bool_or(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_aggregate_bool_exp_bool_or) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$proposal_aggregate_bool_exp_bool_or<TRes> {
  factory CopyWith$Input$proposal_aggregate_bool_exp_bool_or(
    Input$proposal_aggregate_bool_exp_bool_or instance,
    TRes Function(Input$proposal_aggregate_bool_exp_bool_or) then,
  ) = _CopyWithImpl$Input$proposal_aggregate_bool_exp_bool_or;

  factory CopyWith$Input$proposal_aggregate_bool_exp_bool_or.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_bool_or;

  TRes call({
    Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$proposal_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$proposal_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithImpl$Input$proposal_aggregate_bool_exp_bool_or(
    this._instance,
    this._then,
  );

  final Input$proposal_aggregate_bool_exp_bool_or _instance;

  final TRes Function(Input$proposal_aggregate_bool_exp_bool_or) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$proposal_aggregate_bool_exp_bool_or._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$proposal_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$proposal_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$proposal_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_bool_or(this._res);

  TRes _res;

  call({
    Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$proposal_bool_exp<TRes> get filter =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$proposal_aggregate_bool_exp_count {
  factory Input$proposal_aggregate_bool_exp_count({
    List<Enum$proposal_select_column>? arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$proposal_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$proposal_aggregate_bool_exp_count._(this._$data);

  factory Input$proposal_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$proposal_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$proposal_bool_exp.fromJson(
              (l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$proposal_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$proposal_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$proposal_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$proposal_bool_exp? get filter =>
      (_$data['filter'] as Input$proposal_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] = l$arguments
          ?.map((e) => toJson$Enum$proposal_select_column(e))
          .toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$proposal_aggregate_bool_exp_count<
          Input$proposal_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$proposal_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$proposal_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$proposal_aggregate_bool_exp_count(
    Input$proposal_aggregate_bool_exp_count instance,
    TRes Function(Input$proposal_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$proposal_aggregate_bool_exp_count;

  factory CopyWith$Input$proposal_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_count;

  TRes call({
    List<Enum$proposal_select_column>? arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$proposal_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$proposal_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$proposal_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$proposal_aggregate_bool_exp_count _instance;

  final TRes Function(Input$proposal_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$proposal_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$proposal_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined)
          'filter': (filter as Input$proposal_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$proposal_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$proposal_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_bool_exp(
            local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$proposal_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$proposal_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$proposal_select_column>? arguments,
    bool? distinct,
    Input$proposal_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$proposal_bool_exp<TRes> get filter =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$proposal_aggregate_order_by {
  factory Input$proposal_aggregate_order_by({
    Input$proposal_avg_order_by? avg,
    Enum$order_by? count,
    Input$proposal_max_order_by? max,
    Input$proposal_min_order_by? min,
    Input$proposal_stddev_order_by? stddev,
    Input$proposal_stddev_pop_order_by? stddev_pop,
    Input$proposal_stddev_samp_order_by? stddev_samp,
    Input$proposal_sum_order_by? sum,
    Input$proposal_var_pop_order_by? var_pop,
    Input$proposal_var_samp_order_by? var_samp,
    Input$proposal_variance_order_by? variance,
  }) =>
      Input$proposal_aggregate_order_by._({
        if (avg != null) r'avg': avg,
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
        if (stddev != null) r'stddev': stddev,
        if (stddev_pop != null) r'stddev_pop': stddev_pop,
        if (stddev_samp != null) r'stddev_samp': stddev_samp,
        if (sum != null) r'sum': sum,
        if (var_pop != null) r'var_pop': var_pop,
        if (var_samp != null) r'var_samp': var_samp,
        if (variance != null) r'variance': variance,
      });

  Input$proposal_aggregate_order_by._(this._$data);

  factory Input$proposal_aggregate_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('avg')) {
      final l$avg = data['avg'];
      result$data['avg'] = l$avg == null
          ? null
          : Input$proposal_avg_order_by.fromJson(
              (l$avg as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$proposal_max_order_by.fromJson(
              (l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$proposal_min_order_by.fromJson(
              (l$min as Map<String, dynamic>));
    }
    if (data.containsKey('stddev')) {
      final l$stddev = data['stddev'];
      result$data['stddev'] = l$stddev == null
          ? null
          : Input$proposal_stddev_order_by.fromJson(
              (l$stddev as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_pop')) {
      final l$stddev_pop = data['stddev_pop'];
      result$data['stddev_pop'] = l$stddev_pop == null
          ? null
          : Input$proposal_stddev_pop_order_by.fromJson(
              (l$stddev_pop as Map<String, dynamic>));
    }
    if (data.containsKey('stddev_samp')) {
      final l$stddev_samp = data['stddev_samp'];
      result$data['stddev_samp'] = l$stddev_samp == null
          ? null
          : Input$proposal_stddev_samp_order_by.fromJson(
              (l$stddev_samp as Map<String, dynamic>));
    }
    if (data.containsKey('sum')) {
      final l$sum = data['sum'];
      result$data['sum'] = l$sum == null
          ? null
          : Input$proposal_sum_order_by.fromJson(
              (l$sum as Map<String, dynamic>));
    }
    if (data.containsKey('var_pop')) {
      final l$var_pop = data['var_pop'];
      result$data['var_pop'] = l$var_pop == null
          ? null
          : Input$proposal_var_pop_order_by.fromJson(
              (l$var_pop as Map<String, dynamic>));
    }
    if (data.containsKey('var_samp')) {
      final l$var_samp = data['var_samp'];
      result$data['var_samp'] = l$var_samp == null
          ? null
          : Input$proposal_var_samp_order_by.fromJson(
              (l$var_samp as Map<String, dynamic>));
    }
    if (data.containsKey('variance')) {
      final l$variance = data['variance'];
      result$data['variance'] = l$variance == null
          ? null
          : Input$proposal_variance_order_by.fromJson(
              (l$variance as Map<String, dynamic>));
    }
    return Input$proposal_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$proposal_avg_order_by? get avg =>
      (_$data['avg'] as Input$proposal_avg_order_by?);
  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$proposal_max_order_by? get max =>
      (_$data['max'] as Input$proposal_max_order_by?);
  Input$proposal_min_order_by? get min =>
      (_$data['min'] as Input$proposal_min_order_by?);
  Input$proposal_stddev_order_by? get stddev =>
      (_$data['stddev'] as Input$proposal_stddev_order_by?);
  Input$proposal_stddev_pop_order_by? get stddev_pop =>
      (_$data['stddev_pop'] as Input$proposal_stddev_pop_order_by?);
  Input$proposal_stddev_samp_order_by? get stddev_samp =>
      (_$data['stddev_samp'] as Input$proposal_stddev_samp_order_by?);
  Input$proposal_sum_order_by? get sum =>
      (_$data['sum'] as Input$proposal_sum_order_by?);
  Input$proposal_var_pop_order_by? get var_pop =>
      (_$data['var_pop'] as Input$proposal_var_pop_order_by?);
  Input$proposal_var_samp_order_by? get var_samp =>
      (_$data['var_samp'] as Input$proposal_var_samp_order_by?);
  Input$proposal_variance_order_by? get variance =>
      (_$data['variance'] as Input$proposal_variance_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('avg')) {
      final l$avg = avg;
      result$data['avg'] = l$avg?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    if (_$data.containsKey('stddev')) {
      final l$stddev = stddev;
      result$data['stddev'] = l$stddev?.toJson();
    }
    if (_$data.containsKey('stddev_pop')) {
      final l$stddev_pop = stddev_pop;
      result$data['stddev_pop'] = l$stddev_pop?.toJson();
    }
    if (_$data.containsKey('stddev_samp')) {
      final l$stddev_samp = stddev_samp;
      result$data['stddev_samp'] = l$stddev_samp?.toJson();
    }
    if (_$data.containsKey('sum')) {
      final l$sum = sum;
      result$data['sum'] = l$sum?.toJson();
    }
    if (_$data.containsKey('var_pop')) {
      final l$var_pop = var_pop;
      result$data['var_pop'] = l$var_pop?.toJson();
    }
    if (_$data.containsKey('var_samp')) {
      final l$var_samp = var_samp;
      result$data['var_samp'] = l$var_samp?.toJson();
    }
    if (_$data.containsKey('variance')) {
      final l$variance = variance;
      result$data['variance'] = l$variance?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$proposal_aggregate_order_by<Input$proposal_aggregate_order_by>
      get copyWith => CopyWith$Input$proposal_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$avg = avg;
    final lOther$avg = other.avg;
    if (_$data.containsKey('avg') != other._$data.containsKey('avg')) {
      return false;
    }
    if (l$avg != lOther$avg) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    final l$stddev = stddev;
    final lOther$stddev = other.stddev;
    if (_$data.containsKey('stddev') != other._$data.containsKey('stddev')) {
      return false;
    }
    if (l$stddev != lOther$stddev) {
      return false;
    }
    final l$stddev_pop = stddev_pop;
    final lOther$stddev_pop = other.stddev_pop;
    if (_$data.containsKey('stddev_pop') !=
        other._$data.containsKey('stddev_pop')) {
      return false;
    }
    if (l$stddev_pop != lOther$stddev_pop) {
      return false;
    }
    final l$stddev_samp = stddev_samp;
    final lOther$stddev_samp = other.stddev_samp;
    if (_$data.containsKey('stddev_samp') !=
        other._$data.containsKey('stddev_samp')) {
      return false;
    }
    if (l$stddev_samp != lOther$stddev_samp) {
      return false;
    }
    final l$sum = sum;
    final lOther$sum = other.sum;
    if (_$data.containsKey('sum') != other._$data.containsKey('sum')) {
      return false;
    }
    if (l$sum != lOther$sum) {
      return false;
    }
    final l$var_pop = var_pop;
    final lOther$var_pop = other.var_pop;
    if (_$data.containsKey('var_pop') != other._$data.containsKey('var_pop')) {
      return false;
    }
    if (l$var_pop != lOther$var_pop) {
      return false;
    }
    final l$var_samp = var_samp;
    final lOther$var_samp = other.var_samp;
    if (_$data.containsKey('var_samp') !=
        other._$data.containsKey('var_samp')) {
      return false;
    }
    if (l$var_samp != lOther$var_samp) {
      return false;
    }
    final l$variance = variance;
    final lOther$variance = other.variance;
    if (_$data.containsKey('variance') !=
        other._$data.containsKey('variance')) {
      return false;
    }
    if (l$variance != lOther$variance) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$avg = avg;
    final l$count = count;
    final l$max = max;
    final l$min = min;
    final l$stddev = stddev;
    final l$stddev_pop = stddev_pop;
    final l$stddev_samp = stddev_samp;
    final l$sum = sum;
    final l$var_pop = var_pop;
    final l$var_samp = var_samp;
    final l$variance = variance;
    return Object.hashAll([
      _$data.containsKey('avg') ? l$avg : const {},
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
      _$data.containsKey('stddev') ? l$stddev : const {},
      _$data.containsKey('stddev_pop') ? l$stddev_pop : const {},
      _$data.containsKey('stddev_samp') ? l$stddev_samp : const {},
      _$data.containsKey('sum') ? l$sum : const {},
      _$data.containsKey('var_pop') ? l$var_pop : const {},
      _$data.containsKey('var_samp') ? l$var_samp : const {},
      _$data.containsKey('variance') ? l$variance : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_aggregate_order_by<TRes> {
  factory CopyWith$Input$proposal_aggregate_order_by(
    Input$proposal_aggregate_order_by instance,
    TRes Function(Input$proposal_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$proposal_aggregate_order_by;

  factory CopyWith$Input$proposal_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_aggregate_order_by;

  TRes call({
    Input$proposal_avg_order_by? avg,
    Enum$order_by? count,
    Input$proposal_max_order_by? max,
    Input$proposal_min_order_by? min,
    Input$proposal_stddev_order_by? stddev,
    Input$proposal_stddev_pop_order_by? stddev_pop,
    Input$proposal_stddev_samp_order_by? stddev_samp,
    Input$proposal_sum_order_by? sum,
    Input$proposal_var_pop_order_by? var_pop,
    Input$proposal_var_samp_order_by? var_samp,
    Input$proposal_variance_order_by? variance,
  });
  CopyWith$Input$proposal_avg_order_by<TRes> get avg;
  CopyWith$Input$proposal_max_order_by<TRes> get max;
  CopyWith$Input$proposal_min_order_by<TRes> get min;
  CopyWith$Input$proposal_stddev_order_by<TRes> get stddev;
  CopyWith$Input$proposal_stddev_pop_order_by<TRes> get stddev_pop;
  CopyWith$Input$proposal_stddev_samp_order_by<TRes> get stddev_samp;
  CopyWith$Input$proposal_sum_order_by<TRes> get sum;
  CopyWith$Input$proposal_var_pop_order_by<TRes> get var_pop;
  CopyWith$Input$proposal_var_samp_order_by<TRes> get var_samp;
  CopyWith$Input$proposal_variance_order_by<TRes> get variance;
}

class _CopyWithImpl$Input$proposal_aggregate_order_by<TRes>
    implements CopyWith$Input$proposal_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$proposal_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_aggregate_order_by _instance;

  final TRes Function(Input$proposal_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? avg = _undefined,
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
    Object? stddev = _undefined,
    Object? stddev_pop = _undefined,
    Object? stddev_samp = _undefined,
    Object? sum = _undefined,
    Object? var_pop = _undefined,
    Object? var_samp = _undefined,
    Object? variance = _undefined,
  }) =>
      _then(Input$proposal_aggregate_order_by._({
        ..._instance._$data,
        if (avg != _undefined) 'avg': (avg as Input$proposal_avg_order_by?),
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$proposal_max_order_by?),
        if (min != _undefined) 'min': (min as Input$proposal_min_order_by?),
        if (stddev != _undefined)
          'stddev': (stddev as Input$proposal_stddev_order_by?),
        if (stddev_pop != _undefined)
          'stddev_pop': (stddev_pop as Input$proposal_stddev_pop_order_by?),
        if (stddev_samp != _undefined)
          'stddev_samp': (stddev_samp as Input$proposal_stddev_samp_order_by?),
        if (sum != _undefined) 'sum': (sum as Input$proposal_sum_order_by?),
        if (var_pop != _undefined)
          'var_pop': (var_pop as Input$proposal_var_pop_order_by?),
        if (var_samp != _undefined)
          'var_samp': (var_samp as Input$proposal_var_samp_order_by?),
        if (variance != _undefined)
          'variance': (variance as Input$proposal_variance_order_by?),
      }));
  CopyWith$Input$proposal_avg_order_by<TRes> get avg {
    final local$avg = _instance.avg;
    return local$avg == null
        ? CopyWith$Input$proposal_avg_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_avg_order_by(local$avg, (e) => call(avg: e));
  }

  CopyWith$Input$proposal_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$proposal_max_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$proposal_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$proposal_min_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_min_order_by(local$min, (e) => call(min: e));
  }

  CopyWith$Input$proposal_stddev_order_by<TRes> get stddev {
    final local$stddev = _instance.stddev;
    return local$stddev == null
        ? CopyWith$Input$proposal_stddev_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_stddev_order_by(
            local$stddev, (e) => call(stddev: e));
  }

  CopyWith$Input$proposal_stddev_pop_order_by<TRes> get stddev_pop {
    final local$stddev_pop = _instance.stddev_pop;
    return local$stddev_pop == null
        ? CopyWith$Input$proposal_stddev_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_stddev_pop_order_by(
            local$stddev_pop, (e) => call(stddev_pop: e));
  }

  CopyWith$Input$proposal_stddev_samp_order_by<TRes> get stddev_samp {
    final local$stddev_samp = _instance.stddev_samp;
    return local$stddev_samp == null
        ? CopyWith$Input$proposal_stddev_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_stddev_samp_order_by(
            local$stddev_samp, (e) => call(stddev_samp: e));
  }

  CopyWith$Input$proposal_sum_order_by<TRes> get sum {
    final local$sum = _instance.sum;
    return local$sum == null
        ? CopyWith$Input$proposal_sum_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_sum_order_by(local$sum, (e) => call(sum: e));
  }

  CopyWith$Input$proposal_var_pop_order_by<TRes> get var_pop {
    final local$var_pop = _instance.var_pop;
    return local$var_pop == null
        ? CopyWith$Input$proposal_var_pop_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_var_pop_order_by(
            local$var_pop, (e) => call(var_pop: e));
  }

  CopyWith$Input$proposal_var_samp_order_by<TRes> get var_samp {
    final local$var_samp = _instance.var_samp;
    return local$var_samp == null
        ? CopyWith$Input$proposal_var_samp_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_var_samp_order_by(
            local$var_samp, (e) => call(var_samp: e));
  }

  CopyWith$Input$proposal_variance_order_by<TRes> get variance {
    final local$variance = _instance.variance;
    return local$variance == null
        ? CopyWith$Input$proposal_variance_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_variance_order_by(
            local$variance, (e) => call(variance: e));
  }
}

class _CopyWithStubImpl$Input$proposal_aggregate_order_by<TRes>
    implements CopyWith$Input$proposal_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_aggregate_order_by(this._res);

  TRes _res;

  call({
    Input$proposal_avg_order_by? avg,
    Enum$order_by? count,
    Input$proposal_max_order_by? max,
    Input$proposal_min_order_by? min,
    Input$proposal_stddev_order_by? stddev,
    Input$proposal_stddev_pop_order_by? stddev_pop,
    Input$proposal_stddev_samp_order_by? stddev_samp,
    Input$proposal_sum_order_by? sum,
    Input$proposal_var_pop_order_by? var_pop,
    Input$proposal_var_samp_order_by? var_samp,
    Input$proposal_variance_order_by? variance,
  }) =>
      _res;
  CopyWith$Input$proposal_avg_order_by<TRes> get avg =>
      CopyWith$Input$proposal_avg_order_by.stub(_res);
  CopyWith$Input$proposal_max_order_by<TRes> get max =>
      CopyWith$Input$proposal_max_order_by.stub(_res);
  CopyWith$Input$proposal_min_order_by<TRes> get min =>
      CopyWith$Input$proposal_min_order_by.stub(_res);
  CopyWith$Input$proposal_stddev_order_by<TRes> get stddev =>
      CopyWith$Input$proposal_stddev_order_by.stub(_res);
  CopyWith$Input$proposal_stddev_pop_order_by<TRes> get stddev_pop =>
      CopyWith$Input$proposal_stddev_pop_order_by.stub(_res);
  CopyWith$Input$proposal_stddev_samp_order_by<TRes> get stddev_samp =>
      CopyWith$Input$proposal_stddev_samp_order_by.stub(_res);
  CopyWith$Input$proposal_sum_order_by<TRes> get sum =>
      CopyWith$Input$proposal_sum_order_by.stub(_res);
  CopyWith$Input$proposal_var_pop_order_by<TRes> get var_pop =>
      CopyWith$Input$proposal_var_pop_order_by.stub(_res);
  CopyWith$Input$proposal_var_samp_order_by<TRes> get var_samp =>
      CopyWith$Input$proposal_var_samp_order_by.stub(_res);
  CopyWith$Input$proposal_variance_order_by<TRes> get variance =>
      CopyWith$Input$proposal_variance_order_by.stub(_res);
}

class Input$proposal_arr_rel_insert_input {
  factory Input$proposal_arr_rel_insert_input({
    required List<Input$proposal_insert_input> data,
    Input$proposal_on_conflict? on_conflict,
  }) =>
      Input$proposal_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$proposal_arr_rel_insert_input._(this._$data);

  factory Input$proposal_arr_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$proposal_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$proposal_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$proposal_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$proposal_insert_input> get data =>
      (_$data['data'] as List<Input$proposal_insert_input>);
  Input$proposal_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$proposal_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$proposal_arr_rel_insert_input<
          Input$proposal_arr_rel_insert_input>
      get copyWith => CopyWith$Input$proposal_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$proposal_arr_rel_insert_input(
    Input$proposal_arr_rel_insert_input instance,
    TRes Function(Input$proposal_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$proposal_arr_rel_insert_input;

  factory CopyWith$Input$proposal_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_arr_rel_insert_input;

  TRes call({
    List<Input$proposal_insert_input>? data,
    Input$proposal_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$proposal_insert_input> Function(
              Iterable<
                  CopyWith$Input$proposal_insert_input<
                      Input$proposal_insert_input>>)
          _fn);
  CopyWith$Input$proposal_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$proposal_arr_rel_insert_input<TRes>
    implements CopyWith$Input$proposal_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$proposal_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$proposal_arr_rel_insert_input _instance;

  final TRes Function(Input$proposal_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$proposal_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$proposal_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$proposal_on_conflict?),
      }));
  TRes data(
          Iterable<Input$proposal_insert_input> Function(
                  Iterable<
                      CopyWith$Input$proposal_insert_input<
                          Input$proposal_insert_input>>)
              _fn) =>
      call(
          data: _fn(
              _instance.data.map((e) => CopyWith$Input$proposal_insert_input(
                    e,
                    (i) => i,
                  ))).toList());
  CopyWith$Input$proposal_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$proposal_on_conflict.stub(_then(_instance))
        : CopyWith$Input$proposal_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$proposal_arr_rel_insert_input<TRes>
    implements CopyWith$Input$proposal_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$proposal_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$proposal_insert_input>? data,
    Input$proposal_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$proposal_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$proposal_on_conflict.stub(_res);
}

class Input$proposal_avg_order_by {
  factory Input$proposal_avg_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_avg_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_avg_order_by._(this._$data);

  factory Input$proposal_avg_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_avg_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_avg_order_by<Input$proposal_avg_order_by>
      get copyWith => CopyWith$Input$proposal_avg_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_avg_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_avg_order_by<TRes> {
  factory CopyWith$Input$proposal_avg_order_by(
    Input$proposal_avg_order_by instance,
    TRes Function(Input$proposal_avg_order_by) then,
  ) = _CopyWithImpl$Input$proposal_avg_order_by;

  factory CopyWith$Input$proposal_avg_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_avg_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_avg_order_by<TRes>
    implements CopyWith$Input$proposal_avg_order_by<TRes> {
  _CopyWithImpl$Input$proposal_avg_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_avg_order_by _instance;

  final TRes Function(Input$proposal_avg_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_avg_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_avg_order_by<TRes>
    implements CopyWith$Input$proposal_avg_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_avg_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$proposal_bool_exp {
  factory Input$proposal_bool_exp({
    List<Input$proposal_bool_exp>? $_and,
    Input$proposal_bool_exp? $_not,
    List<Input$proposal_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investments,
    Input$investment_aggregate_bool_exp? investments_aggregate,
    Input$Int_comparison_exp? proposal_amount,
    Input$Boolean_comparison_exp? proposal_approved,
    Input$String_comparison_exp? proposal_content,
    Input$date_comparison_exp? proposal_date,
    Input$Int_comparison_exp? proposal_id,
    Input$String_comparison_exp? proposal_title,
    Input$umkm_bool_exp? umkm,
    Input$Int_comparison_exp? umkm_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      Input$proposal_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (investments != null) r'investments': investments,
        if (investments_aggregate != null)
          r'investments_aggregate': investments_aggregate,
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_approved != null) r'proposal_approved': proposal_approved,
        if (proposal_content != null) r'proposal_content': proposal_content,
        if (proposal_date != null) r'proposal_date': proposal_date,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (proposal_title != null) r'proposal_title': proposal_title,
        if (umkm != null) r'umkm': umkm,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$proposal_bool_exp._(this._$data);

  factory Input$proposal_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map((e) =>
              Input$proposal_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$proposal_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map((e) =>
              Input$proposal_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('investments')) {
      final l$investments = data['investments'];
      result$data['investments'] = l$investments == null
          ? null
          : Input$investment_bool_exp.fromJson(
              (l$investments as Map<String, dynamic>));
    }
    if (data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = data['investments_aggregate'];
      result$data['investments_aggregate'] = l$investments_aggregate == null
          ? null
          : Input$investment_aggregate_bool_exp.fromJson(
              (l$investments_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$proposal_amount as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_approved')) {
      final l$proposal_approved = data['proposal_approved'];
      result$data['proposal_approved'] = l$proposal_approved == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$proposal_approved as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_content')) {
      final l$proposal_content = data['proposal_content'];
      result$data['proposal_content'] = l$proposal_content == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$proposal_content as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_date')) {
      final l$proposal_date = data['proposal_date'];
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : Input$date_comparison_exp.fromJson(
              (l$proposal_date as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$proposal_id as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_title')) {
      final l$proposal_title = data['proposal_title'];
      result$data['proposal_title'] = l$proposal_title == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$proposal_title as Map<String, dynamic>));
    }
    if (data.containsKey('umkm')) {
      final l$umkm = data['umkm'];
      result$data['umkm'] = l$umkm == null
          ? null
          : Input$umkm_bool_exp.fromJson((l$umkm as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$umkm_id as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    return Input$proposal_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$proposal_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$proposal_bool_exp>?);
  Input$proposal_bool_exp? get $_not =>
      (_$data['_not'] as Input$proposal_bool_exp?);
  List<Input$proposal_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$proposal_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$investment_bool_exp? get investments =>
      (_$data['investments'] as Input$investment_bool_exp?);
  Input$investment_aggregate_bool_exp? get investments_aggregate =>
      (_$data['investments_aggregate'] as Input$investment_aggregate_bool_exp?);
  Input$Int_comparison_exp? get proposal_amount =>
      (_$data['proposal_amount'] as Input$Int_comparison_exp?);
  Input$Boolean_comparison_exp? get proposal_approved =>
      (_$data['proposal_approved'] as Input$Boolean_comparison_exp?);
  Input$String_comparison_exp? get proposal_content =>
      (_$data['proposal_content'] as Input$String_comparison_exp?);
  Input$date_comparison_exp? get proposal_date =>
      (_$data['proposal_date'] as Input$date_comparison_exp?);
  Input$Int_comparison_exp? get proposal_id =>
      (_$data['proposal_id'] as Input$Int_comparison_exp?);
  Input$String_comparison_exp? get proposal_title =>
      (_$data['proposal_title'] as Input$String_comparison_exp?);
  Input$umkm_bool_exp? get umkm => (_$data['umkm'] as Input$umkm_bool_exp?);
  Input$Int_comparison_exp? get umkm_id =>
      (_$data['umkm_id'] as Input$Int_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('investments')) {
      final l$investments = investments;
      result$data['investments'] = l$investments?.toJson();
    }
    if (_$data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = investments_aggregate;
      result$data['investments_aggregate'] = l$investments_aggregate?.toJson();
    }
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount?.toJson();
    }
    if (_$data.containsKey('proposal_approved')) {
      final l$proposal_approved = proposal_approved;
      result$data['proposal_approved'] = l$proposal_approved?.toJson();
    }
    if (_$data.containsKey('proposal_content')) {
      final l$proposal_content = proposal_content;
      result$data['proposal_content'] = l$proposal_content?.toJson();
    }
    if (_$data.containsKey('proposal_date')) {
      final l$proposal_date = proposal_date;
      result$data['proposal_date'] = l$proposal_date?.toJson();
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] = l$proposal_id?.toJson();
    }
    if (_$data.containsKey('proposal_title')) {
      final l$proposal_title = proposal_title;
      result$data['proposal_title'] = l$proposal_title?.toJson();
    }
    if (_$data.containsKey('umkm')) {
      final l$umkm = umkm;
      result$data['umkm'] = l$umkm?.toJson();
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$proposal_bool_exp<Input$proposal_bool_exp> get copyWith =>
      CopyWith$Input$proposal_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investments = investments;
    final lOther$investments = other.investments;
    if (_$data.containsKey('investments') !=
        other._$data.containsKey('investments')) {
      return false;
    }
    if (l$investments != lOther$investments) {
      return false;
    }
    final l$investments_aggregate = investments_aggregate;
    final lOther$investments_aggregate = other.investments_aggregate;
    if (_$data.containsKey('investments_aggregate') !=
        other._$data.containsKey('investments_aggregate')) {
      return false;
    }
    if (l$investments_aggregate != lOther$investments_aggregate) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_approved = proposal_approved;
    final lOther$proposal_approved = other.proposal_approved;
    if (_$data.containsKey('proposal_approved') !=
        other._$data.containsKey('proposal_approved')) {
      return false;
    }
    if (l$proposal_approved != lOther$proposal_approved) {
      return false;
    }
    final l$proposal_content = proposal_content;
    final lOther$proposal_content = other.proposal_content;
    if (_$data.containsKey('proposal_content') !=
        other._$data.containsKey('proposal_content')) {
      return false;
    }
    if (l$proposal_content != lOther$proposal_content) {
      return false;
    }
    final l$proposal_date = proposal_date;
    final lOther$proposal_date = other.proposal_date;
    if (_$data.containsKey('proposal_date') !=
        other._$data.containsKey('proposal_date')) {
      return false;
    }
    if (l$proposal_date != lOther$proposal_date) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$proposal_title = proposal_title;
    final lOther$proposal_title = other.proposal_title;
    if (_$data.containsKey('proposal_title') !=
        other._$data.containsKey('proposal_title')) {
      return false;
    }
    if (l$proposal_title != lOther$proposal_title) {
      return false;
    }
    final l$umkm = umkm;
    final lOther$umkm = other.umkm;
    if (_$data.containsKey('umkm') != other._$data.containsKey('umkm')) {
      return false;
    }
    if (l$umkm != lOther$umkm) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$investments = investments;
    final l$investments_aggregate = investments_aggregate;
    final l$proposal_amount = proposal_amount;
    final l$proposal_approved = proposal_approved;
    final l$proposal_content = proposal_content;
    final l$proposal_date = proposal_date;
    final l$proposal_id = proposal_id;
    final l$proposal_title = proposal_title;
    final l$umkm = umkm;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investments') ? l$investments : const {},
      _$data.containsKey('investments_aggregate')
          ? l$investments_aggregate
          : const {},
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_approved') ? l$proposal_approved : const {},
      _$data.containsKey('proposal_content') ? l$proposal_content : const {},
      _$data.containsKey('proposal_date') ? l$proposal_date : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('proposal_title') ? l$proposal_title : const {},
      _$data.containsKey('umkm') ? l$umkm : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_bool_exp<TRes> {
  factory CopyWith$Input$proposal_bool_exp(
    Input$proposal_bool_exp instance,
    TRes Function(Input$proposal_bool_exp) then,
  ) = _CopyWithImpl$Input$proposal_bool_exp;

  factory CopyWith$Input$proposal_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_bool_exp;

  TRes call({
    List<Input$proposal_bool_exp>? $_and,
    Input$proposal_bool_exp? $_not,
    List<Input$proposal_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investments,
    Input$investment_aggregate_bool_exp? investments_aggregate,
    Input$Int_comparison_exp? proposal_amount,
    Input$Boolean_comparison_exp? proposal_approved,
    Input$String_comparison_exp? proposal_content,
    Input$date_comparison_exp? proposal_date,
    Input$Int_comparison_exp? proposal_id,
    Input$String_comparison_exp? proposal_title,
    Input$umkm_bool_exp? umkm,
    Input$Int_comparison_exp? umkm_id,
    Input$timestamptz_comparison_exp? updated_at,
  });
  TRes $_and(
      Iterable<Input$proposal_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$proposal_bool_exp<Input$proposal_bool_exp>>?)
          _fn);
  CopyWith$Input$proposal_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$proposal_bool_exp>? Function(
              Iterable<
                  CopyWith$Input$proposal_bool_exp<Input$proposal_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$investment_bool_exp<TRes> get investments;
  CopyWith$Input$investment_aggregate_bool_exp<TRes> get investments_aggregate;
  CopyWith$Input$Int_comparison_exp<TRes> get proposal_amount;
  CopyWith$Input$Boolean_comparison_exp<TRes> get proposal_approved;
  CopyWith$Input$String_comparison_exp<TRes> get proposal_content;
  CopyWith$Input$date_comparison_exp<TRes> get proposal_date;
  CopyWith$Input$Int_comparison_exp<TRes> get proposal_id;
  CopyWith$Input$String_comparison_exp<TRes> get proposal_title;
  CopyWith$Input$umkm_bool_exp<TRes> get umkm;
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
}

class _CopyWithImpl$Input$proposal_bool_exp<TRes>
    implements CopyWith$Input$proposal_bool_exp<TRes> {
  _CopyWithImpl$Input$proposal_bool_exp(
    this._instance,
    this._then,
  );

  final Input$proposal_bool_exp _instance;

  final TRes Function(Input$proposal_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? investments = _undefined,
    Object? investments_aggregate = _undefined,
    Object? proposal_amount = _undefined,
    Object? proposal_approved = _undefined,
    Object? proposal_content = _undefined,
    Object? proposal_date = _undefined,
    Object? proposal_id = _undefined,
    Object? proposal_title = _undefined,
    Object? umkm = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$proposal_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined)
          '_and': ($_and as List<Input$proposal_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$proposal_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$proposal_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (investments != _undefined)
          'investments': (investments as Input$investment_bool_exp?),
        if (investments_aggregate != _undefined)
          'investments_aggregate':
              (investments_aggregate as Input$investment_aggregate_bool_exp?),
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Input$Int_comparison_exp?),
        if (proposal_approved != _undefined)
          'proposal_approved':
              (proposal_approved as Input$Boolean_comparison_exp?),
        if (proposal_content != _undefined)
          'proposal_content':
              (proposal_content as Input$String_comparison_exp?),
        if (proposal_date != _undefined)
          'proposal_date': (proposal_date as Input$date_comparison_exp?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Input$Int_comparison_exp?),
        if (proposal_title != _undefined)
          'proposal_title': (proposal_title as Input$String_comparison_exp?),
        if (umkm != _undefined) 'umkm': (umkm as Input$umkm_bool_exp?),
        if (umkm_id != _undefined)
          'umkm_id': (umkm_id as Input$Int_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$proposal_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$proposal_bool_exp<
                          Input$proposal_bool_exp>>?)
              _fn) =>
      call(
          $_and:
              _fn(_instance.$_and?.map((e) => CopyWith$Input$proposal_bool_exp(
                    e,
                    (i) => i,
                  )))?.toList());
  CopyWith$Input$proposal_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$proposal_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$proposal_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$proposal_bool_exp<
                          Input$proposal_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$proposal_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$investment_bool_exp<TRes> get investments {
    final local$investments = _instance.investments;
    return local$investments == null
        ? CopyWith$Input$investment_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_bool_exp(
            local$investments, (e) => call(investments: e));
  }

  CopyWith$Input$investment_aggregate_bool_exp<TRes> get investments_aggregate {
    final local$investments_aggregate = _instance.investments_aggregate;
    return local$investments_aggregate == null
        ? CopyWith$Input$investment_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investment_aggregate_bool_exp(
            local$investments_aggregate, (e) => call(investments_aggregate: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get proposal_amount {
    final local$proposal_amount = _instance.proposal_amount;
    return local$proposal_amount == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$proposal_amount, (e) => call(proposal_amount: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get proposal_approved {
    final local$proposal_approved = _instance.proposal_approved;
    return local$proposal_approved == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$proposal_approved, (e) => call(proposal_approved: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get proposal_content {
    final local$proposal_content = _instance.proposal_content;
    return local$proposal_content == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$proposal_content, (e) => call(proposal_content: e));
  }

  CopyWith$Input$date_comparison_exp<TRes> get proposal_date {
    final local$proposal_date = _instance.proposal_date;
    return local$proposal_date == null
        ? CopyWith$Input$date_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$date_comparison_exp(
            local$proposal_date, (e) => call(proposal_date: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get proposal_id {
    final local$proposal_id = _instance.proposal_id;
    return local$proposal_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$proposal_id, (e) => call(proposal_id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get proposal_title {
    final local$proposal_title = _instance.proposal_title;
    return local$proposal_title == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$proposal_title, (e) => call(proposal_title: e));
  }

  CopyWith$Input$umkm_bool_exp<TRes> get umkm {
    final local$umkm = _instance.umkm;
    return local$umkm == null
        ? CopyWith$Input$umkm_bool_exp.stub(_then(_instance))
        : CopyWith$Input$umkm_bool_exp(local$umkm, (e) => call(umkm: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id {
    final local$umkm_id = _instance.umkm_id;
    return local$umkm_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$umkm_id, (e) => call(umkm_id: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }
}

class _CopyWithStubImpl$Input$proposal_bool_exp<TRes>
    implements CopyWith$Input$proposal_bool_exp<TRes> {
  _CopyWithStubImpl$Input$proposal_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$proposal_bool_exp>? $_and,
    Input$proposal_bool_exp? $_not,
    List<Input$proposal_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$investment_bool_exp? investments,
    Input$investment_aggregate_bool_exp? investments_aggregate,
    Input$Int_comparison_exp? proposal_amount,
    Input$Boolean_comparison_exp? proposal_approved,
    Input$String_comparison_exp? proposal_content,
    Input$date_comparison_exp? proposal_date,
    Input$Int_comparison_exp? proposal_id,
    Input$String_comparison_exp? proposal_title,
    Input$umkm_bool_exp? umkm,
    Input$Int_comparison_exp? umkm_id,
    Input$timestamptz_comparison_exp? updated_at,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$proposal_bool_exp<TRes> get $_not =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$investment_bool_exp<TRes> get investments =>
      CopyWith$Input$investment_bool_exp.stub(_res);
  CopyWith$Input$investment_aggregate_bool_exp<TRes>
      get investments_aggregate =>
          CopyWith$Input$investment_aggregate_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get proposal_amount =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get proposal_approved =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get proposal_content =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$date_comparison_exp<TRes> get proposal_date =>
      CopyWith$Input$date_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get proposal_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get proposal_title =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$umkm_bool_exp<TRes> get umkm =>
      CopyWith$Input$umkm_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
}

class Input$proposal_inc_input {
  factory Input$proposal_inc_input({
    int? proposal_amount,
    int? umkm_id,
  }) =>
      Input$proposal_inc_input._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_inc_input._(this._$data);

  factory Input$proposal_inc_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = (l$proposal_amount as int?);
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    return Input$proposal_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get proposal_amount => (_$data['proposal_amount'] as int?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount;
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    return result$data;
  }

  CopyWith$Input$proposal_inc_input<Input$proposal_inc_input> get copyWith =>
      CopyWith$Input$proposal_inc_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_inc_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_inc_input<TRes> {
  factory CopyWith$Input$proposal_inc_input(
    Input$proposal_inc_input instance,
    TRes Function(Input$proposal_inc_input) then,
  ) = _CopyWithImpl$Input$proposal_inc_input;

  factory CopyWith$Input$proposal_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_inc_input;

  TRes call({
    int? proposal_amount,
    int? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_inc_input<TRes>
    implements CopyWith$Input$proposal_inc_input<TRes> {
  _CopyWithImpl$Input$proposal_inc_input(
    this._instance,
    this._then,
  );

  final Input$proposal_inc_input _instance;

  final TRes Function(Input$proposal_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_inc_input._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as int?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
      }));
}

class _CopyWithStubImpl$Input$proposal_inc_input<TRes>
    implements CopyWith$Input$proposal_inc_input<TRes> {
  _CopyWithStubImpl$Input$proposal_inc_input(this._res);

  TRes _res;

  call({
    int? proposal_amount,
    int? umkm_id,
  }) =>
      _res;
}

class Input$proposal_insert_input {
  factory Input$proposal_insert_input({
    DateTime? created_at,
    Input$investment_arr_rel_insert_input? investments,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    String? proposal_title,
    Input$umkm_obj_rel_insert_input? umkm,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      Input$proposal_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (investments != null) r'investments': investments,
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_approved != null) r'proposal_approved': proposal_approved,
        if (proposal_content != null) r'proposal_content': proposal_content,
        if (proposal_date != null) r'proposal_date': proposal_date,
        if (proposal_title != null) r'proposal_title': proposal_title,
        if (umkm != null) r'umkm': umkm,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$proposal_insert_input._(this._$data);

  factory Input$proposal_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('investments')) {
      final l$investments = data['investments'];
      result$data['investments'] = l$investments == null
          ? null
          : Input$investment_arr_rel_insert_input.fromJson(
              (l$investments as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = (l$proposal_amount as int?);
    }
    if (data.containsKey('proposal_approved')) {
      final l$proposal_approved = data['proposal_approved'];
      result$data['proposal_approved'] = (l$proposal_approved as bool?);
    }
    if (data.containsKey('proposal_content')) {
      final l$proposal_content = data['proposal_content'];
      result$data['proposal_content'] = (l$proposal_content as String?);
    }
    if (data.containsKey('proposal_date')) {
      final l$proposal_date = data['proposal_date'];
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : DateTime.parse((l$proposal_date as String));
    }
    if (data.containsKey('proposal_title')) {
      final l$proposal_title = data['proposal_title'];
      result$data['proposal_title'] = (l$proposal_title as String?);
    }
    if (data.containsKey('umkm')) {
      final l$umkm = data['umkm'];
      result$data['umkm'] = l$umkm == null
          ? null
          : Input$umkm_obj_rel_insert_input.fromJson(
              (l$umkm as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$proposal_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  Input$investment_arr_rel_insert_input? get investments =>
      (_$data['investments'] as Input$investment_arr_rel_insert_input?);
  int? get proposal_amount => (_$data['proposal_amount'] as int?);
  bool? get proposal_approved => (_$data['proposal_approved'] as bool?);
  String? get proposal_content => (_$data['proposal_content'] as String?);
  DateTime? get proposal_date => (_$data['proposal_date'] as DateTime?);
  String? get proposal_title => (_$data['proposal_title'] as String?);
  Input$umkm_obj_rel_insert_input? get umkm =>
      (_$data['umkm'] as Input$umkm_obj_rel_insert_input?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('investments')) {
      final l$investments = investments;
      result$data['investments'] = l$investments?.toJson();
    }
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount;
    }
    if (_$data.containsKey('proposal_approved')) {
      final l$proposal_approved = proposal_approved;
      result$data['proposal_approved'] = l$proposal_approved;
    }
    if (_$data.containsKey('proposal_content')) {
      final l$proposal_content = proposal_content;
      result$data['proposal_content'] = l$proposal_content;
    }
    if (_$data.containsKey('proposal_date')) {
      final l$proposal_date = proposal_date;
      result$data['proposal_date'] = l$proposal_date?.toIso8601String();
    }
    if (_$data.containsKey('proposal_title')) {
      final l$proposal_title = proposal_title;
      result$data['proposal_title'] = l$proposal_title;
    }
    if (_$data.containsKey('umkm')) {
      final l$umkm = umkm;
      result$data['umkm'] = l$umkm?.toJson();
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$proposal_insert_input<Input$proposal_insert_input>
      get copyWith => CopyWith$Input$proposal_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investments = investments;
    final lOther$investments = other.investments;
    if (_$data.containsKey('investments') !=
        other._$data.containsKey('investments')) {
      return false;
    }
    if (l$investments != lOther$investments) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_approved = proposal_approved;
    final lOther$proposal_approved = other.proposal_approved;
    if (_$data.containsKey('proposal_approved') !=
        other._$data.containsKey('proposal_approved')) {
      return false;
    }
    if (l$proposal_approved != lOther$proposal_approved) {
      return false;
    }
    final l$proposal_content = proposal_content;
    final lOther$proposal_content = other.proposal_content;
    if (_$data.containsKey('proposal_content') !=
        other._$data.containsKey('proposal_content')) {
      return false;
    }
    if (l$proposal_content != lOther$proposal_content) {
      return false;
    }
    final l$proposal_date = proposal_date;
    final lOther$proposal_date = other.proposal_date;
    if (_$data.containsKey('proposal_date') !=
        other._$data.containsKey('proposal_date')) {
      return false;
    }
    if (l$proposal_date != lOther$proposal_date) {
      return false;
    }
    final l$proposal_title = proposal_title;
    final lOther$proposal_title = other.proposal_title;
    if (_$data.containsKey('proposal_title') !=
        other._$data.containsKey('proposal_title')) {
      return false;
    }
    if (l$proposal_title != lOther$proposal_title) {
      return false;
    }
    final l$umkm = umkm;
    final lOther$umkm = other.umkm;
    if (_$data.containsKey('umkm') != other._$data.containsKey('umkm')) {
      return false;
    }
    if (l$umkm != lOther$umkm) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investments = investments;
    final l$proposal_amount = proposal_amount;
    final l$proposal_approved = proposal_approved;
    final l$proposal_content = proposal_content;
    final l$proposal_date = proposal_date;
    final l$proposal_title = proposal_title;
    final l$umkm = umkm;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investments') ? l$investments : const {},
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_approved') ? l$proposal_approved : const {},
      _$data.containsKey('proposal_content') ? l$proposal_content : const {},
      _$data.containsKey('proposal_date') ? l$proposal_date : const {},
      _$data.containsKey('proposal_title') ? l$proposal_title : const {},
      _$data.containsKey('umkm') ? l$umkm : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_insert_input<TRes> {
  factory CopyWith$Input$proposal_insert_input(
    Input$proposal_insert_input instance,
    TRes Function(Input$proposal_insert_input) then,
  ) = _CopyWithImpl$Input$proposal_insert_input;

  factory CopyWith$Input$proposal_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_insert_input;

  TRes call({
    DateTime? created_at,
    Input$investment_arr_rel_insert_input? investments,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    String? proposal_title,
    Input$umkm_obj_rel_insert_input? umkm,
    int? umkm_id,
    DateTime? updated_at,
  });
  CopyWith$Input$investment_arr_rel_insert_input<TRes> get investments;
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get umkm;
}

class _CopyWithImpl$Input$proposal_insert_input<TRes>
    implements CopyWith$Input$proposal_insert_input<TRes> {
  _CopyWithImpl$Input$proposal_insert_input(
    this._instance,
    this._then,
  );

  final Input$proposal_insert_input _instance;

  final TRes Function(Input$proposal_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investments = _undefined,
    Object? proposal_amount = _undefined,
    Object? proposal_approved = _undefined,
    Object? proposal_content = _undefined,
    Object? proposal_date = _undefined,
    Object? proposal_title = _undefined,
    Object? umkm = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$proposal_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (investments != _undefined)
          'investments':
              (investments as Input$investment_arr_rel_insert_input?),
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as int?),
        if (proposal_approved != _undefined)
          'proposal_approved': (proposal_approved as bool?),
        if (proposal_content != _undefined)
          'proposal_content': (proposal_content as String?),
        if (proposal_date != _undefined)
          'proposal_date': (proposal_date as DateTime?),
        if (proposal_title != _undefined)
          'proposal_title': (proposal_title as String?),
        if (umkm != _undefined)
          'umkm': (umkm as Input$umkm_obj_rel_insert_input?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
  CopyWith$Input$investment_arr_rel_insert_input<TRes> get investments {
    final local$investments = _instance.investments;
    return local$investments == null
        ? CopyWith$Input$investment_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$investment_arr_rel_insert_input(
            local$investments, (e) => call(investments: e));
  }

  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get umkm {
    final local$umkm = _instance.umkm;
    return local$umkm == null
        ? CopyWith$Input$umkm_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$umkm_obj_rel_insert_input(
            local$umkm, (e) => call(umkm: e));
  }
}

class _CopyWithStubImpl$Input$proposal_insert_input<TRes>
    implements CopyWith$Input$proposal_insert_input<TRes> {
  _CopyWithStubImpl$Input$proposal_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    Input$investment_arr_rel_insert_input? investments,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    String? proposal_title,
    Input$umkm_obj_rel_insert_input? umkm,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      _res;
  CopyWith$Input$investment_arr_rel_insert_input<TRes> get investments =>
      CopyWith$Input$investment_arr_rel_insert_input.stub(_res);
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get umkm =>
      CopyWith$Input$umkm_obj_rel_insert_input.stub(_res);
}

class Input$proposal_max_order_by {
  factory Input$proposal_max_order_by({
    Enum$order_by? created_at,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      Input$proposal_max_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_content != null) r'proposal_content': proposal_content,
        if (proposal_date != null) r'proposal_date': proposal_date,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (proposal_title != null) r'proposal_title': proposal_title,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$proposal_max_order_by._(this._$data);

  factory Input$proposal_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_content')) {
      final l$proposal_content = data['proposal_content'];
      result$data['proposal_content'] = l$proposal_content == null
          ? null
          : fromJson$Enum$order_by((l$proposal_content as String));
    }
    if (data.containsKey('proposal_date')) {
      final l$proposal_date = data['proposal_date'];
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : fromJson$Enum$order_by((l$proposal_date as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('proposal_title')) {
      final l$proposal_title = data['proposal_title'];
      result$data['proposal_title'] = l$proposal_title == null
          ? null
          : fromJson$Enum$order_by((l$proposal_title as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$proposal_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_content =>
      (_$data['proposal_content'] as Enum$order_by?);
  Enum$order_by? get proposal_date =>
      (_$data['proposal_date'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get proposal_title =>
      (_$data['proposal_title'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_content')) {
      final l$proposal_content = proposal_content;
      result$data['proposal_content'] = l$proposal_content == null
          ? null
          : toJson$Enum$order_by(l$proposal_content);
    }
    if (_$data.containsKey('proposal_date')) {
      final l$proposal_date = proposal_date;
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : toJson$Enum$order_by(l$proposal_date);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('proposal_title')) {
      final l$proposal_title = proposal_title;
      result$data['proposal_title'] = l$proposal_title == null
          ? null
          : toJson$Enum$order_by(l$proposal_title);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$proposal_max_order_by<Input$proposal_max_order_by>
      get copyWith => CopyWith$Input$proposal_max_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_content = proposal_content;
    final lOther$proposal_content = other.proposal_content;
    if (_$data.containsKey('proposal_content') !=
        other._$data.containsKey('proposal_content')) {
      return false;
    }
    if (l$proposal_content != lOther$proposal_content) {
      return false;
    }
    final l$proposal_date = proposal_date;
    final lOther$proposal_date = other.proposal_date;
    if (_$data.containsKey('proposal_date') !=
        other._$data.containsKey('proposal_date')) {
      return false;
    }
    if (l$proposal_date != lOther$proposal_date) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$proposal_title = proposal_title;
    final lOther$proposal_title = other.proposal_title;
    if (_$data.containsKey('proposal_title') !=
        other._$data.containsKey('proposal_title')) {
      return false;
    }
    if (l$proposal_title != lOther$proposal_title) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$proposal_amount = proposal_amount;
    final l$proposal_content = proposal_content;
    final l$proposal_date = proposal_date;
    final l$proposal_id = proposal_id;
    final l$proposal_title = proposal_title;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_content') ? l$proposal_content : const {},
      _$data.containsKey('proposal_date') ? l$proposal_date : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('proposal_title') ? l$proposal_title : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_max_order_by<TRes> {
  factory CopyWith$Input$proposal_max_order_by(
    Input$proposal_max_order_by instance,
    TRes Function(Input$proposal_max_order_by) then,
  ) = _CopyWithImpl$Input$proposal_max_order_by;

  factory CopyWith$Input$proposal_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_max_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$proposal_max_order_by<TRes>
    implements CopyWith$Input$proposal_max_order_by<TRes> {
  _CopyWithImpl$Input$proposal_max_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_max_order_by _instance;

  final TRes Function(Input$proposal_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? proposal_amount = _undefined,
    Object? proposal_content = _undefined,
    Object? proposal_date = _undefined,
    Object? proposal_id = _undefined,
    Object? proposal_title = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$proposal_max_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_content != _undefined)
          'proposal_content': (proposal_content as Enum$order_by?),
        if (proposal_date != _undefined)
          'proposal_date': (proposal_date as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (proposal_title != _undefined)
          'proposal_title': (proposal_title as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_max_order_by<TRes>
    implements CopyWith$Input$proposal_max_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$proposal_min_order_by {
  factory Input$proposal_min_order_by({
    Enum$order_by? created_at,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      Input$proposal_min_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_content != null) r'proposal_content': proposal_content,
        if (proposal_date != null) r'proposal_date': proposal_date,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (proposal_title != null) r'proposal_title': proposal_title,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$proposal_min_order_by._(this._$data);

  factory Input$proposal_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_content')) {
      final l$proposal_content = data['proposal_content'];
      result$data['proposal_content'] = l$proposal_content == null
          ? null
          : fromJson$Enum$order_by((l$proposal_content as String));
    }
    if (data.containsKey('proposal_date')) {
      final l$proposal_date = data['proposal_date'];
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : fromJson$Enum$order_by((l$proposal_date as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('proposal_title')) {
      final l$proposal_title = data['proposal_title'];
      result$data['proposal_title'] = l$proposal_title == null
          ? null
          : fromJson$Enum$order_by((l$proposal_title as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$proposal_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_content =>
      (_$data['proposal_content'] as Enum$order_by?);
  Enum$order_by? get proposal_date =>
      (_$data['proposal_date'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get proposal_title =>
      (_$data['proposal_title'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_content')) {
      final l$proposal_content = proposal_content;
      result$data['proposal_content'] = l$proposal_content == null
          ? null
          : toJson$Enum$order_by(l$proposal_content);
    }
    if (_$data.containsKey('proposal_date')) {
      final l$proposal_date = proposal_date;
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : toJson$Enum$order_by(l$proposal_date);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('proposal_title')) {
      final l$proposal_title = proposal_title;
      result$data['proposal_title'] = l$proposal_title == null
          ? null
          : toJson$Enum$order_by(l$proposal_title);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$proposal_min_order_by<Input$proposal_min_order_by>
      get copyWith => CopyWith$Input$proposal_min_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_content = proposal_content;
    final lOther$proposal_content = other.proposal_content;
    if (_$data.containsKey('proposal_content') !=
        other._$data.containsKey('proposal_content')) {
      return false;
    }
    if (l$proposal_content != lOther$proposal_content) {
      return false;
    }
    final l$proposal_date = proposal_date;
    final lOther$proposal_date = other.proposal_date;
    if (_$data.containsKey('proposal_date') !=
        other._$data.containsKey('proposal_date')) {
      return false;
    }
    if (l$proposal_date != lOther$proposal_date) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$proposal_title = proposal_title;
    final lOther$proposal_title = other.proposal_title;
    if (_$data.containsKey('proposal_title') !=
        other._$data.containsKey('proposal_title')) {
      return false;
    }
    if (l$proposal_title != lOther$proposal_title) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$proposal_amount = proposal_amount;
    final l$proposal_content = proposal_content;
    final l$proposal_date = proposal_date;
    final l$proposal_id = proposal_id;
    final l$proposal_title = proposal_title;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_content') ? l$proposal_content : const {},
      _$data.containsKey('proposal_date') ? l$proposal_date : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('proposal_title') ? l$proposal_title : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_min_order_by<TRes> {
  factory CopyWith$Input$proposal_min_order_by(
    Input$proposal_min_order_by instance,
    TRes Function(Input$proposal_min_order_by) then,
  ) = _CopyWithImpl$Input$proposal_min_order_by;

  factory CopyWith$Input$proposal_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_min_order_by;

  TRes call({
    Enum$order_by? created_at,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  });
}

class _CopyWithImpl$Input$proposal_min_order_by<TRes>
    implements CopyWith$Input$proposal_min_order_by<TRes> {
  _CopyWithImpl$Input$proposal_min_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_min_order_by _instance;

  final TRes Function(Input$proposal_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? proposal_amount = _undefined,
    Object? proposal_content = _undefined,
    Object? proposal_date = _undefined,
    Object? proposal_id = _undefined,
    Object? proposal_title = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$proposal_min_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_content != _undefined)
          'proposal_content': (proposal_content as Enum$order_by?),
        if (proposal_date != _undefined)
          'proposal_date': (proposal_date as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (proposal_title != _undefined)
          'proposal_title': (proposal_title as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_min_order_by<TRes>
    implements CopyWith$Input$proposal_min_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
}

class Input$proposal_obj_rel_insert_input {
  factory Input$proposal_obj_rel_insert_input({
    required Input$proposal_insert_input data,
    Input$proposal_on_conflict? on_conflict,
  }) =>
      Input$proposal_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$proposal_obj_rel_insert_input._(this._$data);

  factory Input$proposal_obj_rel_insert_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$proposal_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$proposal_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$proposal_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$proposal_insert_input get data =>
      (_$data['data'] as Input$proposal_insert_input);
  Input$proposal_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$proposal_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$proposal_obj_rel_insert_input<
          Input$proposal_obj_rel_insert_input>
      get copyWith => CopyWith$Input$proposal_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$proposal_obj_rel_insert_input(
    Input$proposal_obj_rel_insert_input instance,
    TRes Function(Input$proposal_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$proposal_obj_rel_insert_input;

  factory CopyWith$Input$proposal_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_obj_rel_insert_input;

  TRes call({
    Input$proposal_insert_input? data,
    Input$proposal_on_conflict? on_conflict,
  });
  CopyWith$Input$proposal_insert_input<TRes> get data;
  CopyWith$Input$proposal_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$proposal_obj_rel_insert_input<TRes>
    implements CopyWith$Input$proposal_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$proposal_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$proposal_obj_rel_insert_input _instance;

  final TRes Function(Input$proposal_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$proposal_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$proposal_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$proposal_on_conflict?),
      }));
  CopyWith$Input$proposal_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$proposal_insert_input(
        local$data, (e) => call(data: e));
  }

  CopyWith$Input$proposal_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$proposal_on_conflict.stub(_then(_instance))
        : CopyWith$Input$proposal_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$proposal_obj_rel_insert_input<TRes>
    implements CopyWith$Input$proposal_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$proposal_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$proposal_insert_input? data,
    Input$proposal_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$proposal_insert_input<TRes> get data =>
      CopyWith$Input$proposal_insert_input.stub(_res);
  CopyWith$Input$proposal_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$proposal_on_conflict.stub(_res);
}

class Input$proposal_on_conflict {
  factory Input$proposal_on_conflict({
    required Enum$proposal_constraint constraint,
    required List<Enum$proposal_update_column> update_columns,
    Input$proposal_bool_exp? where,
  }) =>
      Input$proposal_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$proposal_on_conflict._(this._$data);

  factory Input$proposal_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$proposal_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$proposal_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$proposal_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$proposal_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$proposal_constraint get constraint =>
      (_$data['constraint'] as Enum$proposal_constraint);
  List<Enum$proposal_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$proposal_update_column>);
  Input$proposal_bool_exp? get where =>
      (_$data['where'] as Input$proposal_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$proposal_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$proposal_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$proposal_on_conflict<Input$proposal_on_conflict>
      get copyWith => CopyWith$Input$proposal_on_conflict(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_on_conflict<TRes> {
  factory CopyWith$Input$proposal_on_conflict(
    Input$proposal_on_conflict instance,
    TRes Function(Input$proposal_on_conflict) then,
  ) = _CopyWithImpl$Input$proposal_on_conflict;

  factory CopyWith$Input$proposal_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_on_conflict;

  TRes call({
    Enum$proposal_constraint? constraint,
    List<Enum$proposal_update_column>? update_columns,
    Input$proposal_bool_exp? where,
  });
  CopyWith$Input$proposal_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$proposal_on_conflict<TRes>
    implements CopyWith$Input$proposal_on_conflict<TRes> {
  _CopyWithImpl$Input$proposal_on_conflict(
    this._instance,
    this._then,
  );

  final Input$proposal_on_conflict _instance;

  final TRes Function(Input$proposal_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$proposal_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$proposal_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns':
              (update_columns as List<Enum$proposal_update_column>),
        if (where != _undefined) 'where': (where as Input$proposal_bool_exp?),
      }));
  CopyWith$Input$proposal_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$proposal_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$proposal_on_conflict<TRes>
    implements CopyWith$Input$proposal_on_conflict<TRes> {
  _CopyWithStubImpl$Input$proposal_on_conflict(this._res);

  TRes _res;

  call({
    Enum$proposal_constraint? constraint,
    List<Enum$proposal_update_column>? update_columns,
    Input$proposal_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$proposal_bool_exp<TRes> get where =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
}

class Input$proposal_order_by {
  factory Input$proposal_order_by({
    Enum$order_by? created_at,
    Input$investment_aggregate_order_by? investments_aggregate,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_approved,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Input$umkm_order_by? umkm,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      Input$proposal_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (investments_aggregate != null)
          r'investments_aggregate': investments_aggregate,
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_approved != null) r'proposal_approved': proposal_approved,
        if (proposal_content != null) r'proposal_content': proposal_content,
        if (proposal_date != null) r'proposal_date': proposal_date,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (proposal_title != null) r'proposal_title': proposal_title,
        if (umkm != null) r'umkm': umkm,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$proposal_order_by._(this._$data);

  factory Input$proposal_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = data['investments_aggregate'];
      result$data['investments_aggregate'] = l$investments_aggregate == null
          ? null
          : Input$investment_aggregate_order_by.fromJson(
              (l$investments_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_approved')) {
      final l$proposal_approved = data['proposal_approved'];
      result$data['proposal_approved'] = l$proposal_approved == null
          ? null
          : fromJson$Enum$order_by((l$proposal_approved as String));
    }
    if (data.containsKey('proposal_content')) {
      final l$proposal_content = data['proposal_content'];
      result$data['proposal_content'] = l$proposal_content == null
          ? null
          : fromJson$Enum$order_by((l$proposal_content as String));
    }
    if (data.containsKey('proposal_date')) {
      final l$proposal_date = data['proposal_date'];
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : fromJson$Enum$order_by((l$proposal_date as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('proposal_title')) {
      final l$proposal_title = data['proposal_title'];
      result$data['proposal_title'] = l$proposal_title == null
          ? null
          : fromJson$Enum$order_by((l$proposal_title as String));
    }
    if (data.containsKey('umkm')) {
      final l$umkm = data['umkm'];
      result$data['umkm'] = l$umkm == null
          ? null
          : Input$umkm_order_by.fromJson((l$umkm as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    return Input$proposal_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Input$investment_aggregate_order_by? get investments_aggregate =>
      (_$data['investments_aggregate'] as Input$investment_aggregate_order_by?);
  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_approved =>
      (_$data['proposal_approved'] as Enum$order_by?);
  Enum$order_by? get proposal_content =>
      (_$data['proposal_content'] as Enum$order_by?);
  Enum$order_by? get proposal_date =>
      (_$data['proposal_date'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get proposal_title =>
      (_$data['proposal_title'] as Enum$order_by?);
  Input$umkm_order_by? get umkm => (_$data['umkm'] as Input$umkm_order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('investments_aggregate')) {
      final l$investments_aggregate = investments_aggregate;
      result$data['investments_aggregate'] = l$investments_aggregate?.toJson();
    }
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_approved')) {
      final l$proposal_approved = proposal_approved;
      result$data['proposal_approved'] = l$proposal_approved == null
          ? null
          : toJson$Enum$order_by(l$proposal_approved);
    }
    if (_$data.containsKey('proposal_content')) {
      final l$proposal_content = proposal_content;
      result$data['proposal_content'] = l$proposal_content == null
          ? null
          : toJson$Enum$order_by(l$proposal_content);
    }
    if (_$data.containsKey('proposal_date')) {
      final l$proposal_date = proposal_date;
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : toJson$Enum$order_by(l$proposal_date);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('proposal_title')) {
      final l$proposal_title = proposal_title;
      result$data['proposal_title'] = l$proposal_title == null
          ? null
          : toJson$Enum$order_by(l$proposal_title);
    }
    if (_$data.containsKey('umkm')) {
      final l$umkm = umkm;
      result$data['umkm'] = l$umkm?.toJson();
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    return result$data;
  }

  CopyWith$Input$proposal_order_by<Input$proposal_order_by> get copyWith =>
      CopyWith$Input$proposal_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$investments_aggregate = investments_aggregate;
    final lOther$investments_aggregate = other.investments_aggregate;
    if (_$data.containsKey('investments_aggregate') !=
        other._$data.containsKey('investments_aggregate')) {
      return false;
    }
    if (l$investments_aggregate != lOther$investments_aggregate) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_approved = proposal_approved;
    final lOther$proposal_approved = other.proposal_approved;
    if (_$data.containsKey('proposal_approved') !=
        other._$data.containsKey('proposal_approved')) {
      return false;
    }
    if (l$proposal_approved != lOther$proposal_approved) {
      return false;
    }
    final l$proposal_content = proposal_content;
    final lOther$proposal_content = other.proposal_content;
    if (_$data.containsKey('proposal_content') !=
        other._$data.containsKey('proposal_content')) {
      return false;
    }
    if (l$proposal_content != lOther$proposal_content) {
      return false;
    }
    final l$proposal_date = proposal_date;
    final lOther$proposal_date = other.proposal_date;
    if (_$data.containsKey('proposal_date') !=
        other._$data.containsKey('proposal_date')) {
      return false;
    }
    if (l$proposal_date != lOther$proposal_date) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$proposal_title = proposal_title;
    final lOther$proposal_title = other.proposal_title;
    if (_$data.containsKey('proposal_title') !=
        other._$data.containsKey('proposal_title')) {
      return false;
    }
    if (l$proposal_title != lOther$proposal_title) {
      return false;
    }
    final l$umkm = umkm;
    final lOther$umkm = other.umkm;
    if (_$data.containsKey('umkm') != other._$data.containsKey('umkm')) {
      return false;
    }
    if (l$umkm != lOther$umkm) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$investments_aggregate = investments_aggregate;
    final l$proposal_amount = proposal_amount;
    final l$proposal_approved = proposal_approved;
    final l$proposal_content = proposal_content;
    final l$proposal_date = proposal_date;
    final l$proposal_id = proposal_id;
    final l$proposal_title = proposal_title;
    final l$umkm = umkm;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('investments_aggregate')
          ? l$investments_aggregate
          : const {},
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_approved') ? l$proposal_approved : const {},
      _$data.containsKey('proposal_content') ? l$proposal_content : const {},
      _$data.containsKey('proposal_date') ? l$proposal_date : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('proposal_title') ? l$proposal_title : const {},
      _$data.containsKey('umkm') ? l$umkm : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_order_by<TRes> {
  factory CopyWith$Input$proposal_order_by(
    Input$proposal_order_by instance,
    TRes Function(Input$proposal_order_by) then,
  ) = _CopyWithImpl$Input$proposal_order_by;

  factory CopyWith$Input$proposal_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_order_by;

  TRes call({
    Enum$order_by? created_at,
    Input$investment_aggregate_order_by? investments_aggregate,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_approved,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Input$umkm_order_by? umkm,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  });
  CopyWith$Input$investment_aggregate_order_by<TRes> get investments_aggregate;
  CopyWith$Input$umkm_order_by<TRes> get umkm;
}

class _CopyWithImpl$Input$proposal_order_by<TRes>
    implements CopyWith$Input$proposal_order_by<TRes> {
  _CopyWithImpl$Input$proposal_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_order_by _instance;

  final TRes Function(Input$proposal_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? investments_aggregate = _undefined,
    Object? proposal_amount = _undefined,
    Object? proposal_approved = _undefined,
    Object? proposal_content = _undefined,
    Object? proposal_date = _undefined,
    Object? proposal_id = _undefined,
    Object? proposal_title = _undefined,
    Object? umkm = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$proposal_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (investments_aggregate != _undefined)
          'investments_aggregate':
              (investments_aggregate as Input$investment_aggregate_order_by?),
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_approved != _undefined)
          'proposal_approved': (proposal_approved as Enum$order_by?),
        if (proposal_content != _undefined)
          'proposal_content': (proposal_content as Enum$order_by?),
        if (proposal_date != _undefined)
          'proposal_date': (proposal_date as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (proposal_title != _undefined)
          'proposal_title': (proposal_title as Enum$order_by?),
        if (umkm != _undefined) 'umkm': (umkm as Input$umkm_order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
      }));
  CopyWith$Input$investment_aggregate_order_by<TRes> get investments_aggregate {
    final local$investments_aggregate = _instance.investments_aggregate;
    return local$investments_aggregate == null
        ? CopyWith$Input$investment_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$investment_aggregate_order_by(
            local$investments_aggregate, (e) => call(investments_aggregate: e));
  }

  CopyWith$Input$umkm_order_by<TRes> get umkm {
    final local$umkm = _instance.umkm;
    return local$umkm == null
        ? CopyWith$Input$umkm_order_by.stub(_then(_instance))
        : CopyWith$Input$umkm_order_by(local$umkm, (e) => call(umkm: e));
  }
}

class _CopyWithStubImpl$Input$proposal_order_by<TRes>
    implements CopyWith$Input$proposal_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Input$investment_aggregate_order_by? investments_aggregate,
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_approved,
    Enum$order_by? proposal_content,
    Enum$order_by? proposal_date,
    Enum$order_by? proposal_id,
    Enum$order_by? proposal_title,
    Input$umkm_order_by? umkm,
    Enum$order_by? umkm_id,
    Enum$order_by? updated_at,
  }) =>
      _res;
  CopyWith$Input$investment_aggregate_order_by<TRes>
      get investments_aggregate =>
          CopyWith$Input$investment_aggregate_order_by.stub(_res);
  CopyWith$Input$umkm_order_by<TRes> get umkm =>
      CopyWith$Input$umkm_order_by.stub(_res);
}

class Input$proposal_pk_columns_input {
  factory Input$proposal_pk_columns_input({required int proposal_id}) =>
      Input$proposal_pk_columns_input._({
        r'proposal_id': proposal_id,
      });

  Input$proposal_pk_columns_input._(this._$data);

  factory Input$proposal_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$proposal_id = data['proposal_id'];
    result$data['proposal_id'] = (l$proposal_id as int);
    return Input$proposal_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int get proposal_id => (_$data['proposal_id'] as int);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$proposal_id = proposal_id;
    result$data['proposal_id'] = l$proposal_id;
    return result$data;
  }

  CopyWith$Input$proposal_pk_columns_input<Input$proposal_pk_columns_input>
      get copyWith => CopyWith$Input$proposal_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_id = proposal_id;
    return Object.hashAll([l$proposal_id]);
  }
}

abstract class CopyWith$Input$proposal_pk_columns_input<TRes> {
  factory CopyWith$Input$proposal_pk_columns_input(
    Input$proposal_pk_columns_input instance,
    TRes Function(Input$proposal_pk_columns_input) then,
  ) = _CopyWithImpl$Input$proposal_pk_columns_input;

  factory CopyWith$Input$proposal_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_pk_columns_input;

  TRes call({int? proposal_id});
}

class _CopyWithImpl$Input$proposal_pk_columns_input<TRes>
    implements CopyWith$Input$proposal_pk_columns_input<TRes> {
  _CopyWithImpl$Input$proposal_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$proposal_pk_columns_input _instance;

  final TRes Function(Input$proposal_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? proposal_id = _undefined}) =>
      _then(Input$proposal_pk_columns_input._({
        ..._instance._$data,
        if (proposal_id != _undefined && proposal_id != null)
          'proposal_id': (proposal_id as int),
      }));
}

class _CopyWithStubImpl$Input$proposal_pk_columns_input<TRes>
    implements CopyWith$Input$proposal_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$proposal_pk_columns_input(this._res);

  TRes _res;

  call({int? proposal_id}) => _res;
}

class Input$proposal_set_input {
  factory Input$proposal_set_input({
    DateTime? created_at,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    String? proposal_title,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      Input$proposal_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_approved != null) r'proposal_approved': proposal_approved,
        if (proposal_content != null) r'proposal_content': proposal_content,
        if (proposal_date != null) r'proposal_date': proposal_date,
        if (proposal_title != null) r'proposal_title': proposal_title,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$proposal_set_input._(this._$data);

  factory Input$proposal_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = (l$proposal_amount as int?);
    }
    if (data.containsKey('proposal_approved')) {
      final l$proposal_approved = data['proposal_approved'];
      result$data['proposal_approved'] = (l$proposal_approved as bool?);
    }
    if (data.containsKey('proposal_content')) {
      final l$proposal_content = data['proposal_content'];
      result$data['proposal_content'] = (l$proposal_content as String?);
    }
    if (data.containsKey('proposal_date')) {
      final l$proposal_date = data['proposal_date'];
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : DateTime.parse((l$proposal_date as String));
    }
    if (data.containsKey('proposal_title')) {
      final l$proposal_title = data['proposal_title'];
      result$data['proposal_title'] = (l$proposal_title as String?);
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$proposal_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get proposal_amount => (_$data['proposal_amount'] as int?);
  bool? get proposal_approved => (_$data['proposal_approved'] as bool?);
  String? get proposal_content => (_$data['proposal_content'] as String?);
  DateTime? get proposal_date => (_$data['proposal_date'] as DateTime?);
  String? get proposal_title => (_$data['proposal_title'] as String?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount;
    }
    if (_$data.containsKey('proposal_approved')) {
      final l$proposal_approved = proposal_approved;
      result$data['proposal_approved'] = l$proposal_approved;
    }
    if (_$data.containsKey('proposal_content')) {
      final l$proposal_content = proposal_content;
      result$data['proposal_content'] = l$proposal_content;
    }
    if (_$data.containsKey('proposal_date')) {
      final l$proposal_date = proposal_date;
      result$data['proposal_date'] = l$proposal_date?.toIso8601String();
    }
    if (_$data.containsKey('proposal_title')) {
      final l$proposal_title = proposal_title;
      result$data['proposal_title'] = l$proposal_title;
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$proposal_set_input<Input$proposal_set_input> get copyWith =>
      CopyWith$Input$proposal_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_set_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_approved = proposal_approved;
    final lOther$proposal_approved = other.proposal_approved;
    if (_$data.containsKey('proposal_approved') !=
        other._$data.containsKey('proposal_approved')) {
      return false;
    }
    if (l$proposal_approved != lOther$proposal_approved) {
      return false;
    }
    final l$proposal_content = proposal_content;
    final lOther$proposal_content = other.proposal_content;
    if (_$data.containsKey('proposal_content') !=
        other._$data.containsKey('proposal_content')) {
      return false;
    }
    if (l$proposal_content != lOther$proposal_content) {
      return false;
    }
    final l$proposal_date = proposal_date;
    final lOther$proposal_date = other.proposal_date;
    if (_$data.containsKey('proposal_date') !=
        other._$data.containsKey('proposal_date')) {
      return false;
    }
    if (l$proposal_date != lOther$proposal_date) {
      return false;
    }
    final l$proposal_title = proposal_title;
    final lOther$proposal_title = other.proposal_title;
    if (_$data.containsKey('proposal_title') !=
        other._$data.containsKey('proposal_title')) {
      return false;
    }
    if (l$proposal_title != lOther$proposal_title) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$proposal_amount = proposal_amount;
    final l$proposal_approved = proposal_approved;
    final l$proposal_content = proposal_content;
    final l$proposal_date = proposal_date;
    final l$proposal_title = proposal_title;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_approved') ? l$proposal_approved : const {},
      _$data.containsKey('proposal_content') ? l$proposal_content : const {},
      _$data.containsKey('proposal_date') ? l$proposal_date : const {},
      _$data.containsKey('proposal_title') ? l$proposal_title : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_set_input<TRes> {
  factory CopyWith$Input$proposal_set_input(
    Input$proposal_set_input instance,
    TRes Function(Input$proposal_set_input) then,
  ) = _CopyWithImpl$Input$proposal_set_input;

  factory CopyWith$Input$proposal_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_set_input;

  TRes call({
    DateTime? created_at,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    String? proposal_title,
    int? umkm_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$proposal_set_input<TRes>
    implements CopyWith$Input$proposal_set_input<TRes> {
  _CopyWithImpl$Input$proposal_set_input(
    this._instance,
    this._then,
  );

  final Input$proposal_set_input _instance;

  final TRes Function(Input$proposal_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? proposal_amount = _undefined,
    Object? proposal_approved = _undefined,
    Object? proposal_content = _undefined,
    Object? proposal_date = _undefined,
    Object? proposal_title = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$proposal_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as int?),
        if (proposal_approved != _undefined)
          'proposal_approved': (proposal_approved as bool?),
        if (proposal_content != _undefined)
          'proposal_content': (proposal_content as String?),
        if (proposal_date != _undefined)
          'proposal_date': (proposal_date as DateTime?),
        if (proposal_title != _undefined)
          'proposal_title': (proposal_title as String?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$proposal_set_input<TRes>
    implements CopyWith$Input$proposal_set_input<TRes> {
  _CopyWithStubImpl$Input$proposal_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    String? proposal_title,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$proposal_stddev_order_by {
  factory Input$proposal_stddev_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_stddev_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_stddev_order_by._(this._$data);

  factory Input$proposal_stddev_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_stddev_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_stddev_order_by<Input$proposal_stddev_order_by>
      get copyWith => CopyWith$Input$proposal_stddev_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_stddev_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_stddev_order_by<TRes> {
  factory CopyWith$Input$proposal_stddev_order_by(
    Input$proposal_stddev_order_by instance,
    TRes Function(Input$proposal_stddev_order_by) then,
  ) = _CopyWithImpl$Input$proposal_stddev_order_by;

  factory CopyWith$Input$proposal_stddev_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_stddev_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_stddev_order_by<TRes>
    implements CopyWith$Input$proposal_stddev_order_by<TRes> {
  _CopyWithImpl$Input$proposal_stddev_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_stddev_order_by _instance;

  final TRes Function(Input$proposal_stddev_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_stddev_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_stddev_order_by<TRes>
    implements CopyWith$Input$proposal_stddev_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_stddev_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$proposal_stddev_pop_order_by {
  factory Input$proposal_stddev_pop_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_stddev_pop_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_stddev_pop_order_by._(this._$data);

  factory Input$proposal_stddev_pop_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_stddev_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_stddev_pop_order_by<
          Input$proposal_stddev_pop_order_by>
      get copyWith => CopyWith$Input$proposal_stddev_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_stddev_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_stddev_pop_order_by<TRes> {
  factory CopyWith$Input$proposal_stddev_pop_order_by(
    Input$proposal_stddev_pop_order_by instance,
    TRes Function(Input$proposal_stddev_pop_order_by) then,
  ) = _CopyWithImpl$Input$proposal_stddev_pop_order_by;

  factory CopyWith$Input$proposal_stddev_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_stddev_pop_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_stddev_pop_order_by<TRes>
    implements CopyWith$Input$proposal_stddev_pop_order_by<TRes> {
  _CopyWithImpl$Input$proposal_stddev_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_stddev_pop_order_by _instance;

  final TRes Function(Input$proposal_stddev_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_stddev_pop_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_stddev_pop_order_by<TRes>
    implements CopyWith$Input$proposal_stddev_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_stddev_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$proposal_stddev_samp_order_by {
  factory Input$proposal_stddev_samp_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_stddev_samp_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_stddev_samp_order_by._(this._$data);

  factory Input$proposal_stddev_samp_order_by.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_stddev_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_stddev_samp_order_by<
          Input$proposal_stddev_samp_order_by>
      get copyWith => CopyWith$Input$proposal_stddev_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_stddev_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_stddev_samp_order_by<TRes> {
  factory CopyWith$Input$proposal_stddev_samp_order_by(
    Input$proposal_stddev_samp_order_by instance,
    TRes Function(Input$proposal_stddev_samp_order_by) then,
  ) = _CopyWithImpl$Input$proposal_stddev_samp_order_by;

  factory CopyWith$Input$proposal_stddev_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_stddev_samp_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_stddev_samp_order_by<TRes>
    implements CopyWith$Input$proposal_stddev_samp_order_by<TRes> {
  _CopyWithImpl$Input$proposal_stddev_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_stddev_samp_order_by _instance;

  final TRes Function(Input$proposal_stddev_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_stddev_samp_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_stddev_samp_order_by<TRes>
    implements CopyWith$Input$proposal_stddev_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_stddev_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$proposal_stream_cursor_input {
  factory Input$proposal_stream_cursor_input({
    required Input$proposal_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$proposal_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$proposal_stream_cursor_input._(this._$data);

  factory Input$proposal_stream_cursor_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$proposal_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$proposal_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$proposal_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$proposal_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$proposal_stream_cursor_input<
          Input$proposal_stream_cursor_input>
      get copyWith => CopyWith$Input$proposal_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_stream_cursor_input<TRes> {
  factory CopyWith$Input$proposal_stream_cursor_input(
    Input$proposal_stream_cursor_input instance,
    TRes Function(Input$proposal_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$proposal_stream_cursor_input;

  factory CopyWith$Input$proposal_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_stream_cursor_input;

  TRes call({
    Input$proposal_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$proposal_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$proposal_stream_cursor_input<TRes>
    implements CopyWith$Input$proposal_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$proposal_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$proposal_stream_cursor_input _instance;

  final TRes Function(Input$proposal_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$proposal_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$proposal_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$proposal_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$proposal_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$proposal_stream_cursor_input<TRes>
    implements CopyWith$Input$proposal_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$proposal_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$proposal_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$proposal_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$proposal_stream_cursor_value_input.stub(_res);
}

class Input$proposal_stream_cursor_value_input {
  factory Input$proposal_stream_cursor_value_input({
    DateTime? created_at,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    int? proposal_id,
    String? proposal_title,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      Input$proposal_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_approved != null) r'proposal_approved': proposal_approved,
        if (proposal_content != null) r'proposal_content': proposal_content,
        if (proposal_date != null) r'proposal_date': proposal_date,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (proposal_title != null) r'proposal_title': proposal_title,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (updated_at != null) r'updated_at': updated_at,
      });

  Input$proposal_stream_cursor_value_input._(this._$data);

  factory Input$proposal_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = (l$proposal_amount as int?);
    }
    if (data.containsKey('proposal_approved')) {
      final l$proposal_approved = data['proposal_approved'];
      result$data['proposal_approved'] = (l$proposal_approved as bool?);
    }
    if (data.containsKey('proposal_content')) {
      final l$proposal_content = data['proposal_content'];
      result$data['proposal_content'] = (l$proposal_content as String?);
    }
    if (data.containsKey('proposal_date')) {
      final l$proposal_date = data['proposal_date'];
      result$data['proposal_date'] = l$proposal_date == null
          ? null
          : DateTime.parse((l$proposal_date as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = (l$proposal_id as int?);
    }
    if (data.containsKey('proposal_title')) {
      final l$proposal_title = data['proposal_title'];
      result$data['proposal_title'] = (l$proposal_title as String?);
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    return Input$proposal_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  int? get proposal_amount => (_$data['proposal_amount'] as int?);
  bool? get proposal_approved => (_$data['proposal_approved'] as bool?);
  String? get proposal_content => (_$data['proposal_content'] as String?);
  DateTime? get proposal_date => (_$data['proposal_date'] as DateTime?);
  int? get proposal_id => (_$data['proposal_id'] as int?);
  String? get proposal_title => (_$data['proposal_title'] as String?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount;
    }
    if (_$data.containsKey('proposal_approved')) {
      final l$proposal_approved = proposal_approved;
      result$data['proposal_approved'] = l$proposal_approved;
    }
    if (_$data.containsKey('proposal_content')) {
      final l$proposal_content = proposal_content;
      result$data['proposal_content'] = l$proposal_content;
    }
    if (_$data.containsKey('proposal_date')) {
      final l$proposal_date = proposal_date;
      result$data['proposal_date'] = l$proposal_date?.toIso8601String();
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] = l$proposal_id;
    }
    if (_$data.containsKey('proposal_title')) {
      final l$proposal_title = proposal_title;
      result$data['proposal_title'] = l$proposal_title;
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$proposal_stream_cursor_value_input<
          Input$proposal_stream_cursor_value_input>
      get copyWith => CopyWith$Input$proposal_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_approved = proposal_approved;
    final lOther$proposal_approved = other.proposal_approved;
    if (_$data.containsKey('proposal_approved') !=
        other._$data.containsKey('proposal_approved')) {
      return false;
    }
    if (l$proposal_approved != lOther$proposal_approved) {
      return false;
    }
    final l$proposal_content = proposal_content;
    final lOther$proposal_content = other.proposal_content;
    if (_$data.containsKey('proposal_content') !=
        other._$data.containsKey('proposal_content')) {
      return false;
    }
    if (l$proposal_content != lOther$proposal_content) {
      return false;
    }
    final l$proposal_date = proposal_date;
    final lOther$proposal_date = other.proposal_date;
    if (_$data.containsKey('proposal_date') !=
        other._$data.containsKey('proposal_date')) {
      return false;
    }
    if (l$proposal_date != lOther$proposal_date) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$proposal_title = proposal_title;
    final lOther$proposal_title = other.proposal_title;
    if (_$data.containsKey('proposal_title') !=
        other._$data.containsKey('proposal_title')) {
      return false;
    }
    if (l$proposal_title != lOther$proposal_title) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$proposal_amount = proposal_amount;
    final l$proposal_approved = proposal_approved;
    final l$proposal_content = proposal_content;
    final l$proposal_date = proposal_date;
    final l$proposal_id = proposal_id;
    final l$proposal_title = proposal_title;
    final l$umkm_id = umkm_id;
    final l$updated_at = updated_at;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_approved') ? l$proposal_approved : const {},
      _$data.containsKey('proposal_content') ? l$proposal_content : const {},
      _$data.containsKey('proposal_date') ? l$proposal_date : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('proposal_title') ? l$proposal_title : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$proposal_stream_cursor_value_input(
    Input$proposal_stream_cursor_value_input instance,
    TRes Function(Input$proposal_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$proposal_stream_cursor_value_input;

  factory CopyWith$Input$proposal_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    int? proposal_id,
    String? proposal_title,
    int? umkm_id,
    DateTime? updated_at,
  });
}

class _CopyWithImpl$Input$proposal_stream_cursor_value_input<TRes>
    implements CopyWith$Input$proposal_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$proposal_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$proposal_stream_cursor_value_input _instance;

  final TRes Function(Input$proposal_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? proposal_amount = _undefined,
    Object? proposal_approved = _undefined,
    Object? proposal_content = _undefined,
    Object? proposal_date = _undefined,
    Object? proposal_id = _undefined,
    Object? proposal_title = _undefined,
    Object? umkm_id = _undefined,
    Object? updated_at = _undefined,
  }) =>
      _then(Input$proposal_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as int?),
        if (proposal_approved != _undefined)
          'proposal_approved': (proposal_approved as bool?),
        if (proposal_content != _undefined)
          'proposal_content': (proposal_content as String?),
        if (proposal_date != _undefined)
          'proposal_date': (proposal_date as DateTime?),
        if (proposal_id != _undefined) 'proposal_id': (proposal_id as int?),
        if (proposal_title != _undefined)
          'proposal_title': (proposal_title as String?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$proposal_stream_cursor_value_input<TRes>
    implements CopyWith$Input$proposal_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$proposal_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    int? proposal_amount,
    bool? proposal_approved,
    String? proposal_content,
    DateTime? proposal_date,
    int? proposal_id,
    String? proposal_title,
    int? umkm_id,
    DateTime? updated_at,
  }) =>
      _res;
}

class Input$proposal_sum_order_by {
  factory Input$proposal_sum_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_sum_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_sum_order_by._(this._$data);

  factory Input$proposal_sum_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_sum_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_sum_order_by<Input$proposal_sum_order_by>
      get copyWith => CopyWith$Input$proposal_sum_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_sum_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_sum_order_by<TRes> {
  factory CopyWith$Input$proposal_sum_order_by(
    Input$proposal_sum_order_by instance,
    TRes Function(Input$proposal_sum_order_by) then,
  ) = _CopyWithImpl$Input$proposal_sum_order_by;

  factory CopyWith$Input$proposal_sum_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_sum_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_sum_order_by<TRes>
    implements CopyWith$Input$proposal_sum_order_by<TRes> {
  _CopyWithImpl$Input$proposal_sum_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_sum_order_by _instance;

  final TRes Function(Input$proposal_sum_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_sum_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_sum_order_by<TRes>
    implements CopyWith$Input$proposal_sum_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_sum_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$proposal_updates {
  factory Input$proposal_updates({
    Input$proposal_inc_input? $_inc,
    Input$proposal_set_input? $_set,
    required Input$proposal_bool_exp where,
  }) =>
      Input$proposal_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$proposal_updates._(this._$data);

  factory Input$proposal_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$proposal_inc_input.fromJson(
              (l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$proposal_set_input.fromJson(
              (l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$proposal_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$proposal_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$proposal_inc_input? get $_inc =>
      (_$data['_inc'] as Input$proposal_inc_input?);
  Input$proposal_set_input? get $_set =>
      (_$data['_set'] as Input$proposal_set_input?);
  Input$proposal_bool_exp get where =>
      (_$data['where'] as Input$proposal_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$proposal_updates<Input$proposal_updates> get copyWith =>
      CopyWith$Input$proposal_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_updates) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$proposal_updates<TRes> {
  factory CopyWith$Input$proposal_updates(
    Input$proposal_updates instance,
    TRes Function(Input$proposal_updates) then,
  ) = _CopyWithImpl$Input$proposal_updates;

  factory CopyWith$Input$proposal_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_updates;

  TRes call({
    Input$proposal_inc_input? $_inc,
    Input$proposal_set_input? $_set,
    Input$proposal_bool_exp? where,
  });
  CopyWith$Input$proposal_inc_input<TRes> get $_inc;
  CopyWith$Input$proposal_set_input<TRes> get $_set;
  CopyWith$Input$proposal_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$proposal_updates<TRes>
    implements CopyWith$Input$proposal_updates<TRes> {
  _CopyWithImpl$Input$proposal_updates(
    this._instance,
    this._then,
  );

  final Input$proposal_updates _instance;

  final TRes Function(Input$proposal_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$proposal_updates._({
        ..._instance._$data,
        if ($_inc != _undefined) '_inc': ($_inc as Input$proposal_inc_input?),
        if ($_set != _undefined) '_set': ($_set as Input$proposal_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$proposal_bool_exp),
      }));
  CopyWith$Input$proposal_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$proposal_inc_input.stub(_then(_instance))
        : CopyWith$Input$proposal_inc_input(local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$proposal_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$proposal_set_input.stub(_then(_instance))
        : CopyWith$Input$proposal_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$proposal_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$proposal_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$proposal_updates<TRes>
    implements CopyWith$Input$proposal_updates<TRes> {
  _CopyWithStubImpl$Input$proposal_updates(this._res);

  TRes _res;

  call({
    Input$proposal_inc_input? $_inc,
    Input$proposal_set_input? $_set,
    Input$proposal_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$proposal_inc_input<TRes> get $_inc =>
      CopyWith$Input$proposal_inc_input.stub(_res);
  CopyWith$Input$proposal_set_input<TRes> get $_set =>
      CopyWith$Input$proposal_set_input.stub(_res);
  CopyWith$Input$proposal_bool_exp<TRes> get where =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
}

class Input$proposal_var_pop_order_by {
  factory Input$proposal_var_pop_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_var_pop_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_var_pop_order_by._(this._$data);

  factory Input$proposal_var_pop_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_var_pop_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_var_pop_order_by<Input$proposal_var_pop_order_by>
      get copyWith => CopyWith$Input$proposal_var_pop_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_var_pop_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_var_pop_order_by<TRes> {
  factory CopyWith$Input$proposal_var_pop_order_by(
    Input$proposal_var_pop_order_by instance,
    TRes Function(Input$proposal_var_pop_order_by) then,
  ) = _CopyWithImpl$Input$proposal_var_pop_order_by;

  factory CopyWith$Input$proposal_var_pop_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_var_pop_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_var_pop_order_by<TRes>
    implements CopyWith$Input$proposal_var_pop_order_by<TRes> {
  _CopyWithImpl$Input$proposal_var_pop_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_var_pop_order_by _instance;

  final TRes Function(Input$proposal_var_pop_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_var_pop_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_var_pop_order_by<TRes>
    implements CopyWith$Input$proposal_var_pop_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_var_pop_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$proposal_var_samp_order_by {
  factory Input$proposal_var_samp_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_var_samp_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_var_samp_order_by._(this._$data);

  factory Input$proposal_var_samp_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_var_samp_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_var_samp_order_by<Input$proposal_var_samp_order_by>
      get copyWith => CopyWith$Input$proposal_var_samp_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_var_samp_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_var_samp_order_by<TRes> {
  factory CopyWith$Input$proposal_var_samp_order_by(
    Input$proposal_var_samp_order_by instance,
    TRes Function(Input$proposal_var_samp_order_by) then,
  ) = _CopyWithImpl$Input$proposal_var_samp_order_by;

  factory CopyWith$Input$proposal_var_samp_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_var_samp_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_var_samp_order_by<TRes>
    implements CopyWith$Input$proposal_var_samp_order_by<TRes> {
  _CopyWithImpl$Input$proposal_var_samp_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_var_samp_order_by _instance;

  final TRes Function(Input$proposal_var_samp_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_var_samp_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_var_samp_order_by<TRes>
    implements CopyWith$Input$proposal_var_samp_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_var_samp_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$proposal_variance_order_by {
  factory Input$proposal_variance_order_by({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      Input$proposal_variance_order_by._({
        if (proposal_amount != null) r'proposal_amount': proposal_amount,
        if (proposal_id != null) r'proposal_id': proposal_id,
        if (umkm_id != null) r'umkm_id': umkm_id,
      });

  Input$proposal_variance_order_by._(this._$data);

  factory Input$proposal_variance_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('proposal_amount')) {
      final l$proposal_amount = data['proposal_amount'];
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : fromJson$Enum$order_by((l$proposal_amount as String));
    }
    if (data.containsKey('proposal_id')) {
      final l$proposal_id = data['proposal_id'];
      result$data['proposal_id'] = l$proposal_id == null
          ? null
          : fromJson$Enum$order_by((l$proposal_id as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    return Input$proposal_variance_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get proposal_amount =>
      (_$data['proposal_amount'] as Enum$order_by?);
  Enum$order_by? get proposal_id => (_$data['proposal_id'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('proposal_amount')) {
      final l$proposal_amount = proposal_amount;
      result$data['proposal_amount'] = l$proposal_amount == null
          ? null
          : toJson$Enum$order_by(l$proposal_amount);
    }
    if (_$data.containsKey('proposal_id')) {
      final l$proposal_id = proposal_id;
      result$data['proposal_id'] =
          l$proposal_id == null ? null : toJson$Enum$order_by(l$proposal_id);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    return result$data;
  }

  CopyWith$Input$proposal_variance_order_by<Input$proposal_variance_order_by>
      get copyWith => CopyWith$Input$proposal_variance_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$proposal_variance_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$proposal_amount = proposal_amount;
    final lOther$proposal_amount = other.proposal_amount;
    if (_$data.containsKey('proposal_amount') !=
        other._$data.containsKey('proposal_amount')) {
      return false;
    }
    if (l$proposal_amount != lOther$proposal_amount) {
      return false;
    }
    final l$proposal_id = proposal_id;
    final lOther$proposal_id = other.proposal_id;
    if (_$data.containsKey('proposal_id') !=
        other._$data.containsKey('proposal_id')) {
      return false;
    }
    if (l$proposal_id != lOther$proposal_id) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$proposal_amount = proposal_amount;
    final l$proposal_id = proposal_id;
    final l$umkm_id = umkm_id;
    return Object.hashAll([
      _$data.containsKey('proposal_amount') ? l$proposal_amount : const {},
      _$data.containsKey('proposal_id') ? l$proposal_id : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$proposal_variance_order_by<TRes> {
  factory CopyWith$Input$proposal_variance_order_by(
    Input$proposal_variance_order_by instance,
    TRes Function(Input$proposal_variance_order_by) then,
  ) = _CopyWithImpl$Input$proposal_variance_order_by;

  factory CopyWith$Input$proposal_variance_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$proposal_variance_order_by;

  TRes call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  });
}

class _CopyWithImpl$Input$proposal_variance_order_by<TRes>
    implements CopyWith$Input$proposal_variance_order_by<TRes> {
  _CopyWithImpl$Input$proposal_variance_order_by(
    this._instance,
    this._then,
  );

  final Input$proposal_variance_order_by _instance;

  final TRes Function(Input$proposal_variance_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? proposal_amount = _undefined,
    Object? proposal_id = _undefined,
    Object? umkm_id = _undefined,
  }) =>
      _then(Input$proposal_variance_order_by._({
        ..._instance._$data,
        if (proposal_amount != _undefined)
          'proposal_amount': (proposal_amount as Enum$order_by?),
        if (proposal_id != _undefined)
          'proposal_id': (proposal_id as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$proposal_variance_order_by<TRes>
    implements CopyWith$Input$proposal_variance_order_by<TRes> {
  _CopyWithStubImpl$Input$proposal_variance_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? proposal_amount,
    Enum$order_by? proposal_id,
    Enum$order_by? umkm_id,
  }) =>
      _res;
}

class Input$timestamptz_comparison_exp {
  factory Input$timestamptz_comparison_exp({
    DateTime? $_eq,
    DateTime? $_gt,
    DateTime? $_gte,
    List<DateTime>? $_in,
    bool? $_is_null,
    DateTime? $_lt,
    DateTime? $_lte,
    DateTime? $_neq,
    List<DateTime>? $_nin,
  }) =>
      Input$timestamptz_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$timestamptz_comparison_exp._(this._$data);

  factory Input$timestamptz_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] =
          l$$_eq == null ? null : DateTime.parse((l$$_eq as String));
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] =
          l$$_gt == null ? null : DateTime.parse((l$$_gt as String));
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] =
          l$$_gte == null ? null : DateTime.parse((l$$_gte as String));
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] = (l$$_in as List<dynamic>?)
          ?.map((e) => DateTime.parse((e as String)))
          .toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] =
          l$$_lt == null ? null : DateTime.parse((l$$_lt as String));
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] =
          l$$_lte == null ? null : DateTime.parse((l$$_lte as String));
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] =
          l$$_neq == null ? null : DateTime.parse((l$$_neq as String));
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] = (l$$_nin as List<dynamic>?)
          ?.map((e) => DateTime.parse((e as String)))
          .toList();
    }
    return Input$timestamptz_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get $_eq => (_$data['_eq'] as DateTime?);
  DateTime? get $_gt => (_$data['_gt'] as DateTime?);
  DateTime? get $_gte => (_$data['_gte'] as DateTime?);
  List<DateTime>? get $_in => (_$data['_in'] as List<DateTime>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  DateTime? get $_lt => (_$data['_lt'] as DateTime?);
  DateTime? get $_lte => (_$data['_lte'] as DateTime?);
  DateTime? get $_neq => (_$data['_neq'] as DateTime?);
  List<DateTime>? get $_nin => (_$data['_nin'] as List<DateTime>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq?.toIso8601String();
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt?.toIso8601String();
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte?.toIso8601String();
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => e.toIso8601String()).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt?.toIso8601String();
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte?.toIso8601String();
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq?.toIso8601String();
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => e.toIso8601String()).toList();
    }
    return result$data;
  }

  CopyWith$Input$timestamptz_comparison_exp<Input$timestamptz_comparison_exp>
      get copyWith => CopyWith$Input$timestamptz_comparison_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$timestamptz_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$timestamptz_comparison_exp<TRes> {
  factory CopyWith$Input$timestamptz_comparison_exp(
    Input$timestamptz_comparison_exp instance,
    TRes Function(Input$timestamptz_comparison_exp) then,
  ) = _CopyWithImpl$Input$timestamptz_comparison_exp;

  factory CopyWith$Input$timestamptz_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$timestamptz_comparison_exp;

  TRes call({
    DateTime? $_eq,
    DateTime? $_gt,
    DateTime? $_gte,
    List<DateTime>? $_in,
    bool? $_is_null,
    DateTime? $_lt,
    DateTime? $_lte,
    DateTime? $_neq,
    List<DateTime>? $_nin,
  });
}

class _CopyWithImpl$Input$timestamptz_comparison_exp<TRes>
    implements CopyWith$Input$timestamptz_comparison_exp<TRes> {
  _CopyWithImpl$Input$timestamptz_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$timestamptz_comparison_exp _instance;

  final TRes Function(Input$timestamptz_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$timestamptz_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as DateTime?),
        if ($_gt != _undefined) '_gt': ($_gt as DateTime?),
        if ($_gte != _undefined) '_gte': ($_gte as DateTime?),
        if ($_in != _undefined) '_in': ($_in as List<DateTime>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as DateTime?),
        if ($_lte != _undefined) '_lte': ($_lte as DateTime?),
        if ($_neq != _undefined) '_neq': ($_neq as DateTime?),
        if ($_nin != _undefined) '_nin': ($_nin as List<DateTime>?),
      }));
}

class _CopyWithStubImpl$Input$timestamptz_comparison_exp<TRes>
    implements CopyWith$Input$timestamptz_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$timestamptz_comparison_exp(this._res);

  TRes _res;

  call({
    DateTime? $_eq,
    DateTime? $_gt,
    DateTime? $_gte,
    List<DateTime>? $_in,
    bool? $_is_null,
    DateTime? $_lt,
    DateTime? $_lte,
    DateTime? $_neq,
    List<DateTime>? $_nin,
  }) =>
      _res;
}

class Input$umkm_bool_exp {
  factory Input$umkm_bool_exp({
    List<Input$umkm_bool_exp>? $_and,
    Input$umkm_bool_exp? $_not,
    List<Input$umkm_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$payment_due_bool_exp? payment_dues,
    Input$payment_due_aggregate_bool_exp? payment_dues_aggregate,
    Input$proposal_bool_exp? proposals,
    Input$proposal_aggregate_bool_exp? proposals_aggregate,
    Input$String_comparison_exp? umkm_desc,
    Input$Int_comparison_exp? umkm_id,
    Input$String_comparison_exp? umkm_name,
    Input$String_comparison_exp? umkm_performance,
    Input$Int_comparison_exp? umkm_shares,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      Input$umkm_bool_exp._({
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (created_at != null) r'created_at': created_at,
        if (payment_dues != null) r'payment_dues': payment_dues,
        if (payment_dues_aggregate != null)
          r'payment_dues_aggregate': payment_dues_aggregate,
        if (proposals != null) r'proposals': proposals,
        if (proposals_aggregate != null)
          r'proposals_aggregate': proposals_aggregate,
        if (umkm_desc != null) r'umkm_desc': umkm_desc,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (umkm_name != null) r'umkm_name': umkm_name,
        if (umkm_performance != null) r'umkm_performance': umkm_performance,
        if (umkm_shares != null) r'umkm_shares': umkm_shares,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$umkm_bool_exp._(this._$data);

  factory Input$umkm_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$umkm_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$umkm_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$umkm_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$created_at as Map<String, dynamic>));
    }
    if (data.containsKey('payment_dues')) {
      final l$payment_dues = data['payment_dues'];
      result$data['payment_dues'] = l$payment_dues == null
          ? null
          : Input$payment_due_bool_exp.fromJson(
              (l$payment_dues as Map<String, dynamic>));
    }
    if (data.containsKey('payment_dues_aggregate')) {
      final l$payment_dues_aggregate = data['payment_dues_aggregate'];
      result$data['payment_dues_aggregate'] = l$payment_dues_aggregate == null
          ? null
          : Input$payment_due_aggregate_bool_exp.fromJson(
              (l$payment_dues_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('proposals')) {
      final l$proposals = data['proposals'];
      result$data['proposals'] = l$proposals == null
          ? null
          : Input$proposal_bool_exp.fromJson(
              (l$proposals as Map<String, dynamic>));
    }
    if (data.containsKey('proposals_aggregate')) {
      final l$proposals_aggregate = data['proposals_aggregate'];
      result$data['proposals_aggregate'] = l$proposals_aggregate == null
          ? null
          : Input$proposal_aggregate_bool_exp.fromJson(
              (l$proposals_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_desc')) {
      final l$umkm_desc = data['umkm_desc'];
      result$data['umkm_desc'] = l$umkm_desc == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$umkm_desc as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$umkm_id as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_name')) {
      final l$umkm_name = data['umkm_name'];
      result$data['umkm_name'] = l$umkm_name == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$umkm_name as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_performance')) {
      final l$umkm_performance = data['umkm_performance'];
      result$data['umkm_performance'] = l$umkm_performance == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$umkm_performance as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_shares')) {
      final l$umkm_shares = data['umkm_shares'];
      result$data['umkm_shares'] = l$umkm_shares == null
          ? null
          : Input$Int_comparison_exp.fromJson(
              (l$umkm_shares as Map<String, dynamic>));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updated_at as Map<String, dynamic>));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_bool_exp.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : Input$uuid_comparison_exp.fromJson(
              (l$user_id as Map<String, dynamic>));
    }
    return Input$umkm_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$umkm_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$umkm_bool_exp>?);
  Input$umkm_bool_exp? get $_not => (_$data['_not'] as Input$umkm_bool_exp?);
  List<Input$umkm_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$umkm_bool_exp>?);
  Input$timestamptz_comparison_exp? get created_at =>
      (_$data['created_at'] as Input$timestamptz_comparison_exp?);
  Input$payment_due_bool_exp? get payment_dues =>
      (_$data['payment_dues'] as Input$payment_due_bool_exp?);
  Input$payment_due_aggregate_bool_exp? get payment_dues_aggregate =>
      (_$data['payment_dues_aggregate']
          as Input$payment_due_aggregate_bool_exp?);
  Input$proposal_bool_exp? get proposals =>
      (_$data['proposals'] as Input$proposal_bool_exp?);
  Input$proposal_aggregate_bool_exp? get proposals_aggregate =>
      (_$data['proposals_aggregate'] as Input$proposal_aggregate_bool_exp?);
  Input$String_comparison_exp? get umkm_desc =>
      (_$data['umkm_desc'] as Input$String_comparison_exp?);
  Input$Int_comparison_exp? get umkm_id =>
      (_$data['umkm_id'] as Input$Int_comparison_exp?);
  Input$String_comparison_exp? get umkm_name =>
      (_$data['umkm_name'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get umkm_performance =>
      (_$data['umkm_performance'] as Input$String_comparison_exp?);
  Input$Int_comparison_exp? get umkm_shares =>
      (_$data['umkm_shares'] as Input$Int_comparison_exp?);
  Input$timestamptz_comparison_exp? get updated_at =>
      (_$data['updated_at'] as Input$timestamptz_comparison_exp?);
  Input$users_bool_exp? get user => (_$data['user'] as Input$users_bool_exp?);
  Input$uuid_comparison_exp? get user_id =>
      (_$data['user_id'] as Input$uuid_comparison_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toJson();
    }
    if (_$data.containsKey('payment_dues')) {
      final l$payment_dues = payment_dues;
      result$data['payment_dues'] = l$payment_dues?.toJson();
    }
    if (_$data.containsKey('payment_dues_aggregate')) {
      final l$payment_dues_aggregate = payment_dues_aggregate;
      result$data['payment_dues_aggregate'] =
          l$payment_dues_aggregate?.toJson();
    }
    if (_$data.containsKey('proposals')) {
      final l$proposals = proposals;
      result$data['proposals'] = l$proposals?.toJson();
    }
    if (_$data.containsKey('proposals_aggregate')) {
      final l$proposals_aggregate = proposals_aggregate;
      result$data['proposals_aggregate'] = l$proposals_aggregate?.toJson();
    }
    if (_$data.containsKey('umkm_desc')) {
      final l$umkm_desc = umkm_desc;
      result$data['umkm_desc'] = l$umkm_desc?.toJson();
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id?.toJson();
    }
    if (_$data.containsKey('umkm_name')) {
      final l$umkm_name = umkm_name;
      result$data['umkm_name'] = l$umkm_name?.toJson();
    }
    if (_$data.containsKey('umkm_performance')) {
      final l$umkm_performance = umkm_performance;
      result$data['umkm_performance'] = l$umkm_performance?.toJson();
    }
    if (_$data.containsKey('umkm_shares')) {
      final l$umkm_shares = umkm_shares;
      result$data['umkm_shares'] = l$umkm_shares?.toJson();
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toJson();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$umkm_bool_exp<Input$umkm_bool_exp> get copyWith =>
      CopyWith$Input$umkm_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$payment_dues = payment_dues;
    final lOther$payment_dues = other.payment_dues;
    if (_$data.containsKey('payment_dues') !=
        other._$data.containsKey('payment_dues')) {
      return false;
    }
    if (l$payment_dues != lOther$payment_dues) {
      return false;
    }
    final l$payment_dues_aggregate = payment_dues_aggregate;
    final lOther$payment_dues_aggregate = other.payment_dues_aggregate;
    if (_$data.containsKey('payment_dues_aggregate') !=
        other._$data.containsKey('payment_dues_aggregate')) {
      return false;
    }
    if (l$payment_dues_aggregate != lOther$payment_dues_aggregate) {
      return false;
    }
    final l$proposals = proposals;
    final lOther$proposals = other.proposals;
    if (_$data.containsKey('proposals') !=
        other._$data.containsKey('proposals')) {
      return false;
    }
    if (l$proposals != lOther$proposals) {
      return false;
    }
    final l$proposals_aggregate = proposals_aggregate;
    final lOther$proposals_aggregate = other.proposals_aggregate;
    if (_$data.containsKey('proposals_aggregate') !=
        other._$data.containsKey('proposals_aggregate')) {
      return false;
    }
    if (l$proposals_aggregate != lOther$proposals_aggregate) {
      return false;
    }
    final l$umkm_desc = umkm_desc;
    final lOther$umkm_desc = other.umkm_desc;
    if (_$data.containsKey('umkm_desc') !=
        other._$data.containsKey('umkm_desc')) {
      return false;
    }
    if (l$umkm_desc != lOther$umkm_desc) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$umkm_name = umkm_name;
    final lOther$umkm_name = other.umkm_name;
    if (_$data.containsKey('umkm_name') !=
        other._$data.containsKey('umkm_name')) {
      return false;
    }
    if (l$umkm_name != lOther$umkm_name) {
      return false;
    }
    final l$umkm_performance = umkm_performance;
    final lOther$umkm_performance = other.umkm_performance;
    if (_$data.containsKey('umkm_performance') !=
        other._$data.containsKey('umkm_performance')) {
      return false;
    }
    if (l$umkm_performance != lOther$umkm_performance) {
      return false;
    }
    final l$umkm_shares = umkm_shares;
    final lOther$umkm_shares = other.umkm_shares;
    if (_$data.containsKey('umkm_shares') !=
        other._$data.containsKey('umkm_shares')) {
      return false;
    }
    if (l$umkm_shares != lOther$umkm_shares) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$created_at = created_at;
    final l$payment_dues = payment_dues;
    final l$payment_dues_aggregate = payment_dues_aggregate;
    final l$proposals = proposals;
    final l$proposals_aggregate = proposals_aggregate;
    final l$umkm_desc = umkm_desc;
    final l$umkm_id = umkm_id;
    final l$umkm_name = umkm_name;
    final l$umkm_performance = umkm_performance;
    final l$umkm_shares = umkm_shares;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('payment_dues') ? l$payment_dues : const {},
      _$data.containsKey('payment_dues_aggregate')
          ? l$payment_dues_aggregate
          : const {},
      _$data.containsKey('proposals') ? l$proposals : const {},
      _$data.containsKey('proposals_aggregate')
          ? l$proposals_aggregate
          : const {},
      _$data.containsKey('umkm_desc') ? l$umkm_desc : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('umkm_name') ? l$umkm_name : const {},
      _$data.containsKey('umkm_performance') ? l$umkm_performance : const {},
      _$data.containsKey('umkm_shares') ? l$umkm_shares : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_bool_exp<TRes> {
  factory CopyWith$Input$umkm_bool_exp(
    Input$umkm_bool_exp instance,
    TRes Function(Input$umkm_bool_exp) then,
  ) = _CopyWithImpl$Input$umkm_bool_exp;

  factory CopyWith$Input$umkm_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_bool_exp;

  TRes call({
    List<Input$umkm_bool_exp>? $_and,
    Input$umkm_bool_exp? $_not,
    List<Input$umkm_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$payment_due_bool_exp? payment_dues,
    Input$payment_due_aggregate_bool_exp? payment_dues_aggregate,
    Input$proposal_bool_exp? proposals,
    Input$proposal_aggregate_bool_exp? proposals_aggregate,
    Input$String_comparison_exp? umkm_desc,
    Input$Int_comparison_exp? umkm_id,
    Input$String_comparison_exp? umkm_name,
    Input$String_comparison_exp? umkm_performance,
    Input$Int_comparison_exp? umkm_shares,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  });
  TRes $_and(
      Iterable<Input$umkm_bool_exp>? Function(
              Iterable<CopyWith$Input$umkm_bool_exp<Input$umkm_bool_exp>>?)
          _fn);
  CopyWith$Input$umkm_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$umkm_bool_exp>? Function(
              Iterable<CopyWith$Input$umkm_bool_exp<Input$umkm_bool_exp>>?)
          _fn);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at;
  CopyWith$Input$payment_due_bool_exp<TRes> get payment_dues;
  CopyWith$Input$payment_due_aggregate_bool_exp<TRes>
      get payment_dues_aggregate;
  CopyWith$Input$proposal_bool_exp<TRes> get proposals;
  CopyWith$Input$proposal_aggregate_bool_exp<TRes> get proposals_aggregate;
  CopyWith$Input$String_comparison_exp<TRes> get umkm_desc;
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id;
  CopyWith$Input$String_comparison_exp<TRes> get umkm_name;
  CopyWith$Input$String_comparison_exp<TRes> get umkm_performance;
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_shares;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at;
  CopyWith$Input$users_bool_exp<TRes> get user;
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id;
}

class _CopyWithImpl$Input$umkm_bool_exp<TRes>
    implements CopyWith$Input$umkm_bool_exp<TRes> {
  _CopyWithImpl$Input$umkm_bool_exp(
    this._instance,
    this._then,
  );

  final Input$umkm_bool_exp _instance;

  final TRes Function(Input$umkm_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? created_at = _undefined,
    Object? payment_dues = _undefined,
    Object? payment_dues_aggregate = _undefined,
    Object? proposals = _undefined,
    Object? proposals_aggregate = _undefined,
    Object? umkm_desc = _undefined,
    Object? umkm_id = _undefined,
    Object? umkm_name = _undefined,
    Object? umkm_performance = _undefined,
    Object? umkm_shares = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$umkm_bool_exp._({
        ..._instance._$data,
        if ($_and != _undefined) '_and': ($_and as List<Input$umkm_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$umkm_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$umkm_bool_exp>?),
        if (created_at != _undefined)
          'created_at': (created_at as Input$timestamptz_comparison_exp?),
        if (payment_dues != _undefined)
          'payment_dues': (payment_dues as Input$payment_due_bool_exp?),
        if (payment_dues_aggregate != _undefined)
          'payment_dues_aggregate':
              (payment_dues_aggregate as Input$payment_due_aggregate_bool_exp?),
        if (proposals != _undefined)
          'proposals': (proposals as Input$proposal_bool_exp?),
        if (proposals_aggregate != _undefined)
          'proposals_aggregate':
              (proposals_aggregate as Input$proposal_aggregate_bool_exp?),
        if (umkm_desc != _undefined)
          'umkm_desc': (umkm_desc as Input$String_comparison_exp?),
        if (umkm_id != _undefined)
          'umkm_id': (umkm_id as Input$Int_comparison_exp?),
        if (umkm_name != _undefined)
          'umkm_name': (umkm_name as Input$String_comparison_exp?),
        if (umkm_performance != _undefined)
          'umkm_performance':
              (umkm_performance as Input$String_comparison_exp?),
        if (umkm_shares != _undefined)
          'umkm_shares': (umkm_shares as Input$Int_comparison_exp?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Input$timestamptz_comparison_exp?),
        if (user != _undefined) 'user': (user as Input$users_bool_exp?),
        if (user_id != _undefined)
          'user_id': (user_id as Input$uuid_comparison_exp?),
      }));
  TRes $_and(
          Iterable<Input$umkm_bool_exp>? Function(
                  Iterable<CopyWith$Input$umkm_bool_exp<Input$umkm_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$umkm_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$umkm_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$umkm_bool_exp.stub(_then(_instance))
        : CopyWith$Input$umkm_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$umkm_bool_exp>? Function(
                  Iterable<CopyWith$Input$umkm_bool_exp<Input$umkm_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$umkm_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at {
    final local$created_at = _instance.created_at;
    return local$created_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$created_at, (e) => call(created_at: e));
  }

  CopyWith$Input$payment_due_bool_exp<TRes> get payment_dues {
    final local$payment_dues = _instance.payment_dues;
    return local$payment_dues == null
        ? CopyWith$Input$payment_due_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_due_bool_exp(
            local$payment_dues, (e) => call(payment_dues: e));
  }

  CopyWith$Input$payment_due_aggregate_bool_exp<TRes>
      get payment_dues_aggregate {
    final local$payment_dues_aggregate = _instance.payment_dues_aggregate;
    return local$payment_dues_aggregate == null
        ? CopyWith$Input$payment_due_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$payment_due_aggregate_bool_exp(
            local$payment_dues_aggregate,
            (e) => call(payment_dues_aggregate: e));
  }

  CopyWith$Input$proposal_bool_exp<TRes> get proposals {
    final local$proposals = _instance.proposals;
    return local$proposals == null
        ? CopyWith$Input$proposal_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_bool_exp(
            local$proposals, (e) => call(proposals: e));
  }

  CopyWith$Input$proposal_aggregate_bool_exp<TRes> get proposals_aggregate {
    final local$proposals_aggregate = _instance.proposals_aggregate;
    return local$proposals_aggregate == null
        ? CopyWith$Input$proposal_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$proposal_aggregate_bool_exp(
            local$proposals_aggregate, (e) => call(proposals_aggregate: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get umkm_desc {
    final local$umkm_desc = _instance.umkm_desc;
    return local$umkm_desc == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$umkm_desc, (e) => call(umkm_desc: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id {
    final local$umkm_id = _instance.umkm_id;
    return local$umkm_id == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$umkm_id, (e) => call(umkm_id: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get umkm_name {
    final local$umkm_name = _instance.umkm_name;
    return local$umkm_name == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$umkm_name, (e) => call(umkm_name: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get umkm_performance {
    final local$umkm_performance = _instance.umkm_performance;
    return local$umkm_performance == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$umkm_performance, (e) => call(umkm_performance: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get umkm_shares {
    final local$umkm_shares = _instance.umkm_shares;
    return local$umkm_shares == null
        ? CopyWith$Input$Int_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Int_comparison_exp(
            local$umkm_shares, (e) => call(umkm_shares: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at {
    final local$updated_at = _instance.updated_at;
    return local$updated_at == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updated_at, (e) => call(updated_at: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$user, (e) => call(user: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get user_id {
    final local$user_id = _instance.user_id;
    return local$user_id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(
            local$user_id, (e) => call(user_id: e));
  }
}

class _CopyWithStubImpl$Input$umkm_bool_exp<TRes>
    implements CopyWith$Input$umkm_bool_exp<TRes> {
  _CopyWithStubImpl$Input$umkm_bool_exp(this._res);

  TRes _res;

  call({
    List<Input$umkm_bool_exp>? $_and,
    Input$umkm_bool_exp? $_not,
    List<Input$umkm_bool_exp>? $_or,
    Input$timestamptz_comparison_exp? created_at,
    Input$payment_due_bool_exp? payment_dues,
    Input$payment_due_aggregate_bool_exp? payment_dues_aggregate,
    Input$proposal_bool_exp? proposals,
    Input$proposal_aggregate_bool_exp? proposals_aggregate,
    Input$String_comparison_exp? umkm_desc,
    Input$Int_comparison_exp? umkm_id,
    Input$String_comparison_exp? umkm_name,
    Input$String_comparison_exp? umkm_performance,
    Input$Int_comparison_exp? umkm_shares,
    Input$timestamptz_comparison_exp? updated_at,
    Input$users_bool_exp? user,
    Input$uuid_comparison_exp? user_id,
  }) =>
      _res;
  $_and(_fn) => _res;
  CopyWith$Input$umkm_bool_exp<TRes> get $_not =>
      CopyWith$Input$umkm_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get created_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$payment_due_bool_exp<TRes> get payment_dues =>
      CopyWith$Input$payment_due_bool_exp.stub(_res);
  CopyWith$Input$payment_due_aggregate_bool_exp<TRes>
      get payment_dues_aggregate =>
          CopyWith$Input$payment_due_aggregate_bool_exp.stub(_res);
  CopyWith$Input$proposal_bool_exp<TRes> get proposals =>
      CopyWith$Input$proposal_bool_exp.stub(_res);
  CopyWith$Input$proposal_aggregate_bool_exp<TRes> get proposals_aggregate =>
      CopyWith$Input$proposal_aggregate_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get umkm_desc =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_id =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get umkm_name =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get umkm_performance =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get umkm_shares =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updated_at =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get user =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get user_id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
}

class Input$umkm_inc_input {
  factory Input$umkm_inc_input({int? umkm_shares}) => Input$umkm_inc_input._({
        if (umkm_shares != null) r'umkm_shares': umkm_shares,
      });

  Input$umkm_inc_input._(this._$data);

  factory Input$umkm_inc_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('umkm_shares')) {
      final l$umkm_shares = data['umkm_shares'];
      result$data['umkm_shares'] = (l$umkm_shares as int?);
    }
    return Input$umkm_inc_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get umkm_shares => (_$data['umkm_shares'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('umkm_shares')) {
      final l$umkm_shares = umkm_shares;
      result$data['umkm_shares'] = l$umkm_shares;
    }
    return result$data;
  }

  CopyWith$Input$umkm_inc_input<Input$umkm_inc_input> get copyWith =>
      CopyWith$Input$umkm_inc_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_inc_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$umkm_shares = umkm_shares;
    final lOther$umkm_shares = other.umkm_shares;
    if (_$data.containsKey('umkm_shares') !=
        other._$data.containsKey('umkm_shares')) {
      return false;
    }
    if (l$umkm_shares != lOther$umkm_shares) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$umkm_shares = umkm_shares;
    return Object.hashAll(
        [_$data.containsKey('umkm_shares') ? l$umkm_shares : const {}]);
  }
}

abstract class CopyWith$Input$umkm_inc_input<TRes> {
  factory CopyWith$Input$umkm_inc_input(
    Input$umkm_inc_input instance,
    TRes Function(Input$umkm_inc_input) then,
  ) = _CopyWithImpl$Input$umkm_inc_input;

  factory CopyWith$Input$umkm_inc_input.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_inc_input;

  TRes call({int? umkm_shares});
}

class _CopyWithImpl$Input$umkm_inc_input<TRes>
    implements CopyWith$Input$umkm_inc_input<TRes> {
  _CopyWithImpl$Input$umkm_inc_input(
    this._instance,
    this._then,
  );

  final Input$umkm_inc_input _instance;

  final TRes Function(Input$umkm_inc_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? umkm_shares = _undefined}) =>
      _then(Input$umkm_inc_input._({
        ..._instance._$data,
        if (umkm_shares != _undefined) 'umkm_shares': (umkm_shares as int?),
      }));
}

class _CopyWithStubImpl$Input$umkm_inc_input<TRes>
    implements CopyWith$Input$umkm_inc_input<TRes> {
  _CopyWithStubImpl$Input$umkm_inc_input(this._res);

  TRes _res;

  call({int? umkm_shares}) => _res;
}

class Input$umkm_insert_input {
  factory Input$umkm_insert_input({
    DateTime? created_at,
    Input$payment_due_arr_rel_insert_input? payment_dues,
    Input$proposal_arr_rel_insert_input? proposals,
    String? umkm_desc,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      Input$umkm_insert_input._({
        if (created_at != null) r'created_at': created_at,
        if (payment_dues != null) r'payment_dues': payment_dues,
        if (proposals != null) r'proposals': proposals,
        if (umkm_desc != null) r'umkm_desc': umkm_desc,
        if (umkm_name != null) r'umkm_name': umkm_name,
        if (umkm_performance != null) r'umkm_performance': umkm_performance,
        if (umkm_shares != null) r'umkm_shares': umkm_shares,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$umkm_insert_input._(this._$data);

  factory Input$umkm_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('payment_dues')) {
      final l$payment_dues = data['payment_dues'];
      result$data['payment_dues'] = l$payment_dues == null
          ? null
          : Input$payment_due_arr_rel_insert_input.fromJson(
              (l$payment_dues as Map<String, dynamic>));
    }
    if (data.containsKey('proposals')) {
      final l$proposals = data['proposals'];
      result$data['proposals'] = l$proposals == null
          ? null
          : Input$proposal_arr_rel_insert_input.fromJson(
              (l$proposals as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_desc')) {
      final l$umkm_desc = data['umkm_desc'];
      result$data['umkm_desc'] = (l$umkm_desc as String?);
    }
    if (data.containsKey('umkm_name')) {
      final l$umkm_name = data['umkm_name'];
      result$data['umkm_name'] = (l$umkm_name as String?);
    }
    if (data.containsKey('umkm_performance')) {
      final l$umkm_performance = data['umkm_performance'];
      result$data['umkm_performance'] = (l$umkm_performance as String?);
    }
    if (data.containsKey('umkm_shares')) {
      final l$umkm_shares = data['umkm_shares'];
      result$data['umkm_shares'] = (l$umkm_shares as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_obj_rel_insert_input.fromJson(
              (l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$umkm_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  Input$payment_due_arr_rel_insert_input? get payment_dues =>
      (_$data['payment_dues'] as Input$payment_due_arr_rel_insert_input?);
  Input$proposal_arr_rel_insert_input? get proposals =>
      (_$data['proposals'] as Input$proposal_arr_rel_insert_input?);
  String? get umkm_desc => (_$data['umkm_desc'] as String?);
  String? get umkm_name => (_$data['umkm_name'] as String?);
  String? get umkm_performance => (_$data['umkm_performance'] as String?);
  int? get umkm_shares => (_$data['umkm_shares'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  Input$users_obj_rel_insert_input? get user =>
      (_$data['user'] as Input$users_obj_rel_insert_input?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('payment_dues')) {
      final l$payment_dues = payment_dues;
      result$data['payment_dues'] = l$payment_dues?.toJson();
    }
    if (_$data.containsKey('proposals')) {
      final l$proposals = proposals;
      result$data['proposals'] = l$proposals?.toJson();
    }
    if (_$data.containsKey('umkm_desc')) {
      final l$umkm_desc = umkm_desc;
      result$data['umkm_desc'] = l$umkm_desc;
    }
    if (_$data.containsKey('umkm_name')) {
      final l$umkm_name = umkm_name;
      result$data['umkm_name'] = l$umkm_name;
    }
    if (_$data.containsKey('umkm_performance')) {
      final l$umkm_performance = umkm_performance;
      result$data['umkm_performance'] = l$umkm_performance;
    }
    if (_$data.containsKey('umkm_shares')) {
      final l$umkm_shares = umkm_shares;
      result$data['umkm_shares'] = l$umkm_shares;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$umkm_insert_input<Input$umkm_insert_input> get copyWith =>
      CopyWith$Input$umkm_insert_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$payment_dues = payment_dues;
    final lOther$payment_dues = other.payment_dues;
    if (_$data.containsKey('payment_dues') !=
        other._$data.containsKey('payment_dues')) {
      return false;
    }
    if (l$payment_dues != lOther$payment_dues) {
      return false;
    }
    final l$proposals = proposals;
    final lOther$proposals = other.proposals;
    if (_$data.containsKey('proposals') !=
        other._$data.containsKey('proposals')) {
      return false;
    }
    if (l$proposals != lOther$proposals) {
      return false;
    }
    final l$umkm_desc = umkm_desc;
    final lOther$umkm_desc = other.umkm_desc;
    if (_$data.containsKey('umkm_desc') !=
        other._$data.containsKey('umkm_desc')) {
      return false;
    }
    if (l$umkm_desc != lOther$umkm_desc) {
      return false;
    }
    final l$umkm_name = umkm_name;
    final lOther$umkm_name = other.umkm_name;
    if (_$data.containsKey('umkm_name') !=
        other._$data.containsKey('umkm_name')) {
      return false;
    }
    if (l$umkm_name != lOther$umkm_name) {
      return false;
    }
    final l$umkm_performance = umkm_performance;
    final lOther$umkm_performance = other.umkm_performance;
    if (_$data.containsKey('umkm_performance') !=
        other._$data.containsKey('umkm_performance')) {
      return false;
    }
    if (l$umkm_performance != lOther$umkm_performance) {
      return false;
    }
    final l$umkm_shares = umkm_shares;
    final lOther$umkm_shares = other.umkm_shares;
    if (_$data.containsKey('umkm_shares') !=
        other._$data.containsKey('umkm_shares')) {
      return false;
    }
    if (l$umkm_shares != lOther$umkm_shares) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$payment_dues = payment_dues;
    final l$proposals = proposals;
    final l$umkm_desc = umkm_desc;
    final l$umkm_name = umkm_name;
    final l$umkm_performance = umkm_performance;
    final l$umkm_shares = umkm_shares;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('payment_dues') ? l$payment_dues : const {},
      _$data.containsKey('proposals') ? l$proposals : const {},
      _$data.containsKey('umkm_desc') ? l$umkm_desc : const {},
      _$data.containsKey('umkm_name') ? l$umkm_name : const {},
      _$data.containsKey('umkm_performance') ? l$umkm_performance : const {},
      _$data.containsKey('umkm_shares') ? l$umkm_shares : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_insert_input<TRes> {
  factory CopyWith$Input$umkm_insert_input(
    Input$umkm_insert_input instance,
    TRes Function(Input$umkm_insert_input) then,
  ) = _CopyWithImpl$Input$umkm_insert_input;

  factory CopyWith$Input$umkm_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_insert_input;

  TRes call({
    DateTime? created_at,
    Input$payment_due_arr_rel_insert_input? payment_dues,
    Input$proposal_arr_rel_insert_input? proposals,
    String? umkm_desc,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  });
  CopyWith$Input$payment_due_arr_rel_insert_input<TRes> get payment_dues;
  CopyWith$Input$proposal_arr_rel_insert_input<TRes> get proposals;
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user;
}

class _CopyWithImpl$Input$umkm_insert_input<TRes>
    implements CopyWith$Input$umkm_insert_input<TRes> {
  _CopyWithImpl$Input$umkm_insert_input(
    this._instance,
    this._then,
  );

  final Input$umkm_insert_input _instance;

  final TRes Function(Input$umkm_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? payment_dues = _undefined,
    Object? proposals = _undefined,
    Object? umkm_desc = _undefined,
    Object? umkm_name = _undefined,
    Object? umkm_performance = _undefined,
    Object? umkm_shares = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$umkm_insert_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (payment_dues != _undefined)
          'payment_dues':
              (payment_dues as Input$payment_due_arr_rel_insert_input?),
        if (proposals != _undefined)
          'proposals': (proposals as Input$proposal_arr_rel_insert_input?),
        if (umkm_desc != _undefined) 'umkm_desc': (umkm_desc as String?),
        if (umkm_name != _undefined) 'umkm_name': (umkm_name as String?),
        if (umkm_performance != _undefined)
          'umkm_performance': (umkm_performance as String?),
        if (umkm_shares != _undefined) 'umkm_shares': (umkm_shares as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user != _undefined)
          'user': (user as Input$users_obj_rel_insert_input?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
  CopyWith$Input$payment_due_arr_rel_insert_input<TRes> get payment_dues {
    final local$payment_dues = _instance.payment_dues;
    return local$payment_dues == null
        ? CopyWith$Input$payment_due_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$payment_due_arr_rel_insert_input(
            local$payment_dues, (e) => call(payment_dues: e));
  }

  CopyWith$Input$proposal_arr_rel_insert_input<TRes> get proposals {
    final local$proposals = _instance.proposals;
    return local$proposals == null
        ? CopyWith$Input$proposal_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$proposal_arr_rel_insert_input(
            local$proposals, (e) => call(proposals: e));
  }

  CopyWith$Input$users_obj_rel_insert_input<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$users_obj_rel_insert_input(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$umkm_insert_input<TRes>
    implements CopyWith$Input$umkm_insert_input<TRes> {
  _CopyWithStubImpl$Input$umkm_insert_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    Input$payment_due_arr_rel_insert_input? payment_dues,
    Input$proposal_arr_rel_insert_input? proposals,
    String? umkm_desc,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    Input$users_obj_rel_insert_input? user,
    UUID? user_id,
  }) =>
      _res;
  CopyWith$Input$payment_due_arr_rel_insert_input<TRes> get payment_dues =>
      CopyWith$Input$payment_due_arr_rel_insert_input.stub(_res);
  CopyWith$Input$proposal_arr_rel_insert_input<TRes> get proposals =>
      CopyWith$Input$proposal_arr_rel_insert_input.stub(_res);
  CopyWith$Input$users_obj_rel_insert_input<TRes> get user =>
      CopyWith$Input$users_obj_rel_insert_input.stub(_res);
}

class Input$umkm_obj_rel_insert_input {
  factory Input$umkm_obj_rel_insert_input({
    required Input$umkm_insert_input data,
    Input$umkm_on_conflict? on_conflict,
  }) =>
      Input$umkm_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$umkm_obj_rel_insert_input._(this._$data);

  factory Input$umkm_obj_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$umkm_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$umkm_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$umkm_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$umkm_insert_input get data =>
      (_$data['data'] as Input$umkm_insert_input);
  Input$umkm_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$umkm_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$umkm_obj_rel_insert_input<Input$umkm_obj_rel_insert_input>
      get copyWith => CopyWith$Input$umkm_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$umkm_obj_rel_insert_input(
    Input$umkm_obj_rel_insert_input instance,
    TRes Function(Input$umkm_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$umkm_obj_rel_insert_input;

  factory CopyWith$Input$umkm_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_obj_rel_insert_input;

  TRes call({
    Input$umkm_insert_input? data,
    Input$umkm_on_conflict? on_conflict,
  });
  CopyWith$Input$umkm_insert_input<TRes> get data;
  CopyWith$Input$umkm_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$umkm_obj_rel_insert_input<TRes>
    implements CopyWith$Input$umkm_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$umkm_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$umkm_obj_rel_insert_input _instance;

  final TRes Function(Input$umkm_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$umkm_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$umkm_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$umkm_on_conflict?),
      }));
  CopyWith$Input$umkm_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$umkm_insert_input(local$data, (e) => call(data: e));
  }

  CopyWith$Input$umkm_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$umkm_on_conflict.stub(_then(_instance))
        : CopyWith$Input$umkm_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$umkm_obj_rel_insert_input<TRes>
    implements CopyWith$Input$umkm_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$umkm_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$umkm_insert_input? data,
    Input$umkm_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$umkm_insert_input<TRes> get data =>
      CopyWith$Input$umkm_insert_input.stub(_res);
  CopyWith$Input$umkm_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$umkm_on_conflict.stub(_res);
}

class Input$umkm_on_conflict {
  factory Input$umkm_on_conflict({
    required Enum$umkm_constraint constraint,
    required List<Enum$umkm_update_column> update_columns,
    Input$umkm_bool_exp? where,
  }) =>
      Input$umkm_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$umkm_on_conflict._(this._$data);

  factory Input$umkm_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$umkm_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$umkm_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$umkm_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$umkm_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$umkm_constraint get constraint =>
      (_$data['constraint'] as Enum$umkm_constraint);
  List<Enum$umkm_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$umkm_update_column>);
  Input$umkm_bool_exp? get where => (_$data['where'] as Input$umkm_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$umkm_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] =
        l$update_columns.map((e) => toJson$Enum$umkm_update_column(e)).toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$umkm_on_conflict<Input$umkm_on_conflict> get copyWith =>
      CopyWith$Input$umkm_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_on_conflict<TRes> {
  factory CopyWith$Input$umkm_on_conflict(
    Input$umkm_on_conflict instance,
    TRes Function(Input$umkm_on_conflict) then,
  ) = _CopyWithImpl$Input$umkm_on_conflict;

  factory CopyWith$Input$umkm_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_on_conflict;

  TRes call({
    Enum$umkm_constraint? constraint,
    List<Enum$umkm_update_column>? update_columns,
    Input$umkm_bool_exp? where,
  });
  CopyWith$Input$umkm_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$umkm_on_conflict<TRes>
    implements CopyWith$Input$umkm_on_conflict<TRes> {
  _CopyWithImpl$Input$umkm_on_conflict(
    this._instance,
    this._then,
  );

  final Input$umkm_on_conflict _instance;

  final TRes Function(Input$umkm_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$umkm_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$umkm_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns as List<Enum$umkm_update_column>),
        if (where != _undefined) 'where': (where as Input$umkm_bool_exp?),
      }));
  CopyWith$Input$umkm_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$umkm_bool_exp.stub(_then(_instance))
        : CopyWith$Input$umkm_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$umkm_on_conflict<TRes>
    implements CopyWith$Input$umkm_on_conflict<TRes> {
  _CopyWithStubImpl$Input$umkm_on_conflict(this._res);

  TRes _res;

  call({
    Enum$umkm_constraint? constraint,
    List<Enum$umkm_update_column>? update_columns,
    Input$umkm_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$umkm_bool_exp<TRes> get where =>
      CopyWith$Input$umkm_bool_exp.stub(_res);
}

class Input$umkm_order_by {
  factory Input$umkm_order_by({
    Enum$order_by? created_at,
    Input$payment_due_aggregate_order_by? payment_dues_aggregate,
    Input$proposal_aggregate_order_by? proposals_aggregate,
    Enum$order_by? umkm_desc,
    Enum$order_by? umkm_id,
    Enum$order_by? umkm_name,
    Enum$order_by? umkm_performance,
    Enum$order_by? umkm_shares,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      Input$umkm_order_by._({
        if (created_at != null) r'created_at': created_at,
        if (payment_dues_aggregate != null)
          r'payment_dues_aggregate': payment_dues_aggregate,
        if (proposals_aggregate != null)
          r'proposals_aggregate': proposals_aggregate,
        if (umkm_desc != null) r'umkm_desc': umkm_desc,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (umkm_name != null) r'umkm_name': umkm_name,
        if (umkm_performance != null) r'umkm_performance': umkm_performance,
        if (umkm_shares != null) r'umkm_shares': umkm_shares,
        if (updated_at != null) r'updated_at': updated_at,
        if (user != null) r'user': user,
        if (user_id != null) r'user_id': user_id,
      });

  Input$umkm_order_by._(this._$data);

  factory Input$umkm_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : fromJson$Enum$order_by((l$created_at as String));
    }
    if (data.containsKey('payment_dues_aggregate')) {
      final l$payment_dues_aggregate = data['payment_dues_aggregate'];
      result$data['payment_dues_aggregate'] = l$payment_dues_aggregate == null
          ? null
          : Input$payment_due_aggregate_order_by.fromJson(
              (l$payment_dues_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('proposals_aggregate')) {
      final l$proposals_aggregate = data['proposals_aggregate'];
      result$data['proposals_aggregate'] = l$proposals_aggregate == null
          ? null
          : Input$proposal_aggregate_order_by.fromJson(
              (l$proposals_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('umkm_desc')) {
      final l$umkm_desc = data['umkm_desc'];
      result$data['umkm_desc'] = l$umkm_desc == null
          ? null
          : fromJson$Enum$order_by((l$umkm_desc as String));
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = l$umkm_id == null
          ? null
          : fromJson$Enum$order_by((l$umkm_id as String));
    }
    if (data.containsKey('umkm_name')) {
      final l$umkm_name = data['umkm_name'];
      result$data['umkm_name'] = l$umkm_name == null
          ? null
          : fromJson$Enum$order_by((l$umkm_name as String));
    }
    if (data.containsKey('umkm_performance')) {
      final l$umkm_performance = data['umkm_performance'];
      result$data['umkm_performance'] = l$umkm_performance == null
          ? null
          : fromJson$Enum$order_by((l$umkm_performance as String));
    }
    if (data.containsKey('umkm_shares')) {
      final l$umkm_shares = data['umkm_shares'];
      result$data['umkm_shares'] = l$umkm_shares == null
          ? null
          : fromJson$Enum$order_by((l$umkm_shares as String));
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : fromJson$Enum$order_by((l$updated_at as String));
    }
    if (data.containsKey('user')) {
      final l$user = data['user'];
      result$data['user'] = l$user == null
          ? null
          : Input$users_order_by.fromJson((l$user as Map<String, dynamic>));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] = l$user_id == null
          ? null
          : fromJson$Enum$order_by((l$user_id as String));
    }
    return Input$umkm_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get created_at => (_$data['created_at'] as Enum$order_by?);
  Input$payment_due_aggregate_order_by? get payment_dues_aggregate =>
      (_$data['payment_dues_aggregate']
          as Input$payment_due_aggregate_order_by?);
  Input$proposal_aggregate_order_by? get proposals_aggregate =>
      (_$data['proposals_aggregate'] as Input$proposal_aggregate_order_by?);
  Enum$order_by? get umkm_desc => (_$data['umkm_desc'] as Enum$order_by?);
  Enum$order_by? get umkm_id => (_$data['umkm_id'] as Enum$order_by?);
  Enum$order_by? get umkm_name => (_$data['umkm_name'] as Enum$order_by?);
  Enum$order_by? get umkm_performance =>
      (_$data['umkm_performance'] as Enum$order_by?);
  Enum$order_by? get umkm_shares => (_$data['umkm_shares'] as Enum$order_by?);
  Enum$order_by? get updated_at => (_$data['updated_at'] as Enum$order_by?);
  Input$users_order_by? get user => (_$data['user'] as Input$users_order_by?);
  Enum$order_by? get user_id => (_$data['user_id'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] =
          l$created_at == null ? null : toJson$Enum$order_by(l$created_at);
    }
    if (_$data.containsKey('payment_dues_aggregate')) {
      final l$payment_dues_aggregate = payment_dues_aggregate;
      result$data['payment_dues_aggregate'] =
          l$payment_dues_aggregate?.toJson();
    }
    if (_$data.containsKey('proposals_aggregate')) {
      final l$proposals_aggregate = proposals_aggregate;
      result$data['proposals_aggregate'] = l$proposals_aggregate?.toJson();
    }
    if (_$data.containsKey('umkm_desc')) {
      final l$umkm_desc = umkm_desc;
      result$data['umkm_desc'] =
          l$umkm_desc == null ? null : toJson$Enum$order_by(l$umkm_desc);
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] =
          l$umkm_id == null ? null : toJson$Enum$order_by(l$umkm_id);
    }
    if (_$data.containsKey('umkm_name')) {
      final l$umkm_name = umkm_name;
      result$data['umkm_name'] =
          l$umkm_name == null ? null : toJson$Enum$order_by(l$umkm_name);
    }
    if (_$data.containsKey('umkm_performance')) {
      final l$umkm_performance = umkm_performance;
      result$data['umkm_performance'] = l$umkm_performance == null
          ? null
          : toJson$Enum$order_by(l$umkm_performance);
    }
    if (_$data.containsKey('umkm_shares')) {
      final l$umkm_shares = umkm_shares;
      result$data['umkm_shares'] =
          l$umkm_shares == null ? null : toJson$Enum$order_by(l$umkm_shares);
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] =
          l$updated_at == null ? null : toJson$Enum$order_by(l$updated_at);
    }
    if (_$data.containsKey('user')) {
      final l$user = user;
      result$data['user'] = l$user?.toJson();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] =
          l$user_id == null ? null : toJson$Enum$order_by(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$umkm_order_by<Input$umkm_order_by> get copyWith =>
      CopyWith$Input$umkm_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$payment_dues_aggregate = payment_dues_aggregate;
    final lOther$payment_dues_aggregate = other.payment_dues_aggregate;
    if (_$data.containsKey('payment_dues_aggregate') !=
        other._$data.containsKey('payment_dues_aggregate')) {
      return false;
    }
    if (l$payment_dues_aggregate != lOther$payment_dues_aggregate) {
      return false;
    }
    final l$proposals_aggregate = proposals_aggregate;
    final lOther$proposals_aggregate = other.proposals_aggregate;
    if (_$data.containsKey('proposals_aggregate') !=
        other._$data.containsKey('proposals_aggregate')) {
      return false;
    }
    if (l$proposals_aggregate != lOther$proposals_aggregate) {
      return false;
    }
    final l$umkm_desc = umkm_desc;
    final lOther$umkm_desc = other.umkm_desc;
    if (_$data.containsKey('umkm_desc') !=
        other._$data.containsKey('umkm_desc')) {
      return false;
    }
    if (l$umkm_desc != lOther$umkm_desc) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$umkm_name = umkm_name;
    final lOther$umkm_name = other.umkm_name;
    if (_$data.containsKey('umkm_name') !=
        other._$data.containsKey('umkm_name')) {
      return false;
    }
    if (l$umkm_name != lOther$umkm_name) {
      return false;
    }
    final l$umkm_performance = umkm_performance;
    final lOther$umkm_performance = other.umkm_performance;
    if (_$data.containsKey('umkm_performance') !=
        other._$data.containsKey('umkm_performance')) {
      return false;
    }
    if (l$umkm_performance != lOther$umkm_performance) {
      return false;
    }
    final l$umkm_shares = umkm_shares;
    final lOther$umkm_shares = other.umkm_shares;
    if (_$data.containsKey('umkm_shares') !=
        other._$data.containsKey('umkm_shares')) {
      return false;
    }
    if (l$umkm_shares != lOther$umkm_shares) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (_$data.containsKey('user') != other._$data.containsKey('user')) {
      return false;
    }
    if (l$user != lOther$user) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$payment_dues_aggregate = payment_dues_aggregate;
    final l$proposals_aggregate = proposals_aggregate;
    final l$umkm_desc = umkm_desc;
    final l$umkm_id = umkm_id;
    final l$umkm_name = umkm_name;
    final l$umkm_performance = umkm_performance;
    final l$umkm_shares = umkm_shares;
    final l$updated_at = updated_at;
    final l$user = user;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('payment_dues_aggregate')
          ? l$payment_dues_aggregate
          : const {},
      _$data.containsKey('proposals_aggregate')
          ? l$proposals_aggregate
          : const {},
      _$data.containsKey('umkm_desc') ? l$umkm_desc : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('umkm_name') ? l$umkm_name : const {},
      _$data.containsKey('umkm_performance') ? l$umkm_performance : const {},
      _$data.containsKey('umkm_shares') ? l$umkm_shares : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user') ? l$user : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_order_by<TRes> {
  factory CopyWith$Input$umkm_order_by(
    Input$umkm_order_by instance,
    TRes Function(Input$umkm_order_by) then,
  ) = _CopyWithImpl$Input$umkm_order_by;

  factory CopyWith$Input$umkm_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_order_by;

  TRes call({
    Enum$order_by? created_at,
    Input$payment_due_aggregate_order_by? payment_dues_aggregate,
    Input$proposal_aggregate_order_by? proposals_aggregate,
    Enum$order_by? umkm_desc,
    Enum$order_by? umkm_id,
    Enum$order_by? umkm_name,
    Enum$order_by? umkm_performance,
    Enum$order_by? umkm_shares,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  });
  CopyWith$Input$payment_due_aggregate_order_by<TRes>
      get payment_dues_aggregate;
  CopyWith$Input$proposal_aggregate_order_by<TRes> get proposals_aggregate;
  CopyWith$Input$users_order_by<TRes> get user;
}

class _CopyWithImpl$Input$umkm_order_by<TRes>
    implements CopyWith$Input$umkm_order_by<TRes> {
  _CopyWithImpl$Input$umkm_order_by(
    this._instance,
    this._then,
  );

  final Input$umkm_order_by _instance;

  final TRes Function(Input$umkm_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? payment_dues_aggregate = _undefined,
    Object? proposals_aggregate = _undefined,
    Object? umkm_desc = _undefined,
    Object? umkm_id = _undefined,
    Object? umkm_name = _undefined,
    Object? umkm_performance = _undefined,
    Object? umkm_shares = _undefined,
    Object? updated_at = _undefined,
    Object? user = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$umkm_order_by._({
        ..._instance._$data,
        if (created_at != _undefined)
          'created_at': (created_at as Enum$order_by?),
        if (payment_dues_aggregate != _undefined)
          'payment_dues_aggregate':
              (payment_dues_aggregate as Input$payment_due_aggregate_order_by?),
        if (proposals_aggregate != _undefined)
          'proposals_aggregate':
              (proposals_aggregate as Input$proposal_aggregate_order_by?),
        if (umkm_desc != _undefined) 'umkm_desc': (umkm_desc as Enum$order_by?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as Enum$order_by?),
        if (umkm_name != _undefined) 'umkm_name': (umkm_name as Enum$order_by?),
        if (umkm_performance != _undefined)
          'umkm_performance': (umkm_performance as Enum$order_by?),
        if (umkm_shares != _undefined)
          'umkm_shares': (umkm_shares as Enum$order_by?),
        if (updated_at != _undefined)
          'updated_at': (updated_at as Enum$order_by?),
        if (user != _undefined) 'user': (user as Input$users_order_by?),
        if (user_id != _undefined) 'user_id': (user_id as Enum$order_by?),
      }));
  CopyWith$Input$payment_due_aggregate_order_by<TRes>
      get payment_dues_aggregate {
    final local$payment_dues_aggregate = _instance.payment_dues_aggregate;
    return local$payment_dues_aggregate == null
        ? CopyWith$Input$payment_due_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$payment_due_aggregate_order_by(
            local$payment_dues_aggregate,
            (e) => call(payment_dues_aggregate: e));
  }

  CopyWith$Input$proposal_aggregate_order_by<TRes> get proposals_aggregate {
    final local$proposals_aggregate = _instance.proposals_aggregate;
    return local$proposals_aggregate == null
        ? CopyWith$Input$proposal_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$proposal_aggregate_order_by(
            local$proposals_aggregate, (e) => call(proposals_aggregate: e));
  }

  CopyWith$Input$users_order_by<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Input$users_order_by.stub(_then(_instance))
        : CopyWith$Input$users_order_by(local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Input$umkm_order_by<TRes>
    implements CopyWith$Input$umkm_order_by<TRes> {
  _CopyWithStubImpl$Input$umkm_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? created_at,
    Input$payment_due_aggregate_order_by? payment_dues_aggregate,
    Input$proposal_aggregate_order_by? proposals_aggregate,
    Enum$order_by? umkm_desc,
    Enum$order_by? umkm_id,
    Enum$order_by? umkm_name,
    Enum$order_by? umkm_performance,
    Enum$order_by? umkm_shares,
    Enum$order_by? updated_at,
    Input$users_order_by? user,
    Enum$order_by? user_id,
  }) =>
      _res;
  CopyWith$Input$payment_due_aggregate_order_by<TRes>
      get payment_dues_aggregate =>
          CopyWith$Input$payment_due_aggregate_order_by.stub(_res);
  CopyWith$Input$proposal_aggregate_order_by<TRes> get proposals_aggregate =>
      CopyWith$Input$proposal_aggregate_order_by.stub(_res);
  CopyWith$Input$users_order_by<TRes> get user =>
      CopyWith$Input$users_order_by.stub(_res);
}

class Input$umkm_pk_columns_input {
  factory Input$umkm_pk_columns_input({required int umkm_id}) =>
      Input$umkm_pk_columns_input._({
        r'umkm_id': umkm_id,
      });

  Input$umkm_pk_columns_input._(this._$data);

  factory Input$umkm_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$umkm_id = data['umkm_id'];
    result$data['umkm_id'] = (l$umkm_id as int);
    return Input$umkm_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int get umkm_id => (_$data['umkm_id'] as int);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$umkm_id = umkm_id;
    result$data['umkm_id'] = l$umkm_id;
    return result$data;
  }

  CopyWith$Input$umkm_pk_columns_input<Input$umkm_pk_columns_input>
      get copyWith => CopyWith$Input$umkm_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$umkm_id = umkm_id;
    return Object.hashAll([l$umkm_id]);
  }
}

abstract class CopyWith$Input$umkm_pk_columns_input<TRes> {
  factory CopyWith$Input$umkm_pk_columns_input(
    Input$umkm_pk_columns_input instance,
    TRes Function(Input$umkm_pk_columns_input) then,
  ) = _CopyWithImpl$Input$umkm_pk_columns_input;

  factory CopyWith$Input$umkm_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_pk_columns_input;

  TRes call({int? umkm_id});
}

class _CopyWithImpl$Input$umkm_pk_columns_input<TRes>
    implements CopyWith$Input$umkm_pk_columns_input<TRes> {
  _CopyWithImpl$Input$umkm_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$umkm_pk_columns_input _instance;

  final TRes Function(Input$umkm_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? umkm_id = _undefined}) =>
      _then(Input$umkm_pk_columns_input._({
        ..._instance._$data,
        if (umkm_id != _undefined && umkm_id != null)
          'umkm_id': (umkm_id as int),
      }));
}

class _CopyWithStubImpl$Input$umkm_pk_columns_input<TRes>
    implements CopyWith$Input$umkm_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$umkm_pk_columns_input(this._res);

  TRes _res;

  call({int? umkm_id}) => _res;
}

class Input$umkm_set_input {
  factory Input$umkm_set_input({
    DateTime? created_at,
    String? umkm_desc,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$umkm_set_input._({
        if (created_at != null) r'created_at': created_at,
        if (umkm_desc != null) r'umkm_desc': umkm_desc,
        if (umkm_name != null) r'umkm_name': umkm_name,
        if (umkm_performance != null) r'umkm_performance': umkm_performance,
        if (umkm_shares != null) r'umkm_shares': umkm_shares,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$umkm_set_input._(this._$data);

  factory Input$umkm_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('umkm_desc')) {
      final l$umkm_desc = data['umkm_desc'];
      result$data['umkm_desc'] = (l$umkm_desc as String?);
    }
    if (data.containsKey('umkm_name')) {
      final l$umkm_name = data['umkm_name'];
      result$data['umkm_name'] = (l$umkm_name as String?);
    }
    if (data.containsKey('umkm_performance')) {
      final l$umkm_performance = data['umkm_performance'];
      result$data['umkm_performance'] = (l$umkm_performance as String?);
    }
    if (data.containsKey('umkm_shares')) {
      final l$umkm_shares = data['umkm_shares'];
      result$data['umkm_shares'] = (l$umkm_shares as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$umkm_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  String? get umkm_desc => (_$data['umkm_desc'] as String?);
  String? get umkm_name => (_$data['umkm_name'] as String?);
  String? get umkm_performance => (_$data['umkm_performance'] as String?);
  int? get umkm_shares => (_$data['umkm_shares'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('umkm_desc')) {
      final l$umkm_desc = umkm_desc;
      result$data['umkm_desc'] = l$umkm_desc;
    }
    if (_$data.containsKey('umkm_name')) {
      final l$umkm_name = umkm_name;
      result$data['umkm_name'] = l$umkm_name;
    }
    if (_$data.containsKey('umkm_performance')) {
      final l$umkm_performance = umkm_performance;
      result$data['umkm_performance'] = l$umkm_performance;
    }
    if (_$data.containsKey('umkm_shares')) {
      final l$umkm_shares = umkm_shares;
      result$data['umkm_shares'] = l$umkm_shares;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$umkm_set_input<Input$umkm_set_input> get copyWith =>
      CopyWith$Input$umkm_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_set_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$umkm_desc = umkm_desc;
    final lOther$umkm_desc = other.umkm_desc;
    if (_$data.containsKey('umkm_desc') !=
        other._$data.containsKey('umkm_desc')) {
      return false;
    }
    if (l$umkm_desc != lOther$umkm_desc) {
      return false;
    }
    final l$umkm_name = umkm_name;
    final lOther$umkm_name = other.umkm_name;
    if (_$data.containsKey('umkm_name') !=
        other._$data.containsKey('umkm_name')) {
      return false;
    }
    if (l$umkm_name != lOther$umkm_name) {
      return false;
    }
    final l$umkm_performance = umkm_performance;
    final lOther$umkm_performance = other.umkm_performance;
    if (_$data.containsKey('umkm_performance') !=
        other._$data.containsKey('umkm_performance')) {
      return false;
    }
    if (l$umkm_performance != lOther$umkm_performance) {
      return false;
    }
    final l$umkm_shares = umkm_shares;
    final lOther$umkm_shares = other.umkm_shares;
    if (_$data.containsKey('umkm_shares') !=
        other._$data.containsKey('umkm_shares')) {
      return false;
    }
    if (l$umkm_shares != lOther$umkm_shares) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$umkm_desc = umkm_desc;
    final l$umkm_name = umkm_name;
    final l$umkm_performance = umkm_performance;
    final l$umkm_shares = umkm_shares;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('umkm_desc') ? l$umkm_desc : const {},
      _$data.containsKey('umkm_name') ? l$umkm_name : const {},
      _$data.containsKey('umkm_performance') ? l$umkm_performance : const {},
      _$data.containsKey('umkm_shares') ? l$umkm_shares : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_set_input<TRes> {
  factory CopyWith$Input$umkm_set_input(
    Input$umkm_set_input instance,
    TRes Function(Input$umkm_set_input) then,
  ) = _CopyWithImpl$Input$umkm_set_input;

  factory CopyWith$Input$umkm_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_set_input;

  TRes call({
    DateTime? created_at,
    String? umkm_desc,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$umkm_set_input<TRes>
    implements CopyWith$Input$umkm_set_input<TRes> {
  _CopyWithImpl$Input$umkm_set_input(
    this._instance,
    this._then,
  );

  final Input$umkm_set_input _instance;

  final TRes Function(Input$umkm_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? umkm_desc = _undefined,
    Object? umkm_name = _undefined,
    Object? umkm_performance = _undefined,
    Object? umkm_shares = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$umkm_set_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (umkm_desc != _undefined) 'umkm_desc': (umkm_desc as String?),
        if (umkm_name != _undefined) 'umkm_name': (umkm_name as String?),
        if (umkm_performance != _undefined)
          'umkm_performance': (umkm_performance as String?),
        if (umkm_shares != _undefined) 'umkm_shares': (umkm_shares as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$umkm_set_input<TRes>
    implements CopyWith$Input$umkm_set_input<TRes> {
  _CopyWithStubImpl$Input$umkm_set_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    String? umkm_desc,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$umkm_stream_cursor_input {
  factory Input$umkm_stream_cursor_input({
    required Input$umkm_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$umkm_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$umkm_stream_cursor_input._(this._$data);

  factory Input$umkm_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$umkm_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$umkm_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$umkm_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$umkm_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$umkm_stream_cursor_input<Input$umkm_stream_cursor_input>
      get copyWith => CopyWith$Input$umkm_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_stream_cursor_input<TRes> {
  factory CopyWith$Input$umkm_stream_cursor_input(
    Input$umkm_stream_cursor_input instance,
    TRes Function(Input$umkm_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$umkm_stream_cursor_input;

  factory CopyWith$Input$umkm_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_stream_cursor_input;

  TRes call({
    Input$umkm_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$umkm_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$umkm_stream_cursor_input<TRes>
    implements CopyWith$Input$umkm_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$umkm_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$umkm_stream_cursor_input _instance;

  final TRes Function(Input$umkm_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$umkm_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$umkm_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$umkm_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$umkm_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$umkm_stream_cursor_input<TRes>
    implements CopyWith$Input$umkm_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$umkm_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$umkm_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$umkm_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$umkm_stream_cursor_value_input.stub(_res);
}

class Input$umkm_stream_cursor_value_input {
  factory Input$umkm_stream_cursor_value_input({
    DateTime? created_at,
    String? umkm_desc,
    int? umkm_id,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      Input$umkm_stream_cursor_value_input._({
        if (created_at != null) r'created_at': created_at,
        if (umkm_desc != null) r'umkm_desc': umkm_desc,
        if (umkm_id != null) r'umkm_id': umkm_id,
        if (umkm_name != null) r'umkm_name': umkm_name,
        if (umkm_performance != null) r'umkm_performance': umkm_performance,
        if (umkm_shares != null) r'umkm_shares': umkm_shares,
        if (updated_at != null) r'updated_at': updated_at,
        if (user_id != null) r'user_id': user_id,
      });

  Input$umkm_stream_cursor_value_input._(this._$data);

  factory Input$umkm_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('created_at')) {
      final l$created_at = data['created_at'];
      result$data['created_at'] = l$created_at == null
          ? null
          : DateTime.parse((l$created_at as String));
    }
    if (data.containsKey('umkm_desc')) {
      final l$umkm_desc = data['umkm_desc'];
      result$data['umkm_desc'] = (l$umkm_desc as String?);
    }
    if (data.containsKey('umkm_id')) {
      final l$umkm_id = data['umkm_id'];
      result$data['umkm_id'] = (l$umkm_id as int?);
    }
    if (data.containsKey('umkm_name')) {
      final l$umkm_name = data['umkm_name'];
      result$data['umkm_name'] = (l$umkm_name as String?);
    }
    if (data.containsKey('umkm_performance')) {
      final l$umkm_performance = data['umkm_performance'];
      result$data['umkm_performance'] = (l$umkm_performance as String?);
    }
    if (data.containsKey('umkm_shares')) {
      final l$umkm_shares = data['umkm_shares'];
      result$data['umkm_shares'] = (l$umkm_shares as int?);
    }
    if (data.containsKey('updated_at')) {
      final l$updated_at = data['updated_at'];
      result$data['updated_at'] = l$updated_at == null
          ? null
          : DateTime.parse((l$updated_at as String));
    }
    if (data.containsKey('user_id')) {
      final l$user_id = data['user_id'];
      result$data['user_id'] =
          l$user_id == null ? null : uuidFromJson(l$user_id);
    }
    return Input$umkm_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  DateTime? get created_at => (_$data['created_at'] as DateTime?);
  String? get umkm_desc => (_$data['umkm_desc'] as String?);
  int? get umkm_id => (_$data['umkm_id'] as int?);
  String? get umkm_name => (_$data['umkm_name'] as String?);
  String? get umkm_performance => (_$data['umkm_performance'] as String?);
  int? get umkm_shares => (_$data['umkm_shares'] as int?);
  DateTime? get updated_at => (_$data['updated_at'] as DateTime?);
  UUID? get user_id => (_$data['user_id'] as UUID?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('created_at')) {
      final l$created_at = created_at;
      result$data['created_at'] = l$created_at?.toIso8601String();
    }
    if (_$data.containsKey('umkm_desc')) {
      final l$umkm_desc = umkm_desc;
      result$data['umkm_desc'] = l$umkm_desc;
    }
    if (_$data.containsKey('umkm_id')) {
      final l$umkm_id = umkm_id;
      result$data['umkm_id'] = l$umkm_id;
    }
    if (_$data.containsKey('umkm_name')) {
      final l$umkm_name = umkm_name;
      result$data['umkm_name'] = l$umkm_name;
    }
    if (_$data.containsKey('umkm_performance')) {
      final l$umkm_performance = umkm_performance;
      result$data['umkm_performance'] = l$umkm_performance;
    }
    if (_$data.containsKey('umkm_shares')) {
      final l$umkm_shares = umkm_shares;
      result$data['umkm_shares'] = l$umkm_shares;
    }
    if (_$data.containsKey('updated_at')) {
      final l$updated_at = updated_at;
      result$data['updated_at'] = l$updated_at?.toIso8601String();
    }
    if (_$data.containsKey('user_id')) {
      final l$user_id = user_id;
      result$data['user_id'] = l$user_id == null ? null : uuidToJson(l$user_id);
    }
    return result$data;
  }

  CopyWith$Input$umkm_stream_cursor_value_input<
          Input$umkm_stream_cursor_value_input>
      get copyWith => CopyWith$Input$umkm_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$created_at = created_at;
    final lOther$created_at = other.created_at;
    if (_$data.containsKey('created_at') !=
        other._$data.containsKey('created_at')) {
      return false;
    }
    if (l$created_at != lOther$created_at) {
      return false;
    }
    final l$umkm_desc = umkm_desc;
    final lOther$umkm_desc = other.umkm_desc;
    if (_$data.containsKey('umkm_desc') !=
        other._$data.containsKey('umkm_desc')) {
      return false;
    }
    if (l$umkm_desc != lOther$umkm_desc) {
      return false;
    }
    final l$umkm_id = umkm_id;
    final lOther$umkm_id = other.umkm_id;
    if (_$data.containsKey('umkm_id') != other._$data.containsKey('umkm_id')) {
      return false;
    }
    if (l$umkm_id != lOther$umkm_id) {
      return false;
    }
    final l$umkm_name = umkm_name;
    final lOther$umkm_name = other.umkm_name;
    if (_$data.containsKey('umkm_name') !=
        other._$data.containsKey('umkm_name')) {
      return false;
    }
    if (l$umkm_name != lOther$umkm_name) {
      return false;
    }
    final l$umkm_performance = umkm_performance;
    final lOther$umkm_performance = other.umkm_performance;
    if (_$data.containsKey('umkm_performance') !=
        other._$data.containsKey('umkm_performance')) {
      return false;
    }
    if (l$umkm_performance != lOther$umkm_performance) {
      return false;
    }
    final l$umkm_shares = umkm_shares;
    final lOther$umkm_shares = other.umkm_shares;
    if (_$data.containsKey('umkm_shares') !=
        other._$data.containsKey('umkm_shares')) {
      return false;
    }
    if (l$umkm_shares != lOther$umkm_shares) {
      return false;
    }
    final l$updated_at = updated_at;
    final lOther$updated_at = other.updated_at;
    if (_$data.containsKey('updated_at') !=
        other._$data.containsKey('updated_at')) {
      return false;
    }
    if (l$updated_at != lOther$updated_at) {
      return false;
    }
    final l$user_id = user_id;
    final lOther$user_id = other.user_id;
    if (_$data.containsKey('user_id') != other._$data.containsKey('user_id')) {
      return false;
    }
    if (l$user_id != lOther$user_id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$created_at = created_at;
    final l$umkm_desc = umkm_desc;
    final l$umkm_id = umkm_id;
    final l$umkm_name = umkm_name;
    final l$umkm_performance = umkm_performance;
    final l$umkm_shares = umkm_shares;
    final l$updated_at = updated_at;
    final l$user_id = user_id;
    return Object.hashAll([
      _$data.containsKey('created_at') ? l$created_at : const {},
      _$data.containsKey('umkm_desc') ? l$umkm_desc : const {},
      _$data.containsKey('umkm_id') ? l$umkm_id : const {},
      _$data.containsKey('umkm_name') ? l$umkm_name : const {},
      _$data.containsKey('umkm_performance') ? l$umkm_performance : const {},
      _$data.containsKey('umkm_shares') ? l$umkm_shares : const {},
      _$data.containsKey('updated_at') ? l$updated_at : const {},
      _$data.containsKey('user_id') ? l$user_id : const {},
    ]);
  }
}

abstract class CopyWith$Input$umkm_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$umkm_stream_cursor_value_input(
    Input$umkm_stream_cursor_value_input instance,
    TRes Function(Input$umkm_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$umkm_stream_cursor_value_input;

  factory CopyWith$Input$umkm_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_stream_cursor_value_input;

  TRes call({
    DateTime? created_at,
    String? umkm_desc,
    int? umkm_id,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    UUID? user_id,
  });
}

class _CopyWithImpl$Input$umkm_stream_cursor_value_input<TRes>
    implements CopyWith$Input$umkm_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$umkm_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$umkm_stream_cursor_value_input _instance;

  final TRes Function(Input$umkm_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? created_at = _undefined,
    Object? umkm_desc = _undefined,
    Object? umkm_id = _undefined,
    Object? umkm_name = _undefined,
    Object? umkm_performance = _undefined,
    Object? umkm_shares = _undefined,
    Object? updated_at = _undefined,
    Object? user_id = _undefined,
  }) =>
      _then(Input$umkm_stream_cursor_value_input._({
        ..._instance._$data,
        if (created_at != _undefined) 'created_at': (created_at as DateTime?),
        if (umkm_desc != _undefined) 'umkm_desc': (umkm_desc as String?),
        if (umkm_id != _undefined) 'umkm_id': (umkm_id as int?),
        if (umkm_name != _undefined) 'umkm_name': (umkm_name as String?),
        if (umkm_performance != _undefined)
          'umkm_performance': (umkm_performance as String?),
        if (umkm_shares != _undefined) 'umkm_shares': (umkm_shares as int?),
        if (updated_at != _undefined) 'updated_at': (updated_at as DateTime?),
        if (user_id != _undefined) 'user_id': (user_id as UUID?),
      }));
}

class _CopyWithStubImpl$Input$umkm_stream_cursor_value_input<TRes>
    implements CopyWith$Input$umkm_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$umkm_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    DateTime? created_at,
    String? umkm_desc,
    int? umkm_id,
    String? umkm_name,
    String? umkm_performance,
    int? umkm_shares,
    DateTime? updated_at,
    UUID? user_id,
  }) =>
      _res;
}

class Input$umkm_updates {
  factory Input$umkm_updates({
    Input$umkm_inc_input? $_inc,
    Input$umkm_set_input? $_set,
    required Input$umkm_bool_exp where,
  }) =>
      Input$umkm_updates._({
        if ($_inc != null) r'_inc': $_inc,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$umkm_updates._(this._$data);

  factory Input$umkm_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_inc')) {
      final l$$_inc = data['_inc'];
      result$data['_inc'] = l$$_inc == null
          ? null
          : Input$umkm_inc_input.fromJson((l$$_inc as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$umkm_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$umkm_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$umkm_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$umkm_inc_input? get $_inc => (_$data['_inc'] as Input$umkm_inc_input?);
  Input$umkm_set_input? get $_set => (_$data['_set'] as Input$umkm_set_input?);
  Input$umkm_bool_exp get where => (_$data['where'] as Input$umkm_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_inc')) {
      final l$$_inc = $_inc;
      result$data['_inc'] = l$$_inc?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$umkm_updates<Input$umkm_updates> get copyWith =>
      CopyWith$Input$umkm_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$umkm_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_inc = $_inc;
    final lOther$$_inc = other.$_inc;
    if (_$data.containsKey('_inc') != other._$data.containsKey('_inc')) {
      return false;
    }
    if (l$$_inc != lOther$$_inc) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_inc = $_inc;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_inc') ? l$$_inc : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$umkm_updates<TRes> {
  factory CopyWith$Input$umkm_updates(
    Input$umkm_updates instance,
    TRes Function(Input$umkm_updates) then,
  ) = _CopyWithImpl$Input$umkm_updates;

  factory CopyWith$Input$umkm_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$umkm_updates;

  TRes call({
    Input$umkm_inc_input? $_inc,
    Input$umkm_set_input? $_set,
    Input$umkm_bool_exp? where,
  });
  CopyWith$Input$umkm_inc_input<TRes> get $_inc;
  CopyWith$Input$umkm_set_input<TRes> get $_set;
  CopyWith$Input$umkm_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$umkm_updates<TRes>
    implements CopyWith$Input$umkm_updates<TRes> {
  _CopyWithImpl$Input$umkm_updates(
    this._instance,
    this._then,
  );

  final Input$umkm_updates _instance;

  final TRes Function(Input$umkm_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_inc = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$umkm_updates._({
        ..._instance._$data,
        if ($_inc != _undefined) '_inc': ($_inc as Input$umkm_inc_input?),
        if ($_set != _undefined) '_set': ($_set as Input$umkm_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$umkm_bool_exp),
      }));
  CopyWith$Input$umkm_inc_input<TRes> get $_inc {
    final local$$_inc = _instance.$_inc;
    return local$$_inc == null
        ? CopyWith$Input$umkm_inc_input.stub(_then(_instance))
        : CopyWith$Input$umkm_inc_input(local$$_inc, (e) => call($_inc: e));
  }

  CopyWith$Input$umkm_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$umkm_set_input.stub(_then(_instance))
        : CopyWith$Input$umkm_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$umkm_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$umkm_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$umkm_updates<TRes>
    implements CopyWith$Input$umkm_updates<TRes> {
  _CopyWithStubImpl$Input$umkm_updates(this._res);

  TRes _res;

  call({
    Input$umkm_inc_input? $_inc,
    Input$umkm_set_input? $_set,
    Input$umkm_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$umkm_inc_input<TRes> get $_inc =>
      CopyWith$Input$umkm_inc_input.stub(_res);
  CopyWith$Input$umkm_set_input<TRes> get $_set =>
      CopyWith$Input$umkm_set_input.stub(_res);
  CopyWith$Input$umkm_bool_exp<TRes> get where =>
      CopyWith$Input$umkm_bool_exp.stub(_res);
}

class Input$users_aggregate_bool_exp {
  factory Input$users_aggregate_bool_exp({
    Input$users_aggregate_bool_exp_bool_and? bool_and,
    Input$users_aggregate_bool_exp_bool_or? bool_or,
    Input$users_aggregate_bool_exp_count? count,
  }) =>
      Input$users_aggregate_bool_exp._({
        if (bool_and != null) r'bool_and': bool_and,
        if (bool_or != null) r'bool_or': bool_or,
        if (count != null) r'count': count,
      });

  Input$users_aggregate_bool_exp._(this._$data);

  factory Input$users_aggregate_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('bool_and')) {
      final l$bool_and = data['bool_and'];
      result$data['bool_and'] = l$bool_and == null
          ? null
          : Input$users_aggregate_bool_exp_bool_and.fromJson(
              (l$bool_and as Map<String, dynamic>));
    }
    if (data.containsKey('bool_or')) {
      final l$bool_or = data['bool_or'];
      result$data['bool_or'] = l$bool_or == null
          ? null
          : Input$users_aggregate_bool_exp_bool_or.fromJson(
              (l$bool_or as Map<String, dynamic>));
    }
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] = l$count == null
          ? null
          : Input$users_aggregate_bool_exp_count.fromJson(
              (l$count as Map<String, dynamic>));
    }
    return Input$users_aggregate_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$users_aggregate_bool_exp_bool_and? get bool_and =>
      (_$data['bool_and'] as Input$users_aggregate_bool_exp_bool_and?);
  Input$users_aggregate_bool_exp_bool_or? get bool_or =>
      (_$data['bool_or'] as Input$users_aggregate_bool_exp_bool_or?);
  Input$users_aggregate_bool_exp_count? get count =>
      (_$data['count'] as Input$users_aggregate_bool_exp_count?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('bool_and')) {
      final l$bool_and = bool_and;
      result$data['bool_and'] = l$bool_and?.toJson();
    }
    if (_$data.containsKey('bool_or')) {
      final l$bool_or = bool_or;
      result$data['bool_or'] = l$bool_or?.toJson();
    }
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] = l$count?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_aggregate_bool_exp<Input$users_aggregate_bool_exp>
      get copyWith => CopyWith$Input$users_aggregate_bool_exp(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_aggregate_bool_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$bool_and = bool_and;
    final lOther$bool_and = other.bool_and;
    if (_$data.containsKey('bool_and') !=
        other._$data.containsKey('bool_and')) {
      return false;
    }
    if (l$bool_and != lOther$bool_and) {
      return false;
    }
    final l$bool_or = bool_or;
    final lOther$bool_or = other.bool_or;
    if (_$data.containsKey('bool_or') != other._$data.containsKey('bool_or')) {
      return false;
    }
    if (l$bool_or != lOther$bool_or) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$bool_and = bool_and;
    final l$bool_or = bool_or;
    final l$count = count;
    return Object.hashAll([
      _$data.containsKey('bool_and') ? l$bool_and : const {},
      _$data.containsKey('bool_or') ? l$bool_or : const {},
      _$data.containsKey('count') ? l$count : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_aggregate_bool_exp<TRes> {
  factory CopyWith$Input$users_aggregate_bool_exp(
    Input$users_aggregate_bool_exp instance,
    TRes Function(Input$users_aggregate_bool_exp) then,
  ) = _CopyWithImpl$Input$users_aggregate_bool_exp;

  factory CopyWith$Input$users_aggregate_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$users_aggregate_bool_exp;

  TRes call({
    Input$users_aggregate_bool_exp_bool_and? bool_and,
    Input$users_aggregate_bool_exp_bool_or? bool_or,
    Input$users_aggregate_bool_exp_count? count,
  });
  CopyWith$Input$users_aggregate_bool_exp_bool_and<TRes> get bool_and;
  CopyWith$Input$users_aggregate_bool_exp_bool_or<TRes> get bool_or;
  CopyWith$Input$users_aggregate_bool_exp_count<TRes> get count;
}

class _CopyWithImpl$Input$users_aggregate_bool_exp<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp<TRes> {
  _CopyWithImpl$Input$users_aggregate_bool_exp(
    this._instance,
    this._then,
  );

  final Input$users_aggregate_bool_exp _instance;

  final TRes Function(Input$users_aggregate_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? bool_and = _undefined,
    Object? bool_or = _undefined,
    Object? count = _undefined,
  }) =>
      _then(Input$users_aggregate_bool_exp._({
        ..._instance._$data,
        if (bool_and != _undefined)
          'bool_and': (bool_and as Input$users_aggregate_bool_exp_bool_and?),
        if (bool_or != _undefined)
          'bool_or': (bool_or as Input$users_aggregate_bool_exp_bool_or?),
        if (count != _undefined)
          'count': (count as Input$users_aggregate_bool_exp_count?),
      }));
  CopyWith$Input$users_aggregate_bool_exp_bool_and<TRes> get bool_and {
    final local$bool_and = _instance.bool_and;
    return local$bool_and == null
        ? CopyWith$Input$users_aggregate_bool_exp_bool_and.stub(
            _then(_instance))
        : CopyWith$Input$users_aggregate_bool_exp_bool_and(
            local$bool_and, (e) => call(bool_and: e));
  }

  CopyWith$Input$users_aggregate_bool_exp_bool_or<TRes> get bool_or {
    final local$bool_or = _instance.bool_or;
    return local$bool_or == null
        ? CopyWith$Input$users_aggregate_bool_exp_bool_or.stub(_then(_instance))
        : CopyWith$Input$users_aggregate_bool_exp_bool_or(
            local$bool_or, (e) => call(bool_or: e));
  }

  CopyWith$Input$users_aggregate_bool_exp_count<TRes> get count {
    final local$count = _instance.count;
    return local$count == null
        ? CopyWith$Input$users_aggregate_bool_exp_count.stub(_then(_instance))
        : CopyWith$Input$users_aggregate_bool_exp_count(
            local$count, (e) => call(count: e));
  }
}

class _CopyWithStubImpl$Input$users_aggregate_bool_exp<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp<TRes> {
  _CopyWithStubImpl$Input$users_aggregate_bool_exp(this._res);

  TRes _res;

  call({
    Input$users_aggregate_bool_exp_bool_and? bool_and,
    Input$users_aggregate_bool_exp_bool_or? bool_or,
    Input$users_aggregate_bool_exp_count? count,
  }) =>
      _res;
  CopyWith$Input$users_aggregate_bool_exp_bool_and<TRes> get bool_and =>
      CopyWith$Input$users_aggregate_bool_exp_bool_and.stub(_res);
  CopyWith$Input$users_aggregate_bool_exp_bool_or<TRes> get bool_or =>
      CopyWith$Input$users_aggregate_bool_exp_bool_or.stub(_res);
  CopyWith$Input$users_aggregate_bool_exp_count<TRes> get count =>
      CopyWith$Input$users_aggregate_bool_exp_count.stub(_res);
}

class Input$users_aggregate_bool_exp_bool_and {
  factory Input$users_aggregate_bool_exp_bool_and({
    required Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
        arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$users_aggregate_bool_exp_bool_and._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$users_aggregate_bool_exp_bool_and._(this._$data);

  factory Input$users_aggregate_bool_exp_bool_and.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$users_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$users_aggregate_bool_exp_bool_and._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$users_bool_exp? get filter =>
      (_$data['filter'] as Input$users_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$users_aggregate_bool_exp_bool_and<
          Input$users_aggregate_bool_exp_bool_and>
      get copyWith => CopyWith$Input$users_aggregate_bool_exp_bool_and(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_aggregate_bool_exp_bool_and) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$users_aggregate_bool_exp_bool_and<TRes> {
  factory CopyWith$Input$users_aggregate_bool_exp_bool_and(
    Input$users_aggregate_bool_exp_bool_and instance,
    TRes Function(Input$users_aggregate_bool_exp_bool_and) then,
  ) = _CopyWithImpl$Input$users_aggregate_bool_exp_bool_and;

  factory CopyWith$Input$users_aggregate_bool_exp_bool_and.stub(TRes res) =
      _CopyWithStubImpl$Input$users_aggregate_bool_exp_bool_and;

  TRes call({
    Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$users_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$users_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithImpl$Input$users_aggregate_bool_exp_bool_and(
    this._instance,
    this._then,
  );

  final Input$users_aggregate_bool_exp_bool_and _instance;

  final TRes Function(Input$users_aggregate_bool_exp_bool_and) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$users_aggregate_bool_exp_bool_and._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$users_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$users_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$users_aggregate_bool_exp_bool_and<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp_bool_and<TRes> {
  _CopyWithStubImpl$Input$users_aggregate_bool_exp_bool_and(this._res);

  TRes _res;

  call({
    Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns?
        arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$users_bool_exp<TRes> get filter =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$users_aggregate_bool_exp_bool_or {
  factory Input$users_aggregate_bool_exp_bool_or({
    required Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
        arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    required Input$Boolean_comparison_exp predicate,
  }) =>
      Input$users_aggregate_bool_exp_bool_or._({
        r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$users_aggregate_bool_exp_bool_or._(this._$data);

  factory Input$users_aggregate_bool_exp_bool_or.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$arguments = data['arguments'];
    result$data['arguments'] =
        fromJson$Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns(
            (l$arguments as String));
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$users_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Boolean_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$users_aggregate_bool_exp_bool_or._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
      get arguments => (_$data['arguments']
          as Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$users_bool_exp? get filter =>
      (_$data['filter'] as Input$users_bool_exp?);
  Input$Boolean_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Boolean_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$arguments = arguments;
    result$data['arguments'] =
        toJson$Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns(
            l$arguments);
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$users_aggregate_bool_exp_bool_or<
          Input$users_aggregate_bool_exp_bool_or>
      get copyWith => CopyWith$Input$users_aggregate_bool_exp_bool_or(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_aggregate_bool_exp_bool_or) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      l$arguments,
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$users_aggregate_bool_exp_bool_or<TRes> {
  factory CopyWith$Input$users_aggregate_bool_exp_bool_or(
    Input$users_aggregate_bool_exp_bool_or instance,
    TRes Function(Input$users_aggregate_bool_exp_bool_or) then,
  ) = _CopyWithImpl$Input$users_aggregate_bool_exp_bool_or;

  factory CopyWith$Input$users_aggregate_bool_exp_bool_or.stub(TRes res) =
      _CopyWithStubImpl$Input$users_aggregate_bool_exp_bool_or;

  TRes call({
    Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  });
  CopyWith$Input$users_bool_exp<TRes> get filter;
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$users_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithImpl$Input$users_aggregate_bool_exp_bool_or(
    this._instance,
    this._then,
  );

  final Input$users_aggregate_bool_exp_bool_or _instance;

  final TRes Function(Input$users_aggregate_bool_exp_bool_or) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$users_aggregate_bool_exp_bool_or._({
        ..._instance._$data,
        if (arguments != _undefined && arguments != null)
          'arguments': (arguments
              as Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$users_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Boolean_comparison_exp),
      }));
  CopyWith$Input$users_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Boolean_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$users_aggregate_bool_exp_bool_or<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp_bool_or<TRes> {
  _CopyWithStubImpl$Input$users_aggregate_bool_exp_bool_or(this._res);

  TRes _res;

  call({
    Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns?
        arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    Input$Boolean_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$users_bool_exp<TRes> get filter =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
}

class Input$users_aggregate_bool_exp_count {
  factory Input$users_aggregate_bool_exp_count({
    List<Enum$users_select_column>? arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    required Input$Int_comparison_exp predicate,
  }) =>
      Input$users_aggregate_bool_exp_count._({
        if (arguments != null) r'arguments': arguments,
        if (distinct != null) r'distinct': distinct,
        if (filter != null) r'filter': filter,
        r'predicate': predicate,
      });

  Input$users_aggregate_bool_exp_count._(this._$data);

  factory Input$users_aggregate_bool_exp_count.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('arguments')) {
      final l$arguments = data['arguments'];
      result$data['arguments'] = (l$arguments as List<dynamic>?)
          ?.map((e) => fromJson$Enum$users_select_column((e as String)))
          .toList();
    }
    if (data.containsKey('distinct')) {
      final l$distinct = data['distinct'];
      result$data['distinct'] = (l$distinct as bool?);
    }
    if (data.containsKey('filter')) {
      final l$filter = data['filter'];
      result$data['filter'] = l$filter == null
          ? null
          : Input$users_bool_exp.fromJson((l$filter as Map<String, dynamic>));
    }
    final l$predicate = data['predicate'];
    result$data['predicate'] = Input$Int_comparison_exp.fromJson(
        (l$predicate as Map<String, dynamic>));
    return Input$users_aggregate_bool_exp_count._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Enum$users_select_column>? get arguments =>
      (_$data['arguments'] as List<Enum$users_select_column>?);
  bool? get distinct => (_$data['distinct'] as bool?);
  Input$users_bool_exp? get filter =>
      (_$data['filter'] as Input$users_bool_exp?);
  Input$Int_comparison_exp get predicate =>
      (_$data['predicate'] as Input$Int_comparison_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('arguments')) {
      final l$arguments = arguments;
      result$data['arguments'] =
          l$arguments?.map((e) => toJson$Enum$users_select_column(e)).toList();
    }
    if (_$data.containsKey('distinct')) {
      final l$distinct = distinct;
      result$data['distinct'] = l$distinct;
    }
    if (_$data.containsKey('filter')) {
      final l$filter = filter;
      result$data['filter'] = l$filter?.toJson();
    }
    final l$predicate = predicate;
    result$data['predicate'] = l$predicate.toJson();
    return result$data;
  }

  CopyWith$Input$users_aggregate_bool_exp_count<
          Input$users_aggregate_bool_exp_count>
      get copyWith => CopyWith$Input$users_aggregate_bool_exp_count(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_aggregate_bool_exp_count) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$arguments = arguments;
    final lOther$arguments = other.arguments;
    if (_$data.containsKey('arguments') !=
        other._$data.containsKey('arguments')) {
      return false;
    }
    if (l$arguments != null && lOther$arguments != null) {
      if (l$arguments.length != lOther$arguments.length) {
        return false;
      }
      for (int i = 0; i < l$arguments.length; i++) {
        final l$arguments$entry = l$arguments[i];
        final lOther$arguments$entry = lOther$arguments[i];
        if (l$arguments$entry != lOther$arguments$entry) {
          return false;
        }
      }
    } else if (l$arguments != lOther$arguments) {
      return false;
    }
    final l$distinct = distinct;
    final lOther$distinct = other.distinct;
    if (_$data.containsKey('distinct') !=
        other._$data.containsKey('distinct')) {
      return false;
    }
    if (l$distinct != lOther$distinct) {
      return false;
    }
    final l$filter = filter;
    final lOther$filter = other.filter;
    if (_$data.containsKey('filter') != other._$data.containsKey('filter')) {
      return false;
    }
    if (l$filter != lOther$filter) {
      return false;
    }
    final l$predicate = predicate;
    final lOther$predicate = other.predicate;
    if (l$predicate != lOther$predicate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$arguments = arguments;
    final l$distinct = distinct;
    final l$filter = filter;
    final l$predicate = predicate;
    return Object.hashAll([
      _$data.containsKey('arguments')
          ? l$arguments == null
              ? null
              : Object.hashAll(l$arguments.map((v) => v))
          : const {},
      _$data.containsKey('distinct') ? l$distinct : const {},
      _$data.containsKey('filter') ? l$filter : const {},
      l$predicate,
    ]);
  }
}

abstract class CopyWith$Input$users_aggregate_bool_exp_count<TRes> {
  factory CopyWith$Input$users_aggregate_bool_exp_count(
    Input$users_aggregate_bool_exp_count instance,
    TRes Function(Input$users_aggregate_bool_exp_count) then,
  ) = _CopyWithImpl$Input$users_aggregate_bool_exp_count;

  factory CopyWith$Input$users_aggregate_bool_exp_count.stub(TRes res) =
      _CopyWithStubImpl$Input$users_aggregate_bool_exp_count;

  TRes call({
    List<Enum$users_select_column>? arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  });
  CopyWith$Input$users_bool_exp<TRes> get filter;
  CopyWith$Input$Int_comparison_exp<TRes> get predicate;
}

class _CopyWithImpl$Input$users_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp_count<TRes> {
  _CopyWithImpl$Input$users_aggregate_bool_exp_count(
    this._instance,
    this._then,
  );

  final Input$users_aggregate_bool_exp_count _instance;

  final TRes Function(Input$users_aggregate_bool_exp_count) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? arguments = _undefined,
    Object? distinct = _undefined,
    Object? filter = _undefined,
    Object? predicate = _undefined,
  }) =>
      _then(Input$users_aggregate_bool_exp_count._({
        ..._instance._$data,
        if (arguments != _undefined)
          'arguments': (arguments as List<Enum$users_select_column>?),
        if (distinct != _undefined) 'distinct': (distinct as bool?),
        if (filter != _undefined) 'filter': (filter as Input$users_bool_exp?),
        if (predicate != _undefined && predicate != null)
          'predicate': (predicate as Input$Int_comparison_exp),
      }));
  CopyWith$Input$users_bool_exp<TRes> get filter {
    final local$filter = _instance.filter;
    return local$filter == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$filter, (e) => call(filter: e));
  }

  CopyWith$Input$Int_comparison_exp<TRes> get predicate {
    final local$predicate = _instance.predicate;
    return CopyWith$Input$Int_comparison_exp(
        local$predicate, (e) => call(predicate: e));
  }
}

class _CopyWithStubImpl$Input$users_aggregate_bool_exp_count<TRes>
    implements CopyWith$Input$users_aggregate_bool_exp_count<TRes> {
  _CopyWithStubImpl$Input$users_aggregate_bool_exp_count(this._res);

  TRes _res;

  call({
    List<Enum$users_select_column>? arguments,
    bool? distinct,
    Input$users_bool_exp? filter,
    Input$Int_comparison_exp? predicate,
  }) =>
      _res;
  CopyWith$Input$users_bool_exp<TRes> get filter =>
      CopyWith$Input$users_bool_exp.stub(_res);
  CopyWith$Input$Int_comparison_exp<TRes> get predicate =>
      CopyWith$Input$Int_comparison_exp.stub(_res);
}

class Input$users_aggregate_order_by {
  factory Input$users_aggregate_order_by({
    Enum$order_by? count,
    Input$users_max_order_by? max,
    Input$users_min_order_by? min,
  }) =>
      Input$users_aggregate_order_by._({
        if (count != null) r'count': count,
        if (max != null) r'max': max,
        if (min != null) r'min': min,
      });

  Input$users_aggregate_order_by._(this._$data);

  factory Input$users_aggregate_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('count')) {
      final l$count = data['count'];
      result$data['count'] =
          l$count == null ? null : fromJson$Enum$order_by((l$count as String));
    }
    if (data.containsKey('max')) {
      final l$max = data['max'];
      result$data['max'] = l$max == null
          ? null
          : Input$users_max_order_by.fromJson((l$max as Map<String, dynamic>));
    }
    if (data.containsKey('min')) {
      final l$min = data['min'];
      result$data['min'] = l$min == null
          ? null
          : Input$users_min_order_by.fromJson((l$min as Map<String, dynamic>));
    }
    return Input$users_aggregate_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get count => (_$data['count'] as Enum$order_by?);
  Input$users_max_order_by? get max =>
      (_$data['max'] as Input$users_max_order_by?);
  Input$users_min_order_by? get min =>
      (_$data['min'] as Input$users_min_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('count')) {
      final l$count = count;
      result$data['count'] =
          l$count == null ? null : toJson$Enum$order_by(l$count);
    }
    if (_$data.containsKey('max')) {
      final l$max = max;
      result$data['max'] = l$max?.toJson();
    }
    if (_$data.containsKey('min')) {
      final l$min = min;
      result$data['min'] = l$min?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_aggregate_order_by<Input$users_aggregate_order_by>
      get copyWith => CopyWith$Input$users_aggregate_order_by(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_aggregate_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (_$data.containsKey('count') != other._$data.containsKey('count')) {
      return false;
    }
    if (l$count != lOther$count) {
      return false;
    }
    final l$max = max;
    final lOther$max = other.max;
    if (_$data.containsKey('max') != other._$data.containsKey('max')) {
      return false;
    }
    if (l$max != lOther$max) {
      return false;
    }
    final l$min = min;
    final lOther$min = other.min;
    if (_$data.containsKey('min') != other._$data.containsKey('min')) {
      return false;
    }
    if (l$min != lOther$min) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$count = count;
    final l$max = max;
    final l$min = min;
    return Object.hashAll([
      _$data.containsKey('count') ? l$count : const {},
      _$data.containsKey('max') ? l$max : const {},
      _$data.containsKey('min') ? l$min : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_aggregate_order_by<TRes> {
  factory CopyWith$Input$users_aggregate_order_by(
    Input$users_aggregate_order_by instance,
    TRes Function(Input$users_aggregate_order_by) then,
  ) = _CopyWithImpl$Input$users_aggregate_order_by;

  factory CopyWith$Input$users_aggregate_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$users_aggregate_order_by;

  TRes call({
    Enum$order_by? count,
    Input$users_max_order_by? max,
    Input$users_min_order_by? min,
  });
  CopyWith$Input$users_max_order_by<TRes> get max;
  CopyWith$Input$users_min_order_by<TRes> get min;
}

class _CopyWithImpl$Input$users_aggregate_order_by<TRes>
    implements CopyWith$Input$users_aggregate_order_by<TRes> {
  _CopyWithImpl$Input$users_aggregate_order_by(
    this._instance,
    this._then,
  );

  final Input$users_aggregate_order_by _instance;

  final TRes Function(Input$users_aggregate_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? count = _undefined,
    Object? max = _undefined,
    Object? min = _undefined,
  }) =>
      _then(Input$users_aggregate_order_by._({
        ..._instance._$data,
        if (count != _undefined) 'count': (count as Enum$order_by?),
        if (max != _undefined) 'max': (max as Input$users_max_order_by?),
        if (min != _undefined) 'min': (min as Input$users_min_order_by?),
      }));
  CopyWith$Input$users_max_order_by<TRes> get max {
    final local$max = _instance.max;
    return local$max == null
        ? CopyWith$Input$users_max_order_by.stub(_then(_instance))
        : CopyWith$Input$users_max_order_by(local$max, (e) => call(max: e));
  }

  CopyWith$Input$users_min_order_by<TRes> get min {
    final local$min = _instance.min;
    return local$min == null
        ? CopyWith$Input$users_min_order_by.stub(_then(_instance))
        : CopyWith$Input$users_min_order_by(local$min, (e) => call(min: e));
  }
}

class _CopyWithStubImpl$Input$users_aggregate_order_by<TRes>
    implements CopyWith$Input$users_aggregate_order_by<TRes> {
  _CopyWithStubImpl$Input$users_aggregate_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? count,
    Input$users_max_order_by? max,
    Input$users_min_order_by? min,
  }) =>
      _res;
  CopyWith$Input$users_max_order_by<TRes> get max =>
      CopyWith$Input$users_max_order_by.stub(_res);
  CopyWith$Input$users_min_order_by<TRes> get min =>
      CopyWith$Input$users_min_order_by.stub(_res);
}

class Input$users_append_input {
  factory Input$users_append_input({JSONB? metadata}) =>
      Input$users_append_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$users_append_input._(this._$data);

  factory Input$users_append_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    return Input$users_append_input._(result$data);
  }

  Map<String, dynamic> _$data;

  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    return result$data;
  }

  CopyWith$Input$users_append_input<Input$users_append_input> get copyWith =>
      CopyWith$Input$users_append_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_append_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$users_append_input<TRes> {
  factory CopyWith$Input$users_append_input(
    Input$users_append_input instance,
    TRes Function(Input$users_append_input) then,
  ) = _CopyWithImpl$Input$users_append_input;

  factory CopyWith$Input$users_append_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_append_input;

  TRes call({JSONB? metadata});
}

class _CopyWithImpl$Input$users_append_input<TRes>
    implements CopyWith$Input$users_append_input<TRes> {
  _CopyWithImpl$Input$users_append_input(
    this._instance,
    this._then,
  );

  final Input$users_append_input _instance;

  final TRes Function(Input$users_append_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$users_append_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$users_append_input<TRes>
    implements CopyWith$Input$users_append_input<TRes> {
  _CopyWithStubImpl$Input$users_append_input(this._res);

  TRes _res;

  call({JSONB? metadata}) => _res;
}

class Input$users_arr_rel_insert_input {
  factory Input$users_arr_rel_insert_input({
    required List<Input$users_insert_input> data,
    Input$users_on_conflict? on_conflict,
  }) =>
      Input$users_arr_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$users_arr_rel_insert_input._(this._$data);

  factory Input$users_arr_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] = (l$data as List<dynamic>)
        .map((e) =>
            Input$users_insert_input.fromJson((e as Map<String, dynamic>)))
        .toList();
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$users_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$users_arr_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<Input$users_insert_input> get data =>
      (_$data['data'] as List<Input$users_insert_input>);
  Input$users_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$users_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.map((e) => e.toJson()).toList();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_arr_rel_insert_input<Input$users_arr_rel_insert_input>
      get copyWith => CopyWith$Input$users_arr_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_arr_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data.length != lOther$data.length) {
      return false;
    }
    for (int i = 0; i < l$data.length; i++) {
      final l$data$entry = l$data[i];
      final lOther$data$entry = lOther$data[i];
      if (l$data$entry != lOther$data$entry) {
        return false;
      }
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      Object.hashAll(l$data.map((v) => v)),
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_arr_rel_insert_input<TRes> {
  factory CopyWith$Input$users_arr_rel_insert_input(
    Input$users_arr_rel_insert_input instance,
    TRes Function(Input$users_arr_rel_insert_input) then,
  ) = _CopyWithImpl$Input$users_arr_rel_insert_input;

  factory CopyWith$Input$users_arr_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_arr_rel_insert_input;

  TRes call({
    List<Input$users_insert_input>? data,
    Input$users_on_conflict? on_conflict,
  });
  TRes data(
      Iterable<Input$users_insert_input> Function(
              Iterable<
                  CopyWith$Input$users_insert_input<Input$users_insert_input>>)
          _fn);
  CopyWith$Input$users_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$users_arr_rel_insert_input<TRes>
    implements CopyWith$Input$users_arr_rel_insert_input<TRes> {
  _CopyWithImpl$Input$users_arr_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$users_arr_rel_insert_input _instance;

  final TRes Function(Input$users_arr_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$users_arr_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as List<Input$users_insert_input>),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$users_on_conflict?),
      }));
  TRes data(
          Iterable<Input$users_insert_input> Function(
                  Iterable<
                      CopyWith$Input$users_insert_input<
                          Input$users_insert_input>>)
              _fn) =>
      call(
          data: _fn(_instance.data.map((e) => CopyWith$Input$users_insert_input(
                e,
                (i) => i,
              ))).toList());
  CopyWith$Input$users_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$users_on_conflict.stub(_then(_instance))
        : CopyWith$Input$users_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$users_arr_rel_insert_input<TRes>
    implements CopyWith$Input$users_arr_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$users_arr_rel_insert_input(this._res);

  TRes _res;

  call({
    List<Input$users_insert_input>? data,
    Input$users_on_conflict? on_conflict,
  }) =>
      _res;
  data(_fn) => _res;
  CopyWith$Input$users_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$users_on_conflict.stub(_res);
}

class Input$users_bool_exp {
  factory Input$users_bool_exp({
    Input$umkm_bool_exp? UMKMById,
    List<Input$users_bool_exp>? $_and,
    Input$users_bool_exp? $_not,
    List<Input$users_bool_exp>? $_or,
    Input$String_comparison_exp? activeMfaType,
    Input$cs_message_bool_exp? agent_cs_messages,
    Input$cs_message_aggregate_bool_exp? agent_cs_messages_aggregate,
    Input$String_comparison_exp? avatarUrl,
    Input$timestamptz_comparison_exp? createdAt,
    Input$cs_message_bool_exp? cs_messages,
    Input$cs_message_aggregate_bool_exp? cs_messages_aggregate,
    Input$String_comparison_exp? currentChallenge,
    Input$String_comparison_exp? defaultRole,
    Input$authRoles_bool_exp? defaultRoleByRole,
    Input$Boolean_comparison_exp? disabled,
    Input$String_comparison_exp? displayName,
    Input$citext_comparison_exp? email,
    Input$Boolean_comparison_exp? emailVerified,
    Input$uuid_comparison_exp? id,
    Input$investor_bool_exp? investorById,
    Input$Boolean_comparison_exp? isAnonymous,
    Input$timestamptz_comparison_exp? lastSeen,
    Input$String_comparison_exp? locale,
    Input$jsonb_comparison_exp? metadata,
    Input$citext_comparison_exp? newEmail,
    Input$String_comparison_exp? otpHash,
    Input$timestamptz_comparison_exp? otpHashExpiresAt,
    Input$String_comparison_exp? otpMethodLastUsed,
    Input$String_comparison_exp? passwordHash,
    Input$String_comparison_exp? phoneNumber,
    Input$Boolean_comparison_exp? phoneNumberVerified,
    Input$profile_bool_exp? profile,
    Input$authRefreshTokens_bool_exp? refreshTokens,
    Input$authRefreshTokens_aggregate_bool_exp? refreshTokens_aggregate,
    Input$authUserRoles_bool_exp? roles,
    Input$authUserRoles_aggregate_bool_exp? roles_aggregate,
    Input$authUserSecurityKeys_bool_exp? securityKeys,
    Input$authUserSecurityKeys_aggregate_bool_exp? securityKeys_aggregate,
    Input$String_comparison_exp? ticket,
    Input$timestamptz_comparison_exp? ticketExpiresAt,
    Input$String_comparison_exp? totpSecret,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$authUserProviders_bool_exp? userProviders,
    Input$authUserProviders_aggregate_bool_exp? userProviders_aggregate,
  }) =>
      Input$users_bool_exp._({
        if (UMKMById != null) r'UMKMById': UMKMById,
        if ($_and != null) r'_and': $_and,
        if ($_not != null) r'_not': $_not,
        if ($_or != null) r'_or': $_or,
        if (activeMfaType != null) r'activeMfaType': activeMfaType,
        if (agent_cs_messages != null) r'agent_cs_messages': agent_cs_messages,
        if (agent_cs_messages_aggregate != null)
          r'agent_cs_messages_aggregate': agent_cs_messages_aggregate,
        if (avatarUrl != null) r'avatarUrl': avatarUrl,
        if (createdAt != null) r'createdAt': createdAt,
        if (cs_messages != null) r'cs_messages': cs_messages,
        if (cs_messages_aggregate != null)
          r'cs_messages_aggregate': cs_messages_aggregate,
        if (currentChallenge != null) r'currentChallenge': currentChallenge,
        if (defaultRole != null) r'defaultRole': defaultRole,
        if (defaultRoleByRole != null) r'defaultRoleByRole': defaultRoleByRole,
        if (disabled != null) r'disabled': disabled,
        if (displayName != null) r'displayName': displayName,
        if (email != null) r'email': email,
        if (emailVerified != null) r'emailVerified': emailVerified,
        if (id != null) r'id': id,
        if (investorById != null) r'investorById': investorById,
        if (isAnonymous != null) r'isAnonymous': isAnonymous,
        if (lastSeen != null) r'lastSeen': lastSeen,
        if (locale != null) r'locale': locale,
        if (metadata != null) r'metadata': metadata,
        if (newEmail != null) r'newEmail': newEmail,
        if (otpHash != null) r'otpHash': otpHash,
        if (otpHashExpiresAt != null) r'otpHashExpiresAt': otpHashExpiresAt,
        if (otpMethodLastUsed != null) r'otpMethodLastUsed': otpMethodLastUsed,
        if (passwordHash != null) r'passwordHash': passwordHash,
        if (phoneNumber != null) r'phoneNumber': phoneNumber,
        if (phoneNumberVerified != null)
          r'phoneNumberVerified': phoneNumberVerified,
        if (profile != null) r'profile': profile,
        if (refreshTokens != null) r'refreshTokens': refreshTokens,
        if (refreshTokens_aggregate != null)
          r'refreshTokens_aggregate': refreshTokens_aggregate,
        if (roles != null) r'roles': roles,
        if (roles_aggregate != null) r'roles_aggregate': roles_aggregate,
        if (securityKeys != null) r'securityKeys': securityKeys,
        if (securityKeys_aggregate != null)
          r'securityKeys_aggregate': securityKeys_aggregate,
        if (ticket != null) r'ticket': ticket,
        if (ticketExpiresAt != null) r'ticketExpiresAt': ticketExpiresAt,
        if (totpSecret != null) r'totpSecret': totpSecret,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (userProviders != null) r'userProviders': userProviders,
        if (userProviders_aggregate != null)
          r'userProviders_aggregate': userProviders_aggregate,
      });

  Input$users_bool_exp._(this._$data);

  factory Input$users_bool_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('UMKMById')) {
      final l$UMKMById = data['UMKMById'];
      result$data['UMKMById'] = l$UMKMById == null
          ? null
          : Input$umkm_bool_exp.fromJson((l$UMKMById as Map<String, dynamic>));
    }
    if (data.containsKey('_and')) {
      final l$$_and = data['_and'];
      result$data['_and'] = (l$$_and as List<dynamic>?)
          ?.map(
              (e) => Input$users_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('_not')) {
      final l$$_not = data['_not'];
      result$data['_not'] = l$$_not == null
          ? null
          : Input$users_bool_exp.fromJson((l$$_not as Map<String, dynamic>));
    }
    if (data.containsKey('_or')) {
      final l$$_or = data['_or'];
      result$data['_or'] = (l$$_or as List<dynamic>?)
          ?.map(
              (e) => Input$users_bool_exp.fromJson((e as Map<String, dynamic>)))
          .toList();
    }
    if (data.containsKey('activeMfaType')) {
      final l$activeMfaType = data['activeMfaType'];
      result$data['activeMfaType'] = l$activeMfaType == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$activeMfaType as Map<String, dynamic>));
    }
    if (data.containsKey('agent_cs_messages')) {
      final l$agent_cs_messages = data['agent_cs_messages'];
      result$data['agent_cs_messages'] = l$agent_cs_messages == null
          ? null
          : Input$cs_message_bool_exp.fromJson(
              (l$agent_cs_messages as Map<String, dynamic>));
    }
    if (data.containsKey('agent_cs_messages_aggregate')) {
      final l$agent_cs_messages_aggregate = data['agent_cs_messages_aggregate'];
      result$data['agent_cs_messages_aggregate'] =
          l$agent_cs_messages_aggregate == null
              ? null
              : Input$cs_message_aggregate_bool_exp.fromJson(
                  (l$agent_cs_messages_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('avatarUrl')) {
      final l$avatarUrl = data['avatarUrl'];
      result$data['avatarUrl'] = l$avatarUrl == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$avatarUrl as Map<String, dynamic>));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$createdAt as Map<String, dynamic>));
    }
    if (data.containsKey('cs_messages')) {
      final l$cs_messages = data['cs_messages'];
      result$data['cs_messages'] = l$cs_messages == null
          ? null
          : Input$cs_message_bool_exp.fromJson(
              (l$cs_messages as Map<String, dynamic>));
    }
    if (data.containsKey('cs_messages_aggregate')) {
      final l$cs_messages_aggregate = data['cs_messages_aggregate'];
      result$data['cs_messages_aggregate'] = l$cs_messages_aggregate == null
          ? null
          : Input$cs_message_aggregate_bool_exp.fromJson(
              (l$cs_messages_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('currentChallenge')) {
      final l$currentChallenge = data['currentChallenge'];
      result$data['currentChallenge'] = l$currentChallenge == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$currentChallenge as Map<String, dynamic>));
    }
    if (data.containsKey('defaultRole')) {
      final l$defaultRole = data['defaultRole'];
      result$data['defaultRole'] = l$defaultRole == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$defaultRole as Map<String, dynamic>));
    }
    if (data.containsKey('defaultRoleByRole')) {
      final l$defaultRoleByRole = data['defaultRoleByRole'];
      result$data['defaultRoleByRole'] = l$defaultRoleByRole == null
          ? null
          : Input$authRoles_bool_exp.fromJson(
              (l$defaultRoleByRole as Map<String, dynamic>));
    }
    if (data.containsKey('disabled')) {
      final l$disabled = data['disabled'];
      result$data['disabled'] = l$disabled == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$disabled as Map<String, dynamic>));
    }
    if (data.containsKey('displayName')) {
      final l$displayName = data['displayName'];
      result$data['displayName'] = l$displayName == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$displayName as Map<String, dynamic>));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = l$email == null
          ? null
          : Input$citext_comparison_exp.fromJson(
              (l$email as Map<String, dynamic>));
    }
    if (data.containsKey('emailVerified')) {
      final l$emailVerified = data['emailVerified'];
      result$data['emailVerified'] = l$emailVerified == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$emailVerified as Map<String, dynamic>));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null
          ? null
          : Input$uuid_comparison_exp.fromJson((l$id as Map<String, dynamic>));
    }
    if (data.containsKey('investorById')) {
      final l$investorById = data['investorById'];
      result$data['investorById'] = l$investorById == null
          ? null
          : Input$investor_bool_exp.fromJson(
              (l$investorById as Map<String, dynamic>));
    }
    if (data.containsKey('isAnonymous')) {
      final l$isAnonymous = data['isAnonymous'];
      result$data['isAnonymous'] = l$isAnonymous == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$isAnonymous as Map<String, dynamic>));
    }
    if (data.containsKey('lastSeen')) {
      final l$lastSeen = data['lastSeen'];
      result$data['lastSeen'] = l$lastSeen == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$lastSeen as Map<String, dynamic>));
    }
    if (data.containsKey('locale')) {
      final l$locale = data['locale'];
      result$data['locale'] = l$locale == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$locale as Map<String, dynamic>));
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = l$metadata == null
          ? null
          : Input$jsonb_comparison_exp.fromJson(
              (l$metadata as Map<String, dynamic>));
    }
    if (data.containsKey('newEmail')) {
      final l$newEmail = data['newEmail'];
      result$data['newEmail'] = l$newEmail == null
          ? null
          : Input$citext_comparison_exp.fromJson(
              (l$newEmail as Map<String, dynamic>));
    }
    if (data.containsKey('otpHash')) {
      final l$otpHash = data['otpHash'];
      result$data['otpHash'] = l$otpHash == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$otpHash as Map<String, dynamic>));
    }
    if (data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = data['otpHashExpiresAt'];
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$otpHashExpiresAt as Map<String, dynamic>));
    }
    if (data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = data['otpMethodLastUsed'];
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$otpMethodLastUsed as Map<String, dynamic>));
    }
    if (data.containsKey('passwordHash')) {
      final l$passwordHash = data['passwordHash'];
      result$data['passwordHash'] = l$passwordHash == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$passwordHash as Map<String, dynamic>));
    }
    if (data.containsKey('phoneNumber')) {
      final l$phoneNumber = data['phoneNumber'];
      result$data['phoneNumber'] = l$phoneNumber == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$phoneNumber as Map<String, dynamic>));
    }
    if (data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = data['phoneNumberVerified'];
      result$data['phoneNumberVerified'] = l$phoneNumberVerified == null
          ? null
          : Input$Boolean_comparison_exp.fromJson(
              (l$phoneNumberVerified as Map<String, dynamic>));
    }
    if (data.containsKey('profile')) {
      final l$profile = data['profile'];
      result$data['profile'] = l$profile == null
          ? null
          : Input$profile_bool_exp.fromJson(
              (l$profile as Map<String, dynamic>));
    }
    if (data.containsKey('refreshTokens')) {
      final l$refreshTokens = data['refreshTokens'];
      result$data['refreshTokens'] = l$refreshTokens == null
          ? null
          : Input$authRefreshTokens_bool_exp.fromJson(
              (l$refreshTokens as Map<String, dynamic>));
    }
    if (data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = data['refreshTokens_aggregate'];
      result$data['refreshTokens_aggregate'] = l$refreshTokens_aggregate == null
          ? null
          : Input$authRefreshTokens_aggregate_bool_exp.fromJson(
              (l$refreshTokens_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('roles')) {
      final l$roles = data['roles'];
      result$data['roles'] = l$roles == null
          ? null
          : Input$authUserRoles_bool_exp.fromJson(
              (l$roles as Map<String, dynamic>));
    }
    if (data.containsKey('roles_aggregate')) {
      final l$roles_aggregate = data['roles_aggregate'];
      result$data['roles_aggregate'] = l$roles_aggregate == null
          ? null
          : Input$authUserRoles_aggregate_bool_exp.fromJson(
              (l$roles_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('securityKeys')) {
      final l$securityKeys = data['securityKeys'];
      result$data['securityKeys'] = l$securityKeys == null
          ? null
          : Input$authUserSecurityKeys_bool_exp.fromJson(
              (l$securityKeys as Map<String, dynamic>));
    }
    if (data.containsKey('securityKeys_aggregate')) {
      final l$securityKeys_aggregate = data['securityKeys_aggregate'];
      result$data['securityKeys_aggregate'] = l$securityKeys_aggregate == null
          ? null
          : Input$authUserSecurityKeys_aggregate_bool_exp.fromJson(
              (l$securityKeys_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('ticket')) {
      final l$ticket = data['ticket'];
      result$data['ticket'] = l$ticket == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$ticket as Map<String, dynamic>));
    }
    if (data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = data['ticketExpiresAt'];
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$ticketExpiresAt as Map<String, dynamic>));
    }
    if (data.containsKey('totpSecret')) {
      final l$totpSecret = data['totpSecret'];
      result$data['totpSecret'] = l$totpSecret == null
          ? null
          : Input$String_comparison_exp.fromJson(
              (l$totpSecret as Map<String, dynamic>));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : Input$timestamptz_comparison_exp.fromJson(
              (l$updatedAt as Map<String, dynamic>));
    }
    if (data.containsKey('userProviders')) {
      final l$userProviders = data['userProviders'];
      result$data['userProviders'] = l$userProviders == null
          ? null
          : Input$authUserProviders_bool_exp.fromJson(
              (l$userProviders as Map<String, dynamic>));
    }
    if (data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = data['userProviders_aggregate'];
      result$data['userProviders_aggregate'] = l$userProviders_aggregate == null
          ? null
          : Input$authUserProviders_aggregate_bool_exp.fromJson(
              (l$userProviders_aggregate as Map<String, dynamic>));
    }
    return Input$users_bool_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$umkm_bool_exp? get UMKMById =>
      (_$data['UMKMById'] as Input$umkm_bool_exp?);
  List<Input$users_bool_exp>? get $_and =>
      (_$data['_and'] as List<Input$users_bool_exp>?);
  Input$users_bool_exp? get $_not => (_$data['_not'] as Input$users_bool_exp?);
  List<Input$users_bool_exp>? get $_or =>
      (_$data['_or'] as List<Input$users_bool_exp>?);
  Input$String_comparison_exp? get activeMfaType =>
      (_$data['activeMfaType'] as Input$String_comparison_exp?);
  Input$cs_message_bool_exp? get agent_cs_messages =>
      (_$data['agent_cs_messages'] as Input$cs_message_bool_exp?);
  Input$cs_message_aggregate_bool_exp? get agent_cs_messages_aggregate =>
      (_$data['agent_cs_messages_aggregate']
          as Input$cs_message_aggregate_bool_exp?);
  Input$String_comparison_exp? get avatarUrl =>
      (_$data['avatarUrl'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get createdAt =>
      (_$data['createdAt'] as Input$timestamptz_comparison_exp?);
  Input$cs_message_bool_exp? get cs_messages =>
      (_$data['cs_messages'] as Input$cs_message_bool_exp?);
  Input$cs_message_aggregate_bool_exp? get cs_messages_aggregate =>
      (_$data['cs_messages_aggregate'] as Input$cs_message_aggregate_bool_exp?);
  Input$String_comparison_exp? get currentChallenge =>
      (_$data['currentChallenge'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get defaultRole =>
      (_$data['defaultRole'] as Input$String_comparison_exp?);
  Input$authRoles_bool_exp? get defaultRoleByRole =>
      (_$data['defaultRoleByRole'] as Input$authRoles_bool_exp?);
  Input$Boolean_comparison_exp? get disabled =>
      (_$data['disabled'] as Input$Boolean_comparison_exp?);
  Input$String_comparison_exp? get displayName =>
      (_$data['displayName'] as Input$String_comparison_exp?);
  Input$citext_comparison_exp? get email =>
      (_$data['email'] as Input$citext_comparison_exp?);
  Input$Boolean_comparison_exp? get emailVerified =>
      (_$data['emailVerified'] as Input$Boolean_comparison_exp?);
  Input$uuid_comparison_exp? get id =>
      (_$data['id'] as Input$uuid_comparison_exp?);
  Input$investor_bool_exp? get investorById =>
      (_$data['investorById'] as Input$investor_bool_exp?);
  Input$Boolean_comparison_exp? get isAnonymous =>
      (_$data['isAnonymous'] as Input$Boolean_comparison_exp?);
  Input$timestamptz_comparison_exp? get lastSeen =>
      (_$data['lastSeen'] as Input$timestamptz_comparison_exp?);
  Input$String_comparison_exp? get locale =>
      (_$data['locale'] as Input$String_comparison_exp?);
  Input$jsonb_comparison_exp? get metadata =>
      (_$data['metadata'] as Input$jsonb_comparison_exp?);
  Input$citext_comparison_exp? get newEmail =>
      (_$data['newEmail'] as Input$citext_comparison_exp?);
  Input$String_comparison_exp? get otpHash =>
      (_$data['otpHash'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get otpHashExpiresAt =>
      (_$data['otpHashExpiresAt'] as Input$timestamptz_comparison_exp?);
  Input$String_comparison_exp? get otpMethodLastUsed =>
      (_$data['otpMethodLastUsed'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get passwordHash =>
      (_$data['passwordHash'] as Input$String_comparison_exp?);
  Input$String_comparison_exp? get phoneNumber =>
      (_$data['phoneNumber'] as Input$String_comparison_exp?);
  Input$Boolean_comparison_exp? get phoneNumberVerified =>
      (_$data['phoneNumberVerified'] as Input$Boolean_comparison_exp?);
  Input$profile_bool_exp? get profile =>
      (_$data['profile'] as Input$profile_bool_exp?);
  Input$authRefreshTokens_bool_exp? get refreshTokens =>
      (_$data['refreshTokens'] as Input$authRefreshTokens_bool_exp?);
  Input$authRefreshTokens_aggregate_bool_exp? get refreshTokens_aggregate =>
      (_$data['refreshTokens_aggregate']
          as Input$authRefreshTokens_aggregate_bool_exp?);
  Input$authUserRoles_bool_exp? get roles =>
      (_$data['roles'] as Input$authUserRoles_bool_exp?);
  Input$authUserRoles_aggregate_bool_exp? get roles_aggregate =>
      (_$data['roles_aggregate'] as Input$authUserRoles_aggregate_bool_exp?);
  Input$authUserSecurityKeys_bool_exp? get securityKeys =>
      (_$data['securityKeys'] as Input$authUserSecurityKeys_bool_exp?);
  Input$authUserSecurityKeys_aggregate_bool_exp? get securityKeys_aggregate =>
      (_$data['securityKeys_aggregate']
          as Input$authUserSecurityKeys_aggregate_bool_exp?);
  Input$String_comparison_exp? get ticket =>
      (_$data['ticket'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get ticketExpiresAt =>
      (_$data['ticketExpiresAt'] as Input$timestamptz_comparison_exp?);
  Input$String_comparison_exp? get totpSecret =>
      (_$data['totpSecret'] as Input$String_comparison_exp?);
  Input$timestamptz_comparison_exp? get updatedAt =>
      (_$data['updatedAt'] as Input$timestamptz_comparison_exp?);
  Input$authUserProviders_bool_exp? get userProviders =>
      (_$data['userProviders'] as Input$authUserProviders_bool_exp?);
  Input$authUserProviders_aggregate_bool_exp? get userProviders_aggregate =>
      (_$data['userProviders_aggregate']
          as Input$authUserProviders_aggregate_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('UMKMById')) {
      final l$UMKMById = UMKMById;
      result$data['UMKMById'] = l$UMKMById?.toJson();
    }
    if (_$data.containsKey('_and')) {
      final l$$_and = $_and;
      result$data['_and'] = l$$_and?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('_not')) {
      final l$$_not = $_not;
      result$data['_not'] = l$$_not?.toJson();
    }
    if (_$data.containsKey('_or')) {
      final l$$_or = $_or;
      result$data['_or'] = l$$_or?.map((e) => e.toJson()).toList();
    }
    if (_$data.containsKey('activeMfaType')) {
      final l$activeMfaType = activeMfaType;
      result$data['activeMfaType'] = l$activeMfaType?.toJson();
    }
    if (_$data.containsKey('agent_cs_messages')) {
      final l$agent_cs_messages = agent_cs_messages;
      result$data['agent_cs_messages'] = l$agent_cs_messages?.toJson();
    }
    if (_$data.containsKey('agent_cs_messages_aggregate')) {
      final l$agent_cs_messages_aggregate = agent_cs_messages_aggregate;
      result$data['agent_cs_messages_aggregate'] =
          l$agent_cs_messages_aggregate?.toJson();
    }
    if (_$data.containsKey('avatarUrl')) {
      final l$avatarUrl = avatarUrl;
      result$data['avatarUrl'] = l$avatarUrl?.toJson();
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toJson();
    }
    if (_$data.containsKey('cs_messages')) {
      final l$cs_messages = cs_messages;
      result$data['cs_messages'] = l$cs_messages?.toJson();
    }
    if (_$data.containsKey('cs_messages_aggregate')) {
      final l$cs_messages_aggregate = cs_messages_aggregate;
      result$data['cs_messages_aggregate'] = l$cs_messages_aggregate?.toJson();
    }
    if (_$data.containsKey('currentChallenge')) {
      final l$currentChallenge = currentChallenge;
      result$data['currentChallenge'] = l$currentChallenge?.toJson();
    }
    if (_$data.containsKey('defaultRole')) {
      final l$defaultRole = defaultRole;
      result$data['defaultRole'] = l$defaultRole?.toJson();
    }
    if (_$data.containsKey('defaultRoleByRole')) {
      final l$defaultRoleByRole = defaultRoleByRole;
      result$data['defaultRoleByRole'] = l$defaultRoleByRole?.toJson();
    }
    if (_$data.containsKey('disabled')) {
      final l$disabled = disabled;
      result$data['disabled'] = l$disabled?.toJson();
    }
    if (_$data.containsKey('displayName')) {
      final l$displayName = displayName;
      result$data['displayName'] = l$displayName?.toJson();
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email?.toJson();
    }
    if (_$data.containsKey('emailVerified')) {
      final l$emailVerified = emailVerified;
      result$data['emailVerified'] = l$emailVerified?.toJson();
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id?.toJson();
    }
    if (_$data.containsKey('investorById')) {
      final l$investorById = investorById;
      result$data['investorById'] = l$investorById?.toJson();
    }
    if (_$data.containsKey('isAnonymous')) {
      final l$isAnonymous = isAnonymous;
      result$data['isAnonymous'] = l$isAnonymous?.toJson();
    }
    if (_$data.containsKey('lastSeen')) {
      final l$lastSeen = lastSeen;
      result$data['lastSeen'] = l$lastSeen?.toJson();
    }
    if (_$data.containsKey('locale')) {
      final l$locale = locale;
      result$data['locale'] = l$locale?.toJson();
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata?.toJson();
    }
    if (_$data.containsKey('newEmail')) {
      final l$newEmail = newEmail;
      result$data['newEmail'] = l$newEmail?.toJson();
    }
    if (_$data.containsKey('otpHash')) {
      final l$otpHash = otpHash;
      result$data['otpHash'] = l$otpHash?.toJson();
    }
    if (_$data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = otpHashExpiresAt;
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt?.toJson();
    }
    if (_$data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = otpMethodLastUsed;
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed?.toJson();
    }
    if (_$data.containsKey('passwordHash')) {
      final l$passwordHash = passwordHash;
      result$data['passwordHash'] = l$passwordHash?.toJson();
    }
    if (_$data.containsKey('phoneNumber')) {
      final l$phoneNumber = phoneNumber;
      result$data['phoneNumber'] = l$phoneNumber?.toJson();
    }
    if (_$data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = phoneNumberVerified;
      result$data['phoneNumberVerified'] = l$phoneNumberVerified?.toJson();
    }
    if (_$data.containsKey('profile')) {
      final l$profile = profile;
      result$data['profile'] = l$profile?.toJson();
    }
    if (_$data.containsKey('refreshTokens')) {
      final l$refreshTokens = refreshTokens;
      result$data['refreshTokens'] = l$refreshTokens?.toJson();
    }
    if (_$data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = refreshTokens_aggregate;
      result$data['refreshTokens_aggregate'] =
          l$refreshTokens_aggregate?.toJson();
    }
    if (_$data.containsKey('roles')) {
      final l$roles = roles;
      result$data['roles'] = l$roles?.toJson();
    }
    if (_$data.containsKey('roles_aggregate')) {
      final l$roles_aggregate = roles_aggregate;
      result$data['roles_aggregate'] = l$roles_aggregate?.toJson();
    }
    if (_$data.containsKey('securityKeys')) {
      final l$securityKeys = securityKeys;
      result$data['securityKeys'] = l$securityKeys?.toJson();
    }
    if (_$data.containsKey('securityKeys_aggregate')) {
      final l$securityKeys_aggregate = securityKeys_aggregate;
      result$data['securityKeys_aggregate'] =
          l$securityKeys_aggregate?.toJson();
    }
    if (_$data.containsKey('ticket')) {
      final l$ticket = ticket;
      result$data['ticket'] = l$ticket?.toJson();
    }
    if (_$data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = ticketExpiresAt;
      result$data['ticketExpiresAt'] = l$ticketExpiresAt?.toJson();
    }
    if (_$data.containsKey('totpSecret')) {
      final l$totpSecret = totpSecret;
      result$data['totpSecret'] = l$totpSecret?.toJson();
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toJson();
    }
    if (_$data.containsKey('userProviders')) {
      final l$userProviders = userProviders;
      result$data['userProviders'] = l$userProviders?.toJson();
    }
    if (_$data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = userProviders_aggregate;
      result$data['userProviders_aggregate'] =
          l$userProviders_aggregate?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_bool_exp<Input$users_bool_exp> get copyWith =>
      CopyWith$Input$users_bool_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_bool_exp) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$UMKMById = UMKMById;
    final lOther$UMKMById = other.UMKMById;
    if (_$data.containsKey('UMKMById') !=
        other._$data.containsKey('UMKMById')) {
      return false;
    }
    if (l$UMKMById != lOther$UMKMById) {
      return false;
    }
    final l$$_and = $_and;
    final lOther$$_and = other.$_and;
    if (_$data.containsKey('_and') != other._$data.containsKey('_and')) {
      return false;
    }
    if (l$$_and != null && lOther$$_and != null) {
      if (l$$_and.length != lOther$$_and.length) {
        return false;
      }
      for (int i = 0; i < l$$_and.length; i++) {
        final l$$_and$entry = l$$_and[i];
        final lOther$$_and$entry = lOther$$_and[i];
        if (l$$_and$entry != lOther$$_and$entry) {
          return false;
        }
      }
    } else if (l$$_and != lOther$$_and) {
      return false;
    }
    final l$$_not = $_not;
    final lOther$$_not = other.$_not;
    if (_$data.containsKey('_not') != other._$data.containsKey('_not')) {
      return false;
    }
    if (l$$_not != lOther$$_not) {
      return false;
    }
    final l$$_or = $_or;
    final lOther$$_or = other.$_or;
    if (_$data.containsKey('_or') != other._$data.containsKey('_or')) {
      return false;
    }
    if (l$$_or != null && lOther$$_or != null) {
      if (l$$_or.length != lOther$$_or.length) {
        return false;
      }
      for (int i = 0; i < l$$_or.length; i++) {
        final l$$_or$entry = l$$_or[i];
        final lOther$$_or$entry = lOther$$_or[i];
        if (l$$_or$entry != lOther$$_or$entry) {
          return false;
        }
      }
    } else if (l$$_or != lOther$$_or) {
      return false;
    }
    final l$activeMfaType = activeMfaType;
    final lOther$activeMfaType = other.activeMfaType;
    if (_$data.containsKey('activeMfaType') !=
        other._$data.containsKey('activeMfaType')) {
      return false;
    }
    if (l$activeMfaType != lOther$activeMfaType) {
      return false;
    }
    final l$agent_cs_messages = agent_cs_messages;
    final lOther$agent_cs_messages = other.agent_cs_messages;
    if (_$data.containsKey('agent_cs_messages') !=
        other._$data.containsKey('agent_cs_messages')) {
      return false;
    }
    if (l$agent_cs_messages != lOther$agent_cs_messages) {
      return false;
    }
    final l$agent_cs_messages_aggregate = agent_cs_messages_aggregate;
    final lOther$agent_cs_messages_aggregate =
        other.agent_cs_messages_aggregate;
    if (_$data.containsKey('agent_cs_messages_aggregate') !=
        other._$data.containsKey('agent_cs_messages_aggregate')) {
      return false;
    }
    if (l$agent_cs_messages_aggregate != lOther$agent_cs_messages_aggregate) {
      return false;
    }
    final l$avatarUrl = avatarUrl;
    final lOther$avatarUrl = other.avatarUrl;
    if (_$data.containsKey('avatarUrl') !=
        other._$data.containsKey('avatarUrl')) {
      return false;
    }
    if (l$avatarUrl != lOther$avatarUrl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$cs_messages = cs_messages;
    final lOther$cs_messages = other.cs_messages;
    if (_$data.containsKey('cs_messages') !=
        other._$data.containsKey('cs_messages')) {
      return false;
    }
    if (l$cs_messages != lOther$cs_messages) {
      return false;
    }
    final l$cs_messages_aggregate = cs_messages_aggregate;
    final lOther$cs_messages_aggregate = other.cs_messages_aggregate;
    if (_$data.containsKey('cs_messages_aggregate') !=
        other._$data.containsKey('cs_messages_aggregate')) {
      return false;
    }
    if (l$cs_messages_aggregate != lOther$cs_messages_aggregate) {
      return false;
    }
    final l$currentChallenge = currentChallenge;
    final lOther$currentChallenge = other.currentChallenge;
    if (_$data.containsKey('currentChallenge') !=
        other._$data.containsKey('currentChallenge')) {
      return false;
    }
    if (l$currentChallenge != lOther$currentChallenge) {
      return false;
    }
    final l$defaultRole = defaultRole;
    final lOther$defaultRole = other.defaultRole;
    if (_$data.containsKey('defaultRole') !=
        other._$data.containsKey('defaultRole')) {
      return false;
    }
    if (l$defaultRole != lOther$defaultRole) {
      return false;
    }
    final l$defaultRoleByRole = defaultRoleByRole;
    final lOther$defaultRoleByRole = other.defaultRoleByRole;
    if (_$data.containsKey('defaultRoleByRole') !=
        other._$data.containsKey('defaultRoleByRole')) {
      return false;
    }
    if (l$defaultRoleByRole != lOther$defaultRoleByRole) {
      return false;
    }
    final l$disabled = disabled;
    final lOther$disabled = other.disabled;
    if (_$data.containsKey('disabled') !=
        other._$data.containsKey('disabled')) {
      return false;
    }
    if (l$disabled != lOther$disabled) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (_$data.containsKey('displayName') !=
        other._$data.containsKey('displayName')) {
      return false;
    }
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$emailVerified = emailVerified;
    final lOther$emailVerified = other.emailVerified;
    if (_$data.containsKey('emailVerified') !=
        other._$data.containsKey('emailVerified')) {
      return false;
    }
    if (l$emailVerified != lOther$emailVerified) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$investorById = investorById;
    final lOther$investorById = other.investorById;
    if (_$data.containsKey('investorById') !=
        other._$data.containsKey('investorById')) {
      return false;
    }
    if (l$investorById != lOther$investorById) {
      return false;
    }
    final l$isAnonymous = isAnonymous;
    final lOther$isAnonymous = other.isAnonymous;
    if (_$data.containsKey('isAnonymous') !=
        other._$data.containsKey('isAnonymous')) {
      return false;
    }
    if (l$isAnonymous != lOther$isAnonymous) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (_$data.containsKey('lastSeen') !=
        other._$data.containsKey('lastSeen')) {
      return false;
    }
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$locale = locale;
    final lOther$locale = other.locale;
    if (_$data.containsKey('locale') != other._$data.containsKey('locale')) {
      return false;
    }
    if (l$locale != lOther$locale) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$newEmail = newEmail;
    final lOther$newEmail = other.newEmail;
    if (_$data.containsKey('newEmail') !=
        other._$data.containsKey('newEmail')) {
      return false;
    }
    if (l$newEmail != lOther$newEmail) {
      return false;
    }
    final l$otpHash = otpHash;
    final lOther$otpHash = other.otpHash;
    if (_$data.containsKey('otpHash') != other._$data.containsKey('otpHash')) {
      return false;
    }
    if (l$otpHash != lOther$otpHash) {
      return false;
    }
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final lOther$otpHashExpiresAt = other.otpHashExpiresAt;
    if (_$data.containsKey('otpHashExpiresAt') !=
        other._$data.containsKey('otpHashExpiresAt')) {
      return false;
    }
    if (l$otpHashExpiresAt != lOther$otpHashExpiresAt) {
      return false;
    }
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final lOther$otpMethodLastUsed = other.otpMethodLastUsed;
    if (_$data.containsKey('otpMethodLastUsed') !=
        other._$data.containsKey('otpMethodLastUsed')) {
      return false;
    }
    if (l$otpMethodLastUsed != lOther$otpMethodLastUsed) {
      return false;
    }
    final l$passwordHash = passwordHash;
    final lOther$passwordHash = other.passwordHash;
    if (_$data.containsKey('passwordHash') !=
        other._$data.containsKey('passwordHash')) {
      return false;
    }
    if (l$passwordHash != lOther$passwordHash) {
      return false;
    }
    final l$phoneNumber = phoneNumber;
    final lOther$phoneNumber = other.phoneNumber;
    if (_$data.containsKey('phoneNumber') !=
        other._$data.containsKey('phoneNumber')) {
      return false;
    }
    if (l$phoneNumber != lOther$phoneNumber) {
      return false;
    }
    final l$phoneNumberVerified = phoneNumberVerified;
    final lOther$phoneNumberVerified = other.phoneNumberVerified;
    if (_$data.containsKey('phoneNumberVerified') !=
        other._$data.containsKey('phoneNumberVerified')) {
      return false;
    }
    if (l$phoneNumberVerified != lOther$phoneNumberVerified) {
      return false;
    }
    final l$profile = profile;
    final lOther$profile = other.profile;
    if (_$data.containsKey('profile') != other._$data.containsKey('profile')) {
      return false;
    }
    if (l$profile != lOther$profile) {
      return false;
    }
    final l$refreshTokens = refreshTokens;
    final lOther$refreshTokens = other.refreshTokens;
    if (_$data.containsKey('refreshTokens') !=
        other._$data.containsKey('refreshTokens')) {
      return false;
    }
    if (l$refreshTokens != lOther$refreshTokens) {
      return false;
    }
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final lOther$refreshTokens_aggregate = other.refreshTokens_aggregate;
    if (_$data.containsKey('refreshTokens_aggregate') !=
        other._$data.containsKey('refreshTokens_aggregate')) {
      return false;
    }
    if (l$refreshTokens_aggregate != lOther$refreshTokens_aggregate) {
      return false;
    }
    final l$roles = roles;
    final lOther$roles = other.roles;
    if (_$data.containsKey('roles') != other._$data.containsKey('roles')) {
      return false;
    }
    if (l$roles != lOther$roles) {
      return false;
    }
    final l$roles_aggregate = roles_aggregate;
    final lOther$roles_aggregate = other.roles_aggregate;
    if (_$data.containsKey('roles_aggregate') !=
        other._$data.containsKey('roles_aggregate')) {
      return false;
    }
    if (l$roles_aggregate != lOther$roles_aggregate) {
      return false;
    }
    final l$securityKeys = securityKeys;
    final lOther$securityKeys = other.securityKeys;
    if (_$data.containsKey('securityKeys') !=
        other._$data.containsKey('securityKeys')) {
      return false;
    }
    if (l$securityKeys != lOther$securityKeys) {
      return false;
    }
    final l$securityKeys_aggregate = securityKeys_aggregate;
    final lOther$securityKeys_aggregate = other.securityKeys_aggregate;
    if (_$data.containsKey('securityKeys_aggregate') !=
        other._$data.containsKey('securityKeys_aggregate')) {
      return false;
    }
    if (l$securityKeys_aggregate != lOther$securityKeys_aggregate) {
      return false;
    }
    final l$ticket = ticket;
    final lOther$ticket = other.ticket;
    if (_$data.containsKey('ticket') != other._$data.containsKey('ticket')) {
      return false;
    }
    if (l$ticket != lOther$ticket) {
      return false;
    }
    final l$ticketExpiresAt = ticketExpiresAt;
    final lOther$ticketExpiresAt = other.ticketExpiresAt;
    if (_$data.containsKey('ticketExpiresAt') !=
        other._$data.containsKey('ticketExpiresAt')) {
      return false;
    }
    if (l$ticketExpiresAt != lOther$ticketExpiresAt) {
      return false;
    }
    final l$totpSecret = totpSecret;
    final lOther$totpSecret = other.totpSecret;
    if (_$data.containsKey('totpSecret') !=
        other._$data.containsKey('totpSecret')) {
      return false;
    }
    if (l$totpSecret != lOther$totpSecret) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userProviders = userProviders;
    final lOther$userProviders = other.userProviders;
    if (_$data.containsKey('userProviders') !=
        other._$data.containsKey('userProviders')) {
      return false;
    }
    if (l$userProviders != lOther$userProviders) {
      return false;
    }
    final l$userProviders_aggregate = userProviders_aggregate;
    final lOther$userProviders_aggregate = other.userProviders_aggregate;
    if (_$data.containsKey('userProviders_aggregate') !=
        other._$data.containsKey('userProviders_aggregate')) {
      return false;
    }
    if (l$userProviders_aggregate != lOther$userProviders_aggregate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$UMKMById = UMKMById;
    final l$$_and = $_and;
    final l$$_not = $_not;
    final l$$_or = $_or;
    final l$activeMfaType = activeMfaType;
    final l$agent_cs_messages = agent_cs_messages;
    final l$agent_cs_messages_aggregate = agent_cs_messages_aggregate;
    final l$avatarUrl = avatarUrl;
    final l$createdAt = createdAt;
    final l$cs_messages = cs_messages;
    final l$cs_messages_aggregate = cs_messages_aggregate;
    final l$currentChallenge = currentChallenge;
    final l$defaultRole = defaultRole;
    final l$defaultRoleByRole = defaultRoleByRole;
    final l$disabled = disabled;
    final l$displayName = displayName;
    final l$email = email;
    final l$emailVerified = emailVerified;
    final l$id = id;
    final l$investorById = investorById;
    final l$isAnonymous = isAnonymous;
    final l$lastSeen = lastSeen;
    final l$locale = locale;
    final l$metadata = metadata;
    final l$newEmail = newEmail;
    final l$otpHash = otpHash;
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final l$passwordHash = passwordHash;
    final l$phoneNumber = phoneNumber;
    final l$phoneNumberVerified = phoneNumberVerified;
    final l$profile = profile;
    final l$refreshTokens = refreshTokens;
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final l$roles = roles;
    final l$roles_aggregate = roles_aggregate;
    final l$securityKeys = securityKeys;
    final l$securityKeys_aggregate = securityKeys_aggregate;
    final l$ticket = ticket;
    final l$ticketExpiresAt = ticketExpiresAt;
    final l$totpSecret = totpSecret;
    final l$updatedAt = updatedAt;
    final l$userProviders = userProviders;
    final l$userProviders_aggregate = userProviders_aggregate;
    return Object.hashAll([
      _$data.containsKey('UMKMById') ? l$UMKMById : const {},
      _$data.containsKey('_and')
          ? l$$_and == null
              ? null
              : Object.hashAll(l$$_and.map((v) => v))
          : const {},
      _$data.containsKey('_not') ? l$$_not : const {},
      _$data.containsKey('_or')
          ? l$$_or == null
              ? null
              : Object.hashAll(l$$_or.map((v) => v))
          : const {},
      _$data.containsKey('activeMfaType') ? l$activeMfaType : const {},
      _$data.containsKey('agent_cs_messages') ? l$agent_cs_messages : const {},
      _$data.containsKey('agent_cs_messages_aggregate')
          ? l$agent_cs_messages_aggregate
          : const {},
      _$data.containsKey('avatarUrl') ? l$avatarUrl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('cs_messages') ? l$cs_messages : const {},
      _$data.containsKey('cs_messages_aggregate')
          ? l$cs_messages_aggregate
          : const {},
      _$data.containsKey('currentChallenge') ? l$currentChallenge : const {},
      _$data.containsKey('defaultRole') ? l$defaultRole : const {},
      _$data.containsKey('defaultRoleByRole') ? l$defaultRoleByRole : const {},
      _$data.containsKey('disabled') ? l$disabled : const {},
      _$data.containsKey('displayName') ? l$displayName : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('emailVerified') ? l$emailVerified : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('investorById') ? l$investorById : const {},
      _$data.containsKey('isAnonymous') ? l$isAnonymous : const {},
      _$data.containsKey('lastSeen') ? l$lastSeen : const {},
      _$data.containsKey('locale') ? l$locale : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('newEmail') ? l$newEmail : const {},
      _$data.containsKey('otpHash') ? l$otpHash : const {},
      _$data.containsKey('otpHashExpiresAt') ? l$otpHashExpiresAt : const {},
      _$data.containsKey('otpMethodLastUsed') ? l$otpMethodLastUsed : const {},
      _$data.containsKey('passwordHash') ? l$passwordHash : const {},
      _$data.containsKey('phoneNumber') ? l$phoneNumber : const {},
      _$data.containsKey('phoneNumberVerified')
          ? l$phoneNumberVerified
          : const {},
      _$data.containsKey('profile') ? l$profile : const {},
      _$data.containsKey('refreshTokens') ? l$refreshTokens : const {},
      _$data.containsKey('refreshTokens_aggregate')
          ? l$refreshTokens_aggregate
          : const {},
      _$data.containsKey('roles') ? l$roles : const {},
      _$data.containsKey('roles_aggregate') ? l$roles_aggregate : const {},
      _$data.containsKey('securityKeys') ? l$securityKeys : const {},
      _$data.containsKey('securityKeys_aggregate')
          ? l$securityKeys_aggregate
          : const {},
      _$data.containsKey('ticket') ? l$ticket : const {},
      _$data.containsKey('ticketExpiresAt') ? l$ticketExpiresAt : const {},
      _$data.containsKey('totpSecret') ? l$totpSecret : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('userProviders') ? l$userProviders : const {},
      _$data.containsKey('userProviders_aggregate')
          ? l$userProviders_aggregate
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_bool_exp<TRes> {
  factory CopyWith$Input$users_bool_exp(
    Input$users_bool_exp instance,
    TRes Function(Input$users_bool_exp) then,
  ) = _CopyWithImpl$Input$users_bool_exp;

  factory CopyWith$Input$users_bool_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$users_bool_exp;

  TRes call({
    Input$umkm_bool_exp? UMKMById,
    List<Input$users_bool_exp>? $_and,
    Input$users_bool_exp? $_not,
    List<Input$users_bool_exp>? $_or,
    Input$String_comparison_exp? activeMfaType,
    Input$cs_message_bool_exp? agent_cs_messages,
    Input$cs_message_aggregate_bool_exp? agent_cs_messages_aggregate,
    Input$String_comparison_exp? avatarUrl,
    Input$timestamptz_comparison_exp? createdAt,
    Input$cs_message_bool_exp? cs_messages,
    Input$cs_message_aggregate_bool_exp? cs_messages_aggregate,
    Input$String_comparison_exp? currentChallenge,
    Input$String_comparison_exp? defaultRole,
    Input$authRoles_bool_exp? defaultRoleByRole,
    Input$Boolean_comparison_exp? disabled,
    Input$String_comparison_exp? displayName,
    Input$citext_comparison_exp? email,
    Input$Boolean_comparison_exp? emailVerified,
    Input$uuid_comparison_exp? id,
    Input$investor_bool_exp? investorById,
    Input$Boolean_comparison_exp? isAnonymous,
    Input$timestamptz_comparison_exp? lastSeen,
    Input$String_comparison_exp? locale,
    Input$jsonb_comparison_exp? metadata,
    Input$citext_comparison_exp? newEmail,
    Input$String_comparison_exp? otpHash,
    Input$timestamptz_comparison_exp? otpHashExpiresAt,
    Input$String_comparison_exp? otpMethodLastUsed,
    Input$String_comparison_exp? passwordHash,
    Input$String_comparison_exp? phoneNumber,
    Input$Boolean_comparison_exp? phoneNumberVerified,
    Input$profile_bool_exp? profile,
    Input$authRefreshTokens_bool_exp? refreshTokens,
    Input$authRefreshTokens_aggregate_bool_exp? refreshTokens_aggregate,
    Input$authUserRoles_bool_exp? roles,
    Input$authUserRoles_aggregate_bool_exp? roles_aggregate,
    Input$authUserSecurityKeys_bool_exp? securityKeys,
    Input$authUserSecurityKeys_aggregate_bool_exp? securityKeys_aggregate,
    Input$String_comparison_exp? ticket,
    Input$timestamptz_comparison_exp? ticketExpiresAt,
    Input$String_comparison_exp? totpSecret,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$authUserProviders_bool_exp? userProviders,
    Input$authUserProviders_aggregate_bool_exp? userProviders_aggregate,
  });
  CopyWith$Input$umkm_bool_exp<TRes> get UMKMById;
  TRes $_and(
      Iterable<Input$users_bool_exp>? Function(
              Iterable<CopyWith$Input$users_bool_exp<Input$users_bool_exp>>?)
          _fn);
  CopyWith$Input$users_bool_exp<TRes> get $_not;
  TRes $_or(
      Iterable<Input$users_bool_exp>? Function(
              Iterable<CopyWith$Input$users_bool_exp<Input$users_bool_exp>>?)
          _fn);
  CopyWith$Input$String_comparison_exp<TRes> get activeMfaType;
  CopyWith$Input$cs_message_bool_exp<TRes> get agent_cs_messages;
  CopyWith$Input$cs_message_aggregate_bool_exp<TRes>
      get agent_cs_messages_aggregate;
  CopyWith$Input$String_comparison_exp<TRes> get avatarUrl;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt;
  CopyWith$Input$cs_message_bool_exp<TRes> get cs_messages;
  CopyWith$Input$cs_message_aggregate_bool_exp<TRes> get cs_messages_aggregate;
  CopyWith$Input$String_comparison_exp<TRes> get currentChallenge;
  CopyWith$Input$String_comparison_exp<TRes> get defaultRole;
  CopyWith$Input$authRoles_bool_exp<TRes> get defaultRoleByRole;
  CopyWith$Input$Boolean_comparison_exp<TRes> get disabled;
  CopyWith$Input$String_comparison_exp<TRes> get displayName;
  CopyWith$Input$citext_comparison_exp<TRes> get email;
  CopyWith$Input$Boolean_comparison_exp<TRes> get emailVerified;
  CopyWith$Input$uuid_comparison_exp<TRes> get id;
  CopyWith$Input$investor_bool_exp<TRes> get investorById;
  CopyWith$Input$Boolean_comparison_exp<TRes> get isAnonymous;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get lastSeen;
  CopyWith$Input$String_comparison_exp<TRes> get locale;
  CopyWith$Input$jsonb_comparison_exp<TRes> get metadata;
  CopyWith$Input$citext_comparison_exp<TRes> get newEmail;
  CopyWith$Input$String_comparison_exp<TRes> get otpHash;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get otpHashExpiresAt;
  CopyWith$Input$String_comparison_exp<TRes> get otpMethodLastUsed;
  CopyWith$Input$String_comparison_exp<TRes> get passwordHash;
  CopyWith$Input$String_comparison_exp<TRes> get phoneNumber;
  CopyWith$Input$Boolean_comparison_exp<TRes> get phoneNumberVerified;
  CopyWith$Input$profile_bool_exp<TRes> get profile;
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get refreshTokens;
  CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes>
      get refreshTokens_aggregate;
  CopyWith$Input$authUserRoles_bool_exp<TRes> get roles;
  CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes> get roles_aggregate;
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get securityKeys;
  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp<TRes>
      get securityKeys_aggregate;
  CopyWith$Input$String_comparison_exp<TRes> get ticket;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get ticketExpiresAt;
  CopyWith$Input$String_comparison_exp<TRes> get totpSecret;
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt;
  CopyWith$Input$authUserProviders_bool_exp<TRes> get userProviders;
  CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes>
      get userProviders_aggregate;
}

class _CopyWithImpl$Input$users_bool_exp<TRes>
    implements CopyWith$Input$users_bool_exp<TRes> {
  _CopyWithImpl$Input$users_bool_exp(
    this._instance,
    this._then,
  );

  final Input$users_bool_exp _instance;

  final TRes Function(Input$users_bool_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? UMKMById = _undefined,
    Object? $_and = _undefined,
    Object? $_not = _undefined,
    Object? $_or = _undefined,
    Object? activeMfaType = _undefined,
    Object? agent_cs_messages = _undefined,
    Object? agent_cs_messages_aggregate = _undefined,
    Object? avatarUrl = _undefined,
    Object? createdAt = _undefined,
    Object? cs_messages = _undefined,
    Object? cs_messages_aggregate = _undefined,
    Object? currentChallenge = _undefined,
    Object? defaultRole = _undefined,
    Object? defaultRoleByRole = _undefined,
    Object? disabled = _undefined,
    Object? displayName = _undefined,
    Object? email = _undefined,
    Object? emailVerified = _undefined,
    Object? id = _undefined,
    Object? investorById = _undefined,
    Object? isAnonymous = _undefined,
    Object? lastSeen = _undefined,
    Object? locale = _undefined,
    Object? metadata = _undefined,
    Object? newEmail = _undefined,
    Object? otpHash = _undefined,
    Object? otpHashExpiresAt = _undefined,
    Object? otpMethodLastUsed = _undefined,
    Object? passwordHash = _undefined,
    Object? phoneNumber = _undefined,
    Object? phoneNumberVerified = _undefined,
    Object? profile = _undefined,
    Object? refreshTokens = _undefined,
    Object? refreshTokens_aggregate = _undefined,
    Object? roles = _undefined,
    Object? roles_aggregate = _undefined,
    Object? securityKeys = _undefined,
    Object? securityKeys_aggregate = _undefined,
    Object? ticket = _undefined,
    Object? ticketExpiresAt = _undefined,
    Object? totpSecret = _undefined,
    Object? updatedAt = _undefined,
    Object? userProviders = _undefined,
    Object? userProviders_aggregate = _undefined,
  }) =>
      _then(Input$users_bool_exp._({
        ..._instance._$data,
        if (UMKMById != _undefined)
          'UMKMById': (UMKMById as Input$umkm_bool_exp?),
        if ($_and != _undefined) '_and': ($_and as List<Input$users_bool_exp>?),
        if ($_not != _undefined) '_not': ($_not as Input$users_bool_exp?),
        if ($_or != _undefined) '_or': ($_or as List<Input$users_bool_exp>?),
        if (activeMfaType != _undefined)
          'activeMfaType': (activeMfaType as Input$String_comparison_exp?),
        if (agent_cs_messages != _undefined)
          'agent_cs_messages':
              (agent_cs_messages as Input$cs_message_bool_exp?),
        if (agent_cs_messages_aggregate != _undefined)
          'agent_cs_messages_aggregate': (agent_cs_messages_aggregate
              as Input$cs_message_aggregate_bool_exp?),
        if (avatarUrl != _undefined)
          'avatarUrl': (avatarUrl as Input$String_comparison_exp?),
        if (createdAt != _undefined)
          'createdAt': (createdAt as Input$timestamptz_comparison_exp?),
        if (cs_messages != _undefined)
          'cs_messages': (cs_messages as Input$cs_message_bool_exp?),
        if (cs_messages_aggregate != _undefined)
          'cs_messages_aggregate':
              (cs_messages_aggregate as Input$cs_message_aggregate_bool_exp?),
        if (currentChallenge != _undefined)
          'currentChallenge':
              (currentChallenge as Input$String_comparison_exp?),
        if (defaultRole != _undefined)
          'defaultRole': (defaultRole as Input$String_comparison_exp?),
        if (defaultRoleByRole != _undefined)
          'defaultRoleByRole': (defaultRoleByRole as Input$authRoles_bool_exp?),
        if (disabled != _undefined)
          'disabled': (disabled as Input$Boolean_comparison_exp?),
        if (displayName != _undefined)
          'displayName': (displayName as Input$String_comparison_exp?),
        if (email != _undefined)
          'email': (email as Input$citext_comparison_exp?),
        if (emailVerified != _undefined)
          'emailVerified': (emailVerified as Input$Boolean_comparison_exp?),
        if (id != _undefined) 'id': (id as Input$uuid_comparison_exp?),
        if (investorById != _undefined)
          'investorById': (investorById as Input$investor_bool_exp?),
        if (isAnonymous != _undefined)
          'isAnonymous': (isAnonymous as Input$Boolean_comparison_exp?),
        if (lastSeen != _undefined)
          'lastSeen': (lastSeen as Input$timestamptz_comparison_exp?),
        if (locale != _undefined)
          'locale': (locale as Input$String_comparison_exp?),
        if (metadata != _undefined)
          'metadata': (metadata as Input$jsonb_comparison_exp?),
        if (newEmail != _undefined)
          'newEmail': (newEmail as Input$citext_comparison_exp?),
        if (otpHash != _undefined)
          'otpHash': (otpHash as Input$String_comparison_exp?),
        if (otpHashExpiresAt != _undefined)
          'otpHashExpiresAt':
              (otpHashExpiresAt as Input$timestamptz_comparison_exp?),
        if (otpMethodLastUsed != _undefined)
          'otpMethodLastUsed':
              (otpMethodLastUsed as Input$String_comparison_exp?),
        if (passwordHash != _undefined)
          'passwordHash': (passwordHash as Input$String_comparison_exp?),
        if (phoneNumber != _undefined)
          'phoneNumber': (phoneNumber as Input$String_comparison_exp?),
        if (phoneNumberVerified != _undefined)
          'phoneNumberVerified':
              (phoneNumberVerified as Input$Boolean_comparison_exp?),
        if (profile != _undefined)
          'profile': (profile as Input$profile_bool_exp?),
        if (refreshTokens != _undefined)
          'refreshTokens': (refreshTokens as Input$authRefreshTokens_bool_exp?),
        if (refreshTokens_aggregate != _undefined)
          'refreshTokens_aggregate': (refreshTokens_aggregate
              as Input$authRefreshTokens_aggregate_bool_exp?),
        if (roles != _undefined)
          'roles': (roles as Input$authUserRoles_bool_exp?),
        if (roles_aggregate != _undefined)
          'roles_aggregate':
              (roles_aggregate as Input$authUserRoles_aggregate_bool_exp?),
        if (securityKeys != _undefined)
          'securityKeys':
              (securityKeys as Input$authUserSecurityKeys_bool_exp?),
        if (securityKeys_aggregate != _undefined)
          'securityKeys_aggregate': (securityKeys_aggregate
              as Input$authUserSecurityKeys_aggregate_bool_exp?),
        if (ticket != _undefined)
          'ticket': (ticket as Input$String_comparison_exp?),
        if (ticketExpiresAt != _undefined)
          'ticketExpiresAt':
              (ticketExpiresAt as Input$timestamptz_comparison_exp?),
        if (totpSecret != _undefined)
          'totpSecret': (totpSecret as Input$String_comparison_exp?),
        if (updatedAt != _undefined)
          'updatedAt': (updatedAt as Input$timestamptz_comparison_exp?),
        if (userProviders != _undefined)
          'userProviders': (userProviders as Input$authUserProviders_bool_exp?),
        if (userProviders_aggregate != _undefined)
          'userProviders_aggregate': (userProviders_aggregate
              as Input$authUserProviders_aggregate_bool_exp?),
      }));
  CopyWith$Input$umkm_bool_exp<TRes> get UMKMById {
    final local$UMKMById = _instance.UMKMById;
    return local$UMKMById == null
        ? CopyWith$Input$umkm_bool_exp.stub(_then(_instance))
        : CopyWith$Input$umkm_bool_exp(
            local$UMKMById, (e) => call(UMKMById: e));
  }

  TRes $_and(
          Iterable<Input$users_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$users_bool_exp<Input$users_bool_exp>>?)
              _fn) =>
      call(
          $_and: _fn(_instance.$_and?.map((e) => CopyWith$Input$users_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$users_bool_exp<TRes> get $_not {
    final local$$_not = _instance.$_not;
    return local$$_not == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$$_not, (e) => call($_not: e));
  }

  TRes $_or(
          Iterable<Input$users_bool_exp>? Function(
                  Iterable<
                      CopyWith$Input$users_bool_exp<Input$users_bool_exp>>?)
              _fn) =>
      call(
          $_or: _fn(_instance.$_or?.map((e) => CopyWith$Input$users_bool_exp(
                e,
                (i) => i,
              )))?.toList());
  CopyWith$Input$String_comparison_exp<TRes> get activeMfaType {
    final local$activeMfaType = _instance.activeMfaType;
    return local$activeMfaType == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$activeMfaType, (e) => call(activeMfaType: e));
  }

  CopyWith$Input$cs_message_bool_exp<TRes> get agent_cs_messages {
    final local$agent_cs_messages = _instance.agent_cs_messages;
    return local$agent_cs_messages == null
        ? CopyWith$Input$cs_message_bool_exp.stub(_then(_instance))
        : CopyWith$Input$cs_message_bool_exp(
            local$agent_cs_messages, (e) => call(agent_cs_messages: e));
  }

  CopyWith$Input$cs_message_aggregate_bool_exp<TRes>
      get agent_cs_messages_aggregate {
    final local$agent_cs_messages_aggregate =
        _instance.agent_cs_messages_aggregate;
    return local$agent_cs_messages_aggregate == null
        ? CopyWith$Input$cs_message_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$cs_message_aggregate_bool_exp(
            local$agent_cs_messages_aggregate,
            (e) => call(agent_cs_messages_aggregate: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get avatarUrl {
    final local$avatarUrl = _instance.avatarUrl;
    return local$avatarUrl == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$avatarUrl, (e) => call(avatarUrl: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt {
    final local$createdAt = _instance.createdAt;
    return local$createdAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$createdAt, (e) => call(createdAt: e));
  }

  CopyWith$Input$cs_message_bool_exp<TRes> get cs_messages {
    final local$cs_messages = _instance.cs_messages;
    return local$cs_messages == null
        ? CopyWith$Input$cs_message_bool_exp.stub(_then(_instance))
        : CopyWith$Input$cs_message_bool_exp(
            local$cs_messages, (e) => call(cs_messages: e));
  }

  CopyWith$Input$cs_message_aggregate_bool_exp<TRes> get cs_messages_aggregate {
    final local$cs_messages_aggregate = _instance.cs_messages_aggregate;
    return local$cs_messages_aggregate == null
        ? CopyWith$Input$cs_message_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$cs_message_aggregate_bool_exp(
            local$cs_messages_aggregate, (e) => call(cs_messages_aggregate: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get currentChallenge {
    final local$currentChallenge = _instance.currentChallenge;
    return local$currentChallenge == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$currentChallenge, (e) => call(currentChallenge: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get defaultRole {
    final local$defaultRole = _instance.defaultRole;
    return local$defaultRole == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$defaultRole, (e) => call(defaultRole: e));
  }

  CopyWith$Input$authRoles_bool_exp<TRes> get defaultRoleByRole {
    final local$defaultRoleByRole = _instance.defaultRoleByRole;
    return local$defaultRoleByRole == null
        ? CopyWith$Input$authRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRoles_bool_exp(
            local$defaultRoleByRole, (e) => call(defaultRoleByRole: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get disabled {
    final local$disabled = _instance.disabled;
    return local$disabled == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$disabled, (e) => call(disabled: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get displayName {
    final local$displayName = _instance.displayName;
    return local$displayName == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$displayName, (e) => call(displayName: e));
  }

  CopyWith$Input$citext_comparison_exp<TRes> get email {
    final local$email = _instance.email;
    return local$email == null
        ? CopyWith$Input$citext_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$citext_comparison_exp(
            local$email, (e) => call(email: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get emailVerified {
    final local$emailVerified = _instance.emailVerified;
    return local$emailVerified == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$emailVerified, (e) => call(emailVerified: e));
  }

  CopyWith$Input$uuid_comparison_exp<TRes> get id {
    final local$id = _instance.id;
    return local$id == null
        ? CopyWith$Input$uuid_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$uuid_comparison_exp(local$id, (e) => call(id: e));
  }

  CopyWith$Input$investor_bool_exp<TRes> get investorById {
    final local$investorById = _instance.investorById;
    return local$investorById == null
        ? CopyWith$Input$investor_bool_exp.stub(_then(_instance))
        : CopyWith$Input$investor_bool_exp(
            local$investorById, (e) => call(investorById: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get isAnonymous {
    final local$isAnonymous = _instance.isAnonymous;
    return local$isAnonymous == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$isAnonymous, (e) => call(isAnonymous: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get lastSeen {
    final local$lastSeen = _instance.lastSeen;
    return local$lastSeen == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$lastSeen, (e) => call(lastSeen: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get locale {
    final local$locale = _instance.locale;
    return local$locale == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$locale, (e) => call(locale: e));
  }

  CopyWith$Input$jsonb_comparison_exp<TRes> get metadata {
    final local$metadata = _instance.metadata;
    return local$metadata == null
        ? CopyWith$Input$jsonb_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$jsonb_comparison_exp(
            local$metadata, (e) => call(metadata: e));
  }

  CopyWith$Input$citext_comparison_exp<TRes> get newEmail {
    final local$newEmail = _instance.newEmail;
    return local$newEmail == null
        ? CopyWith$Input$citext_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$citext_comparison_exp(
            local$newEmail, (e) => call(newEmail: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get otpHash {
    final local$otpHash = _instance.otpHash;
    return local$otpHash == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$otpHash, (e) => call(otpHash: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get otpHashExpiresAt {
    final local$otpHashExpiresAt = _instance.otpHashExpiresAt;
    return local$otpHashExpiresAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$otpHashExpiresAt, (e) => call(otpHashExpiresAt: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get otpMethodLastUsed {
    final local$otpMethodLastUsed = _instance.otpMethodLastUsed;
    return local$otpMethodLastUsed == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$otpMethodLastUsed, (e) => call(otpMethodLastUsed: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get passwordHash {
    final local$passwordHash = _instance.passwordHash;
    return local$passwordHash == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$passwordHash, (e) => call(passwordHash: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get phoneNumber {
    final local$phoneNumber = _instance.phoneNumber;
    return local$phoneNumber == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$phoneNumber, (e) => call(phoneNumber: e));
  }

  CopyWith$Input$Boolean_comparison_exp<TRes> get phoneNumberVerified {
    final local$phoneNumberVerified = _instance.phoneNumberVerified;
    return local$phoneNumberVerified == null
        ? CopyWith$Input$Boolean_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$Boolean_comparison_exp(
            local$phoneNumberVerified, (e) => call(phoneNumberVerified: e));
  }

  CopyWith$Input$profile_bool_exp<TRes> get profile {
    final local$profile = _instance.profile;
    return local$profile == null
        ? CopyWith$Input$profile_bool_exp.stub(_then(_instance))
        : CopyWith$Input$profile_bool_exp(
            local$profile, (e) => call(profile: e));
  }

  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get refreshTokens {
    final local$refreshTokens = _instance.refreshTokens;
    return local$refreshTokens == null
        ? CopyWith$Input$authRefreshTokens_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authRefreshTokens_bool_exp(
            local$refreshTokens, (e) => call(refreshTokens: e));
  }

  CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes>
      get refreshTokens_aggregate {
    final local$refreshTokens_aggregate = _instance.refreshTokens_aggregate;
    return local$refreshTokens_aggregate == null
        ? CopyWith$Input$authRefreshTokens_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_aggregate_bool_exp(
            local$refreshTokens_aggregate,
            (e) => call(refreshTokens_aggregate: e));
  }

  CopyWith$Input$authUserRoles_bool_exp<TRes> get roles {
    final local$roles = _instance.roles;
    return local$roles == null
        ? CopyWith$Input$authUserRoles_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_bool_exp(
            local$roles, (e) => call(roles: e));
  }

  CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes> get roles_aggregate {
    final local$roles_aggregate = _instance.roles_aggregate;
    return local$roles_aggregate == null
        ? CopyWith$Input$authUserRoles_aggregate_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_aggregate_bool_exp(
            local$roles_aggregate, (e) => call(roles_aggregate: e));
  }

  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get securityKeys {
    final local$securityKeys = _instance.securityKeys;
    return local$securityKeys == null
        ? CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserSecurityKeys_bool_exp(
            local$securityKeys, (e) => call(securityKeys: e));
  }

  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp<TRes>
      get securityKeys_aggregate {
    final local$securityKeys_aggregate = _instance.securityKeys_aggregate;
    return local$securityKeys_aggregate == null
        ? CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp(
            local$securityKeys_aggregate,
            (e) => call(securityKeys_aggregate: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get ticket {
    final local$ticket = _instance.ticket;
    return local$ticket == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$ticket, (e) => call(ticket: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get ticketExpiresAt {
    final local$ticketExpiresAt = _instance.ticketExpiresAt;
    return local$ticketExpiresAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$ticketExpiresAt, (e) => call(ticketExpiresAt: e));
  }

  CopyWith$Input$String_comparison_exp<TRes> get totpSecret {
    final local$totpSecret = _instance.totpSecret;
    return local$totpSecret == null
        ? CopyWith$Input$String_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$String_comparison_exp(
            local$totpSecret, (e) => call(totpSecret: e));
  }

  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt {
    final local$updatedAt = _instance.updatedAt;
    return local$updatedAt == null
        ? CopyWith$Input$timestamptz_comparison_exp.stub(_then(_instance))
        : CopyWith$Input$timestamptz_comparison_exp(
            local$updatedAt, (e) => call(updatedAt: e));
  }

  CopyWith$Input$authUserProviders_bool_exp<TRes> get userProviders {
    final local$userProviders = _instance.userProviders;
    return local$userProviders == null
        ? CopyWith$Input$authUserProviders_bool_exp.stub(_then(_instance))
        : CopyWith$Input$authUserProviders_bool_exp(
            local$userProviders, (e) => call(userProviders: e));
  }

  CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes>
      get userProviders_aggregate {
    final local$userProviders_aggregate = _instance.userProviders_aggregate;
    return local$userProviders_aggregate == null
        ? CopyWith$Input$authUserProviders_aggregate_bool_exp.stub(
            _then(_instance))
        : CopyWith$Input$authUserProviders_aggregate_bool_exp(
            local$userProviders_aggregate,
            (e) => call(userProviders_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$users_bool_exp<TRes>
    implements CopyWith$Input$users_bool_exp<TRes> {
  _CopyWithStubImpl$Input$users_bool_exp(this._res);

  TRes _res;

  call({
    Input$umkm_bool_exp? UMKMById,
    List<Input$users_bool_exp>? $_and,
    Input$users_bool_exp? $_not,
    List<Input$users_bool_exp>? $_or,
    Input$String_comparison_exp? activeMfaType,
    Input$cs_message_bool_exp? agent_cs_messages,
    Input$cs_message_aggregate_bool_exp? agent_cs_messages_aggregate,
    Input$String_comparison_exp? avatarUrl,
    Input$timestamptz_comparison_exp? createdAt,
    Input$cs_message_bool_exp? cs_messages,
    Input$cs_message_aggregate_bool_exp? cs_messages_aggregate,
    Input$String_comparison_exp? currentChallenge,
    Input$String_comparison_exp? defaultRole,
    Input$authRoles_bool_exp? defaultRoleByRole,
    Input$Boolean_comparison_exp? disabled,
    Input$String_comparison_exp? displayName,
    Input$citext_comparison_exp? email,
    Input$Boolean_comparison_exp? emailVerified,
    Input$uuid_comparison_exp? id,
    Input$investor_bool_exp? investorById,
    Input$Boolean_comparison_exp? isAnonymous,
    Input$timestamptz_comparison_exp? lastSeen,
    Input$String_comparison_exp? locale,
    Input$jsonb_comparison_exp? metadata,
    Input$citext_comparison_exp? newEmail,
    Input$String_comparison_exp? otpHash,
    Input$timestamptz_comparison_exp? otpHashExpiresAt,
    Input$String_comparison_exp? otpMethodLastUsed,
    Input$String_comparison_exp? passwordHash,
    Input$String_comparison_exp? phoneNumber,
    Input$Boolean_comparison_exp? phoneNumberVerified,
    Input$profile_bool_exp? profile,
    Input$authRefreshTokens_bool_exp? refreshTokens,
    Input$authRefreshTokens_aggregate_bool_exp? refreshTokens_aggregate,
    Input$authUserRoles_bool_exp? roles,
    Input$authUserRoles_aggregate_bool_exp? roles_aggregate,
    Input$authUserSecurityKeys_bool_exp? securityKeys,
    Input$authUserSecurityKeys_aggregate_bool_exp? securityKeys_aggregate,
    Input$String_comparison_exp? ticket,
    Input$timestamptz_comparison_exp? ticketExpiresAt,
    Input$String_comparison_exp? totpSecret,
    Input$timestamptz_comparison_exp? updatedAt,
    Input$authUserProviders_bool_exp? userProviders,
    Input$authUserProviders_aggregate_bool_exp? userProviders_aggregate,
  }) =>
      _res;
  CopyWith$Input$umkm_bool_exp<TRes> get UMKMById =>
      CopyWith$Input$umkm_bool_exp.stub(_res);
  $_and(_fn) => _res;
  CopyWith$Input$users_bool_exp<TRes> get $_not =>
      CopyWith$Input$users_bool_exp.stub(_res);
  $_or(_fn) => _res;
  CopyWith$Input$String_comparison_exp<TRes> get activeMfaType =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$cs_message_bool_exp<TRes> get agent_cs_messages =>
      CopyWith$Input$cs_message_bool_exp.stub(_res);
  CopyWith$Input$cs_message_aggregate_bool_exp<TRes>
      get agent_cs_messages_aggregate =>
          CopyWith$Input$cs_message_aggregate_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get avatarUrl =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get createdAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$cs_message_bool_exp<TRes> get cs_messages =>
      CopyWith$Input$cs_message_bool_exp.stub(_res);
  CopyWith$Input$cs_message_aggregate_bool_exp<TRes>
      get cs_messages_aggregate =>
          CopyWith$Input$cs_message_aggregate_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get currentChallenge =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get defaultRole =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$authRoles_bool_exp<TRes> get defaultRoleByRole =>
      CopyWith$Input$authRoles_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get disabled =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get displayName =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$citext_comparison_exp<TRes> get email =>
      CopyWith$Input$citext_comparison_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get emailVerified =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$uuid_comparison_exp<TRes> get id =>
      CopyWith$Input$uuid_comparison_exp.stub(_res);
  CopyWith$Input$investor_bool_exp<TRes> get investorById =>
      CopyWith$Input$investor_bool_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get isAnonymous =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get lastSeen =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get locale =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$jsonb_comparison_exp<TRes> get metadata =>
      CopyWith$Input$jsonb_comparison_exp.stub(_res);
  CopyWith$Input$citext_comparison_exp<TRes> get newEmail =>
      CopyWith$Input$citext_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get otpHash =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get otpHashExpiresAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get otpMethodLastUsed =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get passwordHash =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get phoneNumber =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$Boolean_comparison_exp<TRes> get phoneNumberVerified =>
      CopyWith$Input$Boolean_comparison_exp.stub(_res);
  CopyWith$Input$profile_bool_exp<TRes> get profile =>
      CopyWith$Input$profile_bool_exp.stub(_res);
  CopyWith$Input$authRefreshTokens_bool_exp<TRes> get refreshTokens =>
      CopyWith$Input$authRefreshTokens_bool_exp.stub(_res);
  CopyWith$Input$authRefreshTokens_aggregate_bool_exp<TRes>
      get refreshTokens_aggregate =>
          CopyWith$Input$authRefreshTokens_aggregate_bool_exp.stub(_res);
  CopyWith$Input$authUserRoles_bool_exp<TRes> get roles =>
      CopyWith$Input$authUserRoles_bool_exp.stub(_res);
  CopyWith$Input$authUserRoles_aggregate_bool_exp<TRes> get roles_aggregate =>
      CopyWith$Input$authUserRoles_aggregate_bool_exp.stub(_res);
  CopyWith$Input$authUserSecurityKeys_bool_exp<TRes> get securityKeys =>
      CopyWith$Input$authUserSecurityKeys_bool_exp.stub(_res);
  CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp<TRes>
      get securityKeys_aggregate =>
          CopyWith$Input$authUserSecurityKeys_aggregate_bool_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get ticket =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get ticketExpiresAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$String_comparison_exp<TRes> get totpSecret =>
      CopyWith$Input$String_comparison_exp.stub(_res);
  CopyWith$Input$timestamptz_comparison_exp<TRes> get updatedAt =>
      CopyWith$Input$timestamptz_comparison_exp.stub(_res);
  CopyWith$Input$authUserProviders_bool_exp<TRes> get userProviders =>
      CopyWith$Input$authUserProviders_bool_exp.stub(_res);
  CopyWith$Input$authUserProviders_aggregate_bool_exp<TRes>
      get userProviders_aggregate =>
          CopyWith$Input$authUserProviders_aggregate_bool_exp.stub(_res);
}

class Input$users_delete_at_path_input {
  factory Input$users_delete_at_path_input({List<String>? metadata}) =>
      Input$users_delete_at_path_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$users_delete_at_path_input._(this._$data);

  factory Input$users_delete_at_path_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          (l$metadata as List<dynamic>?)?.map((e) => (e as String)).toList();
    }
    return Input$users_delete_at_path_input._(result$data);
  }

  Map<String, dynamic> _$data;

  List<String>? get metadata => (_$data['metadata'] as List<String>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata?.map((e) => e).toList();
    }
    return result$data;
  }

  CopyWith$Input$users_delete_at_path_input<Input$users_delete_at_path_input>
      get copyWith => CopyWith$Input$users_delete_at_path_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_delete_at_path_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != null && lOther$metadata != null) {
      if (l$metadata.length != lOther$metadata.length) {
        return false;
      }
      for (int i = 0; i < l$metadata.length; i++) {
        final l$metadata$entry = l$metadata[i];
        final lOther$metadata$entry = lOther$metadata[i];
        if (l$metadata$entry != lOther$metadata$entry) {
          return false;
        }
      }
    } else if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll([
      _$data.containsKey('metadata')
          ? l$metadata == null
              ? null
              : Object.hashAll(l$metadata.map((v) => v))
          : const {}
    ]);
  }
}

abstract class CopyWith$Input$users_delete_at_path_input<TRes> {
  factory CopyWith$Input$users_delete_at_path_input(
    Input$users_delete_at_path_input instance,
    TRes Function(Input$users_delete_at_path_input) then,
  ) = _CopyWithImpl$Input$users_delete_at_path_input;

  factory CopyWith$Input$users_delete_at_path_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_delete_at_path_input;

  TRes call({List<String>? metadata});
}

class _CopyWithImpl$Input$users_delete_at_path_input<TRes>
    implements CopyWith$Input$users_delete_at_path_input<TRes> {
  _CopyWithImpl$Input$users_delete_at_path_input(
    this._instance,
    this._then,
  );

  final Input$users_delete_at_path_input _instance;

  final TRes Function(Input$users_delete_at_path_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$users_delete_at_path_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as List<String>?),
      }));
}

class _CopyWithStubImpl$Input$users_delete_at_path_input<TRes>
    implements CopyWith$Input$users_delete_at_path_input<TRes> {
  _CopyWithStubImpl$Input$users_delete_at_path_input(this._res);

  TRes _res;

  call({List<String>? metadata}) => _res;
}

class Input$users_delete_elem_input {
  factory Input$users_delete_elem_input({int? metadata}) =>
      Input$users_delete_elem_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$users_delete_elem_input._(this._$data);

  factory Input$users_delete_elem_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = (l$metadata as int?);
    }
    return Input$users_delete_elem_input._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get metadata => (_$data['metadata'] as int?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata;
    }
    return result$data;
  }

  CopyWith$Input$users_delete_elem_input<Input$users_delete_elem_input>
      get copyWith => CopyWith$Input$users_delete_elem_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_delete_elem_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$users_delete_elem_input<TRes> {
  factory CopyWith$Input$users_delete_elem_input(
    Input$users_delete_elem_input instance,
    TRes Function(Input$users_delete_elem_input) then,
  ) = _CopyWithImpl$Input$users_delete_elem_input;

  factory CopyWith$Input$users_delete_elem_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_delete_elem_input;

  TRes call({int? metadata});
}

class _CopyWithImpl$Input$users_delete_elem_input<TRes>
    implements CopyWith$Input$users_delete_elem_input<TRes> {
  _CopyWithImpl$Input$users_delete_elem_input(
    this._instance,
    this._then,
  );

  final Input$users_delete_elem_input _instance;

  final TRes Function(Input$users_delete_elem_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$users_delete_elem_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as int?),
      }));
}

class _CopyWithStubImpl$Input$users_delete_elem_input<TRes>
    implements CopyWith$Input$users_delete_elem_input<TRes> {
  _CopyWithStubImpl$Input$users_delete_elem_input(this._res);

  TRes _res;

  call({int? metadata}) => _res;
}

class Input$users_delete_key_input {
  factory Input$users_delete_key_input({String? metadata}) =>
      Input$users_delete_key_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$users_delete_key_input._(this._$data);

  factory Input$users_delete_key_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = (l$metadata as String?);
    }
    return Input$users_delete_key_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get metadata => (_$data['metadata'] as String?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] = l$metadata;
    }
    return result$data;
  }

  CopyWith$Input$users_delete_key_input<Input$users_delete_key_input>
      get copyWith => CopyWith$Input$users_delete_key_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_delete_key_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$users_delete_key_input<TRes> {
  factory CopyWith$Input$users_delete_key_input(
    Input$users_delete_key_input instance,
    TRes Function(Input$users_delete_key_input) then,
  ) = _CopyWithImpl$Input$users_delete_key_input;

  factory CopyWith$Input$users_delete_key_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_delete_key_input;

  TRes call({String? metadata});
}

class _CopyWithImpl$Input$users_delete_key_input<TRes>
    implements CopyWith$Input$users_delete_key_input<TRes> {
  _CopyWithImpl$Input$users_delete_key_input(
    this._instance,
    this._then,
  );

  final Input$users_delete_key_input _instance;

  final TRes Function(Input$users_delete_key_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$users_delete_key_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as String?),
      }));
}

class _CopyWithStubImpl$Input$users_delete_key_input<TRes>
    implements CopyWith$Input$users_delete_key_input<TRes> {
  _CopyWithStubImpl$Input$users_delete_key_input(this._res);

  TRes _res;

  call({String? metadata}) => _res;
}

class Input$users_insert_input {
  factory Input$users_insert_input({
    Input$umkm_obj_rel_insert_input? UMKMById,
    String? activeMfaType,
    Input$cs_message_arr_rel_insert_input? agent_cs_messages,
    String? avatarUrl,
    DateTime? createdAt,
    Input$cs_message_arr_rel_insert_input? cs_messages,
    String? currentChallenge,
    String? defaultRole,
    Input$authRoles_obj_rel_insert_input? defaultRoleByRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    Input$investor_obj_rel_insert_input? investorById,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    Input$profile_obj_rel_insert_input? profile,
    Input$authRefreshTokens_arr_rel_insert_input? refreshTokens,
    Input$authUserRoles_arr_rel_insert_input? roles,
    Input$authUserSecurityKeys_arr_rel_insert_input? securityKeys,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
    Input$authUserProviders_arr_rel_insert_input? userProviders,
  }) =>
      Input$users_insert_input._({
        if (UMKMById != null) r'UMKMById': UMKMById,
        if (activeMfaType != null) r'activeMfaType': activeMfaType,
        if (agent_cs_messages != null) r'agent_cs_messages': agent_cs_messages,
        if (avatarUrl != null) r'avatarUrl': avatarUrl,
        if (createdAt != null) r'createdAt': createdAt,
        if (cs_messages != null) r'cs_messages': cs_messages,
        if (currentChallenge != null) r'currentChallenge': currentChallenge,
        if (defaultRole != null) r'defaultRole': defaultRole,
        if (defaultRoleByRole != null) r'defaultRoleByRole': defaultRoleByRole,
        if (disabled != null) r'disabled': disabled,
        if (displayName != null) r'displayName': displayName,
        if (email != null) r'email': email,
        if (emailVerified != null) r'emailVerified': emailVerified,
        if (id != null) r'id': id,
        if (investorById != null) r'investorById': investorById,
        if (isAnonymous != null) r'isAnonymous': isAnonymous,
        if (lastSeen != null) r'lastSeen': lastSeen,
        if (locale != null) r'locale': locale,
        if (metadata != null) r'metadata': metadata,
        if (newEmail != null) r'newEmail': newEmail,
        if (otpHash != null) r'otpHash': otpHash,
        if (otpHashExpiresAt != null) r'otpHashExpiresAt': otpHashExpiresAt,
        if (otpMethodLastUsed != null) r'otpMethodLastUsed': otpMethodLastUsed,
        if (passwordHash != null) r'passwordHash': passwordHash,
        if (phoneNumber != null) r'phoneNumber': phoneNumber,
        if (phoneNumberVerified != null)
          r'phoneNumberVerified': phoneNumberVerified,
        if (profile != null) r'profile': profile,
        if (refreshTokens != null) r'refreshTokens': refreshTokens,
        if (roles != null) r'roles': roles,
        if (securityKeys != null) r'securityKeys': securityKeys,
        if (ticket != null) r'ticket': ticket,
        if (ticketExpiresAt != null) r'ticketExpiresAt': ticketExpiresAt,
        if (totpSecret != null) r'totpSecret': totpSecret,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (userProviders != null) r'userProviders': userProviders,
      });

  Input$users_insert_input._(this._$data);

  factory Input$users_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('UMKMById')) {
      final l$UMKMById = data['UMKMById'];
      result$data['UMKMById'] = l$UMKMById == null
          ? null
          : Input$umkm_obj_rel_insert_input.fromJson(
              (l$UMKMById as Map<String, dynamic>));
    }
    if (data.containsKey('activeMfaType')) {
      final l$activeMfaType = data['activeMfaType'];
      result$data['activeMfaType'] = (l$activeMfaType as String?);
    }
    if (data.containsKey('agent_cs_messages')) {
      final l$agent_cs_messages = data['agent_cs_messages'];
      result$data['agent_cs_messages'] = l$agent_cs_messages == null
          ? null
          : Input$cs_message_arr_rel_insert_input.fromJson(
              (l$agent_cs_messages as Map<String, dynamic>));
    }
    if (data.containsKey('avatarUrl')) {
      final l$avatarUrl = data['avatarUrl'];
      result$data['avatarUrl'] = (l$avatarUrl as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('cs_messages')) {
      final l$cs_messages = data['cs_messages'];
      result$data['cs_messages'] = l$cs_messages == null
          ? null
          : Input$cs_message_arr_rel_insert_input.fromJson(
              (l$cs_messages as Map<String, dynamic>));
    }
    if (data.containsKey('currentChallenge')) {
      final l$currentChallenge = data['currentChallenge'];
      result$data['currentChallenge'] = (l$currentChallenge as String?);
    }
    if (data.containsKey('defaultRole')) {
      final l$defaultRole = data['defaultRole'];
      result$data['defaultRole'] = (l$defaultRole as String?);
    }
    if (data.containsKey('defaultRoleByRole')) {
      final l$defaultRoleByRole = data['defaultRoleByRole'];
      result$data['defaultRoleByRole'] = l$defaultRoleByRole == null
          ? null
          : Input$authRoles_obj_rel_insert_input.fromJson(
              (l$defaultRoleByRole as Map<String, dynamic>));
    }
    if (data.containsKey('disabled')) {
      final l$disabled = data['disabled'];
      result$data['disabled'] = (l$disabled as bool?);
    }
    if (data.containsKey('displayName')) {
      final l$displayName = data['displayName'];
      result$data['displayName'] = (l$displayName as String?);
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = l$email == null ? null : citextFromJson(l$email);
    }
    if (data.containsKey('emailVerified')) {
      final l$emailVerified = data['emailVerified'];
      result$data['emailVerified'] = (l$emailVerified as bool?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('investorById')) {
      final l$investorById = data['investorById'];
      result$data['investorById'] = l$investorById == null
          ? null
          : Input$investor_obj_rel_insert_input.fromJson(
              (l$investorById as Map<String, dynamic>));
    }
    if (data.containsKey('isAnonymous')) {
      final l$isAnonymous = data['isAnonymous'];
      result$data['isAnonymous'] = (l$isAnonymous as bool?);
    }
    if (data.containsKey('lastSeen')) {
      final l$lastSeen = data['lastSeen'];
      result$data['lastSeen'] =
          l$lastSeen == null ? null : DateTime.parse((l$lastSeen as String));
    }
    if (data.containsKey('locale')) {
      final l$locale = data['locale'];
      result$data['locale'] = (l$locale as String?);
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    if (data.containsKey('newEmail')) {
      final l$newEmail = data['newEmail'];
      result$data['newEmail'] =
          l$newEmail == null ? null : citextFromJson(l$newEmail);
    }
    if (data.containsKey('otpHash')) {
      final l$otpHash = data['otpHash'];
      result$data['otpHash'] = (l$otpHash as String?);
    }
    if (data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = data['otpHashExpiresAt'];
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : DateTime.parse((l$otpHashExpiresAt as String));
    }
    if (data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = data['otpMethodLastUsed'];
      result$data['otpMethodLastUsed'] = (l$otpMethodLastUsed as String?);
    }
    if (data.containsKey('passwordHash')) {
      final l$passwordHash = data['passwordHash'];
      result$data['passwordHash'] = (l$passwordHash as String?);
    }
    if (data.containsKey('phoneNumber')) {
      final l$phoneNumber = data['phoneNumber'];
      result$data['phoneNumber'] = (l$phoneNumber as String?);
    }
    if (data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = data['phoneNumberVerified'];
      result$data['phoneNumberVerified'] = (l$phoneNumberVerified as bool?);
    }
    if (data.containsKey('profile')) {
      final l$profile = data['profile'];
      result$data['profile'] = l$profile == null
          ? null
          : Input$profile_obj_rel_insert_input.fromJson(
              (l$profile as Map<String, dynamic>));
    }
    if (data.containsKey('refreshTokens')) {
      final l$refreshTokens = data['refreshTokens'];
      result$data['refreshTokens'] = l$refreshTokens == null
          ? null
          : Input$authRefreshTokens_arr_rel_insert_input.fromJson(
              (l$refreshTokens as Map<String, dynamic>));
    }
    if (data.containsKey('roles')) {
      final l$roles = data['roles'];
      result$data['roles'] = l$roles == null
          ? null
          : Input$authUserRoles_arr_rel_insert_input.fromJson(
              (l$roles as Map<String, dynamic>));
    }
    if (data.containsKey('securityKeys')) {
      final l$securityKeys = data['securityKeys'];
      result$data['securityKeys'] = l$securityKeys == null
          ? null
          : Input$authUserSecurityKeys_arr_rel_insert_input.fromJson(
              (l$securityKeys as Map<String, dynamic>));
    }
    if (data.containsKey('ticket')) {
      final l$ticket = data['ticket'];
      result$data['ticket'] = (l$ticket as String?);
    }
    if (data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = data['ticketExpiresAt'];
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : DateTime.parse((l$ticketExpiresAt as String));
    }
    if (data.containsKey('totpSecret')) {
      final l$totpSecret = data['totpSecret'];
      result$data['totpSecret'] = (l$totpSecret as String?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    if (data.containsKey('userProviders')) {
      final l$userProviders = data['userProviders'];
      result$data['userProviders'] = l$userProviders == null
          ? null
          : Input$authUserProviders_arr_rel_insert_input.fromJson(
              (l$userProviders as Map<String, dynamic>));
    }
    return Input$users_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$umkm_obj_rel_insert_input? get UMKMById =>
      (_$data['UMKMById'] as Input$umkm_obj_rel_insert_input?);
  String? get activeMfaType => (_$data['activeMfaType'] as String?);
  Input$cs_message_arr_rel_insert_input? get agent_cs_messages =>
      (_$data['agent_cs_messages'] as Input$cs_message_arr_rel_insert_input?);
  String? get avatarUrl => (_$data['avatarUrl'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  Input$cs_message_arr_rel_insert_input? get cs_messages =>
      (_$data['cs_messages'] as Input$cs_message_arr_rel_insert_input?);
  String? get currentChallenge => (_$data['currentChallenge'] as String?);
  String? get defaultRole => (_$data['defaultRole'] as String?);
  Input$authRoles_obj_rel_insert_input? get defaultRoleByRole =>
      (_$data['defaultRoleByRole'] as Input$authRoles_obj_rel_insert_input?);
  bool? get disabled => (_$data['disabled'] as bool?);
  String? get displayName => (_$data['displayName'] as String?);
  Citext? get email => (_$data['email'] as Citext?);
  bool? get emailVerified => (_$data['emailVerified'] as bool?);
  UUID? get id => (_$data['id'] as UUID?);
  Input$investor_obj_rel_insert_input? get investorById =>
      (_$data['investorById'] as Input$investor_obj_rel_insert_input?);
  bool? get isAnonymous => (_$data['isAnonymous'] as bool?);
  DateTime? get lastSeen => (_$data['lastSeen'] as DateTime?);
  String? get locale => (_$data['locale'] as String?);
  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  Citext? get newEmail => (_$data['newEmail'] as Citext?);
  String? get otpHash => (_$data['otpHash'] as String?);
  DateTime? get otpHashExpiresAt => (_$data['otpHashExpiresAt'] as DateTime?);
  String? get otpMethodLastUsed => (_$data['otpMethodLastUsed'] as String?);
  String? get passwordHash => (_$data['passwordHash'] as String?);
  String? get phoneNumber => (_$data['phoneNumber'] as String?);
  bool? get phoneNumberVerified => (_$data['phoneNumberVerified'] as bool?);
  Input$profile_obj_rel_insert_input? get profile =>
      (_$data['profile'] as Input$profile_obj_rel_insert_input?);
  Input$authRefreshTokens_arr_rel_insert_input? get refreshTokens =>
      (_$data['refreshTokens']
          as Input$authRefreshTokens_arr_rel_insert_input?);
  Input$authUserRoles_arr_rel_insert_input? get roles =>
      (_$data['roles'] as Input$authUserRoles_arr_rel_insert_input?);
  Input$authUserSecurityKeys_arr_rel_insert_input? get securityKeys =>
      (_$data['securityKeys']
          as Input$authUserSecurityKeys_arr_rel_insert_input?);
  String? get ticket => (_$data['ticket'] as String?);
  DateTime? get ticketExpiresAt => (_$data['ticketExpiresAt'] as DateTime?);
  String? get totpSecret => (_$data['totpSecret'] as String?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  Input$authUserProviders_arr_rel_insert_input? get userProviders =>
      (_$data['userProviders']
          as Input$authUserProviders_arr_rel_insert_input?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('UMKMById')) {
      final l$UMKMById = UMKMById;
      result$data['UMKMById'] = l$UMKMById?.toJson();
    }
    if (_$data.containsKey('activeMfaType')) {
      final l$activeMfaType = activeMfaType;
      result$data['activeMfaType'] = l$activeMfaType;
    }
    if (_$data.containsKey('agent_cs_messages')) {
      final l$agent_cs_messages = agent_cs_messages;
      result$data['agent_cs_messages'] = l$agent_cs_messages?.toJson();
    }
    if (_$data.containsKey('avatarUrl')) {
      final l$avatarUrl = avatarUrl;
      result$data['avatarUrl'] = l$avatarUrl;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('cs_messages')) {
      final l$cs_messages = cs_messages;
      result$data['cs_messages'] = l$cs_messages?.toJson();
    }
    if (_$data.containsKey('currentChallenge')) {
      final l$currentChallenge = currentChallenge;
      result$data['currentChallenge'] = l$currentChallenge;
    }
    if (_$data.containsKey('defaultRole')) {
      final l$defaultRole = defaultRole;
      result$data['defaultRole'] = l$defaultRole;
    }
    if (_$data.containsKey('defaultRoleByRole')) {
      final l$defaultRoleByRole = defaultRoleByRole;
      result$data['defaultRoleByRole'] = l$defaultRoleByRole?.toJson();
    }
    if (_$data.containsKey('disabled')) {
      final l$disabled = disabled;
      result$data['disabled'] = l$disabled;
    }
    if (_$data.containsKey('displayName')) {
      final l$displayName = displayName;
      result$data['displayName'] = l$displayName;
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email == null ? null : citextToJson(l$email);
    }
    if (_$data.containsKey('emailVerified')) {
      final l$emailVerified = emailVerified;
      result$data['emailVerified'] = l$emailVerified;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('investorById')) {
      final l$investorById = investorById;
      result$data['investorById'] = l$investorById?.toJson();
    }
    if (_$data.containsKey('isAnonymous')) {
      final l$isAnonymous = isAnonymous;
      result$data['isAnonymous'] = l$isAnonymous;
    }
    if (_$data.containsKey('lastSeen')) {
      final l$lastSeen = lastSeen;
      result$data['lastSeen'] = l$lastSeen?.toIso8601String();
    }
    if (_$data.containsKey('locale')) {
      final l$locale = locale;
      result$data['locale'] = l$locale;
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    if (_$data.containsKey('newEmail')) {
      final l$newEmail = newEmail;
      result$data['newEmail'] =
          l$newEmail == null ? null : citextToJson(l$newEmail);
    }
    if (_$data.containsKey('otpHash')) {
      final l$otpHash = otpHash;
      result$data['otpHash'] = l$otpHash;
    }
    if (_$data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = otpHashExpiresAt;
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt?.toIso8601String();
    }
    if (_$data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = otpMethodLastUsed;
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed;
    }
    if (_$data.containsKey('passwordHash')) {
      final l$passwordHash = passwordHash;
      result$data['passwordHash'] = l$passwordHash;
    }
    if (_$data.containsKey('phoneNumber')) {
      final l$phoneNumber = phoneNumber;
      result$data['phoneNumber'] = l$phoneNumber;
    }
    if (_$data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = phoneNumberVerified;
      result$data['phoneNumberVerified'] = l$phoneNumberVerified;
    }
    if (_$data.containsKey('profile')) {
      final l$profile = profile;
      result$data['profile'] = l$profile?.toJson();
    }
    if (_$data.containsKey('refreshTokens')) {
      final l$refreshTokens = refreshTokens;
      result$data['refreshTokens'] = l$refreshTokens?.toJson();
    }
    if (_$data.containsKey('roles')) {
      final l$roles = roles;
      result$data['roles'] = l$roles?.toJson();
    }
    if (_$data.containsKey('securityKeys')) {
      final l$securityKeys = securityKeys;
      result$data['securityKeys'] = l$securityKeys?.toJson();
    }
    if (_$data.containsKey('ticket')) {
      final l$ticket = ticket;
      result$data['ticket'] = l$ticket;
    }
    if (_$data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = ticketExpiresAt;
      result$data['ticketExpiresAt'] = l$ticketExpiresAt?.toIso8601String();
    }
    if (_$data.containsKey('totpSecret')) {
      final l$totpSecret = totpSecret;
      result$data['totpSecret'] = l$totpSecret;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    if (_$data.containsKey('userProviders')) {
      final l$userProviders = userProviders;
      result$data['userProviders'] = l$userProviders?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_insert_input<Input$users_insert_input> get copyWith =>
      CopyWith$Input$users_insert_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$UMKMById = UMKMById;
    final lOther$UMKMById = other.UMKMById;
    if (_$data.containsKey('UMKMById') !=
        other._$data.containsKey('UMKMById')) {
      return false;
    }
    if (l$UMKMById != lOther$UMKMById) {
      return false;
    }
    final l$activeMfaType = activeMfaType;
    final lOther$activeMfaType = other.activeMfaType;
    if (_$data.containsKey('activeMfaType') !=
        other._$data.containsKey('activeMfaType')) {
      return false;
    }
    if (l$activeMfaType != lOther$activeMfaType) {
      return false;
    }
    final l$agent_cs_messages = agent_cs_messages;
    final lOther$agent_cs_messages = other.agent_cs_messages;
    if (_$data.containsKey('agent_cs_messages') !=
        other._$data.containsKey('agent_cs_messages')) {
      return false;
    }
    if (l$agent_cs_messages != lOther$agent_cs_messages) {
      return false;
    }
    final l$avatarUrl = avatarUrl;
    final lOther$avatarUrl = other.avatarUrl;
    if (_$data.containsKey('avatarUrl') !=
        other._$data.containsKey('avatarUrl')) {
      return false;
    }
    if (l$avatarUrl != lOther$avatarUrl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$cs_messages = cs_messages;
    final lOther$cs_messages = other.cs_messages;
    if (_$data.containsKey('cs_messages') !=
        other._$data.containsKey('cs_messages')) {
      return false;
    }
    if (l$cs_messages != lOther$cs_messages) {
      return false;
    }
    final l$currentChallenge = currentChallenge;
    final lOther$currentChallenge = other.currentChallenge;
    if (_$data.containsKey('currentChallenge') !=
        other._$data.containsKey('currentChallenge')) {
      return false;
    }
    if (l$currentChallenge != lOther$currentChallenge) {
      return false;
    }
    final l$defaultRole = defaultRole;
    final lOther$defaultRole = other.defaultRole;
    if (_$data.containsKey('defaultRole') !=
        other._$data.containsKey('defaultRole')) {
      return false;
    }
    if (l$defaultRole != lOther$defaultRole) {
      return false;
    }
    final l$defaultRoleByRole = defaultRoleByRole;
    final lOther$defaultRoleByRole = other.defaultRoleByRole;
    if (_$data.containsKey('defaultRoleByRole') !=
        other._$data.containsKey('defaultRoleByRole')) {
      return false;
    }
    if (l$defaultRoleByRole != lOther$defaultRoleByRole) {
      return false;
    }
    final l$disabled = disabled;
    final lOther$disabled = other.disabled;
    if (_$data.containsKey('disabled') !=
        other._$data.containsKey('disabled')) {
      return false;
    }
    if (l$disabled != lOther$disabled) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (_$data.containsKey('displayName') !=
        other._$data.containsKey('displayName')) {
      return false;
    }
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$emailVerified = emailVerified;
    final lOther$emailVerified = other.emailVerified;
    if (_$data.containsKey('emailVerified') !=
        other._$data.containsKey('emailVerified')) {
      return false;
    }
    if (l$emailVerified != lOther$emailVerified) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$investorById = investorById;
    final lOther$investorById = other.investorById;
    if (_$data.containsKey('investorById') !=
        other._$data.containsKey('investorById')) {
      return false;
    }
    if (l$investorById != lOther$investorById) {
      return false;
    }
    final l$isAnonymous = isAnonymous;
    final lOther$isAnonymous = other.isAnonymous;
    if (_$data.containsKey('isAnonymous') !=
        other._$data.containsKey('isAnonymous')) {
      return false;
    }
    if (l$isAnonymous != lOther$isAnonymous) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (_$data.containsKey('lastSeen') !=
        other._$data.containsKey('lastSeen')) {
      return false;
    }
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$locale = locale;
    final lOther$locale = other.locale;
    if (_$data.containsKey('locale') != other._$data.containsKey('locale')) {
      return false;
    }
    if (l$locale != lOther$locale) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$newEmail = newEmail;
    final lOther$newEmail = other.newEmail;
    if (_$data.containsKey('newEmail') !=
        other._$data.containsKey('newEmail')) {
      return false;
    }
    if (l$newEmail != lOther$newEmail) {
      return false;
    }
    final l$otpHash = otpHash;
    final lOther$otpHash = other.otpHash;
    if (_$data.containsKey('otpHash') != other._$data.containsKey('otpHash')) {
      return false;
    }
    if (l$otpHash != lOther$otpHash) {
      return false;
    }
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final lOther$otpHashExpiresAt = other.otpHashExpiresAt;
    if (_$data.containsKey('otpHashExpiresAt') !=
        other._$data.containsKey('otpHashExpiresAt')) {
      return false;
    }
    if (l$otpHashExpiresAt != lOther$otpHashExpiresAt) {
      return false;
    }
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final lOther$otpMethodLastUsed = other.otpMethodLastUsed;
    if (_$data.containsKey('otpMethodLastUsed') !=
        other._$data.containsKey('otpMethodLastUsed')) {
      return false;
    }
    if (l$otpMethodLastUsed != lOther$otpMethodLastUsed) {
      return false;
    }
    final l$passwordHash = passwordHash;
    final lOther$passwordHash = other.passwordHash;
    if (_$data.containsKey('passwordHash') !=
        other._$data.containsKey('passwordHash')) {
      return false;
    }
    if (l$passwordHash != lOther$passwordHash) {
      return false;
    }
    final l$phoneNumber = phoneNumber;
    final lOther$phoneNumber = other.phoneNumber;
    if (_$data.containsKey('phoneNumber') !=
        other._$data.containsKey('phoneNumber')) {
      return false;
    }
    if (l$phoneNumber != lOther$phoneNumber) {
      return false;
    }
    final l$phoneNumberVerified = phoneNumberVerified;
    final lOther$phoneNumberVerified = other.phoneNumberVerified;
    if (_$data.containsKey('phoneNumberVerified') !=
        other._$data.containsKey('phoneNumberVerified')) {
      return false;
    }
    if (l$phoneNumberVerified != lOther$phoneNumberVerified) {
      return false;
    }
    final l$profile = profile;
    final lOther$profile = other.profile;
    if (_$data.containsKey('profile') != other._$data.containsKey('profile')) {
      return false;
    }
    if (l$profile != lOther$profile) {
      return false;
    }
    final l$refreshTokens = refreshTokens;
    final lOther$refreshTokens = other.refreshTokens;
    if (_$data.containsKey('refreshTokens') !=
        other._$data.containsKey('refreshTokens')) {
      return false;
    }
    if (l$refreshTokens != lOther$refreshTokens) {
      return false;
    }
    final l$roles = roles;
    final lOther$roles = other.roles;
    if (_$data.containsKey('roles') != other._$data.containsKey('roles')) {
      return false;
    }
    if (l$roles != lOther$roles) {
      return false;
    }
    final l$securityKeys = securityKeys;
    final lOther$securityKeys = other.securityKeys;
    if (_$data.containsKey('securityKeys') !=
        other._$data.containsKey('securityKeys')) {
      return false;
    }
    if (l$securityKeys != lOther$securityKeys) {
      return false;
    }
    final l$ticket = ticket;
    final lOther$ticket = other.ticket;
    if (_$data.containsKey('ticket') != other._$data.containsKey('ticket')) {
      return false;
    }
    if (l$ticket != lOther$ticket) {
      return false;
    }
    final l$ticketExpiresAt = ticketExpiresAt;
    final lOther$ticketExpiresAt = other.ticketExpiresAt;
    if (_$data.containsKey('ticketExpiresAt') !=
        other._$data.containsKey('ticketExpiresAt')) {
      return false;
    }
    if (l$ticketExpiresAt != lOther$ticketExpiresAt) {
      return false;
    }
    final l$totpSecret = totpSecret;
    final lOther$totpSecret = other.totpSecret;
    if (_$data.containsKey('totpSecret') !=
        other._$data.containsKey('totpSecret')) {
      return false;
    }
    if (l$totpSecret != lOther$totpSecret) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userProviders = userProviders;
    final lOther$userProviders = other.userProviders;
    if (_$data.containsKey('userProviders') !=
        other._$data.containsKey('userProviders')) {
      return false;
    }
    if (l$userProviders != lOther$userProviders) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$UMKMById = UMKMById;
    final l$activeMfaType = activeMfaType;
    final l$agent_cs_messages = agent_cs_messages;
    final l$avatarUrl = avatarUrl;
    final l$createdAt = createdAt;
    final l$cs_messages = cs_messages;
    final l$currentChallenge = currentChallenge;
    final l$defaultRole = defaultRole;
    final l$defaultRoleByRole = defaultRoleByRole;
    final l$disabled = disabled;
    final l$displayName = displayName;
    final l$email = email;
    final l$emailVerified = emailVerified;
    final l$id = id;
    final l$investorById = investorById;
    final l$isAnonymous = isAnonymous;
    final l$lastSeen = lastSeen;
    final l$locale = locale;
    final l$metadata = metadata;
    final l$newEmail = newEmail;
    final l$otpHash = otpHash;
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final l$passwordHash = passwordHash;
    final l$phoneNumber = phoneNumber;
    final l$phoneNumberVerified = phoneNumberVerified;
    final l$profile = profile;
    final l$refreshTokens = refreshTokens;
    final l$roles = roles;
    final l$securityKeys = securityKeys;
    final l$ticket = ticket;
    final l$ticketExpiresAt = ticketExpiresAt;
    final l$totpSecret = totpSecret;
    final l$updatedAt = updatedAt;
    final l$userProviders = userProviders;
    return Object.hashAll([
      _$data.containsKey('UMKMById') ? l$UMKMById : const {},
      _$data.containsKey('activeMfaType') ? l$activeMfaType : const {},
      _$data.containsKey('agent_cs_messages') ? l$agent_cs_messages : const {},
      _$data.containsKey('avatarUrl') ? l$avatarUrl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('cs_messages') ? l$cs_messages : const {},
      _$data.containsKey('currentChallenge') ? l$currentChallenge : const {},
      _$data.containsKey('defaultRole') ? l$defaultRole : const {},
      _$data.containsKey('defaultRoleByRole') ? l$defaultRoleByRole : const {},
      _$data.containsKey('disabled') ? l$disabled : const {},
      _$data.containsKey('displayName') ? l$displayName : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('emailVerified') ? l$emailVerified : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('investorById') ? l$investorById : const {},
      _$data.containsKey('isAnonymous') ? l$isAnonymous : const {},
      _$data.containsKey('lastSeen') ? l$lastSeen : const {},
      _$data.containsKey('locale') ? l$locale : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('newEmail') ? l$newEmail : const {},
      _$data.containsKey('otpHash') ? l$otpHash : const {},
      _$data.containsKey('otpHashExpiresAt') ? l$otpHashExpiresAt : const {},
      _$data.containsKey('otpMethodLastUsed') ? l$otpMethodLastUsed : const {},
      _$data.containsKey('passwordHash') ? l$passwordHash : const {},
      _$data.containsKey('phoneNumber') ? l$phoneNumber : const {},
      _$data.containsKey('phoneNumberVerified')
          ? l$phoneNumberVerified
          : const {},
      _$data.containsKey('profile') ? l$profile : const {},
      _$data.containsKey('refreshTokens') ? l$refreshTokens : const {},
      _$data.containsKey('roles') ? l$roles : const {},
      _$data.containsKey('securityKeys') ? l$securityKeys : const {},
      _$data.containsKey('ticket') ? l$ticket : const {},
      _$data.containsKey('ticketExpiresAt') ? l$ticketExpiresAt : const {},
      _$data.containsKey('totpSecret') ? l$totpSecret : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('userProviders') ? l$userProviders : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_insert_input<TRes> {
  factory CopyWith$Input$users_insert_input(
    Input$users_insert_input instance,
    TRes Function(Input$users_insert_input) then,
  ) = _CopyWithImpl$Input$users_insert_input;

  factory CopyWith$Input$users_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_insert_input;

  TRes call({
    Input$umkm_obj_rel_insert_input? UMKMById,
    String? activeMfaType,
    Input$cs_message_arr_rel_insert_input? agent_cs_messages,
    String? avatarUrl,
    DateTime? createdAt,
    Input$cs_message_arr_rel_insert_input? cs_messages,
    String? currentChallenge,
    String? defaultRole,
    Input$authRoles_obj_rel_insert_input? defaultRoleByRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    Input$investor_obj_rel_insert_input? investorById,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    Input$profile_obj_rel_insert_input? profile,
    Input$authRefreshTokens_arr_rel_insert_input? refreshTokens,
    Input$authUserRoles_arr_rel_insert_input? roles,
    Input$authUserSecurityKeys_arr_rel_insert_input? securityKeys,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
    Input$authUserProviders_arr_rel_insert_input? userProviders,
  });
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get UMKMById;
  CopyWith$Input$cs_message_arr_rel_insert_input<TRes> get agent_cs_messages;
  CopyWith$Input$cs_message_arr_rel_insert_input<TRes> get cs_messages;
  CopyWith$Input$authRoles_obj_rel_insert_input<TRes> get defaultRoleByRole;
  CopyWith$Input$investor_obj_rel_insert_input<TRes> get investorById;
  CopyWith$Input$profile_obj_rel_insert_input<TRes> get profile;
  CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes> get refreshTokens;
  CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> get roles;
  CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input<TRes>
      get securityKeys;
  CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes> get userProviders;
}

class _CopyWithImpl$Input$users_insert_input<TRes>
    implements CopyWith$Input$users_insert_input<TRes> {
  _CopyWithImpl$Input$users_insert_input(
    this._instance,
    this._then,
  );

  final Input$users_insert_input _instance;

  final TRes Function(Input$users_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? UMKMById = _undefined,
    Object? activeMfaType = _undefined,
    Object? agent_cs_messages = _undefined,
    Object? avatarUrl = _undefined,
    Object? createdAt = _undefined,
    Object? cs_messages = _undefined,
    Object? currentChallenge = _undefined,
    Object? defaultRole = _undefined,
    Object? defaultRoleByRole = _undefined,
    Object? disabled = _undefined,
    Object? displayName = _undefined,
    Object? email = _undefined,
    Object? emailVerified = _undefined,
    Object? id = _undefined,
    Object? investorById = _undefined,
    Object? isAnonymous = _undefined,
    Object? lastSeen = _undefined,
    Object? locale = _undefined,
    Object? metadata = _undefined,
    Object? newEmail = _undefined,
    Object? otpHash = _undefined,
    Object? otpHashExpiresAt = _undefined,
    Object? otpMethodLastUsed = _undefined,
    Object? passwordHash = _undefined,
    Object? phoneNumber = _undefined,
    Object? phoneNumberVerified = _undefined,
    Object? profile = _undefined,
    Object? refreshTokens = _undefined,
    Object? roles = _undefined,
    Object? securityKeys = _undefined,
    Object? ticket = _undefined,
    Object? ticketExpiresAt = _undefined,
    Object? totpSecret = _undefined,
    Object? updatedAt = _undefined,
    Object? userProviders = _undefined,
  }) =>
      _then(Input$users_insert_input._({
        ..._instance._$data,
        if (UMKMById != _undefined)
          'UMKMById': (UMKMById as Input$umkm_obj_rel_insert_input?),
        if (activeMfaType != _undefined)
          'activeMfaType': (activeMfaType as String?),
        if (agent_cs_messages != _undefined)
          'agent_cs_messages':
              (agent_cs_messages as Input$cs_message_arr_rel_insert_input?),
        if (avatarUrl != _undefined) 'avatarUrl': (avatarUrl as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (cs_messages != _undefined)
          'cs_messages':
              (cs_messages as Input$cs_message_arr_rel_insert_input?),
        if (currentChallenge != _undefined)
          'currentChallenge': (currentChallenge as String?),
        if (defaultRole != _undefined) 'defaultRole': (defaultRole as String?),
        if (defaultRoleByRole != _undefined)
          'defaultRoleByRole':
              (defaultRoleByRole as Input$authRoles_obj_rel_insert_input?),
        if (disabled != _undefined) 'disabled': (disabled as bool?),
        if (displayName != _undefined) 'displayName': (displayName as String?),
        if (email != _undefined) 'email': (email as Citext?),
        if (emailVerified != _undefined)
          'emailVerified': (emailVerified as bool?),
        if (id != _undefined) 'id': (id as UUID?),
        if (investorById != _undefined)
          'investorById':
              (investorById as Input$investor_obj_rel_insert_input?),
        if (isAnonymous != _undefined) 'isAnonymous': (isAnonymous as bool?),
        if (lastSeen != _undefined) 'lastSeen': (lastSeen as DateTime?),
        if (locale != _undefined) 'locale': (locale as String?),
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
        if (newEmail != _undefined) 'newEmail': (newEmail as Citext?),
        if (otpHash != _undefined) 'otpHash': (otpHash as String?),
        if (otpHashExpiresAt != _undefined)
          'otpHashExpiresAt': (otpHashExpiresAt as DateTime?),
        if (otpMethodLastUsed != _undefined)
          'otpMethodLastUsed': (otpMethodLastUsed as String?),
        if (passwordHash != _undefined)
          'passwordHash': (passwordHash as String?),
        if (phoneNumber != _undefined) 'phoneNumber': (phoneNumber as String?),
        if (phoneNumberVerified != _undefined)
          'phoneNumberVerified': (phoneNumberVerified as bool?),
        if (profile != _undefined)
          'profile': (profile as Input$profile_obj_rel_insert_input?),
        if (refreshTokens != _undefined)
          'refreshTokens':
              (refreshTokens as Input$authRefreshTokens_arr_rel_insert_input?),
        if (roles != _undefined)
          'roles': (roles as Input$authUserRoles_arr_rel_insert_input?),
        if (securityKeys != _undefined)
          'securityKeys': (securityKeys
              as Input$authUserSecurityKeys_arr_rel_insert_input?),
        if (ticket != _undefined) 'ticket': (ticket as String?),
        if (ticketExpiresAt != _undefined)
          'ticketExpiresAt': (ticketExpiresAt as DateTime?),
        if (totpSecret != _undefined) 'totpSecret': (totpSecret as String?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
        if (userProviders != _undefined)
          'userProviders':
              (userProviders as Input$authUserProviders_arr_rel_insert_input?),
      }));
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get UMKMById {
    final local$UMKMById = _instance.UMKMById;
    return local$UMKMById == null
        ? CopyWith$Input$umkm_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$umkm_obj_rel_insert_input(
            local$UMKMById, (e) => call(UMKMById: e));
  }

  CopyWith$Input$cs_message_arr_rel_insert_input<TRes> get agent_cs_messages {
    final local$agent_cs_messages = _instance.agent_cs_messages;
    return local$agent_cs_messages == null
        ? CopyWith$Input$cs_message_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$cs_message_arr_rel_insert_input(
            local$agent_cs_messages, (e) => call(agent_cs_messages: e));
  }

  CopyWith$Input$cs_message_arr_rel_insert_input<TRes> get cs_messages {
    final local$cs_messages = _instance.cs_messages;
    return local$cs_messages == null
        ? CopyWith$Input$cs_message_arr_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$cs_message_arr_rel_insert_input(
            local$cs_messages, (e) => call(cs_messages: e));
  }

  CopyWith$Input$authRoles_obj_rel_insert_input<TRes> get defaultRoleByRole {
    final local$defaultRoleByRole = _instance.defaultRoleByRole;
    return local$defaultRoleByRole == null
        ? CopyWith$Input$authRoles_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$authRoles_obj_rel_insert_input(
            local$defaultRoleByRole, (e) => call(defaultRoleByRole: e));
  }

  CopyWith$Input$investor_obj_rel_insert_input<TRes> get investorById {
    final local$investorById = _instance.investorById;
    return local$investorById == null
        ? CopyWith$Input$investor_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$investor_obj_rel_insert_input(
            local$investorById, (e) => call(investorById: e));
  }

  CopyWith$Input$profile_obj_rel_insert_input<TRes> get profile {
    final local$profile = _instance.profile;
    return local$profile == null
        ? CopyWith$Input$profile_obj_rel_insert_input.stub(_then(_instance))
        : CopyWith$Input$profile_obj_rel_insert_input(
            local$profile, (e) => call(profile: e));
  }

  CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes>
      get refreshTokens {
    final local$refreshTokens = _instance.refreshTokens;
    return local$refreshTokens == null
        ? CopyWith$Input$authRefreshTokens_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_arr_rel_insert_input(
            local$refreshTokens, (e) => call(refreshTokens: e));
  }

  CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> get roles {
    final local$roles = _instance.roles;
    return local$roles == null
        ? CopyWith$Input$authUserRoles_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authUserRoles_arr_rel_insert_input(
            local$roles, (e) => call(roles: e));
  }

  CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input<TRes>
      get securityKeys {
    final local$securityKeys = _instance.securityKeys;
    return local$securityKeys == null
        ? CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input(
            local$securityKeys, (e) => call(securityKeys: e));
  }

  CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes>
      get userProviders {
    final local$userProviders = _instance.userProviders;
    return local$userProviders == null
        ? CopyWith$Input$authUserProviders_arr_rel_insert_input.stub(
            _then(_instance))
        : CopyWith$Input$authUserProviders_arr_rel_insert_input(
            local$userProviders, (e) => call(userProviders: e));
  }
}

class _CopyWithStubImpl$Input$users_insert_input<TRes>
    implements CopyWith$Input$users_insert_input<TRes> {
  _CopyWithStubImpl$Input$users_insert_input(this._res);

  TRes _res;

  call({
    Input$umkm_obj_rel_insert_input? UMKMById,
    String? activeMfaType,
    Input$cs_message_arr_rel_insert_input? agent_cs_messages,
    String? avatarUrl,
    DateTime? createdAt,
    Input$cs_message_arr_rel_insert_input? cs_messages,
    String? currentChallenge,
    String? defaultRole,
    Input$authRoles_obj_rel_insert_input? defaultRoleByRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    Input$investor_obj_rel_insert_input? investorById,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    Input$profile_obj_rel_insert_input? profile,
    Input$authRefreshTokens_arr_rel_insert_input? refreshTokens,
    Input$authUserRoles_arr_rel_insert_input? roles,
    Input$authUserSecurityKeys_arr_rel_insert_input? securityKeys,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
    Input$authUserProviders_arr_rel_insert_input? userProviders,
  }) =>
      _res;
  CopyWith$Input$umkm_obj_rel_insert_input<TRes> get UMKMById =>
      CopyWith$Input$umkm_obj_rel_insert_input.stub(_res);
  CopyWith$Input$cs_message_arr_rel_insert_input<TRes> get agent_cs_messages =>
      CopyWith$Input$cs_message_arr_rel_insert_input.stub(_res);
  CopyWith$Input$cs_message_arr_rel_insert_input<TRes> get cs_messages =>
      CopyWith$Input$cs_message_arr_rel_insert_input.stub(_res);
  CopyWith$Input$authRoles_obj_rel_insert_input<TRes> get defaultRoleByRole =>
      CopyWith$Input$authRoles_obj_rel_insert_input.stub(_res);
  CopyWith$Input$investor_obj_rel_insert_input<TRes> get investorById =>
      CopyWith$Input$investor_obj_rel_insert_input.stub(_res);
  CopyWith$Input$profile_obj_rel_insert_input<TRes> get profile =>
      CopyWith$Input$profile_obj_rel_insert_input.stub(_res);
  CopyWith$Input$authRefreshTokens_arr_rel_insert_input<TRes>
      get refreshTokens =>
          CopyWith$Input$authRefreshTokens_arr_rel_insert_input.stub(_res);
  CopyWith$Input$authUserRoles_arr_rel_insert_input<TRes> get roles =>
      CopyWith$Input$authUserRoles_arr_rel_insert_input.stub(_res);
  CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input<TRes>
      get securityKeys =>
          CopyWith$Input$authUserSecurityKeys_arr_rel_insert_input.stub(_res);
  CopyWith$Input$authUserProviders_arr_rel_insert_input<TRes>
      get userProviders =>
          CopyWith$Input$authUserProviders_arr_rel_insert_input.stub(_res);
}

class Input$users_max_order_by {
  factory Input$users_max_order_by({
    Enum$order_by? activeMfaType,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
  }) =>
      Input$users_max_order_by._({
        if (activeMfaType != null) r'activeMfaType': activeMfaType,
        if (avatarUrl != null) r'avatarUrl': avatarUrl,
        if (createdAt != null) r'createdAt': createdAt,
        if (currentChallenge != null) r'currentChallenge': currentChallenge,
        if (defaultRole != null) r'defaultRole': defaultRole,
        if (displayName != null) r'displayName': displayName,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (lastSeen != null) r'lastSeen': lastSeen,
        if (locale != null) r'locale': locale,
        if (newEmail != null) r'newEmail': newEmail,
        if (otpHash != null) r'otpHash': otpHash,
        if (otpHashExpiresAt != null) r'otpHashExpiresAt': otpHashExpiresAt,
        if (otpMethodLastUsed != null) r'otpMethodLastUsed': otpMethodLastUsed,
        if (passwordHash != null) r'passwordHash': passwordHash,
        if (phoneNumber != null) r'phoneNumber': phoneNumber,
        if (ticket != null) r'ticket': ticket,
        if (ticketExpiresAt != null) r'ticketExpiresAt': ticketExpiresAt,
        if (totpSecret != null) r'totpSecret': totpSecret,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$users_max_order_by._(this._$data);

  factory Input$users_max_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('activeMfaType')) {
      final l$activeMfaType = data['activeMfaType'];
      result$data['activeMfaType'] = l$activeMfaType == null
          ? null
          : fromJson$Enum$order_by((l$activeMfaType as String));
    }
    if (data.containsKey('avatarUrl')) {
      final l$avatarUrl = data['avatarUrl'];
      result$data['avatarUrl'] = l$avatarUrl == null
          ? null
          : fromJson$Enum$order_by((l$avatarUrl as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('currentChallenge')) {
      final l$currentChallenge = data['currentChallenge'];
      result$data['currentChallenge'] = l$currentChallenge == null
          ? null
          : fromJson$Enum$order_by((l$currentChallenge as String));
    }
    if (data.containsKey('defaultRole')) {
      final l$defaultRole = data['defaultRole'];
      result$data['defaultRole'] = l$defaultRole == null
          ? null
          : fromJson$Enum$order_by((l$defaultRole as String));
    }
    if (data.containsKey('displayName')) {
      final l$displayName = data['displayName'];
      result$data['displayName'] = l$displayName == null
          ? null
          : fromJson$Enum$order_by((l$displayName as String));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('lastSeen')) {
      final l$lastSeen = data['lastSeen'];
      result$data['lastSeen'] = l$lastSeen == null
          ? null
          : fromJson$Enum$order_by((l$lastSeen as String));
    }
    if (data.containsKey('locale')) {
      final l$locale = data['locale'];
      result$data['locale'] = l$locale == null
          ? null
          : fromJson$Enum$order_by((l$locale as String));
    }
    if (data.containsKey('newEmail')) {
      final l$newEmail = data['newEmail'];
      result$data['newEmail'] = l$newEmail == null
          ? null
          : fromJson$Enum$order_by((l$newEmail as String));
    }
    if (data.containsKey('otpHash')) {
      final l$otpHash = data['otpHash'];
      result$data['otpHash'] = l$otpHash == null
          ? null
          : fromJson$Enum$order_by((l$otpHash as String));
    }
    if (data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = data['otpHashExpiresAt'];
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : fromJson$Enum$order_by((l$otpHashExpiresAt as String));
    }
    if (data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = data['otpMethodLastUsed'];
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed == null
          ? null
          : fromJson$Enum$order_by((l$otpMethodLastUsed as String));
    }
    if (data.containsKey('passwordHash')) {
      final l$passwordHash = data['passwordHash'];
      result$data['passwordHash'] = l$passwordHash == null
          ? null
          : fromJson$Enum$order_by((l$passwordHash as String));
    }
    if (data.containsKey('phoneNumber')) {
      final l$phoneNumber = data['phoneNumber'];
      result$data['phoneNumber'] = l$phoneNumber == null
          ? null
          : fromJson$Enum$order_by((l$phoneNumber as String));
    }
    if (data.containsKey('ticket')) {
      final l$ticket = data['ticket'];
      result$data['ticket'] = l$ticket == null
          ? null
          : fromJson$Enum$order_by((l$ticket as String));
    }
    if (data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = data['ticketExpiresAt'];
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : fromJson$Enum$order_by((l$ticketExpiresAt as String));
    }
    if (data.containsKey('totpSecret')) {
      final l$totpSecret = data['totpSecret'];
      result$data['totpSecret'] = l$totpSecret == null
          ? null
          : fromJson$Enum$order_by((l$totpSecret as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    return Input$users_max_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get activeMfaType =>
      (_$data['activeMfaType'] as Enum$order_by?);
  Enum$order_by? get avatarUrl => (_$data['avatarUrl'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get currentChallenge =>
      (_$data['currentChallenge'] as Enum$order_by?);
  Enum$order_by? get defaultRole => (_$data['defaultRole'] as Enum$order_by?);
  Enum$order_by? get displayName => (_$data['displayName'] as Enum$order_by?);
  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get lastSeen => (_$data['lastSeen'] as Enum$order_by?);
  Enum$order_by? get locale => (_$data['locale'] as Enum$order_by?);
  Enum$order_by? get newEmail => (_$data['newEmail'] as Enum$order_by?);
  Enum$order_by? get otpHash => (_$data['otpHash'] as Enum$order_by?);
  Enum$order_by? get otpHashExpiresAt =>
      (_$data['otpHashExpiresAt'] as Enum$order_by?);
  Enum$order_by? get otpMethodLastUsed =>
      (_$data['otpMethodLastUsed'] as Enum$order_by?);
  Enum$order_by? get passwordHash => (_$data['passwordHash'] as Enum$order_by?);
  Enum$order_by? get phoneNumber => (_$data['phoneNumber'] as Enum$order_by?);
  Enum$order_by? get ticket => (_$data['ticket'] as Enum$order_by?);
  Enum$order_by? get ticketExpiresAt =>
      (_$data['ticketExpiresAt'] as Enum$order_by?);
  Enum$order_by? get totpSecret => (_$data['totpSecret'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('activeMfaType')) {
      final l$activeMfaType = activeMfaType;
      result$data['activeMfaType'] = l$activeMfaType == null
          ? null
          : toJson$Enum$order_by(l$activeMfaType);
    }
    if (_$data.containsKey('avatarUrl')) {
      final l$avatarUrl = avatarUrl;
      result$data['avatarUrl'] =
          l$avatarUrl == null ? null : toJson$Enum$order_by(l$avatarUrl);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('currentChallenge')) {
      final l$currentChallenge = currentChallenge;
      result$data['currentChallenge'] = l$currentChallenge == null
          ? null
          : toJson$Enum$order_by(l$currentChallenge);
    }
    if (_$data.containsKey('defaultRole')) {
      final l$defaultRole = defaultRole;
      result$data['defaultRole'] =
          l$defaultRole == null ? null : toJson$Enum$order_by(l$defaultRole);
    }
    if (_$data.containsKey('displayName')) {
      final l$displayName = displayName;
      result$data['displayName'] =
          l$displayName == null ? null : toJson$Enum$order_by(l$displayName);
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('lastSeen')) {
      final l$lastSeen = lastSeen;
      result$data['lastSeen'] =
          l$lastSeen == null ? null : toJson$Enum$order_by(l$lastSeen);
    }
    if (_$data.containsKey('locale')) {
      final l$locale = locale;
      result$data['locale'] =
          l$locale == null ? null : toJson$Enum$order_by(l$locale);
    }
    if (_$data.containsKey('newEmail')) {
      final l$newEmail = newEmail;
      result$data['newEmail'] =
          l$newEmail == null ? null : toJson$Enum$order_by(l$newEmail);
    }
    if (_$data.containsKey('otpHash')) {
      final l$otpHash = otpHash;
      result$data['otpHash'] =
          l$otpHash == null ? null : toJson$Enum$order_by(l$otpHash);
    }
    if (_$data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = otpHashExpiresAt;
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : toJson$Enum$order_by(l$otpHashExpiresAt);
    }
    if (_$data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = otpMethodLastUsed;
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed == null
          ? null
          : toJson$Enum$order_by(l$otpMethodLastUsed);
    }
    if (_$data.containsKey('passwordHash')) {
      final l$passwordHash = passwordHash;
      result$data['passwordHash'] =
          l$passwordHash == null ? null : toJson$Enum$order_by(l$passwordHash);
    }
    if (_$data.containsKey('phoneNumber')) {
      final l$phoneNumber = phoneNumber;
      result$data['phoneNumber'] =
          l$phoneNumber == null ? null : toJson$Enum$order_by(l$phoneNumber);
    }
    if (_$data.containsKey('ticket')) {
      final l$ticket = ticket;
      result$data['ticket'] =
          l$ticket == null ? null : toJson$Enum$order_by(l$ticket);
    }
    if (_$data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = ticketExpiresAt;
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : toJson$Enum$order_by(l$ticketExpiresAt);
    }
    if (_$data.containsKey('totpSecret')) {
      final l$totpSecret = totpSecret;
      result$data['totpSecret'] =
          l$totpSecret == null ? null : toJson$Enum$order_by(l$totpSecret);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    return result$data;
  }

  CopyWith$Input$users_max_order_by<Input$users_max_order_by> get copyWith =>
      CopyWith$Input$users_max_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_max_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$activeMfaType = activeMfaType;
    final lOther$activeMfaType = other.activeMfaType;
    if (_$data.containsKey('activeMfaType') !=
        other._$data.containsKey('activeMfaType')) {
      return false;
    }
    if (l$activeMfaType != lOther$activeMfaType) {
      return false;
    }
    final l$avatarUrl = avatarUrl;
    final lOther$avatarUrl = other.avatarUrl;
    if (_$data.containsKey('avatarUrl') !=
        other._$data.containsKey('avatarUrl')) {
      return false;
    }
    if (l$avatarUrl != lOther$avatarUrl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$currentChallenge = currentChallenge;
    final lOther$currentChallenge = other.currentChallenge;
    if (_$data.containsKey('currentChallenge') !=
        other._$data.containsKey('currentChallenge')) {
      return false;
    }
    if (l$currentChallenge != lOther$currentChallenge) {
      return false;
    }
    final l$defaultRole = defaultRole;
    final lOther$defaultRole = other.defaultRole;
    if (_$data.containsKey('defaultRole') !=
        other._$data.containsKey('defaultRole')) {
      return false;
    }
    if (l$defaultRole != lOther$defaultRole) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (_$data.containsKey('displayName') !=
        other._$data.containsKey('displayName')) {
      return false;
    }
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (_$data.containsKey('lastSeen') !=
        other._$data.containsKey('lastSeen')) {
      return false;
    }
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$locale = locale;
    final lOther$locale = other.locale;
    if (_$data.containsKey('locale') != other._$data.containsKey('locale')) {
      return false;
    }
    if (l$locale != lOther$locale) {
      return false;
    }
    final l$newEmail = newEmail;
    final lOther$newEmail = other.newEmail;
    if (_$data.containsKey('newEmail') !=
        other._$data.containsKey('newEmail')) {
      return false;
    }
    if (l$newEmail != lOther$newEmail) {
      return false;
    }
    final l$otpHash = otpHash;
    final lOther$otpHash = other.otpHash;
    if (_$data.containsKey('otpHash') != other._$data.containsKey('otpHash')) {
      return false;
    }
    if (l$otpHash != lOther$otpHash) {
      return false;
    }
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final lOther$otpHashExpiresAt = other.otpHashExpiresAt;
    if (_$data.containsKey('otpHashExpiresAt') !=
        other._$data.containsKey('otpHashExpiresAt')) {
      return false;
    }
    if (l$otpHashExpiresAt != lOther$otpHashExpiresAt) {
      return false;
    }
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final lOther$otpMethodLastUsed = other.otpMethodLastUsed;
    if (_$data.containsKey('otpMethodLastUsed') !=
        other._$data.containsKey('otpMethodLastUsed')) {
      return false;
    }
    if (l$otpMethodLastUsed != lOther$otpMethodLastUsed) {
      return false;
    }
    final l$passwordHash = passwordHash;
    final lOther$passwordHash = other.passwordHash;
    if (_$data.containsKey('passwordHash') !=
        other._$data.containsKey('passwordHash')) {
      return false;
    }
    if (l$passwordHash != lOther$passwordHash) {
      return false;
    }
    final l$phoneNumber = phoneNumber;
    final lOther$phoneNumber = other.phoneNumber;
    if (_$data.containsKey('phoneNumber') !=
        other._$data.containsKey('phoneNumber')) {
      return false;
    }
    if (l$phoneNumber != lOther$phoneNumber) {
      return false;
    }
    final l$ticket = ticket;
    final lOther$ticket = other.ticket;
    if (_$data.containsKey('ticket') != other._$data.containsKey('ticket')) {
      return false;
    }
    if (l$ticket != lOther$ticket) {
      return false;
    }
    final l$ticketExpiresAt = ticketExpiresAt;
    final lOther$ticketExpiresAt = other.ticketExpiresAt;
    if (_$data.containsKey('ticketExpiresAt') !=
        other._$data.containsKey('ticketExpiresAt')) {
      return false;
    }
    if (l$ticketExpiresAt != lOther$ticketExpiresAt) {
      return false;
    }
    final l$totpSecret = totpSecret;
    final lOther$totpSecret = other.totpSecret;
    if (_$data.containsKey('totpSecret') !=
        other._$data.containsKey('totpSecret')) {
      return false;
    }
    if (l$totpSecret != lOther$totpSecret) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$activeMfaType = activeMfaType;
    final l$avatarUrl = avatarUrl;
    final l$createdAt = createdAt;
    final l$currentChallenge = currentChallenge;
    final l$defaultRole = defaultRole;
    final l$displayName = displayName;
    final l$email = email;
    final l$id = id;
    final l$lastSeen = lastSeen;
    final l$locale = locale;
    final l$newEmail = newEmail;
    final l$otpHash = otpHash;
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final l$passwordHash = passwordHash;
    final l$phoneNumber = phoneNumber;
    final l$ticket = ticket;
    final l$ticketExpiresAt = ticketExpiresAt;
    final l$totpSecret = totpSecret;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('activeMfaType') ? l$activeMfaType : const {},
      _$data.containsKey('avatarUrl') ? l$avatarUrl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('currentChallenge') ? l$currentChallenge : const {},
      _$data.containsKey('defaultRole') ? l$defaultRole : const {},
      _$data.containsKey('displayName') ? l$displayName : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('lastSeen') ? l$lastSeen : const {},
      _$data.containsKey('locale') ? l$locale : const {},
      _$data.containsKey('newEmail') ? l$newEmail : const {},
      _$data.containsKey('otpHash') ? l$otpHash : const {},
      _$data.containsKey('otpHashExpiresAt') ? l$otpHashExpiresAt : const {},
      _$data.containsKey('otpMethodLastUsed') ? l$otpMethodLastUsed : const {},
      _$data.containsKey('passwordHash') ? l$passwordHash : const {},
      _$data.containsKey('phoneNumber') ? l$phoneNumber : const {},
      _$data.containsKey('ticket') ? l$ticket : const {},
      _$data.containsKey('ticketExpiresAt') ? l$ticketExpiresAt : const {},
      _$data.containsKey('totpSecret') ? l$totpSecret : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_max_order_by<TRes> {
  factory CopyWith$Input$users_max_order_by(
    Input$users_max_order_by instance,
    TRes Function(Input$users_max_order_by) then,
  ) = _CopyWithImpl$Input$users_max_order_by;

  factory CopyWith$Input$users_max_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$users_max_order_by;

  TRes call({
    Enum$order_by? activeMfaType,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
  });
}

class _CopyWithImpl$Input$users_max_order_by<TRes>
    implements CopyWith$Input$users_max_order_by<TRes> {
  _CopyWithImpl$Input$users_max_order_by(
    this._instance,
    this._then,
  );

  final Input$users_max_order_by _instance;

  final TRes Function(Input$users_max_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? activeMfaType = _undefined,
    Object? avatarUrl = _undefined,
    Object? createdAt = _undefined,
    Object? currentChallenge = _undefined,
    Object? defaultRole = _undefined,
    Object? displayName = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? lastSeen = _undefined,
    Object? locale = _undefined,
    Object? newEmail = _undefined,
    Object? otpHash = _undefined,
    Object? otpHashExpiresAt = _undefined,
    Object? otpMethodLastUsed = _undefined,
    Object? passwordHash = _undefined,
    Object? phoneNumber = _undefined,
    Object? ticket = _undefined,
    Object? ticketExpiresAt = _undefined,
    Object? totpSecret = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$users_max_order_by._({
        ..._instance._$data,
        if (activeMfaType != _undefined)
          'activeMfaType': (activeMfaType as Enum$order_by?),
        if (avatarUrl != _undefined) 'avatarUrl': (avatarUrl as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (currentChallenge != _undefined)
          'currentChallenge': (currentChallenge as Enum$order_by?),
        if (defaultRole != _undefined)
          'defaultRole': (defaultRole as Enum$order_by?),
        if (displayName != _undefined)
          'displayName': (displayName as Enum$order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (lastSeen != _undefined) 'lastSeen': (lastSeen as Enum$order_by?),
        if (locale != _undefined) 'locale': (locale as Enum$order_by?),
        if (newEmail != _undefined) 'newEmail': (newEmail as Enum$order_by?),
        if (otpHash != _undefined) 'otpHash': (otpHash as Enum$order_by?),
        if (otpHashExpiresAt != _undefined)
          'otpHashExpiresAt': (otpHashExpiresAt as Enum$order_by?),
        if (otpMethodLastUsed != _undefined)
          'otpMethodLastUsed': (otpMethodLastUsed as Enum$order_by?),
        if (passwordHash != _undefined)
          'passwordHash': (passwordHash as Enum$order_by?),
        if (phoneNumber != _undefined)
          'phoneNumber': (phoneNumber as Enum$order_by?),
        if (ticket != _undefined) 'ticket': (ticket as Enum$order_by?),
        if (ticketExpiresAt != _undefined)
          'ticketExpiresAt': (ticketExpiresAt as Enum$order_by?),
        if (totpSecret != _undefined)
          'totpSecret': (totpSecret as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$users_max_order_by<TRes>
    implements CopyWith$Input$users_max_order_by<TRes> {
  _CopyWithStubImpl$Input$users_max_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? activeMfaType,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
  }) =>
      _res;
}

class Input$users_min_order_by {
  factory Input$users_min_order_by({
    Enum$order_by? activeMfaType,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
  }) =>
      Input$users_min_order_by._({
        if (activeMfaType != null) r'activeMfaType': activeMfaType,
        if (avatarUrl != null) r'avatarUrl': avatarUrl,
        if (createdAt != null) r'createdAt': createdAt,
        if (currentChallenge != null) r'currentChallenge': currentChallenge,
        if (defaultRole != null) r'defaultRole': defaultRole,
        if (displayName != null) r'displayName': displayName,
        if (email != null) r'email': email,
        if (id != null) r'id': id,
        if (lastSeen != null) r'lastSeen': lastSeen,
        if (locale != null) r'locale': locale,
        if (newEmail != null) r'newEmail': newEmail,
        if (otpHash != null) r'otpHash': otpHash,
        if (otpHashExpiresAt != null) r'otpHashExpiresAt': otpHashExpiresAt,
        if (otpMethodLastUsed != null) r'otpMethodLastUsed': otpMethodLastUsed,
        if (passwordHash != null) r'passwordHash': passwordHash,
        if (phoneNumber != null) r'phoneNumber': phoneNumber,
        if (ticket != null) r'ticket': ticket,
        if (ticketExpiresAt != null) r'ticketExpiresAt': ticketExpiresAt,
        if (totpSecret != null) r'totpSecret': totpSecret,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$users_min_order_by._(this._$data);

  factory Input$users_min_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('activeMfaType')) {
      final l$activeMfaType = data['activeMfaType'];
      result$data['activeMfaType'] = l$activeMfaType == null
          ? null
          : fromJson$Enum$order_by((l$activeMfaType as String));
    }
    if (data.containsKey('avatarUrl')) {
      final l$avatarUrl = data['avatarUrl'];
      result$data['avatarUrl'] = l$avatarUrl == null
          ? null
          : fromJson$Enum$order_by((l$avatarUrl as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('currentChallenge')) {
      final l$currentChallenge = data['currentChallenge'];
      result$data['currentChallenge'] = l$currentChallenge == null
          ? null
          : fromJson$Enum$order_by((l$currentChallenge as String));
    }
    if (data.containsKey('defaultRole')) {
      final l$defaultRole = data['defaultRole'];
      result$data['defaultRole'] = l$defaultRole == null
          ? null
          : fromJson$Enum$order_by((l$defaultRole as String));
    }
    if (data.containsKey('displayName')) {
      final l$displayName = data['displayName'];
      result$data['displayName'] = l$displayName == null
          ? null
          : fromJson$Enum$order_by((l$displayName as String));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('lastSeen')) {
      final l$lastSeen = data['lastSeen'];
      result$data['lastSeen'] = l$lastSeen == null
          ? null
          : fromJson$Enum$order_by((l$lastSeen as String));
    }
    if (data.containsKey('locale')) {
      final l$locale = data['locale'];
      result$data['locale'] = l$locale == null
          ? null
          : fromJson$Enum$order_by((l$locale as String));
    }
    if (data.containsKey('newEmail')) {
      final l$newEmail = data['newEmail'];
      result$data['newEmail'] = l$newEmail == null
          ? null
          : fromJson$Enum$order_by((l$newEmail as String));
    }
    if (data.containsKey('otpHash')) {
      final l$otpHash = data['otpHash'];
      result$data['otpHash'] = l$otpHash == null
          ? null
          : fromJson$Enum$order_by((l$otpHash as String));
    }
    if (data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = data['otpHashExpiresAt'];
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : fromJson$Enum$order_by((l$otpHashExpiresAt as String));
    }
    if (data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = data['otpMethodLastUsed'];
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed == null
          ? null
          : fromJson$Enum$order_by((l$otpMethodLastUsed as String));
    }
    if (data.containsKey('passwordHash')) {
      final l$passwordHash = data['passwordHash'];
      result$data['passwordHash'] = l$passwordHash == null
          ? null
          : fromJson$Enum$order_by((l$passwordHash as String));
    }
    if (data.containsKey('phoneNumber')) {
      final l$phoneNumber = data['phoneNumber'];
      result$data['phoneNumber'] = l$phoneNumber == null
          ? null
          : fromJson$Enum$order_by((l$phoneNumber as String));
    }
    if (data.containsKey('ticket')) {
      final l$ticket = data['ticket'];
      result$data['ticket'] = l$ticket == null
          ? null
          : fromJson$Enum$order_by((l$ticket as String));
    }
    if (data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = data['ticketExpiresAt'];
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : fromJson$Enum$order_by((l$ticketExpiresAt as String));
    }
    if (data.containsKey('totpSecret')) {
      final l$totpSecret = data['totpSecret'];
      result$data['totpSecret'] = l$totpSecret == null
          ? null
          : fromJson$Enum$order_by((l$totpSecret as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    return Input$users_min_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$order_by? get activeMfaType =>
      (_$data['activeMfaType'] as Enum$order_by?);
  Enum$order_by? get avatarUrl => (_$data['avatarUrl'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Enum$order_by? get currentChallenge =>
      (_$data['currentChallenge'] as Enum$order_by?);
  Enum$order_by? get defaultRole => (_$data['defaultRole'] as Enum$order_by?);
  Enum$order_by? get displayName => (_$data['displayName'] as Enum$order_by?);
  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Enum$order_by? get lastSeen => (_$data['lastSeen'] as Enum$order_by?);
  Enum$order_by? get locale => (_$data['locale'] as Enum$order_by?);
  Enum$order_by? get newEmail => (_$data['newEmail'] as Enum$order_by?);
  Enum$order_by? get otpHash => (_$data['otpHash'] as Enum$order_by?);
  Enum$order_by? get otpHashExpiresAt =>
      (_$data['otpHashExpiresAt'] as Enum$order_by?);
  Enum$order_by? get otpMethodLastUsed =>
      (_$data['otpMethodLastUsed'] as Enum$order_by?);
  Enum$order_by? get passwordHash => (_$data['passwordHash'] as Enum$order_by?);
  Enum$order_by? get phoneNumber => (_$data['phoneNumber'] as Enum$order_by?);
  Enum$order_by? get ticket => (_$data['ticket'] as Enum$order_by?);
  Enum$order_by? get ticketExpiresAt =>
      (_$data['ticketExpiresAt'] as Enum$order_by?);
  Enum$order_by? get totpSecret => (_$data['totpSecret'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('activeMfaType')) {
      final l$activeMfaType = activeMfaType;
      result$data['activeMfaType'] = l$activeMfaType == null
          ? null
          : toJson$Enum$order_by(l$activeMfaType);
    }
    if (_$data.containsKey('avatarUrl')) {
      final l$avatarUrl = avatarUrl;
      result$data['avatarUrl'] =
          l$avatarUrl == null ? null : toJson$Enum$order_by(l$avatarUrl);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('currentChallenge')) {
      final l$currentChallenge = currentChallenge;
      result$data['currentChallenge'] = l$currentChallenge == null
          ? null
          : toJson$Enum$order_by(l$currentChallenge);
    }
    if (_$data.containsKey('defaultRole')) {
      final l$defaultRole = defaultRole;
      result$data['defaultRole'] =
          l$defaultRole == null ? null : toJson$Enum$order_by(l$defaultRole);
    }
    if (_$data.containsKey('displayName')) {
      final l$displayName = displayName;
      result$data['displayName'] =
          l$displayName == null ? null : toJson$Enum$order_by(l$displayName);
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('lastSeen')) {
      final l$lastSeen = lastSeen;
      result$data['lastSeen'] =
          l$lastSeen == null ? null : toJson$Enum$order_by(l$lastSeen);
    }
    if (_$data.containsKey('locale')) {
      final l$locale = locale;
      result$data['locale'] =
          l$locale == null ? null : toJson$Enum$order_by(l$locale);
    }
    if (_$data.containsKey('newEmail')) {
      final l$newEmail = newEmail;
      result$data['newEmail'] =
          l$newEmail == null ? null : toJson$Enum$order_by(l$newEmail);
    }
    if (_$data.containsKey('otpHash')) {
      final l$otpHash = otpHash;
      result$data['otpHash'] =
          l$otpHash == null ? null : toJson$Enum$order_by(l$otpHash);
    }
    if (_$data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = otpHashExpiresAt;
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : toJson$Enum$order_by(l$otpHashExpiresAt);
    }
    if (_$data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = otpMethodLastUsed;
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed == null
          ? null
          : toJson$Enum$order_by(l$otpMethodLastUsed);
    }
    if (_$data.containsKey('passwordHash')) {
      final l$passwordHash = passwordHash;
      result$data['passwordHash'] =
          l$passwordHash == null ? null : toJson$Enum$order_by(l$passwordHash);
    }
    if (_$data.containsKey('phoneNumber')) {
      final l$phoneNumber = phoneNumber;
      result$data['phoneNumber'] =
          l$phoneNumber == null ? null : toJson$Enum$order_by(l$phoneNumber);
    }
    if (_$data.containsKey('ticket')) {
      final l$ticket = ticket;
      result$data['ticket'] =
          l$ticket == null ? null : toJson$Enum$order_by(l$ticket);
    }
    if (_$data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = ticketExpiresAt;
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : toJson$Enum$order_by(l$ticketExpiresAt);
    }
    if (_$data.containsKey('totpSecret')) {
      final l$totpSecret = totpSecret;
      result$data['totpSecret'] =
          l$totpSecret == null ? null : toJson$Enum$order_by(l$totpSecret);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    return result$data;
  }

  CopyWith$Input$users_min_order_by<Input$users_min_order_by> get copyWith =>
      CopyWith$Input$users_min_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_min_order_by) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$activeMfaType = activeMfaType;
    final lOther$activeMfaType = other.activeMfaType;
    if (_$data.containsKey('activeMfaType') !=
        other._$data.containsKey('activeMfaType')) {
      return false;
    }
    if (l$activeMfaType != lOther$activeMfaType) {
      return false;
    }
    final l$avatarUrl = avatarUrl;
    final lOther$avatarUrl = other.avatarUrl;
    if (_$data.containsKey('avatarUrl') !=
        other._$data.containsKey('avatarUrl')) {
      return false;
    }
    if (l$avatarUrl != lOther$avatarUrl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$currentChallenge = currentChallenge;
    final lOther$currentChallenge = other.currentChallenge;
    if (_$data.containsKey('currentChallenge') !=
        other._$data.containsKey('currentChallenge')) {
      return false;
    }
    if (l$currentChallenge != lOther$currentChallenge) {
      return false;
    }
    final l$defaultRole = defaultRole;
    final lOther$defaultRole = other.defaultRole;
    if (_$data.containsKey('defaultRole') !=
        other._$data.containsKey('defaultRole')) {
      return false;
    }
    if (l$defaultRole != lOther$defaultRole) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (_$data.containsKey('displayName') !=
        other._$data.containsKey('displayName')) {
      return false;
    }
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (_$data.containsKey('lastSeen') !=
        other._$data.containsKey('lastSeen')) {
      return false;
    }
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$locale = locale;
    final lOther$locale = other.locale;
    if (_$data.containsKey('locale') != other._$data.containsKey('locale')) {
      return false;
    }
    if (l$locale != lOther$locale) {
      return false;
    }
    final l$newEmail = newEmail;
    final lOther$newEmail = other.newEmail;
    if (_$data.containsKey('newEmail') !=
        other._$data.containsKey('newEmail')) {
      return false;
    }
    if (l$newEmail != lOther$newEmail) {
      return false;
    }
    final l$otpHash = otpHash;
    final lOther$otpHash = other.otpHash;
    if (_$data.containsKey('otpHash') != other._$data.containsKey('otpHash')) {
      return false;
    }
    if (l$otpHash != lOther$otpHash) {
      return false;
    }
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final lOther$otpHashExpiresAt = other.otpHashExpiresAt;
    if (_$data.containsKey('otpHashExpiresAt') !=
        other._$data.containsKey('otpHashExpiresAt')) {
      return false;
    }
    if (l$otpHashExpiresAt != lOther$otpHashExpiresAt) {
      return false;
    }
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final lOther$otpMethodLastUsed = other.otpMethodLastUsed;
    if (_$data.containsKey('otpMethodLastUsed') !=
        other._$data.containsKey('otpMethodLastUsed')) {
      return false;
    }
    if (l$otpMethodLastUsed != lOther$otpMethodLastUsed) {
      return false;
    }
    final l$passwordHash = passwordHash;
    final lOther$passwordHash = other.passwordHash;
    if (_$data.containsKey('passwordHash') !=
        other._$data.containsKey('passwordHash')) {
      return false;
    }
    if (l$passwordHash != lOther$passwordHash) {
      return false;
    }
    final l$phoneNumber = phoneNumber;
    final lOther$phoneNumber = other.phoneNumber;
    if (_$data.containsKey('phoneNumber') !=
        other._$data.containsKey('phoneNumber')) {
      return false;
    }
    if (l$phoneNumber != lOther$phoneNumber) {
      return false;
    }
    final l$ticket = ticket;
    final lOther$ticket = other.ticket;
    if (_$data.containsKey('ticket') != other._$data.containsKey('ticket')) {
      return false;
    }
    if (l$ticket != lOther$ticket) {
      return false;
    }
    final l$ticketExpiresAt = ticketExpiresAt;
    final lOther$ticketExpiresAt = other.ticketExpiresAt;
    if (_$data.containsKey('ticketExpiresAt') !=
        other._$data.containsKey('ticketExpiresAt')) {
      return false;
    }
    if (l$ticketExpiresAt != lOther$ticketExpiresAt) {
      return false;
    }
    final l$totpSecret = totpSecret;
    final lOther$totpSecret = other.totpSecret;
    if (_$data.containsKey('totpSecret') !=
        other._$data.containsKey('totpSecret')) {
      return false;
    }
    if (l$totpSecret != lOther$totpSecret) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$activeMfaType = activeMfaType;
    final l$avatarUrl = avatarUrl;
    final l$createdAt = createdAt;
    final l$currentChallenge = currentChallenge;
    final l$defaultRole = defaultRole;
    final l$displayName = displayName;
    final l$email = email;
    final l$id = id;
    final l$lastSeen = lastSeen;
    final l$locale = locale;
    final l$newEmail = newEmail;
    final l$otpHash = otpHash;
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final l$passwordHash = passwordHash;
    final l$phoneNumber = phoneNumber;
    final l$ticket = ticket;
    final l$ticketExpiresAt = ticketExpiresAt;
    final l$totpSecret = totpSecret;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('activeMfaType') ? l$activeMfaType : const {},
      _$data.containsKey('avatarUrl') ? l$avatarUrl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('currentChallenge') ? l$currentChallenge : const {},
      _$data.containsKey('defaultRole') ? l$defaultRole : const {},
      _$data.containsKey('displayName') ? l$displayName : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('lastSeen') ? l$lastSeen : const {},
      _$data.containsKey('locale') ? l$locale : const {},
      _$data.containsKey('newEmail') ? l$newEmail : const {},
      _$data.containsKey('otpHash') ? l$otpHash : const {},
      _$data.containsKey('otpHashExpiresAt') ? l$otpHashExpiresAt : const {},
      _$data.containsKey('otpMethodLastUsed') ? l$otpMethodLastUsed : const {},
      _$data.containsKey('passwordHash') ? l$passwordHash : const {},
      _$data.containsKey('phoneNumber') ? l$phoneNumber : const {},
      _$data.containsKey('ticket') ? l$ticket : const {},
      _$data.containsKey('ticketExpiresAt') ? l$ticketExpiresAt : const {},
      _$data.containsKey('totpSecret') ? l$totpSecret : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_min_order_by<TRes> {
  factory CopyWith$Input$users_min_order_by(
    Input$users_min_order_by instance,
    TRes Function(Input$users_min_order_by) then,
  ) = _CopyWithImpl$Input$users_min_order_by;

  factory CopyWith$Input$users_min_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$users_min_order_by;

  TRes call({
    Enum$order_by? activeMfaType,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
  });
}

class _CopyWithImpl$Input$users_min_order_by<TRes>
    implements CopyWith$Input$users_min_order_by<TRes> {
  _CopyWithImpl$Input$users_min_order_by(
    this._instance,
    this._then,
  );

  final Input$users_min_order_by _instance;

  final TRes Function(Input$users_min_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? activeMfaType = _undefined,
    Object? avatarUrl = _undefined,
    Object? createdAt = _undefined,
    Object? currentChallenge = _undefined,
    Object? defaultRole = _undefined,
    Object? displayName = _undefined,
    Object? email = _undefined,
    Object? id = _undefined,
    Object? lastSeen = _undefined,
    Object? locale = _undefined,
    Object? newEmail = _undefined,
    Object? otpHash = _undefined,
    Object? otpHashExpiresAt = _undefined,
    Object? otpMethodLastUsed = _undefined,
    Object? passwordHash = _undefined,
    Object? phoneNumber = _undefined,
    Object? ticket = _undefined,
    Object? ticketExpiresAt = _undefined,
    Object? totpSecret = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$users_min_order_by._({
        ..._instance._$data,
        if (activeMfaType != _undefined)
          'activeMfaType': (activeMfaType as Enum$order_by?),
        if (avatarUrl != _undefined) 'avatarUrl': (avatarUrl as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (currentChallenge != _undefined)
          'currentChallenge': (currentChallenge as Enum$order_by?),
        if (defaultRole != _undefined)
          'defaultRole': (defaultRole as Enum$order_by?),
        if (displayName != _undefined)
          'displayName': (displayName as Enum$order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (lastSeen != _undefined) 'lastSeen': (lastSeen as Enum$order_by?),
        if (locale != _undefined) 'locale': (locale as Enum$order_by?),
        if (newEmail != _undefined) 'newEmail': (newEmail as Enum$order_by?),
        if (otpHash != _undefined) 'otpHash': (otpHash as Enum$order_by?),
        if (otpHashExpiresAt != _undefined)
          'otpHashExpiresAt': (otpHashExpiresAt as Enum$order_by?),
        if (otpMethodLastUsed != _undefined)
          'otpMethodLastUsed': (otpMethodLastUsed as Enum$order_by?),
        if (passwordHash != _undefined)
          'passwordHash': (passwordHash as Enum$order_by?),
        if (phoneNumber != _undefined)
          'phoneNumber': (phoneNumber as Enum$order_by?),
        if (ticket != _undefined) 'ticket': (ticket as Enum$order_by?),
        if (ticketExpiresAt != _undefined)
          'ticketExpiresAt': (ticketExpiresAt as Enum$order_by?),
        if (totpSecret != _undefined)
          'totpSecret': (totpSecret as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
      }));
}

class _CopyWithStubImpl$Input$users_min_order_by<TRes>
    implements CopyWith$Input$users_min_order_by<TRes> {
  _CopyWithStubImpl$Input$users_min_order_by(this._res);

  TRes _res;

  call({
    Enum$order_by? activeMfaType,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? id,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
  }) =>
      _res;
}

class Input$users_obj_rel_insert_input {
  factory Input$users_obj_rel_insert_input({
    required Input$users_insert_input data,
    Input$users_on_conflict? on_conflict,
  }) =>
      Input$users_obj_rel_insert_input._({
        r'data': data,
        if (on_conflict != null) r'on_conflict': on_conflict,
      });

  Input$users_obj_rel_insert_input._(this._$data);

  factory Input$users_obj_rel_insert_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$data = data['data'];
    result$data['data'] =
        Input$users_insert_input.fromJson((l$data as Map<String, dynamic>));
    if (data.containsKey('on_conflict')) {
      final l$on_conflict = data['on_conflict'];
      result$data['on_conflict'] = l$on_conflict == null
          ? null
          : Input$users_on_conflict.fromJson(
              (l$on_conflict as Map<String, dynamic>));
    }
    return Input$users_obj_rel_insert_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$users_insert_input get data =>
      (_$data['data'] as Input$users_insert_input);
  Input$users_on_conflict? get on_conflict =>
      (_$data['on_conflict'] as Input$users_on_conflict?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$data = data;
    result$data['data'] = l$data.toJson();
    if (_$data.containsKey('on_conflict')) {
      final l$on_conflict = on_conflict;
      result$data['on_conflict'] = l$on_conflict?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_obj_rel_insert_input<Input$users_obj_rel_insert_input>
      get copyWith => CopyWith$Input$users_obj_rel_insert_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_obj_rel_insert_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$data = data;
    final lOther$data = other.data;
    if (l$data != lOther$data) {
      return false;
    }
    final l$on_conflict = on_conflict;
    final lOther$on_conflict = other.on_conflict;
    if (_$data.containsKey('on_conflict') !=
        other._$data.containsKey('on_conflict')) {
      return false;
    }
    if (l$on_conflict != lOther$on_conflict) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$data = data;
    final l$on_conflict = on_conflict;
    return Object.hashAll([
      l$data,
      _$data.containsKey('on_conflict') ? l$on_conflict : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_obj_rel_insert_input<TRes> {
  factory CopyWith$Input$users_obj_rel_insert_input(
    Input$users_obj_rel_insert_input instance,
    TRes Function(Input$users_obj_rel_insert_input) then,
  ) = _CopyWithImpl$Input$users_obj_rel_insert_input;

  factory CopyWith$Input$users_obj_rel_insert_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_obj_rel_insert_input;

  TRes call({
    Input$users_insert_input? data,
    Input$users_on_conflict? on_conflict,
  });
  CopyWith$Input$users_insert_input<TRes> get data;
  CopyWith$Input$users_on_conflict<TRes> get on_conflict;
}

class _CopyWithImpl$Input$users_obj_rel_insert_input<TRes>
    implements CopyWith$Input$users_obj_rel_insert_input<TRes> {
  _CopyWithImpl$Input$users_obj_rel_insert_input(
    this._instance,
    this._then,
  );

  final Input$users_obj_rel_insert_input _instance;

  final TRes Function(Input$users_obj_rel_insert_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? data = _undefined,
    Object? on_conflict = _undefined,
  }) =>
      _then(Input$users_obj_rel_insert_input._({
        ..._instance._$data,
        if (data != _undefined && data != null)
          'data': (data as Input$users_insert_input),
        if (on_conflict != _undefined)
          'on_conflict': (on_conflict as Input$users_on_conflict?),
      }));
  CopyWith$Input$users_insert_input<TRes> get data {
    final local$data = _instance.data;
    return CopyWith$Input$users_insert_input(local$data, (e) => call(data: e));
  }

  CopyWith$Input$users_on_conflict<TRes> get on_conflict {
    final local$on_conflict = _instance.on_conflict;
    return local$on_conflict == null
        ? CopyWith$Input$users_on_conflict.stub(_then(_instance))
        : CopyWith$Input$users_on_conflict(
            local$on_conflict, (e) => call(on_conflict: e));
  }
}

class _CopyWithStubImpl$Input$users_obj_rel_insert_input<TRes>
    implements CopyWith$Input$users_obj_rel_insert_input<TRes> {
  _CopyWithStubImpl$Input$users_obj_rel_insert_input(this._res);

  TRes _res;

  call({
    Input$users_insert_input? data,
    Input$users_on_conflict? on_conflict,
  }) =>
      _res;
  CopyWith$Input$users_insert_input<TRes> get data =>
      CopyWith$Input$users_insert_input.stub(_res);
  CopyWith$Input$users_on_conflict<TRes> get on_conflict =>
      CopyWith$Input$users_on_conflict.stub(_res);
}

class Input$users_on_conflict {
  factory Input$users_on_conflict({
    required Enum$users_constraint constraint,
    required List<Enum$users_update_column> update_columns,
    Input$users_bool_exp? where,
  }) =>
      Input$users_on_conflict._({
        r'constraint': constraint,
        r'update_columns': update_columns,
        if (where != null) r'where': where,
      });

  Input$users_on_conflict._(this._$data);

  factory Input$users_on_conflict.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$constraint = data['constraint'];
    result$data['constraint'] =
        fromJson$Enum$users_constraint((l$constraint as String));
    final l$update_columns = data['update_columns'];
    result$data['update_columns'] = (l$update_columns as List<dynamic>)
        .map((e) => fromJson$Enum$users_update_column((e as String)))
        .toList();
    if (data.containsKey('where')) {
      final l$where = data['where'];
      result$data['where'] = l$where == null
          ? null
          : Input$users_bool_exp.fromJson((l$where as Map<String, dynamic>));
    }
    return Input$users_on_conflict._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$users_constraint get constraint =>
      (_$data['constraint'] as Enum$users_constraint);
  List<Enum$users_update_column> get update_columns =>
      (_$data['update_columns'] as List<Enum$users_update_column>);
  Input$users_bool_exp? get where => (_$data['where'] as Input$users_bool_exp?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$constraint = constraint;
    result$data['constraint'] = toJson$Enum$users_constraint(l$constraint);
    final l$update_columns = update_columns;
    result$data['update_columns'] = l$update_columns
        .map((e) => toJson$Enum$users_update_column(e))
        .toList();
    if (_$data.containsKey('where')) {
      final l$where = where;
      result$data['where'] = l$where?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_on_conflict<Input$users_on_conflict> get copyWith =>
      CopyWith$Input$users_on_conflict(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_on_conflict) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$constraint = constraint;
    final lOther$constraint = other.constraint;
    if (l$constraint != lOther$constraint) {
      return false;
    }
    final l$update_columns = update_columns;
    final lOther$update_columns = other.update_columns;
    if (l$update_columns.length != lOther$update_columns.length) {
      return false;
    }
    for (int i = 0; i < l$update_columns.length; i++) {
      final l$update_columns$entry = l$update_columns[i];
      final lOther$update_columns$entry = lOther$update_columns[i];
      if (l$update_columns$entry != lOther$update_columns$entry) {
        return false;
      }
    }
    final l$where = where;
    final lOther$where = other.where;
    if (_$data.containsKey('where') != other._$data.containsKey('where')) {
      return false;
    }
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$constraint = constraint;
    final l$update_columns = update_columns;
    final l$where = where;
    return Object.hashAll([
      l$constraint,
      Object.hashAll(l$update_columns.map((v) => v)),
      _$data.containsKey('where') ? l$where : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_on_conflict<TRes> {
  factory CopyWith$Input$users_on_conflict(
    Input$users_on_conflict instance,
    TRes Function(Input$users_on_conflict) then,
  ) = _CopyWithImpl$Input$users_on_conflict;

  factory CopyWith$Input$users_on_conflict.stub(TRes res) =
      _CopyWithStubImpl$Input$users_on_conflict;

  TRes call({
    Enum$users_constraint? constraint,
    List<Enum$users_update_column>? update_columns,
    Input$users_bool_exp? where,
  });
  CopyWith$Input$users_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$users_on_conflict<TRes>
    implements CopyWith$Input$users_on_conflict<TRes> {
  _CopyWithImpl$Input$users_on_conflict(
    this._instance,
    this._then,
  );

  final Input$users_on_conflict _instance;

  final TRes Function(Input$users_on_conflict) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? constraint = _undefined,
    Object? update_columns = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$users_on_conflict._({
        ..._instance._$data,
        if (constraint != _undefined && constraint != null)
          'constraint': (constraint as Enum$users_constraint),
        if (update_columns != _undefined && update_columns != null)
          'update_columns': (update_columns as List<Enum$users_update_column>),
        if (where != _undefined) 'where': (where as Input$users_bool_exp?),
      }));
  CopyWith$Input$users_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return local$where == null
        ? CopyWith$Input$users_bool_exp.stub(_then(_instance))
        : CopyWith$Input$users_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$users_on_conflict<TRes>
    implements CopyWith$Input$users_on_conflict<TRes> {
  _CopyWithStubImpl$Input$users_on_conflict(this._res);

  TRes _res;

  call({
    Enum$users_constraint? constraint,
    List<Enum$users_update_column>? update_columns,
    Input$users_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$users_bool_exp<TRes> get where =>
      CopyWith$Input$users_bool_exp.stub(_res);
}

class Input$users_order_by {
  factory Input$users_order_by({
    Input$umkm_order_by? UMKMById,
    Enum$order_by? activeMfaType,
    Input$cs_message_aggregate_order_by? agent_cs_messages_aggregate,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Input$cs_message_aggregate_order_by? cs_messages_aggregate,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Input$authRoles_order_by? defaultRoleByRole,
    Enum$order_by? disabled,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? emailVerified,
    Enum$order_by? id,
    Input$investor_order_by? investorById,
    Enum$order_by? isAnonymous,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? metadata,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? phoneNumberVerified,
    Input$profile_order_by? profile,
    Input$authRefreshTokens_aggregate_order_by? refreshTokens_aggregate,
    Input$authUserRoles_aggregate_order_by? roles_aggregate,
    Input$authUserSecurityKeys_aggregate_order_by? securityKeys_aggregate,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
    Input$authUserProviders_aggregate_order_by? userProviders_aggregate,
  }) =>
      Input$users_order_by._({
        if (UMKMById != null) r'UMKMById': UMKMById,
        if (activeMfaType != null) r'activeMfaType': activeMfaType,
        if (agent_cs_messages_aggregate != null)
          r'agent_cs_messages_aggregate': agent_cs_messages_aggregate,
        if (avatarUrl != null) r'avatarUrl': avatarUrl,
        if (createdAt != null) r'createdAt': createdAt,
        if (cs_messages_aggregate != null)
          r'cs_messages_aggregate': cs_messages_aggregate,
        if (currentChallenge != null) r'currentChallenge': currentChallenge,
        if (defaultRole != null) r'defaultRole': defaultRole,
        if (defaultRoleByRole != null) r'defaultRoleByRole': defaultRoleByRole,
        if (disabled != null) r'disabled': disabled,
        if (displayName != null) r'displayName': displayName,
        if (email != null) r'email': email,
        if (emailVerified != null) r'emailVerified': emailVerified,
        if (id != null) r'id': id,
        if (investorById != null) r'investorById': investorById,
        if (isAnonymous != null) r'isAnonymous': isAnonymous,
        if (lastSeen != null) r'lastSeen': lastSeen,
        if (locale != null) r'locale': locale,
        if (metadata != null) r'metadata': metadata,
        if (newEmail != null) r'newEmail': newEmail,
        if (otpHash != null) r'otpHash': otpHash,
        if (otpHashExpiresAt != null) r'otpHashExpiresAt': otpHashExpiresAt,
        if (otpMethodLastUsed != null) r'otpMethodLastUsed': otpMethodLastUsed,
        if (passwordHash != null) r'passwordHash': passwordHash,
        if (phoneNumber != null) r'phoneNumber': phoneNumber,
        if (phoneNumberVerified != null)
          r'phoneNumberVerified': phoneNumberVerified,
        if (profile != null) r'profile': profile,
        if (refreshTokens_aggregate != null)
          r'refreshTokens_aggregate': refreshTokens_aggregate,
        if (roles_aggregate != null) r'roles_aggregate': roles_aggregate,
        if (securityKeys_aggregate != null)
          r'securityKeys_aggregate': securityKeys_aggregate,
        if (ticket != null) r'ticket': ticket,
        if (ticketExpiresAt != null) r'ticketExpiresAt': ticketExpiresAt,
        if (totpSecret != null) r'totpSecret': totpSecret,
        if (updatedAt != null) r'updatedAt': updatedAt,
        if (userProviders_aggregate != null)
          r'userProviders_aggregate': userProviders_aggregate,
      });

  Input$users_order_by._(this._$data);

  factory Input$users_order_by.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('UMKMById')) {
      final l$UMKMById = data['UMKMById'];
      result$data['UMKMById'] = l$UMKMById == null
          ? null
          : Input$umkm_order_by.fromJson((l$UMKMById as Map<String, dynamic>));
    }
    if (data.containsKey('activeMfaType')) {
      final l$activeMfaType = data['activeMfaType'];
      result$data['activeMfaType'] = l$activeMfaType == null
          ? null
          : fromJson$Enum$order_by((l$activeMfaType as String));
    }
    if (data.containsKey('agent_cs_messages_aggregate')) {
      final l$agent_cs_messages_aggregate = data['agent_cs_messages_aggregate'];
      result$data['agent_cs_messages_aggregate'] =
          l$agent_cs_messages_aggregate == null
              ? null
              : Input$cs_message_aggregate_order_by.fromJson(
                  (l$agent_cs_messages_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('avatarUrl')) {
      final l$avatarUrl = data['avatarUrl'];
      result$data['avatarUrl'] = l$avatarUrl == null
          ? null
          : fromJson$Enum$order_by((l$avatarUrl as String));
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] = l$createdAt == null
          ? null
          : fromJson$Enum$order_by((l$createdAt as String));
    }
    if (data.containsKey('cs_messages_aggregate')) {
      final l$cs_messages_aggregate = data['cs_messages_aggregate'];
      result$data['cs_messages_aggregate'] = l$cs_messages_aggregate == null
          ? null
          : Input$cs_message_aggregate_order_by.fromJson(
              (l$cs_messages_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('currentChallenge')) {
      final l$currentChallenge = data['currentChallenge'];
      result$data['currentChallenge'] = l$currentChallenge == null
          ? null
          : fromJson$Enum$order_by((l$currentChallenge as String));
    }
    if (data.containsKey('defaultRole')) {
      final l$defaultRole = data['defaultRole'];
      result$data['defaultRole'] = l$defaultRole == null
          ? null
          : fromJson$Enum$order_by((l$defaultRole as String));
    }
    if (data.containsKey('defaultRoleByRole')) {
      final l$defaultRoleByRole = data['defaultRoleByRole'];
      result$data['defaultRoleByRole'] = l$defaultRoleByRole == null
          ? null
          : Input$authRoles_order_by.fromJson(
              (l$defaultRoleByRole as Map<String, dynamic>));
    }
    if (data.containsKey('disabled')) {
      final l$disabled = data['disabled'];
      result$data['disabled'] = l$disabled == null
          ? null
          : fromJson$Enum$order_by((l$disabled as String));
    }
    if (data.containsKey('displayName')) {
      final l$displayName = data['displayName'];
      result$data['displayName'] = l$displayName == null
          ? null
          : fromJson$Enum$order_by((l$displayName as String));
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] =
          l$email == null ? null : fromJson$Enum$order_by((l$email as String));
    }
    if (data.containsKey('emailVerified')) {
      final l$emailVerified = data['emailVerified'];
      result$data['emailVerified'] = l$emailVerified == null
          ? null
          : fromJson$Enum$order_by((l$emailVerified as String));
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] =
          l$id == null ? null : fromJson$Enum$order_by((l$id as String));
    }
    if (data.containsKey('investorById')) {
      final l$investorById = data['investorById'];
      result$data['investorById'] = l$investorById == null
          ? null
          : Input$investor_order_by.fromJson(
              (l$investorById as Map<String, dynamic>));
    }
    if (data.containsKey('isAnonymous')) {
      final l$isAnonymous = data['isAnonymous'];
      result$data['isAnonymous'] = l$isAnonymous == null
          ? null
          : fromJson$Enum$order_by((l$isAnonymous as String));
    }
    if (data.containsKey('lastSeen')) {
      final l$lastSeen = data['lastSeen'];
      result$data['lastSeen'] = l$lastSeen == null
          ? null
          : fromJson$Enum$order_by((l$lastSeen as String));
    }
    if (data.containsKey('locale')) {
      final l$locale = data['locale'];
      result$data['locale'] = l$locale == null
          ? null
          : fromJson$Enum$order_by((l$locale as String));
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] = l$metadata == null
          ? null
          : fromJson$Enum$order_by((l$metadata as String));
    }
    if (data.containsKey('newEmail')) {
      final l$newEmail = data['newEmail'];
      result$data['newEmail'] = l$newEmail == null
          ? null
          : fromJson$Enum$order_by((l$newEmail as String));
    }
    if (data.containsKey('otpHash')) {
      final l$otpHash = data['otpHash'];
      result$data['otpHash'] = l$otpHash == null
          ? null
          : fromJson$Enum$order_by((l$otpHash as String));
    }
    if (data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = data['otpHashExpiresAt'];
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : fromJson$Enum$order_by((l$otpHashExpiresAt as String));
    }
    if (data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = data['otpMethodLastUsed'];
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed == null
          ? null
          : fromJson$Enum$order_by((l$otpMethodLastUsed as String));
    }
    if (data.containsKey('passwordHash')) {
      final l$passwordHash = data['passwordHash'];
      result$data['passwordHash'] = l$passwordHash == null
          ? null
          : fromJson$Enum$order_by((l$passwordHash as String));
    }
    if (data.containsKey('phoneNumber')) {
      final l$phoneNumber = data['phoneNumber'];
      result$data['phoneNumber'] = l$phoneNumber == null
          ? null
          : fromJson$Enum$order_by((l$phoneNumber as String));
    }
    if (data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = data['phoneNumberVerified'];
      result$data['phoneNumberVerified'] = l$phoneNumberVerified == null
          ? null
          : fromJson$Enum$order_by((l$phoneNumberVerified as String));
    }
    if (data.containsKey('profile')) {
      final l$profile = data['profile'];
      result$data['profile'] = l$profile == null
          ? null
          : Input$profile_order_by.fromJson(
              (l$profile as Map<String, dynamic>));
    }
    if (data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = data['refreshTokens_aggregate'];
      result$data['refreshTokens_aggregate'] = l$refreshTokens_aggregate == null
          ? null
          : Input$authRefreshTokens_aggregate_order_by.fromJson(
              (l$refreshTokens_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('roles_aggregate')) {
      final l$roles_aggregate = data['roles_aggregate'];
      result$data['roles_aggregate'] = l$roles_aggregate == null
          ? null
          : Input$authUserRoles_aggregate_order_by.fromJson(
              (l$roles_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('securityKeys_aggregate')) {
      final l$securityKeys_aggregate = data['securityKeys_aggregate'];
      result$data['securityKeys_aggregate'] = l$securityKeys_aggregate == null
          ? null
          : Input$authUserSecurityKeys_aggregate_order_by.fromJson(
              (l$securityKeys_aggregate as Map<String, dynamic>));
    }
    if (data.containsKey('ticket')) {
      final l$ticket = data['ticket'];
      result$data['ticket'] = l$ticket == null
          ? null
          : fromJson$Enum$order_by((l$ticket as String));
    }
    if (data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = data['ticketExpiresAt'];
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : fromJson$Enum$order_by((l$ticketExpiresAt as String));
    }
    if (data.containsKey('totpSecret')) {
      final l$totpSecret = data['totpSecret'];
      result$data['totpSecret'] = l$totpSecret == null
          ? null
          : fromJson$Enum$order_by((l$totpSecret as String));
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] = l$updatedAt == null
          ? null
          : fromJson$Enum$order_by((l$updatedAt as String));
    }
    if (data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = data['userProviders_aggregate'];
      result$data['userProviders_aggregate'] = l$userProviders_aggregate == null
          ? null
          : Input$authUserProviders_aggregate_order_by.fromJson(
              (l$userProviders_aggregate as Map<String, dynamic>));
    }
    return Input$users_order_by._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$umkm_order_by? get UMKMById =>
      (_$data['UMKMById'] as Input$umkm_order_by?);
  Enum$order_by? get activeMfaType =>
      (_$data['activeMfaType'] as Enum$order_by?);
  Input$cs_message_aggregate_order_by? get agent_cs_messages_aggregate =>
      (_$data['agent_cs_messages_aggregate']
          as Input$cs_message_aggregate_order_by?);
  Enum$order_by? get avatarUrl => (_$data['avatarUrl'] as Enum$order_by?);
  Enum$order_by? get createdAt => (_$data['createdAt'] as Enum$order_by?);
  Input$cs_message_aggregate_order_by? get cs_messages_aggregate =>
      (_$data['cs_messages_aggregate'] as Input$cs_message_aggregate_order_by?);
  Enum$order_by? get currentChallenge =>
      (_$data['currentChallenge'] as Enum$order_by?);
  Enum$order_by? get defaultRole => (_$data['defaultRole'] as Enum$order_by?);
  Input$authRoles_order_by? get defaultRoleByRole =>
      (_$data['defaultRoleByRole'] as Input$authRoles_order_by?);
  Enum$order_by? get disabled => (_$data['disabled'] as Enum$order_by?);
  Enum$order_by? get displayName => (_$data['displayName'] as Enum$order_by?);
  Enum$order_by? get email => (_$data['email'] as Enum$order_by?);
  Enum$order_by? get emailVerified =>
      (_$data['emailVerified'] as Enum$order_by?);
  Enum$order_by? get id => (_$data['id'] as Enum$order_by?);
  Input$investor_order_by? get investorById =>
      (_$data['investorById'] as Input$investor_order_by?);
  Enum$order_by? get isAnonymous => (_$data['isAnonymous'] as Enum$order_by?);
  Enum$order_by? get lastSeen => (_$data['lastSeen'] as Enum$order_by?);
  Enum$order_by? get locale => (_$data['locale'] as Enum$order_by?);
  Enum$order_by? get metadata => (_$data['metadata'] as Enum$order_by?);
  Enum$order_by? get newEmail => (_$data['newEmail'] as Enum$order_by?);
  Enum$order_by? get otpHash => (_$data['otpHash'] as Enum$order_by?);
  Enum$order_by? get otpHashExpiresAt =>
      (_$data['otpHashExpiresAt'] as Enum$order_by?);
  Enum$order_by? get otpMethodLastUsed =>
      (_$data['otpMethodLastUsed'] as Enum$order_by?);
  Enum$order_by? get passwordHash => (_$data['passwordHash'] as Enum$order_by?);
  Enum$order_by? get phoneNumber => (_$data['phoneNumber'] as Enum$order_by?);
  Enum$order_by? get phoneNumberVerified =>
      (_$data['phoneNumberVerified'] as Enum$order_by?);
  Input$profile_order_by? get profile =>
      (_$data['profile'] as Input$profile_order_by?);
  Input$authRefreshTokens_aggregate_order_by? get refreshTokens_aggregate =>
      (_$data['refreshTokens_aggregate']
          as Input$authRefreshTokens_aggregate_order_by?);
  Input$authUserRoles_aggregate_order_by? get roles_aggregate =>
      (_$data['roles_aggregate'] as Input$authUserRoles_aggregate_order_by?);
  Input$authUserSecurityKeys_aggregate_order_by? get securityKeys_aggregate =>
      (_$data['securityKeys_aggregate']
          as Input$authUserSecurityKeys_aggregate_order_by?);
  Enum$order_by? get ticket => (_$data['ticket'] as Enum$order_by?);
  Enum$order_by? get ticketExpiresAt =>
      (_$data['ticketExpiresAt'] as Enum$order_by?);
  Enum$order_by? get totpSecret => (_$data['totpSecret'] as Enum$order_by?);
  Enum$order_by? get updatedAt => (_$data['updatedAt'] as Enum$order_by?);
  Input$authUserProviders_aggregate_order_by? get userProviders_aggregate =>
      (_$data['userProviders_aggregate']
          as Input$authUserProviders_aggregate_order_by?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('UMKMById')) {
      final l$UMKMById = UMKMById;
      result$data['UMKMById'] = l$UMKMById?.toJson();
    }
    if (_$data.containsKey('activeMfaType')) {
      final l$activeMfaType = activeMfaType;
      result$data['activeMfaType'] = l$activeMfaType == null
          ? null
          : toJson$Enum$order_by(l$activeMfaType);
    }
    if (_$data.containsKey('agent_cs_messages_aggregate')) {
      final l$agent_cs_messages_aggregate = agent_cs_messages_aggregate;
      result$data['agent_cs_messages_aggregate'] =
          l$agent_cs_messages_aggregate?.toJson();
    }
    if (_$data.containsKey('avatarUrl')) {
      final l$avatarUrl = avatarUrl;
      result$data['avatarUrl'] =
          l$avatarUrl == null ? null : toJson$Enum$order_by(l$avatarUrl);
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] =
          l$createdAt == null ? null : toJson$Enum$order_by(l$createdAt);
    }
    if (_$data.containsKey('cs_messages_aggregate')) {
      final l$cs_messages_aggregate = cs_messages_aggregate;
      result$data['cs_messages_aggregate'] = l$cs_messages_aggregate?.toJson();
    }
    if (_$data.containsKey('currentChallenge')) {
      final l$currentChallenge = currentChallenge;
      result$data['currentChallenge'] = l$currentChallenge == null
          ? null
          : toJson$Enum$order_by(l$currentChallenge);
    }
    if (_$data.containsKey('defaultRole')) {
      final l$defaultRole = defaultRole;
      result$data['defaultRole'] =
          l$defaultRole == null ? null : toJson$Enum$order_by(l$defaultRole);
    }
    if (_$data.containsKey('defaultRoleByRole')) {
      final l$defaultRoleByRole = defaultRoleByRole;
      result$data['defaultRoleByRole'] = l$defaultRoleByRole?.toJson();
    }
    if (_$data.containsKey('disabled')) {
      final l$disabled = disabled;
      result$data['disabled'] =
          l$disabled == null ? null : toJson$Enum$order_by(l$disabled);
    }
    if (_$data.containsKey('displayName')) {
      final l$displayName = displayName;
      result$data['displayName'] =
          l$displayName == null ? null : toJson$Enum$order_by(l$displayName);
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] =
          l$email == null ? null : toJson$Enum$order_by(l$email);
    }
    if (_$data.containsKey('emailVerified')) {
      final l$emailVerified = emailVerified;
      result$data['emailVerified'] = l$emailVerified == null
          ? null
          : toJson$Enum$order_by(l$emailVerified);
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : toJson$Enum$order_by(l$id);
    }
    if (_$data.containsKey('investorById')) {
      final l$investorById = investorById;
      result$data['investorById'] = l$investorById?.toJson();
    }
    if (_$data.containsKey('isAnonymous')) {
      final l$isAnonymous = isAnonymous;
      result$data['isAnonymous'] =
          l$isAnonymous == null ? null : toJson$Enum$order_by(l$isAnonymous);
    }
    if (_$data.containsKey('lastSeen')) {
      final l$lastSeen = lastSeen;
      result$data['lastSeen'] =
          l$lastSeen == null ? null : toJson$Enum$order_by(l$lastSeen);
    }
    if (_$data.containsKey('locale')) {
      final l$locale = locale;
      result$data['locale'] =
          l$locale == null ? null : toJson$Enum$order_by(l$locale);
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : toJson$Enum$order_by(l$metadata);
    }
    if (_$data.containsKey('newEmail')) {
      final l$newEmail = newEmail;
      result$data['newEmail'] =
          l$newEmail == null ? null : toJson$Enum$order_by(l$newEmail);
    }
    if (_$data.containsKey('otpHash')) {
      final l$otpHash = otpHash;
      result$data['otpHash'] =
          l$otpHash == null ? null : toJson$Enum$order_by(l$otpHash);
    }
    if (_$data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = otpHashExpiresAt;
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : toJson$Enum$order_by(l$otpHashExpiresAt);
    }
    if (_$data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = otpMethodLastUsed;
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed == null
          ? null
          : toJson$Enum$order_by(l$otpMethodLastUsed);
    }
    if (_$data.containsKey('passwordHash')) {
      final l$passwordHash = passwordHash;
      result$data['passwordHash'] =
          l$passwordHash == null ? null : toJson$Enum$order_by(l$passwordHash);
    }
    if (_$data.containsKey('phoneNumber')) {
      final l$phoneNumber = phoneNumber;
      result$data['phoneNumber'] =
          l$phoneNumber == null ? null : toJson$Enum$order_by(l$phoneNumber);
    }
    if (_$data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = phoneNumberVerified;
      result$data['phoneNumberVerified'] = l$phoneNumberVerified == null
          ? null
          : toJson$Enum$order_by(l$phoneNumberVerified);
    }
    if (_$data.containsKey('profile')) {
      final l$profile = profile;
      result$data['profile'] = l$profile?.toJson();
    }
    if (_$data.containsKey('refreshTokens_aggregate')) {
      final l$refreshTokens_aggregate = refreshTokens_aggregate;
      result$data['refreshTokens_aggregate'] =
          l$refreshTokens_aggregate?.toJson();
    }
    if (_$data.containsKey('roles_aggregate')) {
      final l$roles_aggregate = roles_aggregate;
      result$data['roles_aggregate'] = l$roles_aggregate?.toJson();
    }
    if (_$data.containsKey('securityKeys_aggregate')) {
      final l$securityKeys_aggregate = securityKeys_aggregate;
      result$data['securityKeys_aggregate'] =
          l$securityKeys_aggregate?.toJson();
    }
    if (_$data.containsKey('ticket')) {
      final l$ticket = ticket;
      result$data['ticket'] =
          l$ticket == null ? null : toJson$Enum$order_by(l$ticket);
    }
    if (_$data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = ticketExpiresAt;
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : toJson$Enum$order_by(l$ticketExpiresAt);
    }
    if (_$data.containsKey('totpSecret')) {
      final l$totpSecret = totpSecret;
      result$data['totpSecret'] =
          l$totpSecret == null ? null : toJson$Enum$order_by(l$totpSecret);
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] =
          l$updatedAt == null ? null : toJson$Enum$order_by(l$updatedAt);
    }
    if (_$data.containsKey('userProviders_aggregate')) {
      final l$userProviders_aggregate = userProviders_aggregate;
      result$data['userProviders_aggregate'] =
          l$userProviders_aggregate?.toJson();
    }
    return result$data;
  }

  CopyWith$Input$users_order_by<Input$users_order_by> get copyWith =>
      CopyWith$Input$users_order_by(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_order_by) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$UMKMById = UMKMById;
    final lOther$UMKMById = other.UMKMById;
    if (_$data.containsKey('UMKMById') !=
        other._$data.containsKey('UMKMById')) {
      return false;
    }
    if (l$UMKMById != lOther$UMKMById) {
      return false;
    }
    final l$activeMfaType = activeMfaType;
    final lOther$activeMfaType = other.activeMfaType;
    if (_$data.containsKey('activeMfaType') !=
        other._$data.containsKey('activeMfaType')) {
      return false;
    }
    if (l$activeMfaType != lOther$activeMfaType) {
      return false;
    }
    final l$agent_cs_messages_aggregate = agent_cs_messages_aggregate;
    final lOther$agent_cs_messages_aggregate =
        other.agent_cs_messages_aggregate;
    if (_$data.containsKey('agent_cs_messages_aggregate') !=
        other._$data.containsKey('agent_cs_messages_aggregate')) {
      return false;
    }
    if (l$agent_cs_messages_aggregate != lOther$agent_cs_messages_aggregate) {
      return false;
    }
    final l$avatarUrl = avatarUrl;
    final lOther$avatarUrl = other.avatarUrl;
    if (_$data.containsKey('avatarUrl') !=
        other._$data.containsKey('avatarUrl')) {
      return false;
    }
    if (l$avatarUrl != lOther$avatarUrl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$cs_messages_aggregate = cs_messages_aggregate;
    final lOther$cs_messages_aggregate = other.cs_messages_aggregate;
    if (_$data.containsKey('cs_messages_aggregate') !=
        other._$data.containsKey('cs_messages_aggregate')) {
      return false;
    }
    if (l$cs_messages_aggregate != lOther$cs_messages_aggregate) {
      return false;
    }
    final l$currentChallenge = currentChallenge;
    final lOther$currentChallenge = other.currentChallenge;
    if (_$data.containsKey('currentChallenge') !=
        other._$data.containsKey('currentChallenge')) {
      return false;
    }
    if (l$currentChallenge != lOther$currentChallenge) {
      return false;
    }
    final l$defaultRole = defaultRole;
    final lOther$defaultRole = other.defaultRole;
    if (_$data.containsKey('defaultRole') !=
        other._$data.containsKey('defaultRole')) {
      return false;
    }
    if (l$defaultRole != lOther$defaultRole) {
      return false;
    }
    final l$defaultRoleByRole = defaultRoleByRole;
    final lOther$defaultRoleByRole = other.defaultRoleByRole;
    if (_$data.containsKey('defaultRoleByRole') !=
        other._$data.containsKey('defaultRoleByRole')) {
      return false;
    }
    if (l$defaultRoleByRole != lOther$defaultRoleByRole) {
      return false;
    }
    final l$disabled = disabled;
    final lOther$disabled = other.disabled;
    if (_$data.containsKey('disabled') !=
        other._$data.containsKey('disabled')) {
      return false;
    }
    if (l$disabled != lOther$disabled) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (_$data.containsKey('displayName') !=
        other._$data.containsKey('displayName')) {
      return false;
    }
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$emailVerified = emailVerified;
    final lOther$emailVerified = other.emailVerified;
    if (_$data.containsKey('emailVerified') !=
        other._$data.containsKey('emailVerified')) {
      return false;
    }
    if (l$emailVerified != lOther$emailVerified) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$investorById = investorById;
    final lOther$investorById = other.investorById;
    if (_$data.containsKey('investorById') !=
        other._$data.containsKey('investorById')) {
      return false;
    }
    if (l$investorById != lOther$investorById) {
      return false;
    }
    final l$isAnonymous = isAnonymous;
    final lOther$isAnonymous = other.isAnonymous;
    if (_$data.containsKey('isAnonymous') !=
        other._$data.containsKey('isAnonymous')) {
      return false;
    }
    if (l$isAnonymous != lOther$isAnonymous) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (_$data.containsKey('lastSeen') !=
        other._$data.containsKey('lastSeen')) {
      return false;
    }
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$locale = locale;
    final lOther$locale = other.locale;
    if (_$data.containsKey('locale') != other._$data.containsKey('locale')) {
      return false;
    }
    if (l$locale != lOther$locale) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$newEmail = newEmail;
    final lOther$newEmail = other.newEmail;
    if (_$data.containsKey('newEmail') !=
        other._$data.containsKey('newEmail')) {
      return false;
    }
    if (l$newEmail != lOther$newEmail) {
      return false;
    }
    final l$otpHash = otpHash;
    final lOther$otpHash = other.otpHash;
    if (_$data.containsKey('otpHash') != other._$data.containsKey('otpHash')) {
      return false;
    }
    if (l$otpHash != lOther$otpHash) {
      return false;
    }
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final lOther$otpHashExpiresAt = other.otpHashExpiresAt;
    if (_$data.containsKey('otpHashExpiresAt') !=
        other._$data.containsKey('otpHashExpiresAt')) {
      return false;
    }
    if (l$otpHashExpiresAt != lOther$otpHashExpiresAt) {
      return false;
    }
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final lOther$otpMethodLastUsed = other.otpMethodLastUsed;
    if (_$data.containsKey('otpMethodLastUsed') !=
        other._$data.containsKey('otpMethodLastUsed')) {
      return false;
    }
    if (l$otpMethodLastUsed != lOther$otpMethodLastUsed) {
      return false;
    }
    final l$passwordHash = passwordHash;
    final lOther$passwordHash = other.passwordHash;
    if (_$data.containsKey('passwordHash') !=
        other._$data.containsKey('passwordHash')) {
      return false;
    }
    if (l$passwordHash != lOther$passwordHash) {
      return false;
    }
    final l$phoneNumber = phoneNumber;
    final lOther$phoneNumber = other.phoneNumber;
    if (_$data.containsKey('phoneNumber') !=
        other._$data.containsKey('phoneNumber')) {
      return false;
    }
    if (l$phoneNumber != lOther$phoneNumber) {
      return false;
    }
    final l$phoneNumberVerified = phoneNumberVerified;
    final lOther$phoneNumberVerified = other.phoneNumberVerified;
    if (_$data.containsKey('phoneNumberVerified') !=
        other._$data.containsKey('phoneNumberVerified')) {
      return false;
    }
    if (l$phoneNumberVerified != lOther$phoneNumberVerified) {
      return false;
    }
    final l$profile = profile;
    final lOther$profile = other.profile;
    if (_$data.containsKey('profile') != other._$data.containsKey('profile')) {
      return false;
    }
    if (l$profile != lOther$profile) {
      return false;
    }
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final lOther$refreshTokens_aggregate = other.refreshTokens_aggregate;
    if (_$data.containsKey('refreshTokens_aggregate') !=
        other._$data.containsKey('refreshTokens_aggregate')) {
      return false;
    }
    if (l$refreshTokens_aggregate != lOther$refreshTokens_aggregate) {
      return false;
    }
    final l$roles_aggregate = roles_aggregate;
    final lOther$roles_aggregate = other.roles_aggregate;
    if (_$data.containsKey('roles_aggregate') !=
        other._$data.containsKey('roles_aggregate')) {
      return false;
    }
    if (l$roles_aggregate != lOther$roles_aggregate) {
      return false;
    }
    final l$securityKeys_aggregate = securityKeys_aggregate;
    final lOther$securityKeys_aggregate = other.securityKeys_aggregate;
    if (_$data.containsKey('securityKeys_aggregate') !=
        other._$data.containsKey('securityKeys_aggregate')) {
      return false;
    }
    if (l$securityKeys_aggregate != lOther$securityKeys_aggregate) {
      return false;
    }
    final l$ticket = ticket;
    final lOther$ticket = other.ticket;
    if (_$data.containsKey('ticket') != other._$data.containsKey('ticket')) {
      return false;
    }
    if (l$ticket != lOther$ticket) {
      return false;
    }
    final l$ticketExpiresAt = ticketExpiresAt;
    final lOther$ticketExpiresAt = other.ticketExpiresAt;
    if (_$data.containsKey('ticketExpiresAt') !=
        other._$data.containsKey('ticketExpiresAt')) {
      return false;
    }
    if (l$ticketExpiresAt != lOther$ticketExpiresAt) {
      return false;
    }
    final l$totpSecret = totpSecret;
    final lOther$totpSecret = other.totpSecret;
    if (_$data.containsKey('totpSecret') !=
        other._$data.containsKey('totpSecret')) {
      return false;
    }
    if (l$totpSecret != lOther$totpSecret) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userProviders_aggregate = userProviders_aggregate;
    final lOther$userProviders_aggregate = other.userProviders_aggregate;
    if (_$data.containsKey('userProviders_aggregate') !=
        other._$data.containsKey('userProviders_aggregate')) {
      return false;
    }
    if (l$userProviders_aggregate != lOther$userProviders_aggregate) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$UMKMById = UMKMById;
    final l$activeMfaType = activeMfaType;
    final l$agent_cs_messages_aggregate = agent_cs_messages_aggregate;
    final l$avatarUrl = avatarUrl;
    final l$createdAt = createdAt;
    final l$cs_messages_aggregate = cs_messages_aggregate;
    final l$currentChallenge = currentChallenge;
    final l$defaultRole = defaultRole;
    final l$defaultRoleByRole = defaultRoleByRole;
    final l$disabled = disabled;
    final l$displayName = displayName;
    final l$email = email;
    final l$emailVerified = emailVerified;
    final l$id = id;
    final l$investorById = investorById;
    final l$isAnonymous = isAnonymous;
    final l$lastSeen = lastSeen;
    final l$locale = locale;
    final l$metadata = metadata;
    final l$newEmail = newEmail;
    final l$otpHash = otpHash;
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final l$passwordHash = passwordHash;
    final l$phoneNumber = phoneNumber;
    final l$phoneNumberVerified = phoneNumberVerified;
    final l$profile = profile;
    final l$refreshTokens_aggregate = refreshTokens_aggregate;
    final l$roles_aggregate = roles_aggregate;
    final l$securityKeys_aggregate = securityKeys_aggregate;
    final l$ticket = ticket;
    final l$ticketExpiresAt = ticketExpiresAt;
    final l$totpSecret = totpSecret;
    final l$updatedAt = updatedAt;
    final l$userProviders_aggregate = userProviders_aggregate;
    return Object.hashAll([
      _$data.containsKey('UMKMById') ? l$UMKMById : const {},
      _$data.containsKey('activeMfaType') ? l$activeMfaType : const {},
      _$data.containsKey('agent_cs_messages_aggregate')
          ? l$agent_cs_messages_aggregate
          : const {},
      _$data.containsKey('avatarUrl') ? l$avatarUrl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('cs_messages_aggregate')
          ? l$cs_messages_aggregate
          : const {},
      _$data.containsKey('currentChallenge') ? l$currentChallenge : const {},
      _$data.containsKey('defaultRole') ? l$defaultRole : const {},
      _$data.containsKey('defaultRoleByRole') ? l$defaultRoleByRole : const {},
      _$data.containsKey('disabled') ? l$disabled : const {},
      _$data.containsKey('displayName') ? l$displayName : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('emailVerified') ? l$emailVerified : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('investorById') ? l$investorById : const {},
      _$data.containsKey('isAnonymous') ? l$isAnonymous : const {},
      _$data.containsKey('lastSeen') ? l$lastSeen : const {},
      _$data.containsKey('locale') ? l$locale : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('newEmail') ? l$newEmail : const {},
      _$data.containsKey('otpHash') ? l$otpHash : const {},
      _$data.containsKey('otpHashExpiresAt') ? l$otpHashExpiresAt : const {},
      _$data.containsKey('otpMethodLastUsed') ? l$otpMethodLastUsed : const {},
      _$data.containsKey('passwordHash') ? l$passwordHash : const {},
      _$data.containsKey('phoneNumber') ? l$phoneNumber : const {},
      _$data.containsKey('phoneNumberVerified')
          ? l$phoneNumberVerified
          : const {},
      _$data.containsKey('profile') ? l$profile : const {},
      _$data.containsKey('refreshTokens_aggregate')
          ? l$refreshTokens_aggregate
          : const {},
      _$data.containsKey('roles_aggregate') ? l$roles_aggregate : const {},
      _$data.containsKey('securityKeys_aggregate')
          ? l$securityKeys_aggregate
          : const {},
      _$data.containsKey('ticket') ? l$ticket : const {},
      _$data.containsKey('ticketExpiresAt') ? l$ticketExpiresAt : const {},
      _$data.containsKey('totpSecret') ? l$totpSecret : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
      _$data.containsKey('userProviders_aggregate')
          ? l$userProviders_aggregate
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_order_by<TRes> {
  factory CopyWith$Input$users_order_by(
    Input$users_order_by instance,
    TRes Function(Input$users_order_by) then,
  ) = _CopyWithImpl$Input$users_order_by;

  factory CopyWith$Input$users_order_by.stub(TRes res) =
      _CopyWithStubImpl$Input$users_order_by;

  TRes call({
    Input$umkm_order_by? UMKMById,
    Enum$order_by? activeMfaType,
    Input$cs_message_aggregate_order_by? agent_cs_messages_aggregate,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Input$cs_message_aggregate_order_by? cs_messages_aggregate,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Input$authRoles_order_by? defaultRoleByRole,
    Enum$order_by? disabled,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? emailVerified,
    Enum$order_by? id,
    Input$investor_order_by? investorById,
    Enum$order_by? isAnonymous,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? metadata,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? phoneNumberVerified,
    Input$profile_order_by? profile,
    Input$authRefreshTokens_aggregate_order_by? refreshTokens_aggregate,
    Input$authUserRoles_aggregate_order_by? roles_aggregate,
    Input$authUserSecurityKeys_aggregate_order_by? securityKeys_aggregate,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
    Input$authUserProviders_aggregate_order_by? userProviders_aggregate,
  });
  CopyWith$Input$umkm_order_by<TRes> get UMKMById;
  CopyWith$Input$cs_message_aggregate_order_by<TRes>
      get agent_cs_messages_aggregate;
  CopyWith$Input$cs_message_aggregate_order_by<TRes> get cs_messages_aggregate;
  CopyWith$Input$authRoles_order_by<TRes> get defaultRoleByRole;
  CopyWith$Input$investor_order_by<TRes> get investorById;
  CopyWith$Input$profile_order_by<TRes> get profile;
  CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes>
      get refreshTokens_aggregate;
  CopyWith$Input$authUserRoles_aggregate_order_by<TRes> get roles_aggregate;
  CopyWith$Input$authUserSecurityKeys_aggregate_order_by<TRes>
      get securityKeys_aggregate;
  CopyWith$Input$authUserProviders_aggregate_order_by<TRes>
      get userProviders_aggregate;
}

class _CopyWithImpl$Input$users_order_by<TRes>
    implements CopyWith$Input$users_order_by<TRes> {
  _CopyWithImpl$Input$users_order_by(
    this._instance,
    this._then,
  );

  final Input$users_order_by _instance;

  final TRes Function(Input$users_order_by) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? UMKMById = _undefined,
    Object? activeMfaType = _undefined,
    Object? agent_cs_messages_aggregate = _undefined,
    Object? avatarUrl = _undefined,
    Object? createdAt = _undefined,
    Object? cs_messages_aggregate = _undefined,
    Object? currentChallenge = _undefined,
    Object? defaultRole = _undefined,
    Object? defaultRoleByRole = _undefined,
    Object? disabled = _undefined,
    Object? displayName = _undefined,
    Object? email = _undefined,
    Object? emailVerified = _undefined,
    Object? id = _undefined,
    Object? investorById = _undefined,
    Object? isAnonymous = _undefined,
    Object? lastSeen = _undefined,
    Object? locale = _undefined,
    Object? metadata = _undefined,
    Object? newEmail = _undefined,
    Object? otpHash = _undefined,
    Object? otpHashExpiresAt = _undefined,
    Object? otpMethodLastUsed = _undefined,
    Object? passwordHash = _undefined,
    Object? phoneNumber = _undefined,
    Object? phoneNumberVerified = _undefined,
    Object? profile = _undefined,
    Object? refreshTokens_aggregate = _undefined,
    Object? roles_aggregate = _undefined,
    Object? securityKeys_aggregate = _undefined,
    Object? ticket = _undefined,
    Object? ticketExpiresAt = _undefined,
    Object? totpSecret = _undefined,
    Object? updatedAt = _undefined,
    Object? userProviders_aggregate = _undefined,
  }) =>
      _then(Input$users_order_by._({
        ..._instance._$data,
        if (UMKMById != _undefined)
          'UMKMById': (UMKMById as Input$umkm_order_by?),
        if (activeMfaType != _undefined)
          'activeMfaType': (activeMfaType as Enum$order_by?),
        if (agent_cs_messages_aggregate != _undefined)
          'agent_cs_messages_aggregate': (agent_cs_messages_aggregate
              as Input$cs_message_aggregate_order_by?),
        if (avatarUrl != _undefined) 'avatarUrl': (avatarUrl as Enum$order_by?),
        if (createdAt != _undefined) 'createdAt': (createdAt as Enum$order_by?),
        if (cs_messages_aggregate != _undefined)
          'cs_messages_aggregate':
              (cs_messages_aggregate as Input$cs_message_aggregate_order_by?),
        if (currentChallenge != _undefined)
          'currentChallenge': (currentChallenge as Enum$order_by?),
        if (defaultRole != _undefined)
          'defaultRole': (defaultRole as Enum$order_by?),
        if (defaultRoleByRole != _undefined)
          'defaultRoleByRole': (defaultRoleByRole as Input$authRoles_order_by?),
        if (disabled != _undefined) 'disabled': (disabled as Enum$order_by?),
        if (displayName != _undefined)
          'displayName': (displayName as Enum$order_by?),
        if (email != _undefined) 'email': (email as Enum$order_by?),
        if (emailVerified != _undefined)
          'emailVerified': (emailVerified as Enum$order_by?),
        if (id != _undefined) 'id': (id as Enum$order_by?),
        if (investorById != _undefined)
          'investorById': (investorById as Input$investor_order_by?),
        if (isAnonymous != _undefined)
          'isAnonymous': (isAnonymous as Enum$order_by?),
        if (lastSeen != _undefined) 'lastSeen': (lastSeen as Enum$order_by?),
        if (locale != _undefined) 'locale': (locale as Enum$order_by?),
        if (metadata != _undefined) 'metadata': (metadata as Enum$order_by?),
        if (newEmail != _undefined) 'newEmail': (newEmail as Enum$order_by?),
        if (otpHash != _undefined) 'otpHash': (otpHash as Enum$order_by?),
        if (otpHashExpiresAt != _undefined)
          'otpHashExpiresAt': (otpHashExpiresAt as Enum$order_by?),
        if (otpMethodLastUsed != _undefined)
          'otpMethodLastUsed': (otpMethodLastUsed as Enum$order_by?),
        if (passwordHash != _undefined)
          'passwordHash': (passwordHash as Enum$order_by?),
        if (phoneNumber != _undefined)
          'phoneNumber': (phoneNumber as Enum$order_by?),
        if (phoneNumberVerified != _undefined)
          'phoneNumberVerified': (phoneNumberVerified as Enum$order_by?),
        if (profile != _undefined)
          'profile': (profile as Input$profile_order_by?),
        if (refreshTokens_aggregate != _undefined)
          'refreshTokens_aggregate': (refreshTokens_aggregate
              as Input$authRefreshTokens_aggregate_order_by?),
        if (roles_aggregate != _undefined)
          'roles_aggregate':
              (roles_aggregate as Input$authUserRoles_aggregate_order_by?),
        if (securityKeys_aggregate != _undefined)
          'securityKeys_aggregate': (securityKeys_aggregate
              as Input$authUserSecurityKeys_aggregate_order_by?),
        if (ticket != _undefined) 'ticket': (ticket as Enum$order_by?),
        if (ticketExpiresAt != _undefined)
          'ticketExpiresAt': (ticketExpiresAt as Enum$order_by?),
        if (totpSecret != _undefined)
          'totpSecret': (totpSecret as Enum$order_by?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as Enum$order_by?),
        if (userProviders_aggregate != _undefined)
          'userProviders_aggregate': (userProviders_aggregate
              as Input$authUserProviders_aggregate_order_by?),
      }));
  CopyWith$Input$umkm_order_by<TRes> get UMKMById {
    final local$UMKMById = _instance.UMKMById;
    return local$UMKMById == null
        ? CopyWith$Input$umkm_order_by.stub(_then(_instance))
        : CopyWith$Input$umkm_order_by(
            local$UMKMById, (e) => call(UMKMById: e));
  }

  CopyWith$Input$cs_message_aggregate_order_by<TRes>
      get agent_cs_messages_aggregate {
    final local$agent_cs_messages_aggregate =
        _instance.agent_cs_messages_aggregate;
    return local$agent_cs_messages_aggregate == null
        ? CopyWith$Input$cs_message_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_aggregate_order_by(
            local$agent_cs_messages_aggregate,
            (e) => call(agent_cs_messages_aggregate: e));
  }

  CopyWith$Input$cs_message_aggregate_order_by<TRes> get cs_messages_aggregate {
    final local$cs_messages_aggregate = _instance.cs_messages_aggregate;
    return local$cs_messages_aggregate == null
        ? CopyWith$Input$cs_message_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$cs_message_aggregate_order_by(
            local$cs_messages_aggregate, (e) => call(cs_messages_aggregate: e));
  }

  CopyWith$Input$authRoles_order_by<TRes> get defaultRoleByRole {
    final local$defaultRoleByRole = _instance.defaultRoleByRole;
    return local$defaultRoleByRole == null
        ? CopyWith$Input$authRoles_order_by.stub(_then(_instance))
        : CopyWith$Input$authRoles_order_by(
            local$defaultRoleByRole, (e) => call(defaultRoleByRole: e));
  }

  CopyWith$Input$investor_order_by<TRes> get investorById {
    final local$investorById = _instance.investorById;
    return local$investorById == null
        ? CopyWith$Input$investor_order_by.stub(_then(_instance))
        : CopyWith$Input$investor_order_by(
            local$investorById, (e) => call(investorById: e));
  }

  CopyWith$Input$profile_order_by<TRes> get profile {
    final local$profile = _instance.profile;
    return local$profile == null
        ? CopyWith$Input$profile_order_by.stub(_then(_instance))
        : CopyWith$Input$profile_order_by(
            local$profile, (e) => call(profile: e));
  }

  CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes>
      get refreshTokens_aggregate {
    final local$refreshTokens_aggregate = _instance.refreshTokens_aggregate;
    return local$refreshTokens_aggregate == null
        ? CopyWith$Input$authRefreshTokens_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authRefreshTokens_aggregate_order_by(
            local$refreshTokens_aggregate,
            (e) => call(refreshTokens_aggregate: e));
  }

  CopyWith$Input$authUserRoles_aggregate_order_by<TRes> get roles_aggregate {
    final local$roles_aggregate = _instance.roles_aggregate;
    return local$roles_aggregate == null
        ? CopyWith$Input$authUserRoles_aggregate_order_by.stub(_then(_instance))
        : CopyWith$Input$authUserRoles_aggregate_order_by(
            local$roles_aggregate, (e) => call(roles_aggregate: e));
  }

  CopyWith$Input$authUserSecurityKeys_aggregate_order_by<TRes>
      get securityKeys_aggregate {
    final local$securityKeys_aggregate = _instance.securityKeys_aggregate;
    return local$securityKeys_aggregate == null
        ? CopyWith$Input$authUserSecurityKeys_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserSecurityKeys_aggregate_order_by(
            local$securityKeys_aggregate,
            (e) => call(securityKeys_aggregate: e));
  }

  CopyWith$Input$authUserProviders_aggregate_order_by<TRes>
      get userProviders_aggregate {
    final local$userProviders_aggregate = _instance.userProviders_aggregate;
    return local$userProviders_aggregate == null
        ? CopyWith$Input$authUserProviders_aggregate_order_by.stub(
            _then(_instance))
        : CopyWith$Input$authUserProviders_aggregate_order_by(
            local$userProviders_aggregate,
            (e) => call(userProviders_aggregate: e));
  }
}

class _CopyWithStubImpl$Input$users_order_by<TRes>
    implements CopyWith$Input$users_order_by<TRes> {
  _CopyWithStubImpl$Input$users_order_by(this._res);

  TRes _res;

  call({
    Input$umkm_order_by? UMKMById,
    Enum$order_by? activeMfaType,
    Input$cs_message_aggregate_order_by? agent_cs_messages_aggregate,
    Enum$order_by? avatarUrl,
    Enum$order_by? createdAt,
    Input$cs_message_aggregate_order_by? cs_messages_aggregate,
    Enum$order_by? currentChallenge,
    Enum$order_by? defaultRole,
    Input$authRoles_order_by? defaultRoleByRole,
    Enum$order_by? disabled,
    Enum$order_by? displayName,
    Enum$order_by? email,
    Enum$order_by? emailVerified,
    Enum$order_by? id,
    Input$investor_order_by? investorById,
    Enum$order_by? isAnonymous,
    Enum$order_by? lastSeen,
    Enum$order_by? locale,
    Enum$order_by? metadata,
    Enum$order_by? newEmail,
    Enum$order_by? otpHash,
    Enum$order_by? otpHashExpiresAt,
    Enum$order_by? otpMethodLastUsed,
    Enum$order_by? passwordHash,
    Enum$order_by? phoneNumber,
    Enum$order_by? phoneNumberVerified,
    Input$profile_order_by? profile,
    Input$authRefreshTokens_aggregate_order_by? refreshTokens_aggregate,
    Input$authUserRoles_aggregate_order_by? roles_aggregate,
    Input$authUserSecurityKeys_aggregate_order_by? securityKeys_aggregate,
    Enum$order_by? ticket,
    Enum$order_by? ticketExpiresAt,
    Enum$order_by? totpSecret,
    Enum$order_by? updatedAt,
    Input$authUserProviders_aggregate_order_by? userProviders_aggregate,
  }) =>
      _res;
  CopyWith$Input$umkm_order_by<TRes> get UMKMById =>
      CopyWith$Input$umkm_order_by.stub(_res);
  CopyWith$Input$cs_message_aggregate_order_by<TRes>
      get agent_cs_messages_aggregate =>
          CopyWith$Input$cs_message_aggregate_order_by.stub(_res);
  CopyWith$Input$cs_message_aggregate_order_by<TRes>
      get cs_messages_aggregate =>
          CopyWith$Input$cs_message_aggregate_order_by.stub(_res);
  CopyWith$Input$authRoles_order_by<TRes> get defaultRoleByRole =>
      CopyWith$Input$authRoles_order_by.stub(_res);
  CopyWith$Input$investor_order_by<TRes> get investorById =>
      CopyWith$Input$investor_order_by.stub(_res);
  CopyWith$Input$profile_order_by<TRes> get profile =>
      CopyWith$Input$profile_order_by.stub(_res);
  CopyWith$Input$authRefreshTokens_aggregate_order_by<TRes>
      get refreshTokens_aggregate =>
          CopyWith$Input$authRefreshTokens_aggregate_order_by.stub(_res);
  CopyWith$Input$authUserRoles_aggregate_order_by<TRes> get roles_aggregate =>
      CopyWith$Input$authUserRoles_aggregate_order_by.stub(_res);
  CopyWith$Input$authUserSecurityKeys_aggregate_order_by<TRes>
      get securityKeys_aggregate =>
          CopyWith$Input$authUserSecurityKeys_aggregate_order_by.stub(_res);
  CopyWith$Input$authUserProviders_aggregate_order_by<TRes>
      get userProviders_aggregate =>
          CopyWith$Input$authUserProviders_aggregate_order_by.stub(_res);
}

class Input$users_pk_columns_input {
  factory Input$users_pk_columns_input({required UUID id}) =>
      Input$users_pk_columns_input._({
        r'id': id,
      });

  Input$users_pk_columns_input._(this._$data);

  factory Input$users_pk_columns_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = uuidFromJson(l$id);
    return Input$users_pk_columns_input._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID get id => (_$data['id'] as UUID);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = uuidToJson(l$id);
    return result$data;
  }

  CopyWith$Input$users_pk_columns_input<Input$users_pk_columns_input>
      get copyWith => CopyWith$Input$users_pk_columns_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_pk_columns_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Input$users_pk_columns_input<TRes> {
  factory CopyWith$Input$users_pk_columns_input(
    Input$users_pk_columns_input instance,
    TRes Function(Input$users_pk_columns_input) then,
  ) = _CopyWithImpl$Input$users_pk_columns_input;

  factory CopyWith$Input$users_pk_columns_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_pk_columns_input;

  TRes call({UUID? id});
}

class _CopyWithImpl$Input$users_pk_columns_input<TRes>
    implements CopyWith$Input$users_pk_columns_input<TRes> {
  _CopyWithImpl$Input$users_pk_columns_input(
    this._instance,
    this._then,
  );

  final Input$users_pk_columns_input _instance;

  final TRes Function(Input$users_pk_columns_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) => _then(Input$users_pk_columns_input._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as UUID),
      }));
}

class _CopyWithStubImpl$Input$users_pk_columns_input<TRes>
    implements CopyWith$Input$users_pk_columns_input<TRes> {
  _CopyWithStubImpl$Input$users_pk_columns_input(this._res);

  TRes _res;

  call({UUID? id}) => _res;
}

class Input$users_prepend_input {
  factory Input$users_prepend_input({JSONB? metadata}) =>
      Input$users_prepend_input._({
        if (metadata != null) r'metadata': metadata,
      });

  Input$users_prepend_input._(this._$data);

  factory Input$users_prepend_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    return Input$users_prepend_input._(result$data);
  }

  Map<String, dynamic> _$data;

  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    return result$data;
  }

  CopyWith$Input$users_prepend_input<Input$users_prepend_input> get copyWith =>
      CopyWith$Input$users_prepend_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_prepend_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$metadata = metadata;
    return Object.hashAll(
        [_$data.containsKey('metadata') ? l$metadata : const {}]);
  }
}

abstract class CopyWith$Input$users_prepend_input<TRes> {
  factory CopyWith$Input$users_prepend_input(
    Input$users_prepend_input instance,
    TRes Function(Input$users_prepend_input) then,
  ) = _CopyWithImpl$Input$users_prepend_input;

  factory CopyWith$Input$users_prepend_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_prepend_input;

  TRes call({JSONB? metadata});
}

class _CopyWithImpl$Input$users_prepend_input<TRes>
    implements CopyWith$Input$users_prepend_input<TRes> {
  _CopyWithImpl$Input$users_prepend_input(
    this._instance,
    this._then,
  );

  final Input$users_prepend_input _instance;

  final TRes Function(Input$users_prepend_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? metadata = _undefined}) =>
      _then(Input$users_prepend_input._({
        ..._instance._$data,
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
      }));
}

class _CopyWithStubImpl$Input$users_prepend_input<TRes>
    implements CopyWith$Input$users_prepend_input<TRes> {
  _CopyWithStubImpl$Input$users_prepend_input(this._res);

  TRes _res;

  call({JSONB? metadata}) => _res;
}

class Input$users_set_input {
  factory Input$users_set_input({
    String? activeMfaType,
    String? avatarUrl,
    DateTime? createdAt,
    String? currentChallenge,
    String? defaultRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
  }) =>
      Input$users_set_input._({
        if (activeMfaType != null) r'activeMfaType': activeMfaType,
        if (avatarUrl != null) r'avatarUrl': avatarUrl,
        if (createdAt != null) r'createdAt': createdAt,
        if (currentChallenge != null) r'currentChallenge': currentChallenge,
        if (defaultRole != null) r'defaultRole': defaultRole,
        if (disabled != null) r'disabled': disabled,
        if (displayName != null) r'displayName': displayName,
        if (email != null) r'email': email,
        if (emailVerified != null) r'emailVerified': emailVerified,
        if (id != null) r'id': id,
        if (isAnonymous != null) r'isAnonymous': isAnonymous,
        if (lastSeen != null) r'lastSeen': lastSeen,
        if (locale != null) r'locale': locale,
        if (metadata != null) r'metadata': metadata,
        if (newEmail != null) r'newEmail': newEmail,
        if (otpHash != null) r'otpHash': otpHash,
        if (otpHashExpiresAt != null) r'otpHashExpiresAt': otpHashExpiresAt,
        if (otpMethodLastUsed != null) r'otpMethodLastUsed': otpMethodLastUsed,
        if (passwordHash != null) r'passwordHash': passwordHash,
        if (phoneNumber != null) r'phoneNumber': phoneNumber,
        if (phoneNumberVerified != null)
          r'phoneNumberVerified': phoneNumberVerified,
        if (ticket != null) r'ticket': ticket,
        if (ticketExpiresAt != null) r'ticketExpiresAt': ticketExpiresAt,
        if (totpSecret != null) r'totpSecret': totpSecret,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$users_set_input._(this._$data);

  factory Input$users_set_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('activeMfaType')) {
      final l$activeMfaType = data['activeMfaType'];
      result$data['activeMfaType'] = (l$activeMfaType as String?);
    }
    if (data.containsKey('avatarUrl')) {
      final l$avatarUrl = data['avatarUrl'];
      result$data['avatarUrl'] = (l$avatarUrl as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('currentChallenge')) {
      final l$currentChallenge = data['currentChallenge'];
      result$data['currentChallenge'] = (l$currentChallenge as String?);
    }
    if (data.containsKey('defaultRole')) {
      final l$defaultRole = data['defaultRole'];
      result$data['defaultRole'] = (l$defaultRole as String?);
    }
    if (data.containsKey('disabled')) {
      final l$disabled = data['disabled'];
      result$data['disabled'] = (l$disabled as bool?);
    }
    if (data.containsKey('displayName')) {
      final l$displayName = data['displayName'];
      result$data['displayName'] = (l$displayName as String?);
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = l$email == null ? null : citextFromJson(l$email);
    }
    if (data.containsKey('emailVerified')) {
      final l$emailVerified = data['emailVerified'];
      result$data['emailVerified'] = (l$emailVerified as bool?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('isAnonymous')) {
      final l$isAnonymous = data['isAnonymous'];
      result$data['isAnonymous'] = (l$isAnonymous as bool?);
    }
    if (data.containsKey('lastSeen')) {
      final l$lastSeen = data['lastSeen'];
      result$data['lastSeen'] =
          l$lastSeen == null ? null : DateTime.parse((l$lastSeen as String));
    }
    if (data.containsKey('locale')) {
      final l$locale = data['locale'];
      result$data['locale'] = (l$locale as String?);
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    if (data.containsKey('newEmail')) {
      final l$newEmail = data['newEmail'];
      result$data['newEmail'] =
          l$newEmail == null ? null : citextFromJson(l$newEmail);
    }
    if (data.containsKey('otpHash')) {
      final l$otpHash = data['otpHash'];
      result$data['otpHash'] = (l$otpHash as String?);
    }
    if (data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = data['otpHashExpiresAt'];
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : DateTime.parse((l$otpHashExpiresAt as String));
    }
    if (data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = data['otpMethodLastUsed'];
      result$data['otpMethodLastUsed'] = (l$otpMethodLastUsed as String?);
    }
    if (data.containsKey('passwordHash')) {
      final l$passwordHash = data['passwordHash'];
      result$data['passwordHash'] = (l$passwordHash as String?);
    }
    if (data.containsKey('phoneNumber')) {
      final l$phoneNumber = data['phoneNumber'];
      result$data['phoneNumber'] = (l$phoneNumber as String?);
    }
    if (data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = data['phoneNumberVerified'];
      result$data['phoneNumberVerified'] = (l$phoneNumberVerified as bool?);
    }
    if (data.containsKey('ticket')) {
      final l$ticket = data['ticket'];
      result$data['ticket'] = (l$ticket as String?);
    }
    if (data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = data['ticketExpiresAt'];
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : DateTime.parse((l$ticketExpiresAt as String));
    }
    if (data.containsKey('totpSecret')) {
      final l$totpSecret = data['totpSecret'];
      result$data['totpSecret'] = (l$totpSecret as String?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    return Input$users_set_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get activeMfaType => (_$data['activeMfaType'] as String?);
  String? get avatarUrl => (_$data['avatarUrl'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  String? get currentChallenge => (_$data['currentChallenge'] as String?);
  String? get defaultRole => (_$data['defaultRole'] as String?);
  bool? get disabled => (_$data['disabled'] as bool?);
  String? get displayName => (_$data['displayName'] as String?);
  Citext? get email => (_$data['email'] as Citext?);
  bool? get emailVerified => (_$data['emailVerified'] as bool?);
  UUID? get id => (_$data['id'] as UUID?);
  bool? get isAnonymous => (_$data['isAnonymous'] as bool?);
  DateTime? get lastSeen => (_$data['lastSeen'] as DateTime?);
  String? get locale => (_$data['locale'] as String?);
  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  Citext? get newEmail => (_$data['newEmail'] as Citext?);
  String? get otpHash => (_$data['otpHash'] as String?);
  DateTime? get otpHashExpiresAt => (_$data['otpHashExpiresAt'] as DateTime?);
  String? get otpMethodLastUsed => (_$data['otpMethodLastUsed'] as String?);
  String? get passwordHash => (_$data['passwordHash'] as String?);
  String? get phoneNumber => (_$data['phoneNumber'] as String?);
  bool? get phoneNumberVerified => (_$data['phoneNumberVerified'] as bool?);
  String? get ticket => (_$data['ticket'] as String?);
  DateTime? get ticketExpiresAt => (_$data['ticketExpiresAt'] as DateTime?);
  String? get totpSecret => (_$data['totpSecret'] as String?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('activeMfaType')) {
      final l$activeMfaType = activeMfaType;
      result$data['activeMfaType'] = l$activeMfaType;
    }
    if (_$data.containsKey('avatarUrl')) {
      final l$avatarUrl = avatarUrl;
      result$data['avatarUrl'] = l$avatarUrl;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('currentChallenge')) {
      final l$currentChallenge = currentChallenge;
      result$data['currentChallenge'] = l$currentChallenge;
    }
    if (_$data.containsKey('defaultRole')) {
      final l$defaultRole = defaultRole;
      result$data['defaultRole'] = l$defaultRole;
    }
    if (_$data.containsKey('disabled')) {
      final l$disabled = disabled;
      result$data['disabled'] = l$disabled;
    }
    if (_$data.containsKey('displayName')) {
      final l$displayName = displayName;
      result$data['displayName'] = l$displayName;
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email == null ? null : citextToJson(l$email);
    }
    if (_$data.containsKey('emailVerified')) {
      final l$emailVerified = emailVerified;
      result$data['emailVerified'] = l$emailVerified;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('isAnonymous')) {
      final l$isAnonymous = isAnonymous;
      result$data['isAnonymous'] = l$isAnonymous;
    }
    if (_$data.containsKey('lastSeen')) {
      final l$lastSeen = lastSeen;
      result$data['lastSeen'] = l$lastSeen?.toIso8601String();
    }
    if (_$data.containsKey('locale')) {
      final l$locale = locale;
      result$data['locale'] = l$locale;
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    if (_$data.containsKey('newEmail')) {
      final l$newEmail = newEmail;
      result$data['newEmail'] =
          l$newEmail == null ? null : citextToJson(l$newEmail);
    }
    if (_$data.containsKey('otpHash')) {
      final l$otpHash = otpHash;
      result$data['otpHash'] = l$otpHash;
    }
    if (_$data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = otpHashExpiresAt;
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt?.toIso8601String();
    }
    if (_$data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = otpMethodLastUsed;
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed;
    }
    if (_$data.containsKey('passwordHash')) {
      final l$passwordHash = passwordHash;
      result$data['passwordHash'] = l$passwordHash;
    }
    if (_$data.containsKey('phoneNumber')) {
      final l$phoneNumber = phoneNumber;
      result$data['phoneNumber'] = l$phoneNumber;
    }
    if (_$data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = phoneNumberVerified;
      result$data['phoneNumberVerified'] = l$phoneNumberVerified;
    }
    if (_$data.containsKey('ticket')) {
      final l$ticket = ticket;
      result$data['ticket'] = l$ticket;
    }
    if (_$data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = ticketExpiresAt;
      result$data['ticketExpiresAt'] = l$ticketExpiresAt?.toIso8601String();
    }
    if (_$data.containsKey('totpSecret')) {
      final l$totpSecret = totpSecret;
      result$data['totpSecret'] = l$totpSecret;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$users_set_input<Input$users_set_input> get copyWith =>
      CopyWith$Input$users_set_input(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_set_input) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$activeMfaType = activeMfaType;
    final lOther$activeMfaType = other.activeMfaType;
    if (_$data.containsKey('activeMfaType') !=
        other._$data.containsKey('activeMfaType')) {
      return false;
    }
    if (l$activeMfaType != lOther$activeMfaType) {
      return false;
    }
    final l$avatarUrl = avatarUrl;
    final lOther$avatarUrl = other.avatarUrl;
    if (_$data.containsKey('avatarUrl') !=
        other._$data.containsKey('avatarUrl')) {
      return false;
    }
    if (l$avatarUrl != lOther$avatarUrl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$currentChallenge = currentChallenge;
    final lOther$currentChallenge = other.currentChallenge;
    if (_$data.containsKey('currentChallenge') !=
        other._$data.containsKey('currentChallenge')) {
      return false;
    }
    if (l$currentChallenge != lOther$currentChallenge) {
      return false;
    }
    final l$defaultRole = defaultRole;
    final lOther$defaultRole = other.defaultRole;
    if (_$data.containsKey('defaultRole') !=
        other._$data.containsKey('defaultRole')) {
      return false;
    }
    if (l$defaultRole != lOther$defaultRole) {
      return false;
    }
    final l$disabled = disabled;
    final lOther$disabled = other.disabled;
    if (_$data.containsKey('disabled') !=
        other._$data.containsKey('disabled')) {
      return false;
    }
    if (l$disabled != lOther$disabled) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (_$data.containsKey('displayName') !=
        other._$data.containsKey('displayName')) {
      return false;
    }
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$emailVerified = emailVerified;
    final lOther$emailVerified = other.emailVerified;
    if (_$data.containsKey('emailVerified') !=
        other._$data.containsKey('emailVerified')) {
      return false;
    }
    if (l$emailVerified != lOther$emailVerified) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$isAnonymous = isAnonymous;
    final lOther$isAnonymous = other.isAnonymous;
    if (_$data.containsKey('isAnonymous') !=
        other._$data.containsKey('isAnonymous')) {
      return false;
    }
    if (l$isAnonymous != lOther$isAnonymous) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (_$data.containsKey('lastSeen') !=
        other._$data.containsKey('lastSeen')) {
      return false;
    }
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$locale = locale;
    final lOther$locale = other.locale;
    if (_$data.containsKey('locale') != other._$data.containsKey('locale')) {
      return false;
    }
    if (l$locale != lOther$locale) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$newEmail = newEmail;
    final lOther$newEmail = other.newEmail;
    if (_$data.containsKey('newEmail') !=
        other._$data.containsKey('newEmail')) {
      return false;
    }
    if (l$newEmail != lOther$newEmail) {
      return false;
    }
    final l$otpHash = otpHash;
    final lOther$otpHash = other.otpHash;
    if (_$data.containsKey('otpHash') != other._$data.containsKey('otpHash')) {
      return false;
    }
    if (l$otpHash != lOther$otpHash) {
      return false;
    }
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final lOther$otpHashExpiresAt = other.otpHashExpiresAt;
    if (_$data.containsKey('otpHashExpiresAt') !=
        other._$data.containsKey('otpHashExpiresAt')) {
      return false;
    }
    if (l$otpHashExpiresAt != lOther$otpHashExpiresAt) {
      return false;
    }
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final lOther$otpMethodLastUsed = other.otpMethodLastUsed;
    if (_$data.containsKey('otpMethodLastUsed') !=
        other._$data.containsKey('otpMethodLastUsed')) {
      return false;
    }
    if (l$otpMethodLastUsed != lOther$otpMethodLastUsed) {
      return false;
    }
    final l$passwordHash = passwordHash;
    final lOther$passwordHash = other.passwordHash;
    if (_$data.containsKey('passwordHash') !=
        other._$data.containsKey('passwordHash')) {
      return false;
    }
    if (l$passwordHash != lOther$passwordHash) {
      return false;
    }
    final l$phoneNumber = phoneNumber;
    final lOther$phoneNumber = other.phoneNumber;
    if (_$data.containsKey('phoneNumber') !=
        other._$data.containsKey('phoneNumber')) {
      return false;
    }
    if (l$phoneNumber != lOther$phoneNumber) {
      return false;
    }
    final l$phoneNumberVerified = phoneNumberVerified;
    final lOther$phoneNumberVerified = other.phoneNumberVerified;
    if (_$data.containsKey('phoneNumberVerified') !=
        other._$data.containsKey('phoneNumberVerified')) {
      return false;
    }
    if (l$phoneNumberVerified != lOther$phoneNumberVerified) {
      return false;
    }
    final l$ticket = ticket;
    final lOther$ticket = other.ticket;
    if (_$data.containsKey('ticket') != other._$data.containsKey('ticket')) {
      return false;
    }
    if (l$ticket != lOther$ticket) {
      return false;
    }
    final l$ticketExpiresAt = ticketExpiresAt;
    final lOther$ticketExpiresAt = other.ticketExpiresAt;
    if (_$data.containsKey('ticketExpiresAt') !=
        other._$data.containsKey('ticketExpiresAt')) {
      return false;
    }
    if (l$ticketExpiresAt != lOther$ticketExpiresAt) {
      return false;
    }
    final l$totpSecret = totpSecret;
    final lOther$totpSecret = other.totpSecret;
    if (_$data.containsKey('totpSecret') !=
        other._$data.containsKey('totpSecret')) {
      return false;
    }
    if (l$totpSecret != lOther$totpSecret) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$activeMfaType = activeMfaType;
    final l$avatarUrl = avatarUrl;
    final l$createdAt = createdAt;
    final l$currentChallenge = currentChallenge;
    final l$defaultRole = defaultRole;
    final l$disabled = disabled;
    final l$displayName = displayName;
    final l$email = email;
    final l$emailVerified = emailVerified;
    final l$id = id;
    final l$isAnonymous = isAnonymous;
    final l$lastSeen = lastSeen;
    final l$locale = locale;
    final l$metadata = metadata;
    final l$newEmail = newEmail;
    final l$otpHash = otpHash;
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final l$passwordHash = passwordHash;
    final l$phoneNumber = phoneNumber;
    final l$phoneNumberVerified = phoneNumberVerified;
    final l$ticket = ticket;
    final l$ticketExpiresAt = ticketExpiresAt;
    final l$totpSecret = totpSecret;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('activeMfaType') ? l$activeMfaType : const {},
      _$data.containsKey('avatarUrl') ? l$avatarUrl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('currentChallenge') ? l$currentChallenge : const {},
      _$data.containsKey('defaultRole') ? l$defaultRole : const {},
      _$data.containsKey('disabled') ? l$disabled : const {},
      _$data.containsKey('displayName') ? l$displayName : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('emailVerified') ? l$emailVerified : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('isAnonymous') ? l$isAnonymous : const {},
      _$data.containsKey('lastSeen') ? l$lastSeen : const {},
      _$data.containsKey('locale') ? l$locale : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('newEmail') ? l$newEmail : const {},
      _$data.containsKey('otpHash') ? l$otpHash : const {},
      _$data.containsKey('otpHashExpiresAt') ? l$otpHashExpiresAt : const {},
      _$data.containsKey('otpMethodLastUsed') ? l$otpMethodLastUsed : const {},
      _$data.containsKey('passwordHash') ? l$passwordHash : const {},
      _$data.containsKey('phoneNumber') ? l$phoneNumber : const {},
      _$data.containsKey('phoneNumberVerified')
          ? l$phoneNumberVerified
          : const {},
      _$data.containsKey('ticket') ? l$ticket : const {},
      _$data.containsKey('ticketExpiresAt') ? l$ticketExpiresAt : const {},
      _$data.containsKey('totpSecret') ? l$totpSecret : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_set_input<TRes> {
  factory CopyWith$Input$users_set_input(
    Input$users_set_input instance,
    TRes Function(Input$users_set_input) then,
  ) = _CopyWithImpl$Input$users_set_input;

  factory CopyWith$Input$users_set_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_set_input;

  TRes call({
    String? activeMfaType,
    String? avatarUrl,
    DateTime? createdAt,
    String? currentChallenge,
    String? defaultRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
  });
}

class _CopyWithImpl$Input$users_set_input<TRes>
    implements CopyWith$Input$users_set_input<TRes> {
  _CopyWithImpl$Input$users_set_input(
    this._instance,
    this._then,
  );

  final Input$users_set_input _instance;

  final TRes Function(Input$users_set_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? activeMfaType = _undefined,
    Object? avatarUrl = _undefined,
    Object? createdAt = _undefined,
    Object? currentChallenge = _undefined,
    Object? defaultRole = _undefined,
    Object? disabled = _undefined,
    Object? displayName = _undefined,
    Object? email = _undefined,
    Object? emailVerified = _undefined,
    Object? id = _undefined,
    Object? isAnonymous = _undefined,
    Object? lastSeen = _undefined,
    Object? locale = _undefined,
    Object? metadata = _undefined,
    Object? newEmail = _undefined,
    Object? otpHash = _undefined,
    Object? otpHashExpiresAt = _undefined,
    Object? otpMethodLastUsed = _undefined,
    Object? passwordHash = _undefined,
    Object? phoneNumber = _undefined,
    Object? phoneNumberVerified = _undefined,
    Object? ticket = _undefined,
    Object? ticketExpiresAt = _undefined,
    Object? totpSecret = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$users_set_input._({
        ..._instance._$data,
        if (activeMfaType != _undefined)
          'activeMfaType': (activeMfaType as String?),
        if (avatarUrl != _undefined) 'avatarUrl': (avatarUrl as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (currentChallenge != _undefined)
          'currentChallenge': (currentChallenge as String?),
        if (defaultRole != _undefined) 'defaultRole': (defaultRole as String?),
        if (disabled != _undefined) 'disabled': (disabled as bool?),
        if (displayName != _undefined) 'displayName': (displayName as String?),
        if (email != _undefined) 'email': (email as Citext?),
        if (emailVerified != _undefined)
          'emailVerified': (emailVerified as bool?),
        if (id != _undefined) 'id': (id as UUID?),
        if (isAnonymous != _undefined) 'isAnonymous': (isAnonymous as bool?),
        if (lastSeen != _undefined) 'lastSeen': (lastSeen as DateTime?),
        if (locale != _undefined) 'locale': (locale as String?),
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
        if (newEmail != _undefined) 'newEmail': (newEmail as Citext?),
        if (otpHash != _undefined) 'otpHash': (otpHash as String?),
        if (otpHashExpiresAt != _undefined)
          'otpHashExpiresAt': (otpHashExpiresAt as DateTime?),
        if (otpMethodLastUsed != _undefined)
          'otpMethodLastUsed': (otpMethodLastUsed as String?),
        if (passwordHash != _undefined)
          'passwordHash': (passwordHash as String?),
        if (phoneNumber != _undefined) 'phoneNumber': (phoneNumber as String?),
        if (phoneNumberVerified != _undefined)
          'phoneNumberVerified': (phoneNumberVerified as bool?),
        if (ticket != _undefined) 'ticket': (ticket as String?),
        if (ticketExpiresAt != _undefined)
          'ticketExpiresAt': (ticketExpiresAt as DateTime?),
        if (totpSecret != _undefined) 'totpSecret': (totpSecret as String?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$users_set_input<TRes>
    implements CopyWith$Input$users_set_input<TRes> {
  _CopyWithStubImpl$Input$users_set_input(this._res);

  TRes _res;

  call({
    String? activeMfaType,
    String? avatarUrl,
    DateTime? createdAt,
    String? currentChallenge,
    String? defaultRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
  }) =>
      _res;
}

class Input$users_stream_cursor_input {
  factory Input$users_stream_cursor_input({
    required Input$users_stream_cursor_value_input initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      Input$users_stream_cursor_input._({
        r'initial_value': initial_value,
        if (ordering != null) r'ordering': ordering,
      });

  Input$users_stream_cursor_input._(this._$data);

  factory Input$users_stream_cursor_input.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$initial_value = data['initial_value'];
    result$data['initial_value'] =
        Input$users_stream_cursor_value_input.fromJson(
            (l$initial_value as Map<String, dynamic>));
    if (data.containsKey('ordering')) {
      final l$ordering = data['ordering'];
      result$data['ordering'] = l$ordering == null
          ? null
          : fromJson$Enum$cursor_ordering((l$ordering as String));
    }
    return Input$users_stream_cursor_input._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$users_stream_cursor_value_input get initial_value =>
      (_$data['initial_value'] as Input$users_stream_cursor_value_input);
  Enum$cursor_ordering? get ordering =>
      (_$data['ordering'] as Enum$cursor_ordering?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$initial_value = initial_value;
    result$data['initial_value'] = l$initial_value.toJson();
    if (_$data.containsKey('ordering')) {
      final l$ordering = ordering;
      result$data['ordering'] =
          l$ordering == null ? null : toJson$Enum$cursor_ordering(l$ordering);
    }
    return result$data;
  }

  CopyWith$Input$users_stream_cursor_input<Input$users_stream_cursor_input>
      get copyWith => CopyWith$Input$users_stream_cursor_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_stream_cursor_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$initial_value = initial_value;
    final lOther$initial_value = other.initial_value;
    if (l$initial_value != lOther$initial_value) {
      return false;
    }
    final l$ordering = ordering;
    final lOther$ordering = other.ordering;
    if (_$data.containsKey('ordering') !=
        other._$data.containsKey('ordering')) {
      return false;
    }
    if (l$ordering != lOther$ordering) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$initial_value = initial_value;
    final l$ordering = ordering;
    return Object.hashAll([
      l$initial_value,
      _$data.containsKey('ordering') ? l$ordering : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_stream_cursor_input<TRes> {
  factory CopyWith$Input$users_stream_cursor_input(
    Input$users_stream_cursor_input instance,
    TRes Function(Input$users_stream_cursor_input) then,
  ) = _CopyWithImpl$Input$users_stream_cursor_input;

  factory CopyWith$Input$users_stream_cursor_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_stream_cursor_input;

  TRes call({
    Input$users_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  });
  CopyWith$Input$users_stream_cursor_value_input<TRes> get initial_value;
}

class _CopyWithImpl$Input$users_stream_cursor_input<TRes>
    implements CopyWith$Input$users_stream_cursor_input<TRes> {
  _CopyWithImpl$Input$users_stream_cursor_input(
    this._instance,
    this._then,
  );

  final Input$users_stream_cursor_input _instance;

  final TRes Function(Input$users_stream_cursor_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? initial_value = _undefined,
    Object? ordering = _undefined,
  }) =>
      _then(Input$users_stream_cursor_input._({
        ..._instance._$data,
        if (initial_value != _undefined && initial_value != null)
          'initial_value':
              (initial_value as Input$users_stream_cursor_value_input),
        if (ordering != _undefined)
          'ordering': (ordering as Enum$cursor_ordering?),
      }));
  CopyWith$Input$users_stream_cursor_value_input<TRes> get initial_value {
    final local$initial_value = _instance.initial_value;
    return CopyWith$Input$users_stream_cursor_value_input(
        local$initial_value, (e) => call(initial_value: e));
  }
}

class _CopyWithStubImpl$Input$users_stream_cursor_input<TRes>
    implements CopyWith$Input$users_stream_cursor_input<TRes> {
  _CopyWithStubImpl$Input$users_stream_cursor_input(this._res);

  TRes _res;

  call({
    Input$users_stream_cursor_value_input? initial_value,
    Enum$cursor_ordering? ordering,
  }) =>
      _res;
  CopyWith$Input$users_stream_cursor_value_input<TRes> get initial_value =>
      CopyWith$Input$users_stream_cursor_value_input.stub(_res);
}

class Input$users_stream_cursor_value_input {
  factory Input$users_stream_cursor_value_input({
    String? activeMfaType,
    String? avatarUrl,
    DateTime? createdAt,
    String? currentChallenge,
    String? defaultRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
  }) =>
      Input$users_stream_cursor_value_input._({
        if (activeMfaType != null) r'activeMfaType': activeMfaType,
        if (avatarUrl != null) r'avatarUrl': avatarUrl,
        if (createdAt != null) r'createdAt': createdAt,
        if (currentChallenge != null) r'currentChallenge': currentChallenge,
        if (defaultRole != null) r'defaultRole': defaultRole,
        if (disabled != null) r'disabled': disabled,
        if (displayName != null) r'displayName': displayName,
        if (email != null) r'email': email,
        if (emailVerified != null) r'emailVerified': emailVerified,
        if (id != null) r'id': id,
        if (isAnonymous != null) r'isAnonymous': isAnonymous,
        if (lastSeen != null) r'lastSeen': lastSeen,
        if (locale != null) r'locale': locale,
        if (metadata != null) r'metadata': metadata,
        if (newEmail != null) r'newEmail': newEmail,
        if (otpHash != null) r'otpHash': otpHash,
        if (otpHashExpiresAt != null) r'otpHashExpiresAt': otpHashExpiresAt,
        if (otpMethodLastUsed != null) r'otpMethodLastUsed': otpMethodLastUsed,
        if (passwordHash != null) r'passwordHash': passwordHash,
        if (phoneNumber != null) r'phoneNumber': phoneNumber,
        if (phoneNumberVerified != null)
          r'phoneNumberVerified': phoneNumberVerified,
        if (ticket != null) r'ticket': ticket,
        if (ticketExpiresAt != null) r'ticketExpiresAt': ticketExpiresAt,
        if (totpSecret != null) r'totpSecret': totpSecret,
        if (updatedAt != null) r'updatedAt': updatedAt,
      });

  Input$users_stream_cursor_value_input._(this._$data);

  factory Input$users_stream_cursor_value_input.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('activeMfaType')) {
      final l$activeMfaType = data['activeMfaType'];
      result$data['activeMfaType'] = (l$activeMfaType as String?);
    }
    if (data.containsKey('avatarUrl')) {
      final l$avatarUrl = data['avatarUrl'];
      result$data['avatarUrl'] = (l$avatarUrl as String?);
    }
    if (data.containsKey('createdAt')) {
      final l$createdAt = data['createdAt'];
      result$data['createdAt'] =
          l$createdAt == null ? null : DateTime.parse((l$createdAt as String));
    }
    if (data.containsKey('currentChallenge')) {
      final l$currentChallenge = data['currentChallenge'];
      result$data['currentChallenge'] = (l$currentChallenge as String?);
    }
    if (data.containsKey('defaultRole')) {
      final l$defaultRole = data['defaultRole'];
      result$data['defaultRole'] = (l$defaultRole as String?);
    }
    if (data.containsKey('disabled')) {
      final l$disabled = data['disabled'];
      result$data['disabled'] = (l$disabled as bool?);
    }
    if (data.containsKey('displayName')) {
      final l$displayName = data['displayName'];
      result$data['displayName'] = (l$displayName as String?);
    }
    if (data.containsKey('email')) {
      final l$email = data['email'];
      result$data['email'] = l$email == null ? null : citextFromJson(l$email);
    }
    if (data.containsKey('emailVerified')) {
      final l$emailVerified = data['emailVerified'];
      result$data['emailVerified'] = (l$emailVerified as bool?);
    }
    if (data.containsKey('id')) {
      final l$id = data['id'];
      result$data['id'] = l$id == null ? null : uuidFromJson(l$id);
    }
    if (data.containsKey('isAnonymous')) {
      final l$isAnonymous = data['isAnonymous'];
      result$data['isAnonymous'] = (l$isAnonymous as bool?);
    }
    if (data.containsKey('lastSeen')) {
      final l$lastSeen = data['lastSeen'];
      result$data['lastSeen'] =
          l$lastSeen == null ? null : DateTime.parse((l$lastSeen as String));
    }
    if (data.containsKey('locale')) {
      final l$locale = data['locale'];
      result$data['locale'] = (l$locale as String?);
    }
    if (data.containsKey('metadata')) {
      final l$metadata = data['metadata'];
      result$data['metadata'] =
          l$metadata == null ? null : jsonbFromJson(l$metadata);
    }
    if (data.containsKey('newEmail')) {
      final l$newEmail = data['newEmail'];
      result$data['newEmail'] =
          l$newEmail == null ? null : citextFromJson(l$newEmail);
    }
    if (data.containsKey('otpHash')) {
      final l$otpHash = data['otpHash'];
      result$data['otpHash'] = (l$otpHash as String?);
    }
    if (data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = data['otpHashExpiresAt'];
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt == null
          ? null
          : DateTime.parse((l$otpHashExpiresAt as String));
    }
    if (data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = data['otpMethodLastUsed'];
      result$data['otpMethodLastUsed'] = (l$otpMethodLastUsed as String?);
    }
    if (data.containsKey('passwordHash')) {
      final l$passwordHash = data['passwordHash'];
      result$data['passwordHash'] = (l$passwordHash as String?);
    }
    if (data.containsKey('phoneNumber')) {
      final l$phoneNumber = data['phoneNumber'];
      result$data['phoneNumber'] = (l$phoneNumber as String?);
    }
    if (data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = data['phoneNumberVerified'];
      result$data['phoneNumberVerified'] = (l$phoneNumberVerified as bool?);
    }
    if (data.containsKey('ticket')) {
      final l$ticket = data['ticket'];
      result$data['ticket'] = (l$ticket as String?);
    }
    if (data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = data['ticketExpiresAt'];
      result$data['ticketExpiresAt'] = l$ticketExpiresAt == null
          ? null
          : DateTime.parse((l$ticketExpiresAt as String));
    }
    if (data.containsKey('totpSecret')) {
      final l$totpSecret = data['totpSecret'];
      result$data['totpSecret'] = (l$totpSecret as String?);
    }
    if (data.containsKey('updatedAt')) {
      final l$updatedAt = data['updatedAt'];
      result$data['updatedAt'] =
          l$updatedAt == null ? null : DateTime.parse((l$updatedAt as String));
    }
    return Input$users_stream_cursor_value_input._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get activeMfaType => (_$data['activeMfaType'] as String?);
  String? get avatarUrl => (_$data['avatarUrl'] as String?);
  DateTime? get createdAt => (_$data['createdAt'] as DateTime?);
  String? get currentChallenge => (_$data['currentChallenge'] as String?);
  String? get defaultRole => (_$data['defaultRole'] as String?);
  bool? get disabled => (_$data['disabled'] as bool?);
  String? get displayName => (_$data['displayName'] as String?);
  Citext? get email => (_$data['email'] as Citext?);
  bool? get emailVerified => (_$data['emailVerified'] as bool?);
  UUID? get id => (_$data['id'] as UUID?);
  bool? get isAnonymous => (_$data['isAnonymous'] as bool?);
  DateTime? get lastSeen => (_$data['lastSeen'] as DateTime?);
  String? get locale => (_$data['locale'] as String?);
  JSONB? get metadata => (_$data['metadata'] as JSONB?);
  Citext? get newEmail => (_$data['newEmail'] as Citext?);
  String? get otpHash => (_$data['otpHash'] as String?);
  DateTime? get otpHashExpiresAt => (_$data['otpHashExpiresAt'] as DateTime?);
  String? get otpMethodLastUsed => (_$data['otpMethodLastUsed'] as String?);
  String? get passwordHash => (_$data['passwordHash'] as String?);
  String? get phoneNumber => (_$data['phoneNumber'] as String?);
  bool? get phoneNumberVerified => (_$data['phoneNumberVerified'] as bool?);
  String? get ticket => (_$data['ticket'] as String?);
  DateTime? get ticketExpiresAt => (_$data['ticketExpiresAt'] as DateTime?);
  String? get totpSecret => (_$data['totpSecret'] as String?);
  DateTime? get updatedAt => (_$data['updatedAt'] as DateTime?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('activeMfaType')) {
      final l$activeMfaType = activeMfaType;
      result$data['activeMfaType'] = l$activeMfaType;
    }
    if (_$data.containsKey('avatarUrl')) {
      final l$avatarUrl = avatarUrl;
      result$data['avatarUrl'] = l$avatarUrl;
    }
    if (_$data.containsKey('createdAt')) {
      final l$createdAt = createdAt;
      result$data['createdAt'] = l$createdAt?.toIso8601String();
    }
    if (_$data.containsKey('currentChallenge')) {
      final l$currentChallenge = currentChallenge;
      result$data['currentChallenge'] = l$currentChallenge;
    }
    if (_$data.containsKey('defaultRole')) {
      final l$defaultRole = defaultRole;
      result$data['defaultRole'] = l$defaultRole;
    }
    if (_$data.containsKey('disabled')) {
      final l$disabled = disabled;
      result$data['disabled'] = l$disabled;
    }
    if (_$data.containsKey('displayName')) {
      final l$displayName = displayName;
      result$data['displayName'] = l$displayName;
    }
    if (_$data.containsKey('email')) {
      final l$email = email;
      result$data['email'] = l$email == null ? null : citextToJson(l$email);
    }
    if (_$data.containsKey('emailVerified')) {
      final l$emailVerified = emailVerified;
      result$data['emailVerified'] = l$emailVerified;
    }
    if (_$data.containsKey('id')) {
      final l$id = id;
      result$data['id'] = l$id == null ? null : uuidToJson(l$id);
    }
    if (_$data.containsKey('isAnonymous')) {
      final l$isAnonymous = isAnonymous;
      result$data['isAnonymous'] = l$isAnonymous;
    }
    if (_$data.containsKey('lastSeen')) {
      final l$lastSeen = lastSeen;
      result$data['lastSeen'] = l$lastSeen?.toIso8601String();
    }
    if (_$data.containsKey('locale')) {
      final l$locale = locale;
      result$data['locale'] = l$locale;
    }
    if (_$data.containsKey('metadata')) {
      final l$metadata = metadata;
      result$data['metadata'] =
          l$metadata == null ? null : jsonbToJson(l$metadata);
    }
    if (_$data.containsKey('newEmail')) {
      final l$newEmail = newEmail;
      result$data['newEmail'] =
          l$newEmail == null ? null : citextToJson(l$newEmail);
    }
    if (_$data.containsKey('otpHash')) {
      final l$otpHash = otpHash;
      result$data['otpHash'] = l$otpHash;
    }
    if (_$data.containsKey('otpHashExpiresAt')) {
      final l$otpHashExpiresAt = otpHashExpiresAt;
      result$data['otpHashExpiresAt'] = l$otpHashExpiresAt?.toIso8601String();
    }
    if (_$data.containsKey('otpMethodLastUsed')) {
      final l$otpMethodLastUsed = otpMethodLastUsed;
      result$data['otpMethodLastUsed'] = l$otpMethodLastUsed;
    }
    if (_$data.containsKey('passwordHash')) {
      final l$passwordHash = passwordHash;
      result$data['passwordHash'] = l$passwordHash;
    }
    if (_$data.containsKey('phoneNumber')) {
      final l$phoneNumber = phoneNumber;
      result$data['phoneNumber'] = l$phoneNumber;
    }
    if (_$data.containsKey('phoneNumberVerified')) {
      final l$phoneNumberVerified = phoneNumberVerified;
      result$data['phoneNumberVerified'] = l$phoneNumberVerified;
    }
    if (_$data.containsKey('ticket')) {
      final l$ticket = ticket;
      result$data['ticket'] = l$ticket;
    }
    if (_$data.containsKey('ticketExpiresAt')) {
      final l$ticketExpiresAt = ticketExpiresAt;
      result$data['ticketExpiresAt'] = l$ticketExpiresAt?.toIso8601String();
    }
    if (_$data.containsKey('totpSecret')) {
      final l$totpSecret = totpSecret;
      result$data['totpSecret'] = l$totpSecret;
    }
    if (_$data.containsKey('updatedAt')) {
      final l$updatedAt = updatedAt;
      result$data['updatedAt'] = l$updatedAt?.toIso8601String();
    }
    return result$data;
  }

  CopyWith$Input$users_stream_cursor_value_input<
          Input$users_stream_cursor_value_input>
      get copyWith => CopyWith$Input$users_stream_cursor_value_input(
            this,
            (i) => i,
          );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_stream_cursor_value_input) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$activeMfaType = activeMfaType;
    final lOther$activeMfaType = other.activeMfaType;
    if (_$data.containsKey('activeMfaType') !=
        other._$data.containsKey('activeMfaType')) {
      return false;
    }
    if (l$activeMfaType != lOther$activeMfaType) {
      return false;
    }
    final l$avatarUrl = avatarUrl;
    final lOther$avatarUrl = other.avatarUrl;
    if (_$data.containsKey('avatarUrl') !=
        other._$data.containsKey('avatarUrl')) {
      return false;
    }
    if (l$avatarUrl != lOther$avatarUrl) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (_$data.containsKey('createdAt') !=
        other._$data.containsKey('createdAt')) {
      return false;
    }
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$currentChallenge = currentChallenge;
    final lOther$currentChallenge = other.currentChallenge;
    if (_$data.containsKey('currentChallenge') !=
        other._$data.containsKey('currentChallenge')) {
      return false;
    }
    if (l$currentChallenge != lOther$currentChallenge) {
      return false;
    }
    final l$defaultRole = defaultRole;
    final lOther$defaultRole = other.defaultRole;
    if (_$data.containsKey('defaultRole') !=
        other._$data.containsKey('defaultRole')) {
      return false;
    }
    if (l$defaultRole != lOther$defaultRole) {
      return false;
    }
    final l$disabled = disabled;
    final lOther$disabled = other.disabled;
    if (_$data.containsKey('disabled') !=
        other._$data.containsKey('disabled')) {
      return false;
    }
    if (l$disabled != lOther$disabled) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (_$data.containsKey('displayName') !=
        other._$data.containsKey('displayName')) {
      return false;
    }
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (_$data.containsKey('email') != other._$data.containsKey('email')) {
      return false;
    }
    if (l$email != lOther$email) {
      return false;
    }
    final l$emailVerified = emailVerified;
    final lOther$emailVerified = other.emailVerified;
    if (_$data.containsKey('emailVerified') !=
        other._$data.containsKey('emailVerified')) {
      return false;
    }
    if (l$emailVerified != lOther$emailVerified) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (_$data.containsKey('id') != other._$data.containsKey('id')) {
      return false;
    }
    if (l$id != lOther$id) {
      return false;
    }
    final l$isAnonymous = isAnonymous;
    final lOther$isAnonymous = other.isAnonymous;
    if (_$data.containsKey('isAnonymous') !=
        other._$data.containsKey('isAnonymous')) {
      return false;
    }
    if (l$isAnonymous != lOther$isAnonymous) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (_$data.containsKey('lastSeen') !=
        other._$data.containsKey('lastSeen')) {
      return false;
    }
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$locale = locale;
    final lOther$locale = other.locale;
    if (_$data.containsKey('locale') != other._$data.containsKey('locale')) {
      return false;
    }
    if (l$locale != lOther$locale) {
      return false;
    }
    final l$metadata = metadata;
    final lOther$metadata = other.metadata;
    if (_$data.containsKey('metadata') !=
        other._$data.containsKey('metadata')) {
      return false;
    }
    if (l$metadata != lOther$metadata) {
      return false;
    }
    final l$newEmail = newEmail;
    final lOther$newEmail = other.newEmail;
    if (_$data.containsKey('newEmail') !=
        other._$data.containsKey('newEmail')) {
      return false;
    }
    if (l$newEmail != lOther$newEmail) {
      return false;
    }
    final l$otpHash = otpHash;
    final lOther$otpHash = other.otpHash;
    if (_$data.containsKey('otpHash') != other._$data.containsKey('otpHash')) {
      return false;
    }
    if (l$otpHash != lOther$otpHash) {
      return false;
    }
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final lOther$otpHashExpiresAt = other.otpHashExpiresAt;
    if (_$data.containsKey('otpHashExpiresAt') !=
        other._$data.containsKey('otpHashExpiresAt')) {
      return false;
    }
    if (l$otpHashExpiresAt != lOther$otpHashExpiresAt) {
      return false;
    }
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final lOther$otpMethodLastUsed = other.otpMethodLastUsed;
    if (_$data.containsKey('otpMethodLastUsed') !=
        other._$data.containsKey('otpMethodLastUsed')) {
      return false;
    }
    if (l$otpMethodLastUsed != lOther$otpMethodLastUsed) {
      return false;
    }
    final l$passwordHash = passwordHash;
    final lOther$passwordHash = other.passwordHash;
    if (_$data.containsKey('passwordHash') !=
        other._$data.containsKey('passwordHash')) {
      return false;
    }
    if (l$passwordHash != lOther$passwordHash) {
      return false;
    }
    final l$phoneNumber = phoneNumber;
    final lOther$phoneNumber = other.phoneNumber;
    if (_$data.containsKey('phoneNumber') !=
        other._$data.containsKey('phoneNumber')) {
      return false;
    }
    if (l$phoneNumber != lOther$phoneNumber) {
      return false;
    }
    final l$phoneNumberVerified = phoneNumberVerified;
    final lOther$phoneNumberVerified = other.phoneNumberVerified;
    if (_$data.containsKey('phoneNumberVerified') !=
        other._$data.containsKey('phoneNumberVerified')) {
      return false;
    }
    if (l$phoneNumberVerified != lOther$phoneNumberVerified) {
      return false;
    }
    final l$ticket = ticket;
    final lOther$ticket = other.ticket;
    if (_$data.containsKey('ticket') != other._$data.containsKey('ticket')) {
      return false;
    }
    if (l$ticket != lOther$ticket) {
      return false;
    }
    final l$ticketExpiresAt = ticketExpiresAt;
    final lOther$ticketExpiresAt = other.ticketExpiresAt;
    if (_$data.containsKey('ticketExpiresAt') !=
        other._$data.containsKey('ticketExpiresAt')) {
      return false;
    }
    if (l$ticketExpiresAt != lOther$ticketExpiresAt) {
      return false;
    }
    final l$totpSecret = totpSecret;
    final lOther$totpSecret = other.totpSecret;
    if (_$data.containsKey('totpSecret') !=
        other._$data.containsKey('totpSecret')) {
      return false;
    }
    if (l$totpSecret != lOther$totpSecret) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (_$data.containsKey('updatedAt') !=
        other._$data.containsKey('updatedAt')) {
      return false;
    }
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$activeMfaType = activeMfaType;
    final l$avatarUrl = avatarUrl;
    final l$createdAt = createdAt;
    final l$currentChallenge = currentChallenge;
    final l$defaultRole = defaultRole;
    final l$disabled = disabled;
    final l$displayName = displayName;
    final l$email = email;
    final l$emailVerified = emailVerified;
    final l$id = id;
    final l$isAnonymous = isAnonymous;
    final l$lastSeen = lastSeen;
    final l$locale = locale;
    final l$metadata = metadata;
    final l$newEmail = newEmail;
    final l$otpHash = otpHash;
    final l$otpHashExpiresAt = otpHashExpiresAt;
    final l$otpMethodLastUsed = otpMethodLastUsed;
    final l$passwordHash = passwordHash;
    final l$phoneNumber = phoneNumber;
    final l$phoneNumberVerified = phoneNumberVerified;
    final l$ticket = ticket;
    final l$ticketExpiresAt = ticketExpiresAt;
    final l$totpSecret = totpSecret;
    final l$updatedAt = updatedAt;
    return Object.hashAll([
      _$data.containsKey('activeMfaType') ? l$activeMfaType : const {},
      _$data.containsKey('avatarUrl') ? l$avatarUrl : const {},
      _$data.containsKey('createdAt') ? l$createdAt : const {},
      _$data.containsKey('currentChallenge') ? l$currentChallenge : const {},
      _$data.containsKey('defaultRole') ? l$defaultRole : const {},
      _$data.containsKey('disabled') ? l$disabled : const {},
      _$data.containsKey('displayName') ? l$displayName : const {},
      _$data.containsKey('email') ? l$email : const {},
      _$data.containsKey('emailVerified') ? l$emailVerified : const {},
      _$data.containsKey('id') ? l$id : const {},
      _$data.containsKey('isAnonymous') ? l$isAnonymous : const {},
      _$data.containsKey('lastSeen') ? l$lastSeen : const {},
      _$data.containsKey('locale') ? l$locale : const {},
      _$data.containsKey('metadata') ? l$metadata : const {},
      _$data.containsKey('newEmail') ? l$newEmail : const {},
      _$data.containsKey('otpHash') ? l$otpHash : const {},
      _$data.containsKey('otpHashExpiresAt') ? l$otpHashExpiresAt : const {},
      _$data.containsKey('otpMethodLastUsed') ? l$otpMethodLastUsed : const {},
      _$data.containsKey('passwordHash') ? l$passwordHash : const {},
      _$data.containsKey('phoneNumber') ? l$phoneNumber : const {},
      _$data.containsKey('phoneNumberVerified')
          ? l$phoneNumberVerified
          : const {},
      _$data.containsKey('ticket') ? l$ticket : const {},
      _$data.containsKey('ticketExpiresAt') ? l$ticketExpiresAt : const {},
      _$data.containsKey('totpSecret') ? l$totpSecret : const {},
      _$data.containsKey('updatedAt') ? l$updatedAt : const {},
    ]);
  }
}

abstract class CopyWith$Input$users_stream_cursor_value_input<TRes> {
  factory CopyWith$Input$users_stream_cursor_value_input(
    Input$users_stream_cursor_value_input instance,
    TRes Function(Input$users_stream_cursor_value_input) then,
  ) = _CopyWithImpl$Input$users_stream_cursor_value_input;

  factory CopyWith$Input$users_stream_cursor_value_input.stub(TRes res) =
      _CopyWithStubImpl$Input$users_stream_cursor_value_input;

  TRes call({
    String? activeMfaType,
    String? avatarUrl,
    DateTime? createdAt,
    String? currentChallenge,
    String? defaultRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
  });
}

class _CopyWithImpl$Input$users_stream_cursor_value_input<TRes>
    implements CopyWith$Input$users_stream_cursor_value_input<TRes> {
  _CopyWithImpl$Input$users_stream_cursor_value_input(
    this._instance,
    this._then,
  );

  final Input$users_stream_cursor_value_input _instance;

  final TRes Function(Input$users_stream_cursor_value_input) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? activeMfaType = _undefined,
    Object? avatarUrl = _undefined,
    Object? createdAt = _undefined,
    Object? currentChallenge = _undefined,
    Object? defaultRole = _undefined,
    Object? disabled = _undefined,
    Object? displayName = _undefined,
    Object? email = _undefined,
    Object? emailVerified = _undefined,
    Object? id = _undefined,
    Object? isAnonymous = _undefined,
    Object? lastSeen = _undefined,
    Object? locale = _undefined,
    Object? metadata = _undefined,
    Object? newEmail = _undefined,
    Object? otpHash = _undefined,
    Object? otpHashExpiresAt = _undefined,
    Object? otpMethodLastUsed = _undefined,
    Object? passwordHash = _undefined,
    Object? phoneNumber = _undefined,
    Object? phoneNumberVerified = _undefined,
    Object? ticket = _undefined,
    Object? ticketExpiresAt = _undefined,
    Object? totpSecret = _undefined,
    Object? updatedAt = _undefined,
  }) =>
      _then(Input$users_stream_cursor_value_input._({
        ..._instance._$data,
        if (activeMfaType != _undefined)
          'activeMfaType': (activeMfaType as String?),
        if (avatarUrl != _undefined) 'avatarUrl': (avatarUrl as String?),
        if (createdAt != _undefined) 'createdAt': (createdAt as DateTime?),
        if (currentChallenge != _undefined)
          'currentChallenge': (currentChallenge as String?),
        if (defaultRole != _undefined) 'defaultRole': (defaultRole as String?),
        if (disabled != _undefined) 'disabled': (disabled as bool?),
        if (displayName != _undefined) 'displayName': (displayName as String?),
        if (email != _undefined) 'email': (email as Citext?),
        if (emailVerified != _undefined)
          'emailVerified': (emailVerified as bool?),
        if (id != _undefined) 'id': (id as UUID?),
        if (isAnonymous != _undefined) 'isAnonymous': (isAnonymous as bool?),
        if (lastSeen != _undefined) 'lastSeen': (lastSeen as DateTime?),
        if (locale != _undefined) 'locale': (locale as String?),
        if (metadata != _undefined) 'metadata': (metadata as JSONB?),
        if (newEmail != _undefined) 'newEmail': (newEmail as Citext?),
        if (otpHash != _undefined) 'otpHash': (otpHash as String?),
        if (otpHashExpiresAt != _undefined)
          'otpHashExpiresAt': (otpHashExpiresAt as DateTime?),
        if (otpMethodLastUsed != _undefined)
          'otpMethodLastUsed': (otpMethodLastUsed as String?),
        if (passwordHash != _undefined)
          'passwordHash': (passwordHash as String?),
        if (phoneNumber != _undefined) 'phoneNumber': (phoneNumber as String?),
        if (phoneNumberVerified != _undefined)
          'phoneNumberVerified': (phoneNumberVerified as bool?),
        if (ticket != _undefined) 'ticket': (ticket as String?),
        if (ticketExpiresAt != _undefined)
          'ticketExpiresAt': (ticketExpiresAt as DateTime?),
        if (totpSecret != _undefined) 'totpSecret': (totpSecret as String?),
        if (updatedAt != _undefined) 'updatedAt': (updatedAt as DateTime?),
      }));
}

class _CopyWithStubImpl$Input$users_stream_cursor_value_input<TRes>
    implements CopyWith$Input$users_stream_cursor_value_input<TRes> {
  _CopyWithStubImpl$Input$users_stream_cursor_value_input(this._res);

  TRes _res;

  call({
    String? activeMfaType,
    String? avatarUrl,
    DateTime? createdAt,
    String? currentChallenge,
    String? defaultRole,
    bool? disabled,
    String? displayName,
    Citext? email,
    bool? emailVerified,
    UUID? id,
    bool? isAnonymous,
    DateTime? lastSeen,
    String? locale,
    JSONB? metadata,
    Citext? newEmail,
    String? otpHash,
    DateTime? otpHashExpiresAt,
    String? otpMethodLastUsed,
    String? passwordHash,
    String? phoneNumber,
    bool? phoneNumberVerified,
    String? ticket,
    DateTime? ticketExpiresAt,
    String? totpSecret,
    DateTime? updatedAt,
  }) =>
      _res;
}

class Input$users_updates {
  factory Input$users_updates({
    Input$users_append_input? $_append,
    Input$users_delete_at_path_input? $_delete_at_path,
    Input$users_delete_elem_input? $_delete_elem,
    Input$users_delete_key_input? $_delete_key,
    Input$users_prepend_input? $_prepend,
    Input$users_set_input? $_set,
    required Input$users_bool_exp where,
  }) =>
      Input$users_updates._({
        if ($_append != null) r'_append': $_append,
        if ($_delete_at_path != null) r'_delete_at_path': $_delete_at_path,
        if ($_delete_elem != null) r'_delete_elem': $_delete_elem,
        if ($_delete_key != null) r'_delete_key': $_delete_key,
        if ($_prepend != null) r'_prepend': $_prepend,
        if ($_set != null) r'_set': $_set,
        r'where': where,
      });

  Input$users_updates._(this._$data);

  factory Input$users_updates.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_append')) {
      final l$$_append = data['_append'];
      result$data['_append'] = l$$_append == null
          ? null
          : Input$users_append_input.fromJson(
              (l$$_append as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = data['_delete_at_path'];
      result$data['_delete_at_path'] = l$$_delete_at_path == null
          ? null
          : Input$users_delete_at_path_input.fromJson(
              (l$$_delete_at_path as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_elem')) {
      final l$$_delete_elem = data['_delete_elem'];
      result$data['_delete_elem'] = l$$_delete_elem == null
          ? null
          : Input$users_delete_elem_input.fromJson(
              (l$$_delete_elem as Map<String, dynamic>));
    }
    if (data.containsKey('_delete_key')) {
      final l$$_delete_key = data['_delete_key'];
      result$data['_delete_key'] = l$$_delete_key == null
          ? null
          : Input$users_delete_key_input.fromJson(
              (l$$_delete_key as Map<String, dynamic>));
    }
    if (data.containsKey('_prepend')) {
      final l$$_prepend = data['_prepend'];
      result$data['_prepend'] = l$$_prepend == null
          ? null
          : Input$users_prepend_input.fromJson(
              (l$$_prepend as Map<String, dynamic>));
    }
    if (data.containsKey('_set')) {
      final l$$_set = data['_set'];
      result$data['_set'] = l$$_set == null
          ? null
          : Input$users_set_input.fromJson((l$$_set as Map<String, dynamic>));
    }
    final l$where = data['where'];
    result$data['where'] =
        Input$users_bool_exp.fromJson((l$where as Map<String, dynamic>));
    return Input$users_updates._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$users_append_input? get $_append =>
      (_$data['_append'] as Input$users_append_input?);
  Input$users_delete_at_path_input? get $_delete_at_path =>
      (_$data['_delete_at_path'] as Input$users_delete_at_path_input?);
  Input$users_delete_elem_input? get $_delete_elem =>
      (_$data['_delete_elem'] as Input$users_delete_elem_input?);
  Input$users_delete_key_input? get $_delete_key =>
      (_$data['_delete_key'] as Input$users_delete_key_input?);
  Input$users_prepend_input? get $_prepend =>
      (_$data['_prepend'] as Input$users_prepend_input?);
  Input$users_set_input? get $_set =>
      (_$data['_set'] as Input$users_set_input?);
  Input$users_bool_exp get where => (_$data['where'] as Input$users_bool_exp);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_append')) {
      final l$$_append = $_append;
      result$data['_append'] = l$$_append?.toJson();
    }
    if (_$data.containsKey('_delete_at_path')) {
      final l$$_delete_at_path = $_delete_at_path;
      result$data['_delete_at_path'] = l$$_delete_at_path?.toJson();
    }
    if (_$data.containsKey('_delete_elem')) {
      final l$$_delete_elem = $_delete_elem;
      result$data['_delete_elem'] = l$$_delete_elem?.toJson();
    }
    if (_$data.containsKey('_delete_key')) {
      final l$$_delete_key = $_delete_key;
      result$data['_delete_key'] = l$$_delete_key?.toJson();
    }
    if (_$data.containsKey('_prepend')) {
      final l$$_prepend = $_prepend;
      result$data['_prepend'] = l$$_prepend?.toJson();
    }
    if (_$data.containsKey('_set')) {
      final l$$_set = $_set;
      result$data['_set'] = l$$_set?.toJson();
    }
    final l$where = where;
    result$data['where'] = l$where.toJson();
    return result$data;
  }

  CopyWith$Input$users_updates<Input$users_updates> get copyWith =>
      CopyWith$Input$users_updates(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$users_updates) || runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_append = $_append;
    final lOther$$_append = other.$_append;
    if (_$data.containsKey('_append') != other._$data.containsKey('_append')) {
      return false;
    }
    if (l$$_append != lOther$$_append) {
      return false;
    }
    final l$$_delete_at_path = $_delete_at_path;
    final lOther$$_delete_at_path = other.$_delete_at_path;
    if (_$data.containsKey('_delete_at_path') !=
        other._$data.containsKey('_delete_at_path')) {
      return false;
    }
    if (l$$_delete_at_path != lOther$$_delete_at_path) {
      return false;
    }
    final l$$_delete_elem = $_delete_elem;
    final lOther$$_delete_elem = other.$_delete_elem;
    if (_$data.containsKey('_delete_elem') !=
        other._$data.containsKey('_delete_elem')) {
      return false;
    }
    if (l$$_delete_elem != lOther$$_delete_elem) {
      return false;
    }
    final l$$_delete_key = $_delete_key;
    final lOther$$_delete_key = other.$_delete_key;
    if (_$data.containsKey('_delete_key') !=
        other._$data.containsKey('_delete_key')) {
      return false;
    }
    if (l$$_delete_key != lOther$$_delete_key) {
      return false;
    }
    final l$$_prepend = $_prepend;
    final lOther$$_prepend = other.$_prepend;
    if (_$data.containsKey('_prepend') !=
        other._$data.containsKey('_prepend')) {
      return false;
    }
    if (l$$_prepend != lOther$$_prepend) {
      return false;
    }
    final l$$_set = $_set;
    final lOther$$_set = other.$_set;
    if (_$data.containsKey('_set') != other._$data.containsKey('_set')) {
      return false;
    }
    if (l$$_set != lOther$$_set) {
      return false;
    }
    final l$where = where;
    final lOther$where = other.where;
    if (l$where != lOther$where) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_append = $_append;
    final l$$_delete_at_path = $_delete_at_path;
    final l$$_delete_elem = $_delete_elem;
    final l$$_delete_key = $_delete_key;
    final l$$_prepend = $_prepend;
    final l$$_set = $_set;
    final l$where = where;
    return Object.hashAll([
      _$data.containsKey('_append') ? l$$_append : const {},
      _$data.containsKey('_delete_at_path') ? l$$_delete_at_path : const {},
      _$data.containsKey('_delete_elem') ? l$$_delete_elem : const {},
      _$data.containsKey('_delete_key') ? l$$_delete_key : const {},
      _$data.containsKey('_prepend') ? l$$_prepend : const {},
      _$data.containsKey('_set') ? l$$_set : const {},
      l$where,
    ]);
  }
}

abstract class CopyWith$Input$users_updates<TRes> {
  factory CopyWith$Input$users_updates(
    Input$users_updates instance,
    TRes Function(Input$users_updates) then,
  ) = _CopyWithImpl$Input$users_updates;

  factory CopyWith$Input$users_updates.stub(TRes res) =
      _CopyWithStubImpl$Input$users_updates;

  TRes call({
    Input$users_append_input? $_append,
    Input$users_delete_at_path_input? $_delete_at_path,
    Input$users_delete_elem_input? $_delete_elem,
    Input$users_delete_key_input? $_delete_key,
    Input$users_prepend_input? $_prepend,
    Input$users_set_input? $_set,
    Input$users_bool_exp? where,
  });
  CopyWith$Input$users_append_input<TRes> get $_append;
  CopyWith$Input$users_delete_at_path_input<TRes> get $_delete_at_path;
  CopyWith$Input$users_delete_elem_input<TRes> get $_delete_elem;
  CopyWith$Input$users_delete_key_input<TRes> get $_delete_key;
  CopyWith$Input$users_prepend_input<TRes> get $_prepend;
  CopyWith$Input$users_set_input<TRes> get $_set;
  CopyWith$Input$users_bool_exp<TRes> get where;
}

class _CopyWithImpl$Input$users_updates<TRes>
    implements CopyWith$Input$users_updates<TRes> {
  _CopyWithImpl$Input$users_updates(
    this._instance,
    this._then,
  );

  final Input$users_updates _instance;

  final TRes Function(Input$users_updates) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_append = _undefined,
    Object? $_delete_at_path = _undefined,
    Object? $_delete_elem = _undefined,
    Object? $_delete_key = _undefined,
    Object? $_prepend = _undefined,
    Object? $_set = _undefined,
    Object? where = _undefined,
  }) =>
      _then(Input$users_updates._({
        ..._instance._$data,
        if ($_append != _undefined)
          '_append': ($_append as Input$users_append_input?),
        if ($_delete_at_path != _undefined)
          '_delete_at_path':
              ($_delete_at_path as Input$users_delete_at_path_input?),
        if ($_delete_elem != _undefined)
          '_delete_elem': ($_delete_elem as Input$users_delete_elem_input?),
        if ($_delete_key != _undefined)
          '_delete_key': ($_delete_key as Input$users_delete_key_input?),
        if ($_prepend != _undefined)
          '_prepend': ($_prepend as Input$users_prepend_input?),
        if ($_set != _undefined) '_set': ($_set as Input$users_set_input?),
        if (where != _undefined && where != null)
          'where': (where as Input$users_bool_exp),
      }));
  CopyWith$Input$users_append_input<TRes> get $_append {
    final local$$_append = _instance.$_append;
    return local$$_append == null
        ? CopyWith$Input$users_append_input.stub(_then(_instance))
        : CopyWith$Input$users_append_input(
            local$$_append, (e) => call($_append: e));
  }

  CopyWith$Input$users_delete_at_path_input<TRes> get $_delete_at_path {
    final local$$_delete_at_path = _instance.$_delete_at_path;
    return local$$_delete_at_path == null
        ? CopyWith$Input$users_delete_at_path_input.stub(_then(_instance))
        : CopyWith$Input$users_delete_at_path_input(
            local$$_delete_at_path, (e) => call($_delete_at_path: e));
  }

  CopyWith$Input$users_delete_elem_input<TRes> get $_delete_elem {
    final local$$_delete_elem = _instance.$_delete_elem;
    return local$$_delete_elem == null
        ? CopyWith$Input$users_delete_elem_input.stub(_then(_instance))
        : CopyWith$Input$users_delete_elem_input(
            local$$_delete_elem, (e) => call($_delete_elem: e));
  }

  CopyWith$Input$users_delete_key_input<TRes> get $_delete_key {
    final local$$_delete_key = _instance.$_delete_key;
    return local$$_delete_key == null
        ? CopyWith$Input$users_delete_key_input.stub(_then(_instance))
        : CopyWith$Input$users_delete_key_input(
            local$$_delete_key, (e) => call($_delete_key: e));
  }

  CopyWith$Input$users_prepend_input<TRes> get $_prepend {
    final local$$_prepend = _instance.$_prepend;
    return local$$_prepend == null
        ? CopyWith$Input$users_prepend_input.stub(_then(_instance))
        : CopyWith$Input$users_prepend_input(
            local$$_prepend, (e) => call($_prepend: e));
  }

  CopyWith$Input$users_set_input<TRes> get $_set {
    final local$$_set = _instance.$_set;
    return local$$_set == null
        ? CopyWith$Input$users_set_input.stub(_then(_instance))
        : CopyWith$Input$users_set_input(local$$_set, (e) => call($_set: e));
  }

  CopyWith$Input$users_bool_exp<TRes> get where {
    final local$where = _instance.where;
    return CopyWith$Input$users_bool_exp(local$where, (e) => call(where: e));
  }
}

class _CopyWithStubImpl$Input$users_updates<TRes>
    implements CopyWith$Input$users_updates<TRes> {
  _CopyWithStubImpl$Input$users_updates(this._res);

  TRes _res;

  call({
    Input$users_append_input? $_append,
    Input$users_delete_at_path_input? $_delete_at_path,
    Input$users_delete_elem_input? $_delete_elem,
    Input$users_delete_key_input? $_delete_key,
    Input$users_prepend_input? $_prepend,
    Input$users_set_input? $_set,
    Input$users_bool_exp? where,
  }) =>
      _res;
  CopyWith$Input$users_append_input<TRes> get $_append =>
      CopyWith$Input$users_append_input.stub(_res);
  CopyWith$Input$users_delete_at_path_input<TRes> get $_delete_at_path =>
      CopyWith$Input$users_delete_at_path_input.stub(_res);
  CopyWith$Input$users_delete_elem_input<TRes> get $_delete_elem =>
      CopyWith$Input$users_delete_elem_input.stub(_res);
  CopyWith$Input$users_delete_key_input<TRes> get $_delete_key =>
      CopyWith$Input$users_delete_key_input.stub(_res);
  CopyWith$Input$users_prepend_input<TRes> get $_prepend =>
      CopyWith$Input$users_prepend_input.stub(_res);
  CopyWith$Input$users_set_input<TRes> get $_set =>
      CopyWith$Input$users_set_input.stub(_res);
  CopyWith$Input$users_bool_exp<TRes> get where =>
      CopyWith$Input$users_bool_exp.stub(_res);
}

class Input$uuid_comparison_exp {
  factory Input$uuid_comparison_exp({
    UUID? $_eq,
    UUID? $_gt,
    UUID? $_gte,
    List<UUID>? $_in,
    bool? $_is_null,
    UUID? $_lt,
    UUID? $_lte,
    UUID? $_neq,
    List<UUID>? $_nin,
  }) =>
      Input$uuid_comparison_exp._({
        if ($_eq != null) r'_eq': $_eq,
        if ($_gt != null) r'_gt': $_gt,
        if ($_gte != null) r'_gte': $_gte,
        if ($_in != null) r'_in': $_in,
        if ($_is_null != null) r'_is_null': $_is_null,
        if ($_lt != null) r'_lt': $_lt,
        if ($_lte != null) r'_lte': $_lte,
        if ($_neq != null) r'_neq': $_neq,
        if ($_nin != null) r'_nin': $_nin,
      });

  Input$uuid_comparison_exp._(this._$data);

  factory Input$uuid_comparison_exp.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('_eq')) {
      final l$$_eq = data['_eq'];
      result$data['_eq'] = l$$_eq == null ? null : uuidFromJson(l$$_eq);
    }
    if (data.containsKey('_gt')) {
      final l$$_gt = data['_gt'];
      result$data['_gt'] = l$$_gt == null ? null : uuidFromJson(l$$_gt);
    }
    if (data.containsKey('_gte')) {
      final l$$_gte = data['_gte'];
      result$data['_gte'] = l$$_gte == null ? null : uuidFromJson(l$$_gte);
    }
    if (data.containsKey('_in')) {
      final l$$_in = data['_in'];
      result$data['_in'] =
          (l$$_in as List<dynamic>?)?.map((e) => uuidFromJson(e)).toList();
    }
    if (data.containsKey('_is_null')) {
      final l$$_is_null = data['_is_null'];
      result$data['_is_null'] = (l$$_is_null as bool?);
    }
    if (data.containsKey('_lt')) {
      final l$$_lt = data['_lt'];
      result$data['_lt'] = l$$_lt == null ? null : uuidFromJson(l$$_lt);
    }
    if (data.containsKey('_lte')) {
      final l$$_lte = data['_lte'];
      result$data['_lte'] = l$$_lte == null ? null : uuidFromJson(l$$_lte);
    }
    if (data.containsKey('_neq')) {
      final l$$_neq = data['_neq'];
      result$data['_neq'] = l$$_neq == null ? null : uuidFromJson(l$$_neq);
    }
    if (data.containsKey('_nin')) {
      final l$$_nin = data['_nin'];
      result$data['_nin'] =
          (l$$_nin as List<dynamic>?)?.map((e) => uuidFromJson(e)).toList();
    }
    return Input$uuid_comparison_exp._(result$data);
  }

  Map<String, dynamic> _$data;

  UUID? get $_eq => (_$data['_eq'] as UUID?);
  UUID? get $_gt => (_$data['_gt'] as UUID?);
  UUID? get $_gte => (_$data['_gte'] as UUID?);
  List<UUID>? get $_in => (_$data['_in'] as List<UUID>?);
  bool? get $_is_null => (_$data['_is_null'] as bool?);
  UUID? get $_lt => (_$data['_lt'] as UUID?);
  UUID? get $_lte => (_$data['_lte'] as UUID?);
  UUID? get $_neq => (_$data['_neq'] as UUID?);
  List<UUID>? get $_nin => (_$data['_nin'] as List<UUID>?);
  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('_eq')) {
      final l$$_eq = $_eq;
      result$data['_eq'] = l$$_eq == null ? null : uuidToJson(l$$_eq);
    }
    if (_$data.containsKey('_gt')) {
      final l$$_gt = $_gt;
      result$data['_gt'] = l$$_gt == null ? null : uuidToJson(l$$_gt);
    }
    if (_$data.containsKey('_gte')) {
      final l$$_gte = $_gte;
      result$data['_gte'] = l$$_gte == null ? null : uuidToJson(l$$_gte);
    }
    if (_$data.containsKey('_in')) {
      final l$$_in = $_in;
      result$data['_in'] = l$$_in?.map((e) => uuidToJson(e)).toList();
    }
    if (_$data.containsKey('_is_null')) {
      final l$$_is_null = $_is_null;
      result$data['_is_null'] = l$$_is_null;
    }
    if (_$data.containsKey('_lt')) {
      final l$$_lt = $_lt;
      result$data['_lt'] = l$$_lt == null ? null : uuidToJson(l$$_lt);
    }
    if (_$data.containsKey('_lte')) {
      final l$$_lte = $_lte;
      result$data['_lte'] = l$$_lte == null ? null : uuidToJson(l$$_lte);
    }
    if (_$data.containsKey('_neq')) {
      final l$$_neq = $_neq;
      result$data['_neq'] = l$$_neq == null ? null : uuidToJson(l$$_neq);
    }
    if (_$data.containsKey('_nin')) {
      final l$$_nin = $_nin;
      result$data['_nin'] = l$$_nin?.map((e) => uuidToJson(e)).toList();
    }
    return result$data;
  }

  CopyWith$Input$uuid_comparison_exp<Input$uuid_comparison_exp> get copyWith =>
      CopyWith$Input$uuid_comparison_exp(
        this,
        (i) => i,
      );
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (!(other is Input$uuid_comparison_exp) ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$$_eq = $_eq;
    final lOther$$_eq = other.$_eq;
    if (_$data.containsKey('_eq') != other._$data.containsKey('_eq')) {
      return false;
    }
    if (l$$_eq != lOther$$_eq) {
      return false;
    }
    final l$$_gt = $_gt;
    final lOther$$_gt = other.$_gt;
    if (_$data.containsKey('_gt') != other._$data.containsKey('_gt')) {
      return false;
    }
    if (l$$_gt != lOther$$_gt) {
      return false;
    }
    final l$$_gte = $_gte;
    final lOther$$_gte = other.$_gte;
    if (_$data.containsKey('_gte') != other._$data.containsKey('_gte')) {
      return false;
    }
    if (l$$_gte != lOther$$_gte) {
      return false;
    }
    final l$$_in = $_in;
    final lOther$$_in = other.$_in;
    if (_$data.containsKey('_in') != other._$data.containsKey('_in')) {
      return false;
    }
    if (l$$_in != null && lOther$$_in != null) {
      if (l$$_in.length != lOther$$_in.length) {
        return false;
      }
      for (int i = 0; i < l$$_in.length; i++) {
        final l$$_in$entry = l$$_in[i];
        final lOther$$_in$entry = lOther$$_in[i];
        if (l$$_in$entry != lOther$$_in$entry) {
          return false;
        }
      }
    } else if (l$$_in != lOther$$_in) {
      return false;
    }
    final l$$_is_null = $_is_null;
    final lOther$$_is_null = other.$_is_null;
    if (_$data.containsKey('_is_null') !=
        other._$data.containsKey('_is_null')) {
      return false;
    }
    if (l$$_is_null != lOther$$_is_null) {
      return false;
    }
    final l$$_lt = $_lt;
    final lOther$$_lt = other.$_lt;
    if (_$data.containsKey('_lt') != other._$data.containsKey('_lt')) {
      return false;
    }
    if (l$$_lt != lOther$$_lt) {
      return false;
    }
    final l$$_lte = $_lte;
    final lOther$$_lte = other.$_lte;
    if (_$data.containsKey('_lte') != other._$data.containsKey('_lte')) {
      return false;
    }
    if (l$$_lte != lOther$$_lte) {
      return false;
    }
    final l$$_neq = $_neq;
    final lOther$$_neq = other.$_neq;
    if (_$data.containsKey('_neq') != other._$data.containsKey('_neq')) {
      return false;
    }
    if (l$$_neq != lOther$$_neq) {
      return false;
    }
    final l$$_nin = $_nin;
    final lOther$$_nin = other.$_nin;
    if (_$data.containsKey('_nin') != other._$data.containsKey('_nin')) {
      return false;
    }
    if (l$$_nin != null && lOther$$_nin != null) {
      if (l$$_nin.length != lOther$$_nin.length) {
        return false;
      }
      for (int i = 0; i < l$$_nin.length; i++) {
        final l$$_nin$entry = l$$_nin[i];
        final lOther$$_nin$entry = lOther$$_nin[i];
        if (l$$_nin$entry != lOther$$_nin$entry) {
          return false;
        }
      }
    } else if (l$$_nin != lOther$$_nin) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$$_eq = $_eq;
    final l$$_gt = $_gt;
    final l$$_gte = $_gte;
    final l$$_in = $_in;
    final l$$_is_null = $_is_null;
    final l$$_lt = $_lt;
    final l$$_lte = $_lte;
    final l$$_neq = $_neq;
    final l$$_nin = $_nin;
    return Object.hashAll([
      _$data.containsKey('_eq') ? l$$_eq : const {},
      _$data.containsKey('_gt') ? l$$_gt : const {},
      _$data.containsKey('_gte') ? l$$_gte : const {},
      _$data.containsKey('_in')
          ? l$$_in == null
              ? null
              : Object.hashAll(l$$_in.map((v) => v))
          : const {},
      _$data.containsKey('_is_null') ? l$$_is_null : const {},
      _$data.containsKey('_lt') ? l$$_lt : const {},
      _$data.containsKey('_lte') ? l$$_lte : const {},
      _$data.containsKey('_neq') ? l$$_neq : const {},
      _$data.containsKey('_nin')
          ? l$$_nin == null
              ? null
              : Object.hashAll(l$$_nin.map((v) => v))
          : const {},
    ]);
  }
}

abstract class CopyWith$Input$uuid_comparison_exp<TRes> {
  factory CopyWith$Input$uuid_comparison_exp(
    Input$uuid_comparison_exp instance,
    TRes Function(Input$uuid_comparison_exp) then,
  ) = _CopyWithImpl$Input$uuid_comparison_exp;

  factory CopyWith$Input$uuid_comparison_exp.stub(TRes res) =
      _CopyWithStubImpl$Input$uuid_comparison_exp;

  TRes call({
    UUID? $_eq,
    UUID? $_gt,
    UUID? $_gte,
    List<UUID>? $_in,
    bool? $_is_null,
    UUID? $_lt,
    UUID? $_lte,
    UUID? $_neq,
    List<UUID>? $_nin,
  });
}

class _CopyWithImpl$Input$uuid_comparison_exp<TRes>
    implements CopyWith$Input$uuid_comparison_exp<TRes> {
  _CopyWithImpl$Input$uuid_comparison_exp(
    this._instance,
    this._then,
  );

  final Input$uuid_comparison_exp _instance;

  final TRes Function(Input$uuid_comparison_exp) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? $_eq = _undefined,
    Object? $_gt = _undefined,
    Object? $_gte = _undefined,
    Object? $_in = _undefined,
    Object? $_is_null = _undefined,
    Object? $_lt = _undefined,
    Object? $_lte = _undefined,
    Object? $_neq = _undefined,
    Object? $_nin = _undefined,
  }) =>
      _then(Input$uuid_comparison_exp._({
        ..._instance._$data,
        if ($_eq != _undefined) '_eq': ($_eq as UUID?),
        if ($_gt != _undefined) '_gt': ($_gt as UUID?),
        if ($_gte != _undefined) '_gte': ($_gte as UUID?),
        if ($_in != _undefined) '_in': ($_in as List<UUID>?),
        if ($_is_null != _undefined) '_is_null': ($_is_null as bool?),
        if ($_lt != _undefined) '_lt': ($_lt as UUID?),
        if ($_lte != _undefined) '_lte': ($_lte as UUID?),
        if ($_neq != _undefined) '_neq': ($_neq as UUID?),
        if ($_nin != _undefined) '_nin': ($_nin as List<UUID>?),
      }));
}

class _CopyWithStubImpl$Input$uuid_comparison_exp<TRes>
    implements CopyWith$Input$uuid_comparison_exp<TRes> {
  _CopyWithStubImpl$Input$uuid_comparison_exp(this._res);

  TRes _res;

  call({
    UUID? $_eq,
    UUID? $_gt,
    UUID? $_gte,
    List<UUID>? $_in,
    bool? $_is_null,
    UUID? $_lt,
    UUID? $_lte,
    UUID? $_neq,
    List<UUID>? $_nin,
  }) =>
      _res;
}

enum Enum$authProviderRequests_constraint { provider_requests_pkey, $unknown }

String toJson$Enum$authProviderRequests_constraint(
    Enum$authProviderRequests_constraint e) {
  switch (e) {
    case Enum$authProviderRequests_constraint.provider_requests_pkey:
      return r'provider_requests_pkey';
    case Enum$authProviderRequests_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authProviderRequests_constraint
    fromJson$Enum$authProviderRequests_constraint(String value) {
  switch (value) {
    case r'provider_requests_pkey':
      return Enum$authProviderRequests_constraint.provider_requests_pkey;
    default:
      return Enum$authProviderRequests_constraint.$unknown;
  }
}

enum Enum$authProviderRequests_select_column { id, options, $unknown }

String toJson$Enum$authProviderRequests_select_column(
    Enum$authProviderRequests_select_column e) {
  switch (e) {
    case Enum$authProviderRequests_select_column.id:
      return r'id';
    case Enum$authProviderRequests_select_column.options:
      return r'options';
    case Enum$authProviderRequests_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authProviderRequests_select_column
    fromJson$Enum$authProviderRequests_select_column(String value) {
  switch (value) {
    case r'id':
      return Enum$authProviderRequests_select_column.id;
    case r'options':
      return Enum$authProviderRequests_select_column.options;
    default:
      return Enum$authProviderRequests_select_column.$unknown;
  }
}

enum Enum$authProviderRequests_update_column { id, options, $unknown }

String toJson$Enum$authProviderRequests_update_column(
    Enum$authProviderRequests_update_column e) {
  switch (e) {
    case Enum$authProviderRequests_update_column.id:
      return r'id';
    case Enum$authProviderRequests_update_column.options:
      return r'options';
    case Enum$authProviderRequests_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authProviderRequests_update_column
    fromJson$Enum$authProviderRequests_update_column(String value) {
  switch (value) {
    case r'id':
      return Enum$authProviderRequests_update_column.id;
    case r'options':
      return Enum$authProviderRequests_update_column.options;
    default:
      return Enum$authProviderRequests_update_column.$unknown;
  }
}

enum Enum$authProviders_constraint { providers_pkey, $unknown }

String toJson$Enum$authProviders_constraint(Enum$authProviders_constraint e) {
  switch (e) {
    case Enum$authProviders_constraint.providers_pkey:
      return r'providers_pkey';
    case Enum$authProviders_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authProviders_constraint fromJson$Enum$authProviders_constraint(
    String value) {
  switch (value) {
    case r'providers_pkey':
      return Enum$authProviders_constraint.providers_pkey;
    default:
      return Enum$authProviders_constraint.$unknown;
  }
}

enum Enum$authProviders_select_column { id, $unknown }

String toJson$Enum$authProviders_select_column(
    Enum$authProviders_select_column e) {
  switch (e) {
    case Enum$authProviders_select_column.id:
      return r'id';
    case Enum$authProviders_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authProviders_select_column fromJson$Enum$authProviders_select_column(
    String value) {
  switch (value) {
    case r'id':
      return Enum$authProviders_select_column.id;
    default:
      return Enum$authProviders_select_column.$unknown;
  }
}

enum Enum$authProviders_update_column { id, $unknown }

String toJson$Enum$authProviders_update_column(
    Enum$authProviders_update_column e) {
  switch (e) {
    case Enum$authProviders_update_column.id:
      return r'id';
    case Enum$authProviders_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authProviders_update_column fromJson$Enum$authProviders_update_column(
    String value) {
  switch (value) {
    case r'id':
      return Enum$authProviders_update_column.id;
    default:
      return Enum$authProviders_update_column.$unknown;
  }
}

enum Enum$authRefreshTokenTypes_constraint {
  refresh_token_types_pkey,
  $unknown
}

String toJson$Enum$authRefreshTokenTypes_constraint(
    Enum$authRefreshTokenTypes_constraint e) {
  switch (e) {
    case Enum$authRefreshTokenTypes_constraint.refresh_token_types_pkey:
      return r'refresh_token_types_pkey';
    case Enum$authRefreshTokenTypes_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authRefreshTokenTypes_constraint
    fromJson$Enum$authRefreshTokenTypes_constraint(String value) {
  switch (value) {
    case r'refresh_token_types_pkey':
      return Enum$authRefreshTokenTypes_constraint.refresh_token_types_pkey;
    default:
      return Enum$authRefreshTokenTypes_constraint.$unknown;
  }
}

enum Enum$authRefreshTokenTypes_enum { pat, regular, $unknown }

String toJson$Enum$authRefreshTokenTypes_enum(
    Enum$authRefreshTokenTypes_enum e) {
  switch (e) {
    case Enum$authRefreshTokenTypes_enum.pat:
      return r'pat';
    case Enum$authRefreshTokenTypes_enum.regular:
      return r'regular';
    case Enum$authRefreshTokenTypes_enum.$unknown:
      return r'$unknown';
  }
}

Enum$authRefreshTokenTypes_enum fromJson$Enum$authRefreshTokenTypes_enum(
    String value) {
  switch (value) {
    case r'pat':
      return Enum$authRefreshTokenTypes_enum.pat;
    case r'regular':
      return Enum$authRefreshTokenTypes_enum.regular;
    default:
      return Enum$authRefreshTokenTypes_enum.$unknown;
  }
}

enum Enum$authRefreshTokenTypes_select_column { comment, value, $unknown }

String toJson$Enum$authRefreshTokenTypes_select_column(
    Enum$authRefreshTokenTypes_select_column e) {
  switch (e) {
    case Enum$authRefreshTokenTypes_select_column.comment:
      return r'comment';
    case Enum$authRefreshTokenTypes_select_column.value:
      return r'value';
    case Enum$authRefreshTokenTypes_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authRefreshTokenTypes_select_column
    fromJson$Enum$authRefreshTokenTypes_select_column(String value) {
  switch (value) {
    case r'comment':
      return Enum$authRefreshTokenTypes_select_column.comment;
    case r'value':
      return Enum$authRefreshTokenTypes_select_column.value;
    default:
      return Enum$authRefreshTokenTypes_select_column.$unknown;
  }
}

enum Enum$authRefreshTokenTypes_update_column { comment, value, $unknown }

String toJson$Enum$authRefreshTokenTypes_update_column(
    Enum$authRefreshTokenTypes_update_column e) {
  switch (e) {
    case Enum$authRefreshTokenTypes_update_column.comment:
      return r'comment';
    case Enum$authRefreshTokenTypes_update_column.value:
      return r'value';
    case Enum$authRefreshTokenTypes_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authRefreshTokenTypes_update_column
    fromJson$Enum$authRefreshTokenTypes_update_column(String value) {
  switch (value) {
    case r'comment':
      return Enum$authRefreshTokenTypes_update_column.comment;
    case r'value':
      return Enum$authRefreshTokenTypes_update_column.value;
    default:
      return Enum$authRefreshTokenTypes_update_column.$unknown;
  }
}

enum Enum$authRefreshTokens_constraint { refresh_tokens_pkey, $unknown }

String toJson$Enum$authRefreshTokens_constraint(
    Enum$authRefreshTokens_constraint e) {
  switch (e) {
    case Enum$authRefreshTokens_constraint.refresh_tokens_pkey:
      return r'refresh_tokens_pkey';
    case Enum$authRefreshTokens_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authRefreshTokens_constraint fromJson$Enum$authRefreshTokens_constraint(
    String value) {
  switch (value) {
    case r'refresh_tokens_pkey':
      return Enum$authRefreshTokens_constraint.refresh_tokens_pkey;
    default:
      return Enum$authRefreshTokens_constraint.$unknown;
  }
}

enum Enum$authRefreshTokens_select_column {
  createdAt,
  expiresAt,
  id,
  metadata,
  refreshTokenHash,
  type,
  userId,
  $unknown
}

String toJson$Enum$authRefreshTokens_select_column(
    Enum$authRefreshTokens_select_column e) {
  switch (e) {
    case Enum$authRefreshTokens_select_column.createdAt:
      return r'createdAt';
    case Enum$authRefreshTokens_select_column.expiresAt:
      return r'expiresAt';
    case Enum$authRefreshTokens_select_column.id:
      return r'id';
    case Enum$authRefreshTokens_select_column.metadata:
      return r'metadata';
    case Enum$authRefreshTokens_select_column.refreshTokenHash:
      return r'refreshTokenHash';
    case Enum$authRefreshTokens_select_column.type:
      return r'type';
    case Enum$authRefreshTokens_select_column.userId:
      return r'userId';
    case Enum$authRefreshTokens_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authRefreshTokens_select_column
    fromJson$Enum$authRefreshTokens_select_column(String value) {
  switch (value) {
    case r'createdAt':
      return Enum$authRefreshTokens_select_column.createdAt;
    case r'expiresAt':
      return Enum$authRefreshTokens_select_column.expiresAt;
    case r'id':
      return Enum$authRefreshTokens_select_column.id;
    case r'metadata':
      return Enum$authRefreshTokens_select_column.metadata;
    case r'refreshTokenHash':
      return Enum$authRefreshTokens_select_column.refreshTokenHash;
    case r'type':
      return Enum$authRefreshTokens_select_column.type;
    case r'userId':
      return Enum$authRefreshTokens_select_column.userId;
    default:
      return Enum$authRefreshTokens_select_column.$unknown;
  }
}

enum Enum$authRefreshTokens_update_column {
  createdAt,
  expiresAt,
  id,
  metadata,
  refreshTokenHash,
  type,
  userId,
  $unknown
}

String toJson$Enum$authRefreshTokens_update_column(
    Enum$authRefreshTokens_update_column e) {
  switch (e) {
    case Enum$authRefreshTokens_update_column.createdAt:
      return r'createdAt';
    case Enum$authRefreshTokens_update_column.expiresAt:
      return r'expiresAt';
    case Enum$authRefreshTokens_update_column.id:
      return r'id';
    case Enum$authRefreshTokens_update_column.metadata:
      return r'metadata';
    case Enum$authRefreshTokens_update_column.refreshTokenHash:
      return r'refreshTokenHash';
    case Enum$authRefreshTokens_update_column.type:
      return r'type';
    case Enum$authRefreshTokens_update_column.userId:
      return r'userId';
    case Enum$authRefreshTokens_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authRefreshTokens_update_column
    fromJson$Enum$authRefreshTokens_update_column(String value) {
  switch (value) {
    case r'createdAt':
      return Enum$authRefreshTokens_update_column.createdAt;
    case r'expiresAt':
      return Enum$authRefreshTokens_update_column.expiresAt;
    case r'id':
      return Enum$authRefreshTokens_update_column.id;
    case r'metadata':
      return Enum$authRefreshTokens_update_column.metadata;
    case r'refreshTokenHash':
      return Enum$authRefreshTokens_update_column.refreshTokenHash;
    case r'type':
      return Enum$authRefreshTokens_update_column.type;
    case r'userId':
      return Enum$authRefreshTokens_update_column.userId;
    default:
      return Enum$authRefreshTokens_update_column.$unknown;
  }
}

enum Enum$authRoles_constraint { roles_pkey, $unknown }

String toJson$Enum$authRoles_constraint(Enum$authRoles_constraint e) {
  switch (e) {
    case Enum$authRoles_constraint.roles_pkey:
      return r'roles_pkey';
    case Enum$authRoles_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authRoles_constraint fromJson$Enum$authRoles_constraint(String value) {
  switch (value) {
    case r'roles_pkey':
      return Enum$authRoles_constraint.roles_pkey;
    default:
      return Enum$authRoles_constraint.$unknown;
  }
}

enum Enum$authRoles_select_column { role, $unknown }

String toJson$Enum$authRoles_select_column(Enum$authRoles_select_column e) {
  switch (e) {
    case Enum$authRoles_select_column.role:
      return r'role';
    case Enum$authRoles_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authRoles_select_column fromJson$Enum$authRoles_select_column(
    String value) {
  switch (value) {
    case r'role':
      return Enum$authRoles_select_column.role;
    default:
      return Enum$authRoles_select_column.$unknown;
  }
}

enum Enum$authRoles_update_column { role, $unknown }

String toJson$Enum$authRoles_update_column(Enum$authRoles_update_column e) {
  switch (e) {
    case Enum$authRoles_update_column.role:
      return r'role';
    case Enum$authRoles_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authRoles_update_column fromJson$Enum$authRoles_update_column(
    String value) {
  switch (value) {
    case r'role':
      return Enum$authRoles_update_column.role;
    default:
      return Enum$authRoles_update_column.$unknown;
  }
}

enum Enum$authUserProviders_constraint {
  user_providers_pkey,
  user_providers_provider_id_provider_user_id_key,
  user_providers_user_id_provider_id_key,
  $unknown
}

String toJson$Enum$authUserProviders_constraint(
    Enum$authUserProviders_constraint e) {
  switch (e) {
    case Enum$authUserProviders_constraint.user_providers_pkey:
      return r'user_providers_pkey';
    case Enum$authUserProviders_constraint
          .user_providers_provider_id_provider_user_id_key:
      return r'user_providers_provider_id_provider_user_id_key';
    case Enum$authUserProviders_constraint
          .user_providers_user_id_provider_id_key:
      return r'user_providers_user_id_provider_id_key';
    case Enum$authUserProviders_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authUserProviders_constraint fromJson$Enum$authUserProviders_constraint(
    String value) {
  switch (value) {
    case r'user_providers_pkey':
      return Enum$authUserProviders_constraint.user_providers_pkey;
    case r'user_providers_provider_id_provider_user_id_key':
      return Enum$authUserProviders_constraint
          .user_providers_provider_id_provider_user_id_key;
    case r'user_providers_user_id_provider_id_key':
      return Enum$authUserProviders_constraint
          .user_providers_user_id_provider_id_key;
    default:
      return Enum$authUserProviders_constraint.$unknown;
  }
}

enum Enum$authUserProviders_select_column {
  accessToken,
  createdAt,
  id,
  providerId,
  providerUserId,
  refreshToken,
  updatedAt,
  userId,
  $unknown
}

String toJson$Enum$authUserProviders_select_column(
    Enum$authUserProviders_select_column e) {
  switch (e) {
    case Enum$authUserProviders_select_column.accessToken:
      return r'accessToken';
    case Enum$authUserProviders_select_column.createdAt:
      return r'createdAt';
    case Enum$authUserProviders_select_column.id:
      return r'id';
    case Enum$authUserProviders_select_column.providerId:
      return r'providerId';
    case Enum$authUserProviders_select_column.providerUserId:
      return r'providerUserId';
    case Enum$authUserProviders_select_column.refreshToken:
      return r'refreshToken';
    case Enum$authUserProviders_select_column.updatedAt:
      return r'updatedAt';
    case Enum$authUserProviders_select_column.userId:
      return r'userId';
    case Enum$authUserProviders_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authUserProviders_select_column
    fromJson$Enum$authUserProviders_select_column(String value) {
  switch (value) {
    case r'accessToken':
      return Enum$authUserProviders_select_column.accessToken;
    case r'createdAt':
      return Enum$authUserProviders_select_column.createdAt;
    case r'id':
      return Enum$authUserProviders_select_column.id;
    case r'providerId':
      return Enum$authUserProviders_select_column.providerId;
    case r'providerUserId':
      return Enum$authUserProviders_select_column.providerUserId;
    case r'refreshToken':
      return Enum$authUserProviders_select_column.refreshToken;
    case r'updatedAt':
      return Enum$authUserProviders_select_column.updatedAt;
    case r'userId':
      return Enum$authUserProviders_select_column.userId;
    default:
      return Enum$authUserProviders_select_column.$unknown;
  }
}

enum Enum$authUserProviders_update_column {
  accessToken,
  createdAt,
  id,
  providerId,
  providerUserId,
  refreshToken,
  updatedAt,
  userId,
  $unknown
}

String toJson$Enum$authUserProviders_update_column(
    Enum$authUserProviders_update_column e) {
  switch (e) {
    case Enum$authUserProviders_update_column.accessToken:
      return r'accessToken';
    case Enum$authUserProviders_update_column.createdAt:
      return r'createdAt';
    case Enum$authUserProviders_update_column.id:
      return r'id';
    case Enum$authUserProviders_update_column.providerId:
      return r'providerId';
    case Enum$authUserProviders_update_column.providerUserId:
      return r'providerUserId';
    case Enum$authUserProviders_update_column.refreshToken:
      return r'refreshToken';
    case Enum$authUserProviders_update_column.updatedAt:
      return r'updatedAt';
    case Enum$authUserProviders_update_column.userId:
      return r'userId';
    case Enum$authUserProviders_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authUserProviders_update_column
    fromJson$Enum$authUserProviders_update_column(String value) {
  switch (value) {
    case r'accessToken':
      return Enum$authUserProviders_update_column.accessToken;
    case r'createdAt':
      return Enum$authUserProviders_update_column.createdAt;
    case r'id':
      return Enum$authUserProviders_update_column.id;
    case r'providerId':
      return Enum$authUserProviders_update_column.providerId;
    case r'providerUserId':
      return Enum$authUserProviders_update_column.providerUserId;
    case r'refreshToken':
      return Enum$authUserProviders_update_column.refreshToken;
    case r'updatedAt':
      return Enum$authUserProviders_update_column.updatedAt;
    case r'userId':
      return Enum$authUserProviders_update_column.userId;
    default:
      return Enum$authUserProviders_update_column.$unknown;
  }
}

enum Enum$authUserRoles_constraint {
  user_roles_pkey,
  user_roles_user_id_role_key,
  $unknown
}

String toJson$Enum$authUserRoles_constraint(Enum$authUserRoles_constraint e) {
  switch (e) {
    case Enum$authUserRoles_constraint.user_roles_pkey:
      return r'user_roles_pkey';
    case Enum$authUserRoles_constraint.user_roles_user_id_role_key:
      return r'user_roles_user_id_role_key';
    case Enum$authUserRoles_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authUserRoles_constraint fromJson$Enum$authUserRoles_constraint(
    String value) {
  switch (value) {
    case r'user_roles_pkey':
      return Enum$authUserRoles_constraint.user_roles_pkey;
    case r'user_roles_user_id_role_key':
      return Enum$authUserRoles_constraint.user_roles_user_id_role_key;
    default:
      return Enum$authUserRoles_constraint.$unknown;
  }
}

enum Enum$authUserRoles_select_column { createdAt, id, role, userId, $unknown }

String toJson$Enum$authUserRoles_select_column(
    Enum$authUserRoles_select_column e) {
  switch (e) {
    case Enum$authUserRoles_select_column.createdAt:
      return r'createdAt';
    case Enum$authUserRoles_select_column.id:
      return r'id';
    case Enum$authUserRoles_select_column.role:
      return r'role';
    case Enum$authUserRoles_select_column.userId:
      return r'userId';
    case Enum$authUserRoles_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authUserRoles_select_column fromJson$Enum$authUserRoles_select_column(
    String value) {
  switch (value) {
    case r'createdAt':
      return Enum$authUserRoles_select_column.createdAt;
    case r'id':
      return Enum$authUserRoles_select_column.id;
    case r'role':
      return Enum$authUserRoles_select_column.role;
    case r'userId':
      return Enum$authUserRoles_select_column.userId;
    default:
      return Enum$authUserRoles_select_column.$unknown;
  }
}

enum Enum$authUserRoles_update_column { createdAt, id, role, userId, $unknown }

String toJson$Enum$authUserRoles_update_column(
    Enum$authUserRoles_update_column e) {
  switch (e) {
    case Enum$authUserRoles_update_column.createdAt:
      return r'createdAt';
    case Enum$authUserRoles_update_column.id:
      return r'id';
    case Enum$authUserRoles_update_column.role:
      return r'role';
    case Enum$authUserRoles_update_column.userId:
      return r'userId';
    case Enum$authUserRoles_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authUserRoles_update_column fromJson$Enum$authUserRoles_update_column(
    String value) {
  switch (value) {
    case r'createdAt':
      return Enum$authUserRoles_update_column.createdAt;
    case r'id':
      return Enum$authUserRoles_update_column.id;
    case r'role':
      return Enum$authUserRoles_update_column.role;
    case r'userId':
      return Enum$authUserRoles_update_column.userId;
    default:
      return Enum$authUserRoles_update_column.$unknown;
  }
}

enum Enum$authUserSecurityKeys_constraint {
  user_security_key_credential_id_key,
  user_security_keys_pkey,
  $unknown
}

String toJson$Enum$authUserSecurityKeys_constraint(
    Enum$authUserSecurityKeys_constraint e) {
  switch (e) {
    case Enum$authUserSecurityKeys_constraint
          .user_security_key_credential_id_key:
      return r'user_security_key_credential_id_key';
    case Enum$authUserSecurityKeys_constraint.user_security_keys_pkey:
      return r'user_security_keys_pkey';
    case Enum$authUserSecurityKeys_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$authUserSecurityKeys_constraint
    fromJson$Enum$authUserSecurityKeys_constraint(String value) {
  switch (value) {
    case r'user_security_key_credential_id_key':
      return Enum$authUserSecurityKeys_constraint
          .user_security_key_credential_id_key;
    case r'user_security_keys_pkey':
      return Enum$authUserSecurityKeys_constraint.user_security_keys_pkey;
    default:
      return Enum$authUserSecurityKeys_constraint.$unknown;
  }
}

enum Enum$authUserSecurityKeys_select_column {
  counter,
  credentialId,
  credentialPublicKey,
  id,
  nickname,
  transports,
  userId,
  $unknown
}

String toJson$Enum$authUserSecurityKeys_select_column(
    Enum$authUserSecurityKeys_select_column e) {
  switch (e) {
    case Enum$authUserSecurityKeys_select_column.counter:
      return r'counter';
    case Enum$authUserSecurityKeys_select_column.credentialId:
      return r'credentialId';
    case Enum$authUserSecurityKeys_select_column.credentialPublicKey:
      return r'credentialPublicKey';
    case Enum$authUserSecurityKeys_select_column.id:
      return r'id';
    case Enum$authUserSecurityKeys_select_column.nickname:
      return r'nickname';
    case Enum$authUserSecurityKeys_select_column.transports:
      return r'transports';
    case Enum$authUserSecurityKeys_select_column.userId:
      return r'userId';
    case Enum$authUserSecurityKeys_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$authUserSecurityKeys_select_column
    fromJson$Enum$authUserSecurityKeys_select_column(String value) {
  switch (value) {
    case r'counter':
      return Enum$authUserSecurityKeys_select_column.counter;
    case r'credentialId':
      return Enum$authUserSecurityKeys_select_column.credentialId;
    case r'credentialPublicKey':
      return Enum$authUserSecurityKeys_select_column.credentialPublicKey;
    case r'id':
      return Enum$authUserSecurityKeys_select_column.id;
    case r'nickname':
      return Enum$authUserSecurityKeys_select_column.nickname;
    case r'transports':
      return Enum$authUserSecurityKeys_select_column.transports;
    case r'userId':
      return Enum$authUserSecurityKeys_select_column.userId;
    default:
      return Enum$authUserSecurityKeys_select_column.$unknown;
  }
}

enum Enum$authUserSecurityKeys_update_column {
  counter,
  credentialId,
  credentialPublicKey,
  id,
  nickname,
  transports,
  userId,
  $unknown
}

String toJson$Enum$authUserSecurityKeys_update_column(
    Enum$authUserSecurityKeys_update_column e) {
  switch (e) {
    case Enum$authUserSecurityKeys_update_column.counter:
      return r'counter';
    case Enum$authUserSecurityKeys_update_column.credentialId:
      return r'credentialId';
    case Enum$authUserSecurityKeys_update_column.credentialPublicKey:
      return r'credentialPublicKey';
    case Enum$authUserSecurityKeys_update_column.id:
      return r'id';
    case Enum$authUserSecurityKeys_update_column.nickname:
      return r'nickname';
    case Enum$authUserSecurityKeys_update_column.transports:
      return r'transports';
    case Enum$authUserSecurityKeys_update_column.userId:
      return r'userId';
    case Enum$authUserSecurityKeys_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$authUserSecurityKeys_update_column
    fromJson$Enum$authUserSecurityKeys_update_column(String value) {
  switch (value) {
    case r'counter':
      return Enum$authUserSecurityKeys_update_column.counter;
    case r'credentialId':
      return Enum$authUserSecurityKeys_update_column.credentialId;
    case r'credentialPublicKey':
      return Enum$authUserSecurityKeys_update_column.credentialPublicKey;
    case r'id':
      return Enum$authUserSecurityKeys_update_column.id;
    case r'nickname':
      return Enum$authUserSecurityKeys_update_column.nickname;
    case r'transports':
      return Enum$authUserSecurityKeys_update_column.transports;
    case r'userId':
      return Enum$authUserSecurityKeys_update_column.userId;
    default:
      return Enum$authUserSecurityKeys_update_column.$unknown;
  }
}

enum Enum$blog_constraint { blog_pkey, $unknown }

String toJson$Enum$blog_constraint(Enum$blog_constraint e) {
  switch (e) {
    case Enum$blog_constraint.blog_pkey:
      return r'blog_pkey';
    case Enum$blog_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$blog_constraint fromJson$Enum$blog_constraint(String value) {
  switch (value) {
    case r'blog_pkey':
      return Enum$blog_constraint.blog_pkey;
    default:
      return Enum$blog_constraint.$unknown;
  }
}

enum Enum$blog_select_column {
  blog_content,
  blog_date,
  blog_id,
  blog_title,
  created_at,
  updated_at,
  $unknown
}

String toJson$Enum$blog_select_column(Enum$blog_select_column e) {
  switch (e) {
    case Enum$blog_select_column.blog_content:
      return r'blog_content';
    case Enum$blog_select_column.blog_date:
      return r'blog_date';
    case Enum$blog_select_column.blog_id:
      return r'blog_id';
    case Enum$blog_select_column.blog_title:
      return r'blog_title';
    case Enum$blog_select_column.created_at:
      return r'created_at';
    case Enum$blog_select_column.updated_at:
      return r'updated_at';
    case Enum$blog_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$blog_select_column fromJson$Enum$blog_select_column(String value) {
  switch (value) {
    case r'blog_content':
      return Enum$blog_select_column.blog_content;
    case r'blog_date':
      return Enum$blog_select_column.blog_date;
    case r'blog_id':
      return Enum$blog_select_column.blog_id;
    case r'blog_title':
      return Enum$blog_select_column.blog_title;
    case r'created_at':
      return Enum$blog_select_column.created_at;
    case r'updated_at':
      return Enum$blog_select_column.updated_at;
    default:
      return Enum$blog_select_column.$unknown;
  }
}

enum Enum$blog_update_column {
  blog_content,
  blog_date,
  blog_title,
  created_at,
  updated_at,
  $unknown
}

String toJson$Enum$blog_update_column(Enum$blog_update_column e) {
  switch (e) {
    case Enum$blog_update_column.blog_content:
      return r'blog_content';
    case Enum$blog_update_column.blog_date:
      return r'blog_date';
    case Enum$blog_update_column.blog_title:
      return r'blog_title';
    case Enum$blog_update_column.created_at:
      return r'created_at';
    case Enum$blog_update_column.updated_at:
      return r'updated_at';
    case Enum$blog_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$blog_update_column fromJson$Enum$blog_update_column(String value) {
  switch (value) {
    case r'blog_content':
      return Enum$blog_update_column.blog_content;
    case r'blog_date':
      return Enum$blog_update_column.blog_date;
    case r'blog_title':
      return Enum$blog_update_column.blog_title;
    case r'created_at':
      return Enum$blog_update_column.created_at;
    case r'updated_at':
      return Enum$blog_update_column.updated_at;
    default:
      return Enum$blog_update_column.$unknown;
  }
}

enum Enum$buckets_constraint { buckets_pkey, $unknown }

String toJson$Enum$buckets_constraint(Enum$buckets_constraint e) {
  switch (e) {
    case Enum$buckets_constraint.buckets_pkey:
      return r'buckets_pkey';
    case Enum$buckets_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$buckets_constraint fromJson$Enum$buckets_constraint(String value) {
  switch (value) {
    case r'buckets_pkey':
      return Enum$buckets_constraint.buckets_pkey;
    default:
      return Enum$buckets_constraint.$unknown;
  }
}

enum Enum$buckets_select_column {
  cacheControl,
  createdAt,
  downloadExpiration,
  id,
  maxUploadFileSize,
  minUploadFileSize,
  presignedUrlsEnabled,
  updatedAt,
  $unknown
}

String toJson$Enum$buckets_select_column(Enum$buckets_select_column e) {
  switch (e) {
    case Enum$buckets_select_column.cacheControl:
      return r'cacheControl';
    case Enum$buckets_select_column.createdAt:
      return r'createdAt';
    case Enum$buckets_select_column.downloadExpiration:
      return r'downloadExpiration';
    case Enum$buckets_select_column.id:
      return r'id';
    case Enum$buckets_select_column.maxUploadFileSize:
      return r'maxUploadFileSize';
    case Enum$buckets_select_column.minUploadFileSize:
      return r'minUploadFileSize';
    case Enum$buckets_select_column.presignedUrlsEnabled:
      return r'presignedUrlsEnabled';
    case Enum$buckets_select_column.updatedAt:
      return r'updatedAt';
    case Enum$buckets_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$buckets_select_column fromJson$Enum$buckets_select_column(String value) {
  switch (value) {
    case r'cacheControl':
      return Enum$buckets_select_column.cacheControl;
    case r'createdAt':
      return Enum$buckets_select_column.createdAt;
    case r'downloadExpiration':
      return Enum$buckets_select_column.downloadExpiration;
    case r'id':
      return Enum$buckets_select_column.id;
    case r'maxUploadFileSize':
      return Enum$buckets_select_column.maxUploadFileSize;
    case r'minUploadFileSize':
      return Enum$buckets_select_column.minUploadFileSize;
    case r'presignedUrlsEnabled':
      return Enum$buckets_select_column.presignedUrlsEnabled;
    case r'updatedAt':
      return Enum$buckets_select_column.updatedAt;
    default:
      return Enum$buckets_select_column.$unknown;
  }
}

enum Enum$buckets_update_column {
  cacheControl,
  createdAt,
  downloadExpiration,
  id,
  maxUploadFileSize,
  minUploadFileSize,
  presignedUrlsEnabled,
  updatedAt,
  $unknown
}

String toJson$Enum$buckets_update_column(Enum$buckets_update_column e) {
  switch (e) {
    case Enum$buckets_update_column.cacheControl:
      return r'cacheControl';
    case Enum$buckets_update_column.createdAt:
      return r'createdAt';
    case Enum$buckets_update_column.downloadExpiration:
      return r'downloadExpiration';
    case Enum$buckets_update_column.id:
      return r'id';
    case Enum$buckets_update_column.maxUploadFileSize:
      return r'maxUploadFileSize';
    case Enum$buckets_update_column.minUploadFileSize:
      return r'minUploadFileSize';
    case Enum$buckets_update_column.presignedUrlsEnabled:
      return r'presignedUrlsEnabled';
    case Enum$buckets_update_column.updatedAt:
      return r'updatedAt';
    case Enum$buckets_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$buckets_update_column fromJson$Enum$buckets_update_column(String value) {
  switch (value) {
    case r'cacheControl':
      return Enum$buckets_update_column.cacheControl;
    case r'createdAt':
      return Enum$buckets_update_column.createdAt;
    case r'downloadExpiration':
      return Enum$buckets_update_column.downloadExpiration;
    case r'id':
      return Enum$buckets_update_column.id;
    case r'maxUploadFileSize':
      return Enum$buckets_update_column.maxUploadFileSize;
    case r'minUploadFileSize':
      return Enum$buckets_update_column.minUploadFileSize;
    case r'presignedUrlsEnabled':
      return Enum$buckets_update_column.presignedUrlsEnabled;
    case r'updatedAt':
      return Enum$buckets_update_column.updatedAt;
    default:
      return Enum$buckets_update_column.$unknown;
  }
}

enum Enum$cs_message_constraint { cs_message_pkey, $unknown }

String toJson$Enum$cs_message_constraint(Enum$cs_message_constraint e) {
  switch (e) {
    case Enum$cs_message_constraint.cs_message_pkey:
      return r'cs_message_pkey';
    case Enum$cs_message_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$cs_message_constraint fromJson$Enum$cs_message_constraint(String value) {
  switch (value) {
    case r'cs_message_pkey':
      return Enum$cs_message_constraint.cs_message_pkey;
    default:
      return Enum$cs_message_constraint.$unknown;
  }
}

enum Enum$cs_message_select_column {
  created_at,
  cs_agent_user_id,
  cs_message_content,
  cs_message_date,
  cs_message_id,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$cs_message_select_column(Enum$cs_message_select_column e) {
  switch (e) {
    case Enum$cs_message_select_column.created_at:
      return r'created_at';
    case Enum$cs_message_select_column.cs_agent_user_id:
      return r'cs_agent_user_id';
    case Enum$cs_message_select_column.cs_message_content:
      return r'cs_message_content';
    case Enum$cs_message_select_column.cs_message_date:
      return r'cs_message_date';
    case Enum$cs_message_select_column.cs_message_id:
      return r'cs_message_id';
    case Enum$cs_message_select_column.updated_at:
      return r'updated_at';
    case Enum$cs_message_select_column.user_id:
      return r'user_id';
    case Enum$cs_message_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$cs_message_select_column fromJson$Enum$cs_message_select_column(
    String value) {
  switch (value) {
    case r'created_at':
      return Enum$cs_message_select_column.created_at;
    case r'cs_agent_user_id':
      return Enum$cs_message_select_column.cs_agent_user_id;
    case r'cs_message_content':
      return Enum$cs_message_select_column.cs_message_content;
    case r'cs_message_date':
      return Enum$cs_message_select_column.cs_message_date;
    case r'cs_message_id':
      return Enum$cs_message_select_column.cs_message_id;
    case r'updated_at':
      return Enum$cs_message_select_column.updated_at;
    case r'user_id':
      return Enum$cs_message_select_column.user_id;
    default:
      return Enum$cs_message_select_column.$unknown;
  }
}

enum Enum$cs_message_update_column {
  created_at,
  cs_agent_user_id,
  cs_message_content,
  cs_message_date,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$cs_message_update_column(Enum$cs_message_update_column e) {
  switch (e) {
    case Enum$cs_message_update_column.created_at:
      return r'created_at';
    case Enum$cs_message_update_column.cs_agent_user_id:
      return r'cs_agent_user_id';
    case Enum$cs_message_update_column.cs_message_content:
      return r'cs_message_content';
    case Enum$cs_message_update_column.cs_message_date:
      return r'cs_message_date';
    case Enum$cs_message_update_column.updated_at:
      return r'updated_at';
    case Enum$cs_message_update_column.user_id:
      return r'user_id';
    case Enum$cs_message_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$cs_message_update_column fromJson$Enum$cs_message_update_column(
    String value) {
  switch (value) {
    case r'created_at':
      return Enum$cs_message_update_column.created_at;
    case r'cs_agent_user_id':
      return Enum$cs_message_update_column.cs_agent_user_id;
    case r'cs_message_content':
      return Enum$cs_message_update_column.cs_message_content;
    case r'cs_message_date':
      return Enum$cs_message_update_column.cs_message_date;
    case r'updated_at':
      return Enum$cs_message_update_column.updated_at;
    case r'user_id':
      return Enum$cs_message_update_column.user_id;
    default:
      return Enum$cs_message_update_column.$unknown;
  }
}

enum Enum$cursor_ordering { ASC, DESC, $unknown }

String toJson$Enum$cursor_ordering(Enum$cursor_ordering e) {
  switch (e) {
    case Enum$cursor_ordering.ASC:
      return r'ASC';
    case Enum$cursor_ordering.DESC:
      return r'DESC';
    case Enum$cursor_ordering.$unknown:
      return r'$unknown';
  }
}

Enum$cursor_ordering fromJson$Enum$cursor_ordering(String value) {
  switch (value) {
    case r'ASC':
      return Enum$cursor_ordering.ASC;
    case r'DESC':
      return Enum$cursor_ordering.DESC;
    default:
      return Enum$cursor_ordering.$unknown;
  }
}

enum Enum$files_constraint { files_pkey, $unknown }

String toJson$Enum$files_constraint(Enum$files_constraint e) {
  switch (e) {
    case Enum$files_constraint.files_pkey:
      return r'files_pkey';
    case Enum$files_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$files_constraint fromJson$Enum$files_constraint(String value) {
  switch (value) {
    case r'files_pkey':
      return Enum$files_constraint.files_pkey;
    default:
      return Enum$files_constraint.$unknown;
  }
}

enum Enum$files_select_column {
  bucketId,
  createdAt,
  etag,
  id,
  isUploaded,
  mimeType,
  name,
  size,
  updatedAt,
  uploadedByUserId,
  $unknown
}

String toJson$Enum$files_select_column(Enum$files_select_column e) {
  switch (e) {
    case Enum$files_select_column.bucketId:
      return r'bucketId';
    case Enum$files_select_column.createdAt:
      return r'createdAt';
    case Enum$files_select_column.etag:
      return r'etag';
    case Enum$files_select_column.id:
      return r'id';
    case Enum$files_select_column.isUploaded:
      return r'isUploaded';
    case Enum$files_select_column.mimeType:
      return r'mimeType';
    case Enum$files_select_column.name:
      return r'name';
    case Enum$files_select_column.size:
      return r'size';
    case Enum$files_select_column.updatedAt:
      return r'updatedAt';
    case Enum$files_select_column.uploadedByUserId:
      return r'uploadedByUserId';
    case Enum$files_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$files_select_column fromJson$Enum$files_select_column(String value) {
  switch (value) {
    case r'bucketId':
      return Enum$files_select_column.bucketId;
    case r'createdAt':
      return Enum$files_select_column.createdAt;
    case r'etag':
      return Enum$files_select_column.etag;
    case r'id':
      return Enum$files_select_column.id;
    case r'isUploaded':
      return Enum$files_select_column.isUploaded;
    case r'mimeType':
      return Enum$files_select_column.mimeType;
    case r'name':
      return Enum$files_select_column.name;
    case r'size':
      return Enum$files_select_column.size;
    case r'updatedAt':
      return Enum$files_select_column.updatedAt;
    case r'uploadedByUserId':
      return Enum$files_select_column.uploadedByUserId;
    default:
      return Enum$files_select_column.$unknown;
  }
}

enum Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns {
  isUploaded,
  $unknown
}

String toJson$Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns(
    Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
        e) {
  switch (e) {
    case Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
          .isUploaded:
      return r'isUploaded';
    case Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
    fromJson$Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns(
        String value) {
  switch (value) {
    case r'isUploaded':
      return Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
          .isUploaded;
    default:
      return Enum$files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown;
  }
}

enum Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns {
  isUploaded,
  $unknown
}

String toJson$Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns(
    Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
        e) {
  switch (e) {
    case Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
          .isUploaded:
      return r'isUploaded';
    case Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
    fromJson$Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns(
        String value) {
  switch (value) {
    case r'isUploaded':
      return Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
          .isUploaded;
    default:
      return Enum$files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown;
  }
}

enum Enum$files_update_column {
  bucketId,
  createdAt,
  etag,
  id,
  isUploaded,
  mimeType,
  name,
  size,
  updatedAt,
  uploadedByUserId,
  $unknown
}

String toJson$Enum$files_update_column(Enum$files_update_column e) {
  switch (e) {
    case Enum$files_update_column.bucketId:
      return r'bucketId';
    case Enum$files_update_column.createdAt:
      return r'createdAt';
    case Enum$files_update_column.etag:
      return r'etag';
    case Enum$files_update_column.id:
      return r'id';
    case Enum$files_update_column.isUploaded:
      return r'isUploaded';
    case Enum$files_update_column.mimeType:
      return r'mimeType';
    case Enum$files_update_column.name:
      return r'name';
    case Enum$files_update_column.size:
      return r'size';
    case Enum$files_update_column.updatedAt:
      return r'updatedAt';
    case Enum$files_update_column.uploadedByUserId:
      return r'uploadedByUserId';
    case Enum$files_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$files_update_column fromJson$Enum$files_update_column(String value) {
  switch (value) {
    case r'bucketId':
      return Enum$files_update_column.bucketId;
    case r'createdAt':
      return Enum$files_update_column.createdAt;
    case r'etag':
      return Enum$files_update_column.etag;
    case r'id':
      return Enum$files_update_column.id;
    case r'isUploaded':
      return Enum$files_update_column.isUploaded;
    case r'mimeType':
      return Enum$files_update_column.mimeType;
    case r'name':
      return Enum$files_update_column.name;
    case r'size':
      return Enum$files_update_column.size;
    case r'updatedAt':
      return Enum$files_update_column.updatedAt;
    case r'uploadedByUserId':
      return Enum$files_update_column.uploadedByUserId;
    default:
      return Enum$files_update_column.$unknown;
  }
}

enum Enum$investment_constraint { investment_pkey, $unknown }

String toJson$Enum$investment_constraint(Enum$investment_constraint e) {
  switch (e) {
    case Enum$investment_constraint.investment_pkey:
      return r'investment_pkey';
    case Enum$investment_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$investment_constraint fromJson$Enum$investment_constraint(String value) {
  switch (value) {
    case r'investment_pkey':
      return Enum$investment_constraint.investment_pkey;
    default:
      return Enum$investment_constraint.$unknown;
  }
}

enum Enum$investment_select_column {
  created_at,
  investment_amount,
  investment_id,
  investor_id,
  proposal_id,
  updated_at,
  $unknown
}

String toJson$Enum$investment_select_column(Enum$investment_select_column e) {
  switch (e) {
    case Enum$investment_select_column.created_at:
      return r'created_at';
    case Enum$investment_select_column.investment_amount:
      return r'investment_amount';
    case Enum$investment_select_column.investment_id:
      return r'investment_id';
    case Enum$investment_select_column.investor_id:
      return r'investor_id';
    case Enum$investment_select_column.proposal_id:
      return r'proposal_id';
    case Enum$investment_select_column.updated_at:
      return r'updated_at';
    case Enum$investment_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$investment_select_column fromJson$Enum$investment_select_column(
    String value) {
  switch (value) {
    case r'created_at':
      return Enum$investment_select_column.created_at;
    case r'investment_amount':
      return Enum$investment_select_column.investment_amount;
    case r'investment_id':
      return Enum$investment_select_column.investment_id;
    case r'investor_id':
      return Enum$investment_select_column.investor_id;
    case r'proposal_id':
      return Enum$investment_select_column.proposal_id;
    case r'updated_at':
      return Enum$investment_select_column.updated_at;
    default:
      return Enum$investment_select_column.$unknown;
  }
}

enum Enum$investment_update_column {
  created_at,
  investment_amount,
  investor_id,
  proposal_id,
  updated_at,
  $unknown
}

String toJson$Enum$investment_update_column(Enum$investment_update_column e) {
  switch (e) {
    case Enum$investment_update_column.created_at:
      return r'created_at';
    case Enum$investment_update_column.investment_amount:
      return r'investment_amount';
    case Enum$investment_update_column.investor_id:
      return r'investor_id';
    case Enum$investment_update_column.proposal_id:
      return r'proposal_id';
    case Enum$investment_update_column.updated_at:
      return r'updated_at';
    case Enum$investment_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$investment_update_column fromJson$Enum$investment_update_column(
    String value) {
  switch (value) {
    case r'created_at':
      return Enum$investment_update_column.created_at;
    case r'investment_amount':
      return Enum$investment_update_column.investment_amount;
    case r'investor_id':
      return Enum$investment_update_column.investor_id;
    case r'proposal_id':
      return Enum$investment_update_column.proposal_id;
    case r'updated_at':
      return Enum$investment_update_column.updated_at;
    default:
      return Enum$investment_update_column.$unknown;
  }
}

enum Enum$investor_constraint { investor_pkey, investor_user_id_key, $unknown }

String toJson$Enum$investor_constraint(Enum$investor_constraint e) {
  switch (e) {
    case Enum$investor_constraint.investor_pkey:
      return r'investor_pkey';
    case Enum$investor_constraint.investor_user_id_key:
      return r'investor_user_id_key';
    case Enum$investor_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$investor_constraint fromJson$Enum$investor_constraint(String value) {
  switch (value) {
    case r'investor_pkey':
      return Enum$investor_constraint.investor_pkey;
    case r'investor_user_id_key':
      return Enum$investor_constraint.investor_user_id_key;
    default:
      return Enum$investor_constraint.$unknown;
  }
}

enum Enum$investor_select_column {
  created_at,
  investor_id,
  investor_investment_amount,
  investor_name,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$investor_select_column(Enum$investor_select_column e) {
  switch (e) {
    case Enum$investor_select_column.created_at:
      return r'created_at';
    case Enum$investor_select_column.investor_id:
      return r'investor_id';
    case Enum$investor_select_column.investor_investment_amount:
      return r'investor_investment_amount';
    case Enum$investor_select_column.investor_name:
      return r'investor_name';
    case Enum$investor_select_column.updated_at:
      return r'updated_at';
    case Enum$investor_select_column.user_id:
      return r'user_id';
    case Enum$investor_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$investor_select_column fromJson$Enum$investor_select_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$investor_select_column.created_at;
    case r'investor_id':
      return Enum$investor_select_column.investor_id;
    case r'investor_investment_amount':
      return Enum$investor_select_column.investor_investment_amount;
    case r'investor_name':
      return Enum$investor_select_column.investor_name;
    case r'updated_at':
      return Enum$investor_select_column.updated_at;
    case r'user_id':
      return Enum$investor_select_column.user_id;
    default:
      return Enum$investor_select_column.$unknown;
  }
}

enum Enum$investor_update_column {
  created_at,
  investor_investment_amount,
  investor_name,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$investor_update_column(Enum$investor_update_column e) {
  switch (e) {
    case Enum$investor_update_column.created_at:
      return r'created_at';
    case Enum$investor_update_column.investor_investment_amount:
      return r'investor_investment_amount';
    case Enum$investor_update_column.investor_name:
      return r'investor_name';
    case Enum$investor_update_column.updated_at:
      return r'updated_at';
    case Enum$investor_update_column.user_id:
      return r'user_id';
    case Enum$investor_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$investor_update_column fromJson$Enum$investor_update_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$investor_update_column.created_at;
    case r'investor_investment_amount':
      return Enum$investor_update_column.investor_investment_amount;
    case r'investor_name':
      return Enum$investor_update_column.investor_name;
    case r'updated_at':
      return Enum$investor_update_column.updated_at;
    case r'user_id':
      return Enum$investor_update_column.user_id;
    default:
      return Enum$investor_update_column.$unknown;
  }
}

enum Enum$order_by {
  asc,
  asc_nulls_first,
  asc_nulls_last,
  desc,
  desc_nulls_first,
  desc_nulls_last,
  $unknown
}

String toJson$Enum$order_by(Enum$order_by e) {
  switch (e) {
    case Enum$order_by.asc:
      return r'asc';
    case Enum$order_by.asc_nulls_first:
      return r'asc_nulls_first';
    case Enum$order_by.asc_nulls_last:
      return r'asc_nulls_last';
    case Enum$order_by.desc:
      return r'desc';
    case Enum$order_by.desc_nulls_first:
      return r'desc_nulls_first';
    case Enum$order_by.desc_nulls_last:
      return r'desc_nulls_last';
    case Enum$order_by.$unknown:
      return r'$unknown';
  }
}

Enum$order_by fromJson$Enum$order_by(String value) {
  switch (value) {
    case r'asc':
      return Enum$order_by.asc;
    case r'asc_nulls_first':
      return Enum$order_by.asc_nulls_first;
    case r'asc_nulls_last':
      return Enum$order_by.asc_nulls_last;
    case r'desc':
      return Enum$order_by.desc;
    case r'desc_nulls_first':
      return Enum$order_by.desc_nulls_first;
    case r'desc_nulls_last':
      return Enum$order_by.desc_nulls_last;
    default:
      return Enum$order_by.$unknown;
  }
}

enum Enum$payment_due_constraint { payment_due_pkey, $unknown }

String toJson$Enum$payment_due_constraint(Enum$payment_due_constraint e) {
  switch (e) {
    case Enum$payment_due_constraint.payment_due_pkey:
      return r'payment_due_pkey';
    case Enum$payment_due_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$payment_due_constraint fromJson$Enum$payment_due_constraint(String value) {
  switch (value) {
    case r'payment_due_pkey':
      return Enum$payment_due_constraint.payment_due_pkey;
    default:
      return Enum$payment_due_constraint.$unknown;
  }
}

enum Enum$payment_due_select_column {
  created_at,
  deadline,
  fulfilled,
  payment_due,
  payment_due_id,
  umkm_id,
  updated_at,
  $unknown
}

String toJson$Enum$payment_due_select_column(Enum$payment_due_select_column e) {
  switch (e) {
    case Enum$payment_due_select_column.created_at:
      return r'created_at';
    case Enum$payment_due_select_column.deadline:
      return r'deadline';
    case Enum$payment_due_select_column.fulfilled:
      return r'fulfilled';
    case Enum$payment_due_select_column.payment_due:
      return r'payment_due';
    case Enum$payment_due_select_column.payment_due_id:
      return r'payment_due_id';
    case Enum$payment_due_select_column.umkm_id:
      return r'umkm_id';
    case Enum$payment_due_select_column.updated_at:
      return r'updated_at';
    case Enum$payment_due_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$payment_due_select_column fromJson$Enum$payment_due_select_column(
    String value) {
  switch (value) {
    case r'created_at':
      return Enum$payment_due_select_column.created_at;
    case r'deadline':
      return Enum$payment_due_select_column.deadline;
    case r'fulfilled':
      return Enum$payment_due_select_column.fulfilled;
    case r'payment_due':
      return Enum$payment_due_select_column.payment_due;
    case r'payment_due_id':
      return Enum$payment_due_select_column.payment_due_id;
    case r'umkm_id':
      return Enum$payment_due_select_column.umkm_id;
    case r'updated_at':
      return Enum$payment_due_select_column.updated_at;
    default:
      return Enum$payment_due_select_column.$unknown;
  }
}

enum Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns {
  fulfilled,
  $unknown
}

String toJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns(
    Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
        e) {
  switch (e) {
    case Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
          .fulfilled:
      return r'fulfilled';
    case Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
    fromJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns(
        String value) {
  switch (value) {
    case r'fulfilled':
      return Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
          .fulfilled;
    default:
      return Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown;
  }
}

enum Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns {
  fulfilled,
  $unknown
}

String toJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns(
    Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
        e) {
  switch (e) {
    case Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
          .fulfilled:
      return r'fulfilled';
    case Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
    fromJson$Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns(
        String value) {
  switch (value) {
    case r'fulfilled':
      return Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
          .fulfilled;
    default:
      return Enum$payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown;
  }
}

enum Enum$payment_due_update_column {
  created_at,
  deadline,
  fulfilled,
  payment_due,
  payment_due_id,
  umkm_id,
  updated_at,
  $unknown
}

String toJson$Enum$payment_due_update_column(Enum$payment_due_update_column e) {
  switch (e) {
    case Enum$payment_due_update_column.created_at:
      return r'created_at';
    case Enum$payment_due_update_column.deadline:
      return r'deadline';
    case Enum$payment_due_update_column.fulfilled:
      return r'fulfilled';
    case Enum$payment_due_update_column.payment_due:
      return r'payment_due';
    case Enum$payment_due_update_column.payment_due_id:
      return r'payment_due_id';
    case Enum$payment_due_update_column.umkm_id:
      return r'umkm_id';
    case Enum$payment_due_update_column.updated_at:
      return r'updated_at';
    case Enum$payment_due_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$payment_due_update_column fromJson$Enum$payment_due_update_column(
    String value) {
  switch (value) {
    case r'created_at':
      return Enum$payment_due_update_column.created_at;
    case r'deadline':
      return Enum$payment_due_update_column.deadline;
    case r'fulfilled':
      return Enum$payment_due_update_column.fulfilled;
    case r'payment_due':
      return Enum$payment_due_update_column.payment_due;
    case r'payment_due_id':
      return Enum$payment_due_update_column.payment_due_id;
    case r'umkm_id':
      return Enum$payment_due_update_column.umkm_id;
    case r'updated_at':
      return Enum$payment_due_update_column.updated_at;
    default:
      return Enum$payment_due_update_column.$unknown;
  }
}

enum Enum$payment_investment_constraint { payment_investment_pkey, $unknown }

String toJson$Enum$payment_investment_constraint(
    Enum$payment_investment_constraint e) {
  switch (e) {
    case Enum$payment_investment_constraint.payment_investment_pkey:
      return r'payment_investment_pkey';
    case Enum$payment_investment_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$payment_investment_constraint fromJson$Enum$payment_investment_constraint(
    String value) {
  switch (value) {
    case r'payment_investment_pkey':
      return Enum$payment_investment_constraint.payment_investment_pkey;
    default:
      return Enum$payment_investment_constraint.$unknown;
  }
}

enum Enum$payment_investment_select_column {
  created_at,
  investment_id,
  payment_investment_fulfilled,
  payment_investment_id,
  updated_at,
  $unknown
}

String toJson$Enum$payment_investment_select_column(
    Enum$payment_investment_select_column e) {
  switch (e) {
    case Enum$payment_investment_select_column.created_at:
      return r'created_at';
    case Enum$payment_investment_select_column.investment_id:
      return r'investment_id';
    case Enum$payment_investment_select_column.payment_investment_fulfilled:
      return r'payment_investment_fulfilled';
    case Enum$payment_investment_select_column.payment_investment_id:
      return r'payment_investment_id';
    case Enum$payment_investment_select_column.updated_at:
      return r'updated_at';
    case Enum$payment_investment_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$payment_investment_select_column
    fromJson$Enum$payment_investment_select_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$payment_investment_select_column.created_at;
    case r'investment_id':
      return Enum$payment_investment_select_column.investment_id;
    case r'payment_investment_fulfilled':
      return Enum$payment_investment_select_column.payment_investment_fulfilled;
    case r'payment_investment_id':
      return Enum$payment_investment_select_column.payment_investment_id;
    case r'updated_at':
      return Enum$payment_investment_select_column.updated_at;
    default:
      return Enum$payment_investment_select_column.$unknown;
  }
}

enum Enum$payment_investment_update_column {
  created_at,
  investment_id,
  payment_investment_fulfilled,
  payment_investment_id,
  updated_at,
  $unknown
}

String toJson$Enum$payment_investment_update_column(
    Enum$payment_investment_update_column e) {
  switch (e) {
    case Enum$payment_investment_update_column.created_at:
      return r'created_at';
    case Enum$payment_investment_update_column.investment_id:
      return r'investment_id';
    case Enum$payment_investment_update_column.payment_investment_fulfilled:
      return r'payment_investment_fulfilled';
    case Enum$payment_investment_update_column.payment_investment_id:
      return r'payment_investment_id';
    case Enum$payment_investment_update_column.updated_at:
      return r'updated_at';
    case Enum$payment_investment_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$payment_investment_update_column
    fromJson$Enum$payment_investment_update_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$payment_investment_update_column.created_at;
    case r'investment_id':
      return Enum$payment_investment_update_column.investment_id;
    case r'payment_investment_fulfilled':
      return Enum$payment_investment_update_column.payment_investment_fulfilled;
    case r'payment_investment_id':
      return Enum$payment_investment_update_column.payment_investment_id;
    case r'updated_at':
      return Enum$payment_investment_update_column.updated_at;
    default:
      return Enum$payment_investment_update_column.$unknown;
  }
}

enum Enum$profile_constraint { profile_pkey, profile_user_id_key, $unknown }

String toJson$Enum$profile_constraint(Enum$profile_constraint e) {
  switch (e) {
    case Enum$profile_constraint.profile_pkey:
      return r'profile_pkey';
    case Enum$profile_constraint.profile_user_id_key:
      return r'profile_user_id_key';
    case Enum$profile_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$profile_constraint fromJson$Enum$profile_constraint(String value) {
  switch (value) {
    case r'profile_pkey':
      return Enum$profile_constraint.profile_pkey;
    case r'profile_user_id_key':
      return Enum$profile_constraint.profile_user_id_key;
    default:
      return Enum$profile_constraint.$unknown;
  }
}

enum Enum$profile_select_column {
  created_at,
  profile_address,
  profile_first_name,
  profile_id,
  profile_ktp_no,
  profile_last_name,
  profile_npwp_no,
  profile_phone,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$profile_select_column(Enum$profile_select_column e) {
  switch (e) {
    case Enum$profile_select_column.created_at:
      return r'created_at';
    case Enum$profile_select_column.profile_address:
      return r'profile_address';
    case Enum$profile_select_column.profile_first_name:
      return r'profile_first_name';
    case Enum$profile_select_column.profile_id:
      return r'profile_id';
    case Enum$profile_select_column.profile_ktp_no:
      return r'profile_ktp_no';
    case Enum$profile_select_column.profile_last_name:
      return r'profile_last_name';
    case Enum$profile_select_column.profile_npwp_no:
      return r'profile_npwp_no';
    case Enum$profile_select_column.profile_phone:
      return r'profile_phone';
    case Enum$profile_select_column.updated_at:
      return r'updated_at';
    case Enum$profile_select_column.user_id:
      return r'user_id';
    case Enum$profile_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$profile_select_column fromJson$Enum$profile_select_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$profile_select_column.created_at;
    case r'profile_address':
      return Enum$profile_select_column.profile_address;
    case r'profile_first_name':
      return Enum$profile_select_column.profile_first_name;
    case r'profile_id':
      return Enum$profile_select_column.profile_id;
    case r'profile_ktp_no':
      return Enum$profile_select_column.profile_ktp_no;
    case r'profile_last_name':
      return Enum$profile_select_column.profile_last_name;
    case r'profile_npwp_no':
      return Enum$profile_select_column.profile_npwp_no;
    case r'profile_phone':
      return Enum$profile_select_column.profile_phone;
    case r'updated_at':
      return Enum$profile_select_column.updated_at;
    case r'user_id':
      return Enum$profile_select_column.user_id;
    default:
      return Enum$profile_select_column.$unknown;
  }
}

enum Enum$profile_update_column {
  created_at,
  profile_address,
  profile_first_name,
  profile_ktp_no,
  profile_last_name,
  profile_npwp_no,
  profile_phone,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$profile_update_column(Enum$profile_update_column e) {
  switch (e) {
    case Enum$profile_update_column.created_at:
      return r'created_at';
    case Enum$profile_update_column.profile_address:
      return r'profile_address';
    case Enum$profile_update_column.profile_first_name:
      return r'profile_first_name';
    case Enum$profile_update_column.profile_ktp_no:
      return r'profile_ktp_no';
    case Enum$profile_update_column.profile_last_name:
      return r'profile_last_name';
    case Enum$profile_update_column.profile_npwp_no:
      return r'profile_npwp_no';
    case Enum$profile_update_column.profile_phone:
      return r'profile_phone';
    case Enum$profile_update_column.updated_at:
      return r'updated_at';
    case Enum$profile_update_column.user_id:
      return r'user_id';
    case Enum$profile_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$profile_update_column fromJson$Enum$profile_update_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$profile_update_column.created_at;
    case r'profile_address':
      return Enum$profile_update_column.profile_address;
    case r'profile_first_name':
      return Enum$profile_update_column.profile_first_name;
    case r'profile_ktp_no':
      return Enum$profile_update_column.profile_ktp_no;
    case r'profile_last_name':
      return Enum$profile_update_column.profile_last_name;
    case r'profile_npwp_no':
      return Enum$profile_update_column.profile_npwp_no;
    case r'profile_phone':
      return Enum$profile_update_column.profile_phone;
    case r'updated_at':
      return Enum$profile_update_column.updated_at;
    case r'user_id':
      return Enum$profile_update_column.user_id;
    default:
      return Enum$profile_update_column.$unknown;
  }
}

enum Enum$proposal_constraint { proposal_pkey, $unknown }

String toJson$Enum$proposal_constraint(Enum$proposal_constraint e) {
  switch (e) {
    case Enum$proposal_constraint.proposal_pkey:
      return r'proposal_pkey';
    case Enum$proposal_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$proposal_constraint fromJson$Enum$proposal_constraint(String value) {
  switch (value) {
    case r'proposal_pkey':
      return Enum$proposal_constraint.proposal_pkey;
    default:
      return Enum$proposal_constraint.$unknown;
  }
}

enum Enum$proposal_select_column {
  created_at,
  proposal_amount,
  proposal_approved,
  proposal_content,
  proposal_date,
  proposal_id,
  proposal_title,
  umkm_id,
  updated_at,
  $unknown
}

String toJson$Enum$proposal_select_column(Enum$proposal_select_column e) {
  switch (e) {
    case Enum$proposal_select_column.created_at:
      return r'created_at';
    case Enum$proposal_select_column.proposal_amount:
      return r'proposal_amount';
    case Enum$proposal_select_column.proposal_approved:
      return r'proposal_approved';
    case Enum$proposal_select_column.proposal_content:
      return r'proposal_content';
    case Enum$proposal_select_column.proposal_date:
      return r'proposal_date';
    case Enum$proposal_select_column.proposal_id:
      return r'proposal_id';
    case Enum$proposal_select_column.proposal_title:
      return r'proposal_title';
    case Enum$proposal_select_column.umkm_id:
      return r'umkm_id';
    case Enum$proposal_select_column.updated_at:
      return r'updated_at';
    case Enum$proposal_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$proposal_select_column fromJson$Enum$proposal_select_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$proposal_select_column.created_at;
    case r'proposal_amount':
      return Enum$proposal_select_column.proposal_amount;
    case r'proposal_approved':
      return Enum$proposal_select_column.proposal_approved;
    case r'proposal_content':
      return Enum$proposal_select_column.proposal_content;
    case r'proposal_date':
      return Enum$proposal_select_column.proposal_date;
    case r'proposal_id':
      return Enum$proposal_select_column.proposal_id;
    case r'proposal_title':
      return Enum$proposal_select_column.proposal_title;
    case r'umkm_id':
      return Enum$proposal_select_column.umkm_id;
    case r'updated_at':
      return Enum$proposal_select_column.updated_at;
    default:
      return Enum$proposal_select_column.$unknown;
  }
}

enum Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns {
  proposal_approved,
  $unknown
}

String toJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns(
    Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
        e) {
  switch (e) {
    case Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
          .proposal_approved:
      return r'proposal_approved';
    case Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
    fromJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns(
        String value) {
  switch (value) {
    case r'proposal_approved':
      return Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
          .proposal_approved;
    default:
      return Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown;
  }
}

enum Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns {
  proposal_approved,
  $unknown
}

String toJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns(
    Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
        e) {
  switch (e) {
    case Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
          .proposal_approved:
      return r'proposal_approved';
    case Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
    fromJson$Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns(
        String value) {
  switch (value) {
    case r'proposal_approved':
      return Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
          .proposal_approved;
    default:
      return Enum$proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown;
  }
}

enum Enum$proposal_update_column {
  created_at,
  proposal_amount,
  proposal_approved,
  proposal_content,
  proposal_date,
  proposal_title,
  umkm_id,
  updated_at,
  $unknown
}

String toJson$Enum$proposal_update_column(Enum$proposal_update_column e) {
  switch (e) {
    case Enum$proposal_update_column.created_at:
      return r'created_at';
    case Enum$proposal_update_column.proposal_amount:
      return r'proposal_amount';
    case Enum$proposal_update_column.proposal_approved:
      return r'proposal_approved';
    case Enum$proposal_update_column.proposal_content:
      return r'proposal_content';
    case Enum$proposal_update_column.proposal_date:
      return r'proposal_date';
    case Enum$proposal_update_column.proposal_title:
      return r'proposal_title';
    case Enum$proposal_update_column.umkm_id:
      return r'umkm_id';
    case Enum$proposal_update_column.updated_at:
      return r'updated_at';
    case Enum$proposal_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$proposal_update_column fromJson$Enum$proposal_update_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$proposal_update_column.created_at;
    case r'proposal_amount':
      return Enum$proposal_update_column.proposal_amount;
    case r'proposal_approved':
      return Enum$proposal_update_column.proposal_approved;
    case r'proposal_content':
      return Enum$proposal_update_column.proposal_content;
    case r'proposal_date':
      return Enum$proposal_update_column.proposal_date;
    case r'proposal_title':
      return Enum$proposal_update_column.proposal_title;
    case r'umkm_id':
      return Enum$proposal_update_column.umkm_id;
    case r'updated_at':
      return Enum$proposal_update_column.updated_at;
    default:
      return Enum$proposal_update_column.$unknown;
  }
}

enum Enum$umkm_constraint { umkm_pkey, umkm_user_id_key, $unknown }

String toJson$Enum$umkm_constraint(Enum$umkm_constraint e) {
  switch (e) {
    case Enum$umkm_constraint.umkm_pkey:
      return r'umkm_pkey';
    case Enum$umkm_constraint.umkm_user_id_key:
      return r'umkm_user_id_key';
    case Enum$umkm_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$umkm_constraint fromJson$Enum$umkm_constraint(String value) {
  switch (value) {
    case r'umkm_pkey':
      return Enum$umkm_constraint.umkm_pkey;
    case r'umkm_user_id_key':
      return Enum$umkm_constraint.umkm_user_id_key;
    default:
      return Enum$umkm_constraint.$unknown;
  }
}

enum Enum$umkm_select_column {
  created_at,
  umkm_desc,
  umkm_id,
  umkm_name,
  umkm_performance,
  umkm_shares,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$umkm_select_column(Enum$umkm_select_column e) {
  switch (e) {
    case Enum$umkm_select_column.created_at:
      return r'created_at';
    case Enum$umkm_select_column.umkm_desc:
      return r'umkm_desc';
    case Enum$umkm_select_column.umkm_id:
      return r'umkm_id';
    case Enum$umkm_select_column.umkm_name:
      return r'umkm_name';
    case Enum$umkm_select_column.umkm_performance:
      return r'umkm_performance';
    case Enum$umkm_select_column.umkm_shares:
      return r'umkm_shares';
    case Enum$umkm_select_column.updated_at:
      return r'updated_at';
    case Enum$umkm_select_column.user_id:
      return r'user_id';
    case Enum$umkm_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$umkm_select_column fromJson$Enum$umkm_select_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$umkm_select_column.created_at;
    case r'umkm_desc':
      return Enum$umkm_select_column.umkm_desc;
    case r'umkm_id':
      return Enum$umkm_select_column.umkm_id;
    case r'umkm_name':
      return Enum$umkm_select_column.umkm_name;
    case r'umkm_performance':
      return Enum$umkm_select_column.umkm_performance;
    case r'umkm_shares':
      return Enum$umkm_select_column.umkm_shares;
    case r'updated_at':
      return Enum$umkm_select_column.updated_at;
    case r'user_id':
      return Enum$umkm_select_column.user_id;
    default:
      return Enum$umkm_select_column.$unknown;
  }
}

enum Enum$umkm_update_column {
  created_at,
  umkm_desc,
  umkm_name,
  umkm_performance,
  umkm_shares,
  updated_at,
  user_id,
  $unknown
}

String toJson$Enum$umkm_update_column(Enum$umkm_update_column e) {
  switch (e) {
    case Enum$umkm_update_column.created_at:
      return r'created_at';
    case Enum$umkm_update_column.umkm_desc:
      return r'umkm_desc';
    case Enum$umkm_update_column.umkm_name:
      return r'umkm_name';
    case Enum$umkm_update_column.umkm_performance:
      return r'umkm_performance';
    case Enum$umkm_update_column.umkm_shares:
      return r'umkm_shares';
    case Enum$umkm_update_column.updated_at:
      return r'updated_at';
    case Enum$umkm_update_column.user_id:
      return r'user_id';
    case Enum$umkm_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$umkm_update_column fromJson$Enum$umkm_update_column(String value) {
  switch (value) {
    case r'created_at':
      return Enum$umkm_update_column.created_at;
    case r'umkm_desc':
      return Enum$umkm_update_column.umkm_desc;
    case r'umkm_name':
      return Enum$umkm_update_column.umkm_name;
    case r'umkm_performance':
      return Enum$umkm_update_column.umkm_performance;
    case r'umkm_shares':
      return Enum$umkm_update_column.umkm_shares;
    case r'updated_at':
      return Enum$umkm_update_column.updated_at;
    case r'user_id':
      return Enum$umkm_update_column.user_id;
    default:
      return Enum$umkm_update_column.$unknown;
  }
}

enum Enum$users_constraint {
  users_email_key,
  users_phone_number_key,
  users_pkey,
  $unknown
}

String toJson$Enum$users_constraint(Enum$users_constraint e) {
  switch (e) {
    case Enum$users_constraint.users_email_key:
      return r'users_email_key';
    case Enum$users_constraint.users_phone_number_key:
      return r'users_phone_number_key';
    case Enum$users_constraint.users_pkey:
      return r'users_pkey';
    case Enum$users_constraint.$unknown:
      return r'$unknown';
  }
}

Enum$users_constraint fromJson$Enum$users_constraint(String value) {
  switch (value) {
    case r'users_email_key':
      return Enum$users_constraint.users_email_key;
    case r'users_phone_number_key':
      return Enum$users_constraint.users_phone_number_key;
    case r'users_pkey':
      return Enum$users_constraint.users_pkey;
    default:
      return Enum$users_constraint.$unknown;
  }
}

enum Enum$users_select_column {
  activeMfaType,
  avatarUrl,
  createdAt,
  currentChallenge,
  defaultRole,
  disabled,
  displayName,
  email,
  emailVerified,
  id,
  isAnonymous,
  lastSeen,
  locale,
  metadata,
  newEmail,
  otpHash,
  otpHashExpiresAt,
  otpMethodLastUsed,
  passwordHash,
  phoneNumber,
  phoneNumberVerified,
  ticket,
  ticketExpiresAt,
  totpSecret,
  updatedAt,
  $unknown
}

String toJson$Enum$users_select_column(Enum$users_select_column e) {
  switch (e) {
    case Enum$users_select_column.activeMfaType:
      return r'activeMfaType';
    case Enum$users_select_column.avatarUrl:
      return r'avatarUrl';
    case Enum$users_select_column.createdAt:
      return r'createdAt';
    case Enum$users_select_column.currentChallenge:
      return r'currentChallenge';
    case Enum$users_select_column.defaultRole:
      return r'defaultRole';
    case Enum$users_select_column.disabled:
      return r'disabled';
    case Enum$users_select_column.displayName:
      return r'displayName';
    case Enum$users_select_column.email:
      return r'email';
    case Enum$users_select_column.emailVerified:
      return r'emailVerified';
    case Enum$users_select_column.id:
      return r'id';
    case Enum$users_select_column.isAnonymous:
      return r'isAnonymous';
    case Enum$users_select_column.lastSeen:
      return r'lastSeen';
    case Enum$users_select_column.locale:
      return r'locale';
    case Enum$users_select_column.metadata:
      return r'metadata';
    case Enum$users_select_column.newEmail:
      return r'newEmail';
    case Enum$users_select_column.otpHash:
      return r'otpHash';
    case Enum$users_select_column.otpHashExpiresAt:
      return r'otpHashExpiresAt';
    case Enum$users_select_column.otpMethodLastUsed:
      return r'otpMethodLastUsed';
    case Enum$users_select_column.passwordHash:
      return r'passwordHash';
    case Enum$users_select_column.phoneNumber:
      return r'phoneNumber';
    case Enum$users_select_column.phoneNumberVerified:
      return r'phoneNumberVerified';
    case Enum$users_select_column.ticket:
      return r'ticket';
    case Enum$users_select_column.ticketExpiresAt:
      return r'ticketExpiresAt';
    case Enum$users_select_column.totpSecret:
      return r'totpSecret';
    case Enum$users_select_column.updatedAt:
      return r'updatedAt';
    case Enum$users_select_column.$unknown:
      return r'$unknown';
  }
}

Enum$users_select_column fromJson$Enum$users_select_column(String value) {
  switch (value) {
    case r'activeMfaType':
      return Enum$users_select_column.activeMfaType;
    case r'avatarUrl':
      return Enum$users_select_column.avatarUrl;
    case r'createdAt':
      return Enum$users_select_column.createdAt;
    case r'currentChallenge':
      return Enum$users_select_column.currentChallenge;
    case r'defaultRole':
      return Enum$users_select_column.defaultRole;
    case r'disabled':
      return Enum$users_select_column.disabled;
    case r'displayName':
      return Enum$users_select_column.displayName;
    case r'email':
      return Enum$users_select_column.email;
    case r'emailVerified':
      return Enum$users_select_column.emailVerified;
    case r'id':
      return Enum$users_select_column.id;
    case r'isAnonymous':
      return Enum$users_select_column.isAnonymous;
    case r'lastSeen':
      return Enum$users_select_column.lastSeen;
    case r'locale':
      return Enum$users_select_column.locale;
    case r'metadata':
      return Enum$users_select_column.metadata;
    case r'newEmail':
      return Enum$users_select_column.newEmail;
    case r'otpHash':
      return Enum$users_select_column.otpHash;
    case r'otpHashExpiresAt':
      return Enum$users_select_column.otpHashExpiresAt;
    case r'otpMethodLastUsed':
      return Enum$users_select_column.otpMethodLastUsed;
    case r'passwordHash':
      return Enum$users_select_column.passwordHash;
    case r'phoneNumber':
      return Enum$users_select_column.phoneNumber;
    case r'phoneNumberVerified':
      return Enum$users_select_column.phoneNumberVerified;
    case r'ticket':
      return Enum$users_select_column.ticket;
    case r'ticketExpiresAt':
      return Enum$users_select_column.ticketExpiresAt;
    case r'totpSecret':
      return Enum$users_select_column.totpSecret;
    case r'updatedAt':
      return Enum$users_select_column.updatedAt;
    default:
      return Enum$users_select_column.$unknown;
  }
}

enum Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns {
  disabled,
  emailVerified,
  isAnonymous,
  phoneNumberVerified,
  $unknown
}

String toJson$Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns(
    Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
        e) {
  switch (e) {
    case Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .disabled:
      return r'disabled';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .emailVerified:
      return r'emailVerified';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .isAnonymous:
      return r'isAnonymous';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .phoneNumberVerified:
      return r'phoneNumberVerified';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
    fromJson$Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns(
        String value) {
  switch (value) {
    case r'disabled':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .disabled;
    case r'emailVerified':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .emailVerified;
    case r'isAnonymous':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .isAnonymous;
    case r'phoneNumberVerified':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .phoneNumberVerified;
    default:
      return Enum$users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns
          .$unknown;
  }
}

enum Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns {
  disabled,
  emailVerified,
  isAnonymous,
  phoneNumberVerified,
  $unknown
}

String toJson$Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns(
    Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
        e) {
  switch (e) {
    case Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .disabled:
      return r'disabled';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .emailVerified:
      return r'emailVerified';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .isAnonymous:
      return r'isAnonymous';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .phoneNumberVerified:
      return r'phoneNumberVerified';
    case Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown:
      return r'$unknown';
  }
}

Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
    fromJson$Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns(
        String value) {
  switch (value) {
    case r'disabled':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .disabled;
    case r'emailVerified':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .emailVerified;
    case r'isAnonymous':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .isAnonymous;
    case r'phoneNumberVerified':
      return Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .phoneNumberVerified;
    default:
      return Enum$users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns
          .$unknown;
  }
}

enum Enum$users_update_column {
  activeMfaType,
  avatarUrl,
  createdAt,
  currentChallenge,
  defaultRole,
  disabled,
  displayName,
  email,
  emailVerified,
  id,
  isAnonymous,
  lastSeen,
  locale,
  metadata,
  newEmail,
  otpHash,
  otpHashExpiresAt,
  otpMethodLastUsed,
  passwordHash,
  phoneNumber,
  phoneNumberVerified,
  ticket,
  ticketExpiresAt,
  totpSecret,
  updatedAt,
  $unknown
}

String toJson$Enum$users_update_column(Enum$users_update_column e) {
  switch (e) {
    case Enum$users_update_column.activeMfaType:
      return r'activeMfaType';
    case Enum$users_update_column.avatarUrl:
      return r'avatarUrl';
    case Enum$users_update_column.createdAt:
      return r'createdAt';
    case Enum$users_update_column.currentChallenge:
      return r'currentChallenge';
    case Enum$users_update_column.defaultRole:
      return r'defaultRole';
    case Enum$users_update_column.disabled:
      return r'disabled';
    case Enum$users_update_column.displayName:
      return r'displayName';
    case Enum$users_update_column.email:
      return r'email';
    case Enum$users_update_column.emailVerified:
      return r'emailVerified';
    case Enum$users_update_column.id:
      return r'id';
    case Enum$users_update_column.isAnonymous:
      return r'isAnonymous';
    case Enum$users_update_column.lastSeen:
      return r'lastSeen';
    case Enum$users_update_column.locale:
      return r'locale';
    case Enum$users_update_column.metadata:
      return r'metadata';
    case Enum$users_update_column.newEmail:
      return r'newEmail';
    case Enum$users_update_column.otpHash:
      return r'otpHash';
    case Enum$users_update_column.otpHashExpiresAt:
      return r'otpHashExpiresAt';
    case Enum$users_update_column.otpMethodLastUsed:
      return r'otpMethodLastUsed';
    case Enum$users_update_column.passwordHash:
      return r'passwordHash';
    case Enum$users_update_column.phoneNumber:
      return r'phoneNumber';
    case Enum$users_update_column.phoneNumberVerified:
      return r'phoneNumberVerified';
    case Enum$users_update_column.ticket:
      return r'ticket';
    case Enum$users_update_column.ticketExpiresAt:
      return r'ticketExpiresAt';
    case Enum$users_update_column.totpSecret:
      return r'totpSecret';
    case Enum$users_update_column.updatedAt:
      return r'updatedAt';
    case Enum$users_update_column.$unknown:
      return r'$unknown';
  }
}

Enum$users_update_column fromJson$Enum$users_update_column(String value) {
  switch (value) {
    case r'activeMfaType':
      return Enum$users_update_column.activeMfaType;
    case r'avatarUrl':
      return Enum$users_update_column.avatarUrl;
    case r'createdAt':
      return Enum$users_update_column.createdAt;
    case r'currentChallenge':
      return Enum$users_update_column.currentChallenge;
    case r'defaultRole':
      return Enum$users_update_column.defaultRole;
    case r'disabled':
      return Enum$users_update_column.disabled;
    case r'displayName':
      return Enum$users_update_column.displayName;
    case r'email':
      return Enum$users_update_column.email;
    case r'emailVerified':
      return Enum$users_update_column.emailVerified;
    case r'id':
      return Enum$users_update_column.id;
    case r'isAnonymous':
      return Enum$users_update_column.isAnonymous;
    case r'lastSeen':
      return Enum$users_update_column.lastSeen;
    case r'locale':
      return Enum$users_update_column.locale;
    case r'metadata':
      return Enum$users_update_column.metadata;
    case r'newEmail':
      return Enum$users_update_column.newEmail;
    case r'otpHash':
      return Enum$users_update_column.otpHash;
    case r'otpHashExpiresAt':
      return Enum$users_update_column.otpHashExpiresAt;
    case r'otpMethodLastUsed':
      return Enum$users_update_column.otpMethodLastUsed;
    case r'passwordHash':
      return Enum$users_update_column.passwordHash;
    case r'phoneNumber':
      return Enum$users_update_column.phoneNumber;
    case r'phoneNumberVerified':
      return Enum$users_update_column.phoneNumberVerified;
    case r'ticket':
      return Enum$users_update_column.ticket;
    case r'ticketExpiresAt':
      return Enum$users_update_column.ticketExpiresAt;
    case r'totpSecret':
      return Enum$users_update_column.totpSecret;
    case r'updatedAt':
      return Enum$users_update_column.updatedAt;
    default:
      return Enum$users_update_column.$unknown;
  }
}

const possibleTypesMap = <String, Set<String>>{};
