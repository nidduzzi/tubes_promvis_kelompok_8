schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Oauth requests, inserted before redirecting to the provider's site. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authProviderRequests {
  id: uuid!
  options(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "auth.provider_requests"
"""
type authProviderRequests_aggregate {
  aggregate: authProviderRequests_aggregate_fields
  nodes: [authProviderRequests!]!
}

"""
aggregate fields of "auth.provider_requests"
"""
type authProviderRequests_aggregate_fields {
  count(columns: [authProviderRequests_select_column!], distinct: Boolean): Int!
  max: authProviderRequests_max_fields
  min: authProviderRequests_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input authProviderRequests_append_input {
  options: jsonb
}

"""
Boolean expression to filter rows from the table "auth.provider_requests". All fields are combined with a logical 'AND'.
"""
input authProviderRequests_bool_exp {
  _and: [authProviderRequests_bool_exp!]
  _not: authProviderRequests_bool_exp
  _or: [authProviderRequests_bool_exp!]
  id: uuid_comparison_exp
  options: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "auth.provider_requests"
"""
enum authProviderRequests_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  provider_requests_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input authProviderRequests_delete_at_path_input {
  options: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input authProviderRequests_delete_elem_input {
  options: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input authProviderRequests_delete_key_input {
  options: String
}

"""
input type for inserting data into table "auth.provider_requests"
"""
input authProviderRequests_insert_input {
  id: uuid
  options: jsonb
}

"""aggregate max on columns"""
type authProviderRequests_max_fields {
  id: uuid
}

"""aggregate min on columns"""
type authProviderRequests_min_fields {
  id: uuid
}

"""
response of any mutation on the table "auth.provider_requests"
"""
type authProviderRequests_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authProviderRequests!]!
}

"""
on_conflict condition type for table "auth.provider_requests"
"""
input authProviderRequests_on_conflict {
  constraint: authProviderRequests_constraint!
  update_columns: [authProviderRequests_update_column!]! = []
  where: authProviderRequests_bool_exp
}

"""Ordering options when selecting data from "auth.provider_requests"."""
input authProviderRequests_order_by {
  id: order_by
  options: order_by
}

"""primary key columns input for table: auth.provider_requests"""
input authProviderRequests_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input authProviderRequests_prepend_input {
  options: jsonb
}

"""
select columns of table "auth.provider_requests"
"""
enum authProviderRequests_select_column {
  """column name"""
  id

  """column name"""
  options
}

"""
input type for updating data in table "auth.provider_requests"
"""
input authProviderRequests_set_input {
  id: uuid
  options: jsonb
}

"""
Streaming cursor of the table "authProviderRequests"
"""
input authProviderRequests_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authProviderRequests_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authProviderRequests_stream_cursor_value_input {
  id: uuid
  options: jsonb
}

"""
update columns of table "auth.provider_requests"
"""
enum authProviderRequests_update_column {
  """column name"""
  id

  """column name"""
  options
}

input authProviderRequests_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: authProviderRequests_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: authProviderRequests_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: authProviderRequests_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: authProviderRequests_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: authProviderRequests_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: authProviderRequests_set_input
  where: authProviderRequests_bool_exp!
}

"""
List of available Oauth providers. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authProviders {
  id: String!

  """An array relationship"""
  userProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """An aggregate relationship"""
  userProviders_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!
}

"""
aggregated selection of "auth.providers"
"""
type authProviders_aggregate {
  aggregate: authProviders_aggregate_fields
  nodes: [authProviders!]!
}

"""
aggregate fields of "auth.providers"
"""
type authProviders_aggregate_fields {
  count(columns: [authProviders_select_column!], distinct: Boolean): Int!
  max: authProviders_max_fields
  min: authProviders_min_fields
}

"""
Boolean expression to filter rows from the table "auth.providers". All fields are combined with a logical 'AND'.
"""
input authProviders_bool_exp {
  _and: [authProviders_bool_exp!]
  _not: authProviders_bool_exp
  _or: [authProviders_bool_exp!]
  id: String_comparison_exp
  userProviders: authUserProviders_bool_exp
  userProviders_aggregate: authUserProviders_aggregate_bool_exp
}

"""
unique or primary key constraints on table "auth.providers"
"""
enum authProviders_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  providers_pkey
}

"""
input type for inserting data into table "auth.providers"
"""
input authProviders_insert_input {
  id: String
  userProviders: authUserProviders_arr_rel_insert_input
}

"""aggregate max on columns"""
type authProviders_max_fields {
  id: String
}

"""aggregate min on columns"""
type authProviders_min_fields {
  id: String
}

"""
response of any mutation on the table "auth.providers"
"""
type authProviders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authProviders!]!
}

"""
input type for inserting object relation for remote table "auth.providers"
"""
input authProviders_obj_rel_insert_input {
  data: authProviders_insert_input!

  """upsert condition"""
  on_conflict: authProviders_on_conflict
}

"""
on_conflict condition type for table "auth.providers"
"""
input authProviders_on_conflict {
  constraint: authProviders_constraint!
  update_columns: [authProviders_update_column!]! = []
  where: authProviders_bool_exp
}

"""Ordering options when selecting data from "auth.providers"."""
input authProviders_order_by {
  id: order_by
  userProviders_aggregate: authUserProviders_aggregate_order_by
}

"""primary key columns input for table: auth.providers"""
input authProviders_pk_columns_input {
  id: String!
}

"""
select columns of table "auth.providers"
"""
enum authProviders_select_column {
  """column name"""
  id
}

"""
input type for updating data in table "auth.providers"
"""
input authProviders_set_input {
  id: String
}

"""
Streaming cursor of the table "authProviders"
"""
input authProviders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authProviders_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authProviders_stream_cursor_value_input {
  id: String
}

"""
update columns of table "auth.providers"
"""
enum authProviders_update_column {
  """column name"""
  id
}

input authProviders_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authProviders_set_input
  where: authProviders_bool_exp!
}

"""
columns and relationships of "auth.refresh_token_types"
"""
type authRefreshTokenTypes {
  comment: String

  """An array relationship"""
  refreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """An aggregate relationship"""
  refreshTokens_aggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!
  value: String!
}

"""
aggregated selection of "auth.refresh_token_types"
"""
type authRefreshTokenTypes_aggregate {
  aggregate: authRefreshTokenTypes_aggregate_fields
  nodes: [authRefreshTokenTypes!]!
}

"""
aggregate fields of "auth.refresh_token_types"
"""
type authRefreshTokenTypes_aggregate_fields {
  count(columns: [authRefreshTokenTypes_select_column!], distinct: Boolean): Int!
  max: authRefreshTokenTypes_max_fields
  min: authRefreshTokenTypes_min_fields
}

"""
Boolean expression to filter rows from the table "auth.refresh_token_types". All fields are combined with a logical 'AND'.
"""
input authRefreshTokenTypes_bool_exp {
  _and: [authRefreshTokenTypes_bool_exp!]
  _not: authRefreshTokenTypes_bool_exp
  _or: [authRefreshTokenTypes_bool_exp!]
  comment: String_comparison_exp
  refreshTokens: authRefreshTokens_bool_exp
  refreshTokens_aggregate: authRefreshTokens_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "auth.refresh_token_types"
"""
enum authRefreshTokenTypes_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  refresh_token_types_pkey
}

enum authRefreshTokenTypes_enum {
  """Personal access token"""
  pat

  """Regular refresh token"""
  regular
}

"""
Boolean expression to compare columns of type "authRefreshTokenTypes_enum". All fields are combined with logical 'AND'.
"""
input authRefreshTokenTypes_enum_comparison_exp {
  _eq: authRefreshTokenTypes_enum
  _in: [authRefreshTokenTypes_enum!]
  _is_null: Boolean
  _neq: authRefreshTokenTypes_enum
  _nin: [authRefreshTokenTypes_enum!]
}

"""
input type for inserting data into table "auth.refresh_token_types"
"""
input authRefreshTokenTypes_insert_input {
  comment: String
  refreshTokens: authRefreshTokens_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type authRefreshTokenTypes_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type authRefreshTokenTypes_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "auth.refresh_token_types"
"""
type authRefreshTokenTypes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authRefreshTokenTypes!]!
}

"""
on_conflict condition type for table "auth.refresh_token_types"
"""
input authRefreshTokenTypes_on_conflict {
  constraint: authRefreshTokenTypes_constraint!
  update_columns: [authRefreshTokenTypes_update_column!]! = []
  where: authRefreshTokenTypes_bool_exp
}

"""Ordering options when selecting data from "auth.refresh_token_types"."""
input authRefreshTokenTypes_order_by {
  comment: order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: auth.refresh_token_types"""
input authRefreshTokenTypes_pk_columns_input {
  value: String!
}

"""
select columns of table "auth.refresh_token_types"
"""
enum authRefreshTokenTypes_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "auth.refresh_token_types"
"""
input authRefreshTokenTypes_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "authRefreshTokenTypes"
"""
input authRefreshTokenTypes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRefreshTokenTypes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRefreshTokenTypes_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "auth.refresh_token_types"
"""
enum authRefreshTokenTypes_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input authRefreshTokenTypes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authRefreshTokenTypes_set_input
  where: authRefreshTokenTypes_bool_exp!
}

"""
User refresh tokens. Hasura auth uses them to rotate new access tokens as long as the refresh token is not expired. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authRefreshTokens {
  createdAt: timestamptz!
  expiresAt: timestamptz!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.refresh_tokens"
"""
type authRefreshTokens_aggregate {
  aggregate: authRefreshTokens_aggregate_fields
  nodes: [authRefreshTokens!]!
}

input authRefreshTokens_aggregate_bool_exp {
  count: authRefreshTokens_aggregate_bool_exp_count
}

input authRefreshTokens_aggregate_bool_exp_count {
  arguments: [authRefreshTokens_select_column!]
  distinct: Boolean
  filter: authRefreshTokens_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.refresh_tokens"
"""
type authRefreshTokens_aggregate_fields {
  count(columns: [authRefreshTokens_select_column!], distinct: Boolean): Int!
  max: authRefreshTokens_max_fields
  min: authRefreshTokens_min_fields
}

"""
order by aggregate values of table "auth.refresh_tokens"
"""
input authRefreshTokens_aggregate_order_by {
  count: order_by
  max: authRefreshTokens_max_order_by
  min: authRefreshTokens_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input authRefreshTokens_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "auth.refresh_tokens"
"""
input authRefreshTokens_arr_rel_insert_input {
  data: [authRefreshTokens_insert_input!]!

  """upsert condition"""
  on_conflict: authRefreshTokens_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.refresh_tokens". All fields are combined with a logical 'AND'.
"""
input authRefreshTokens_bool_exp {
  _and: [authRefreshTokens_bool_exp!]
  _not: authRefreshTokens_bool_exp
  _or: [authRefreshTokens_bool_exp!]
  createdAt: timestamptz_comparison_exp
  expiresAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  refreshTokenHash: String_comparison_exp
  type: authRefreshTokenTypes_enum_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.refresh_tokens"
"""
enum authRefreshTokens_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  refresh_tokens_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input authRefreshTokens_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input authRefreshTokens_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input authRefreshTokens_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "auth.refresh_tokens"
"""
input authRefreshTokens_insert_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authRefreshTokens_max_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  refreshTokenHash: String
  userId: uuid
}

"""
order by max() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_max_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  refreshTokenHash: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authRefreshTokens_min_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  refreshTokenHash: String
  userId: uuid
}

"""
order by min() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_min_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  refreshTokenHash: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.refresh_tokens"
"""
type authRefreshTokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authRefreshTokens!]!
}

"""
on_conflict condition type for table "auth.refresh_tokens"
"""
input authRefreshTokens_on_conflict {
  constraint: authRefreshTokens_constraint!
  update_columns: [authRefreshTokens_update_column!]! = []
  where: authRefreshTokens_bool_exp
}

"""Ordering options when selecting data from "auth.refresh_tokens"."""
input authRefreshTokens_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  metadata: order_by
  refreshTokenHash: order_by
  type: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.refresh_tokens"""
input authRefreshTokens_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input authRefreshTokens_prepend_input {
  metadata: jsonb
}

"""
select columns of table "auth.refresh_tokens"
"""
enum authRefreshTokens_select_column {
  """column name"""
  createdAt

  """column name"""
  expiresAt

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  refreshTokenHash

  """column name"""
  type

  """column name"""
  userId
}

"""
input type for updating data in table "auth.refresh_tokens"
"""
input authRefreshTokens_set_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  userId: uuid
}

"""
Streaming cursor of the table "authRefreshTokens"
"""
input authRefreshTokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRefreshTokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRefreshTokens_stream_cursor_value_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  userId: uuid
}

"""
update columns of table "auth.refresh_tokens"
"""
enum authRefreshTokens_update_column {
  """column name"""
  createdAt

  """column name"""
  expiresAt

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  refreshTokenHash

  """column name"""
  type

  """column name"""
  userId
}

input authRefreshTokens_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: authRefreshTokens_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: authRefreshTokens_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: authRefreshTokens_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: authRefreshTokens_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: authRefreshTokens_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: authRefreshTokens_set_input
  where: authRefreshTokens_bool_exp!
}

"""
Persistent Hasura roles for users. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authRoles {
  role: String!

  """An array relationship"""
  userRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """An aggregate relationship"""
  userRoles_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!

  """An array relationship"""
  usersByDefaultRole(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregate relationship"""
  usersByDefaultRole_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
}

"""
aggregated selection of "auth.roles"
"""
type authRoles_aggregate {
  aggregate: authRoles_aggregate_fields
  nodes: [authRoles!]!
}

"""
aggregate fields of "auth.roles"
"""
type authRoles_aggregate_fields {
  count(columns: [authRoles_select_column!], distinct: Boolean): Int!
  max: authRoles_max_fields
  min: authRoles_min_fields
}

"""
Boolean expression to filter rows from the table "auth.roles". All fields are combined with a logical 'AND'.
"""
input authRoles_bool_exp {
  _and: [authRoles_bool_exp!]
  _not: authRoles_bool_exp
  _or: [authRoles_bool_exp!]
  role: String_comparison_exp
  userRoles: authUserRoles_bool_exp
  userRoles_aggregate: authUserRoles_aggregate_bool_exp
  usersByDefaultRole: users_bool_exp
  usersByDefaultRole_aggregate: users_aggregate_bool_exp
}

"""
unique or primary key constraints on table "auth.roles"
"""
enum authRoles_constraint {
  """
  unique or primary key constraint on columns "role"
  """
  roles_pkey
}

"""
input type for inserting data into table "auth.roles"
"""
input authRoles_insert_input {
  role: String
  userRoles: authUserRoles_arr_rel_insert_input
  usersByDefaultRole: users_arr_rel_insert_input
}

"""aggregate max on columns"""
type authRoles_max_fields {
  role: String
}

"""aggregate min on columns"""
type authRoles_min_fields {
  role: String
}

"""
response of any mutation on the table "auth.roles"
"""
type authRoles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authRoles!]!
}

"""
input type for inserting object relation for remote table "auth.roles"
"""
input authRoles_obj_rel_insert_input {
  data: authRoles_insert_input!

  """upsert condition"""
  on_conflict: authRoles_on_conflict
}

"""
on_conflict condition type for table "auth.roles"
"""
input authRoles_on_conflict {
  constraint: authRoles_constraint!
  update_columns: [authRoles_update_column!]! = []
  where: authRoles_bool_exp
}

"""Ordering options when selecting data from "auth.roles"."""
input authRoles_order_by {
  role: order_by
  userRoles_aggregate: authUserRoles_aggregate_order_by
  usersByDefaultRole_aggregate: users_aggregate_order_by
}

"""primary key columns input for table: auth.roles"""
input authRoles_pk_columns_input {
  role: String!
}

"""
select columns of table "auth.roles"
"""
enum authRoles_select_column {
  """column name"""
  role
}

"""
input type for updating data in table "auth.roles"
"""
input authRoles_set_input {
  role: String
}

"""
Streaming cursor of the table "authRoles"
"""
input authRoles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRoles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRoles_stream_cursor_value_input {
  role: String
}

"""
update columns of table "auth.roles"
"""
enum authRoles_update_column {
  """column name"""
  role
}

input authRoles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authRoles_set_input
  where: authRoles_bool_exp!
}

"""
Active providers for a given user. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserProviders {
  accessToken: String!
  createdAt: timestamptz!
  id: uuid!

  """An object relationship"""
  provider: authProviders!
  providerId: String!
  providerUserId: String!
  refreshToken: String
  updatedAt: timestamptz!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_providers"
"""
type authUserProviders_aggregate {
  aggregate: authUserProviders_aggregate_fields
  nodes: [authUserProviders!]!
}

input authUserProviders_aggregate_bool_exp {
  count: authUserProviders_aggregate_bool_exp_count
}

input authUserProviders_aggregate_bool_exp_count {
  arguments: [authUserProviders_select_column!]
  distinct: Boolean
  filter: authUserProviders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_providers"
"""
type authUserProviders_aggregate_fields {
  count(columns: [authUserProviders_select_column!], distinct: Boolean): Int!
  max: authUserProviders_max_fields
  min: authUserProviders_min_fields
}

"""
order by aggregate values of table "auth.user_providers"
"""
input authUserProviders_aggregate_order_by {
  count: order_by
  max: authUserProviders_max_order_by
  min: authUserProviders_min_order_by
}

"""
input type for inserting array relation for remote table "auth.user_providers"
"""
input authUserProviders_arr_rel_insert_input {
  data: [authUserProviders_insert_input!]!

  """upsert condition"""
  on_conflict: authUserProviders_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.user_providers". All fields are combined with a logical 'AND'.
"""
input authUserProviders_bool_exp {
  _and: [authUserProviders_bool_exp!]
  _not: authUserProviders_bool_exp
  _or: [authUserProviders_bool_exp!]
  accessToken: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  provider: authProviders_bool_exp
  providerId: String_comparison_exp
  providerUserId: String_comparison_exp
  refreshToken: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.user_providers"
"""
enum authUserProviders_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_providers_pkey

  """
  unique or primary key constraint on columns "provider_id", "provider_user_id"
  """
  user_providers_provider_id_provider_user_id_key

  """
  unique or primary key constraint on columns "provider_id", "user_id"
  """
  user_providers_user_id_provider_id_key
}

"""
input type for inserting data into table "auth.user_providers"
"""
input authUserProviders_insert_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  provider: authProviders_obj_rel_insert_input
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authUserProviders_max_fields {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
order by max() on columns of table "auth.user_providers"
"""
input authUserProviders_max_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserProviders_min_fields {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
order by min() on columns of table "auth.user_providers"
"""
input authUserProviders_min_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_providers"
"""
type authUserProviders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authUserProviders!]!
}

"""
on_conflict condition type for table "auth.user_providers"
"""
input authUserProviders_on_conflict {
  constraint: authUserProviders_constraint!
  update_columns: [authUserProviders_update_column!]! = []
  where: authUserProviders_bool_exp
}

"""Ordering options when selecting data from "auth.user_providers"."""
input authUserProviders_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  provider: authProviders_order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.user_providers"""
input authUserProviders_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.user_providers"
"""
enum authUserProviders_select_column {
  """column name"""
  accessToken

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  providerId

  """column name"""
  providerUserId

  """column name"""
  refreshToken

  """column name"""
  updatedAt

  """column name"""
  userId
}

"""
input type for updating data in table "auth.user_providers"
"""
input authUserProviders_set_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
Streaming cursor of the table "authUserProviders"
"""
input authUserProviders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserProviders_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserProviders_stream_cursor_value_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
update columns of table "auth.user_providers"
"""
enum authUserProviders_update_column {
  """column name"""
  accessToken

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  providerId

  """column name"""
  providerUserId

  """column name"""
  refreshToken

  """column name"""
  updatedAt

  """column name"""
  userId
}

input authUserProviders_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authUserProviders_set_input
  where: authUserProviders_bool_exp!
}

"""
Roles of users. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserRoles {
  createdAt: timestamptz!
  id: uuid!
  role: String!

  """An object relationship"""
  roleByRole: authRoles!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_roles"
"""
type authUserRoles_aggregate {
  aggregate: authUserRoles_aggregate_fields
  nodes: [authUserRoles!]!
}

input authUserRoles_aggregate_bool_exp {
  count: authUserRoles_aggregate_bool_exp_count
}

input authUserRoles_aggregate_bool_exp_count {
  arguments: [authUserRoles_select_column!]
  distinct: Boolean
  filter: authUserRoles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_roles"
"""
type authUserRoles_aggregate_fields {
  count(columns: [authUserRoles_select_column!], distinct: Boolean): Int!
  max: authUserRoles_max_fields
  min: authUserRoles_min_fields
}

"""
order by aggregate values of table "auth.user_roles"
"""
input authUserRoles_aggregate_order_by {
  count: order_by
  max: authUserRoles_max_order_by
  min: authUserRoles_min_order_by
}

"""
input type for inserting array relation for remote table "auth.user_roles"
"""
input authUserRoles_arr_rel_insert_input {
  data: [authUserRoles_insert_input!]!

  """upsert condition"""
  on_conflict: authUserRoles_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.user_roles". All fields are combined with a logical 'AND'.
"""
input authUserRoles_bool_exp {
  _and: [authUserRoles_bool_exp!]
  _not: authUserRoles_bool_exp
  _or: [authUserRoles_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  role: String_comparison_exp
  roleByRole: authRoles_bool_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.user_roles"
"""
enum authUserRoles_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_roles_pkey

  """
  unique or primary key constraint on columns "user_id", "role"
  """
  user_roles_user_id_role_key
}

"""
input type for inserting data into table "auth.user_roles"
"""
input authUserRoles_insert_input {
  createdAt: timestamptz
  id: uuid
  role: String
  roleByRole: authRoles_obj_rel_insert_input
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authUserRoles_max_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
order by max() on columns of table "auth.user_roles"
"""
input authUserRoles_max_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserRoles_min_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
order by min() on columns of table "auth.user_roles"
"""
input authUserRoles_min_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_roles"
"""
type authUserRoles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authUserRoles!]!
}

"""
on_conflict condition type for table "auth.user_roles"
"""
input authUserRoles_on_conflict {
  constraint: authUserRoles_constraint!
  update_columns: [authUserRoles_update_column!]! = []
  where: authUserRoles_bool_exp
}

"""Ordering options when selecting data from "auth.user_roles"."""
input authUserRoles_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  roleByRole: authRoles_order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.user_roles"""
input authUserRoles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.user_roles"
"""
enum authUserRoles_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  role

  """column name"""
  userId
}

"""
input type for updating data in table "auth.user_roles"
"""
input authUserRoles_set_input {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
Streaming cursor of the table "authUserRoles"
"""
input authUserRoles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserRoles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserRoles_stream_cursor_value_input {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
update columns of table "auth.user_roles"
"""
enum authUserRoles_update_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  role

  """column name"""
  userId
}

input authUserRoles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authUserRoles_set_input
  where: authUserRoles_bool_exp!
}

"""
User webauthn security keys. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserSecurityKeys {
  counter: bigint!
  credentialId: String!
  credentialPublicKey: bytea
  id: uuid!
  nickname: String
  transports: String!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_security_keys"
"""
type authUserSecurityKeys_aggregate {
  aggregate: authUserSecurityKeys_aggregate_fields
  nodes: [authUserSecurityKeys!]!
}

input authUserSecurityKeys_aggregate_bool_exp {
  count: authUserSecurityKeys_aggregate_bool_exp_count
}

input authUserSecurityKeys_aggregate_bool_exp_count {
  arguments: [authUserSecurityKeys_select_column!]
  distinct: Boolean
  filter: authUserSecurityKeys_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_security_keys"
"""
type authUserSecurityKeys_aggregate_fields {
  avg: authUserSecurityKeys_avg_fields
  count(columns: [authUserSecurityKeys_select_column!], distinct: Boolean): Int!
  max: authUserSecurityKeys_max_fields
  min: authUserSecurityKeys_min_fields
  stddev: authUserSecurityKeys_stddev_fields
  stddev_pop: authUserSecurityKeys_stddev_pop_fields
  stddev_samp: authUserSecurityKeys_stddev_samp_fields
  sum: authUserSecurityKeys_sum_fields
  var_pop: authUserSecurityKeys_var_pop_fields
  var_samp: authUserSecurityKeys_var_samp_fields
  variance: authUserSecurityKeys_variance_fields
}

"""
order by aggregate values of table "auth.user_security_keys"
"""
input authUserSecurityKeys_aggregate_order_by {
  avg: authUserSecurityKeys_avg_order_by
  count: order_by
  max: authUserSecurityKeys_max_order_by
  min: authUserSecurityKeys_min_order_by
  stddev: authUserSecurityKeys_stddev_order_by
  stddev_pop: authUserSecurityKeys_stddev_pop_order_by
  stddev_samp: authUserSecurityKeys_stddev_samp_order_by
  sum: authUserSecurityKeys_sum_order_by
  var_pop: authUserSecurityKeys_var_pop_order_by
  var_samp: authUserSecurityKeys_var_samp_order_by
  variance: authUserSecurityKeys_variance_order_by
}

"""
input type for inserting array relation for remote table "auth.user_security_keys"
"""
input authUserSecurityKeys_arr_rel_insert_input {
  data: [authUserSecurityKeys_insert_input!]!

  """upsert condition"""
  on_conflict: authUserSecurityKeys_on_conflict
}

"""aggregate avg on columns"""
type authUserSecurityKeys_avg_fields {
  counter: Float
}

"""
order by avg() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_avg_order_by {
  counter: order_by
}

"""
Boolean expression to filter rows from the table "auth.user_security_keys". All fields are combined with a logical 'AND'.
"""
input authUserSecurityKeys_bool_exp {
  _and: [authUserSecurityKeys_bool_exp!]
  _not: authUserSecurityKeys_bool_exp
  _or: [authUserSecurityKeys_bool_exp!]
  counter: bigint_comparison_exp
  credentialId: String_comparison_exp
  credentialPublicKey: bytea_comparison_exp
  id: uuid_comparison_exp
  nickname: String_comparison_exp
  transports: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.user_security_keys"
"""
enum authUserSecurityKeys_constraint {
  """
  unique or primary key constraint on columns "credential_id"
  """
  user_security_key_credential_id_key

  """
  unique or primary key constraint on columns "id"
  """
  user_security_keys_pkey
}

"""
input type for incrementing numeric columns in table "auth.user_security_keys"
"""
input authUserSecurityKeys_inc_input {
  counter: bigint
}

"""
input type for inserting data into table "auth.user_security_keys"
"""
input authUserSecurityKeys_insert_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authUserSecurityKeys_max_fields {
  counter: bigint
  credentialId: String
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""
order by max() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_max_order_by {
  counter: order_by
  credentialId: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserSecurityKeys_min_fields {
  counter: bigint
  credentialId: String
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""
order by min() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_min_order_by {
  counter: order_by
  credentialId: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_security_keys"
"""
type authUserSecurityKeys_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [authUserSecurityKeys!]!
}

"""
on_conflict condition type for table "auth.user_security_keys"
"""
input authUserSecurityKeys_on_conflict {
  constraint: authUserSecurityKeys_constraint!
  update_columns: [authUserSecurityKeys_update_column!]! = []
  where: authUserSecurityKeys_bool_exp
}

"""Ordering options when selecting data from "auth.user_security_keys"."""
input authUserSecurityKeys_order_by {
  counter: order_by
  credentialId: order_by
  credentialPublicKey: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.user_security_keys"""
input authUserSecurityKeys_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.user_security_keys"
"""
enum authUserSecurityKeys_select_column {
  """column name"""
  counter

  """column name"""
  credentialId

  """column name"""
  credentialPublicKey

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  transports

  """column name"""
  userId
}

"""
input type for updating data in table "auth.user_security_keys"
"""
input authUserSecurityKeys_set_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""aggregate stddev on columns"""
type authUserSecurityKeys_stddev_fields {
  counter: Float
}

"""
order by stddev() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_stddev_order_by {
  counter: order_by
}

"""aggregate stddev_pop on columns"""
type authUserSecurityKeys_stddev_pop_fields {
  counter: Float
}

"""
order by stddev_pop() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_stddev_pop_order_by {
  counter: order_by
}

"""aggregate stddev_samp on columns"""
type authUserSecurityKeys_stddev_samp_fields {
  counter: Float
}

"""
order by stddev_samp() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_stddev_samp_order_by {
  counter: order_by
}

"""
Streaming cursor of the table "authUserSecurityKeys"
"""
input authUserSecurityKeys_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserSecurityKeys_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserSecurityKeys_stream_cursor_value_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""aggregate sum on columns"""
type authUserSecurityKeys_sum_fields {
  counter: bigint
}

"""
order by sum() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_sum_order_by {
  counter: order_by
}

"""
update columns of table "auth.user_security_keys"
"""
enum authUserSecurityKeys_update_column {
  """column name"""
  counter

  """column name"""
  credentialId

  """column name"""
  credentialPublicKey

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  transports

  """column name"""
  userId
}

input authUserSecurityKeys_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: authUserSecurityKeys_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: authUserSecurityKeys_set_input
  where: authUserSecurityKeys_bool_exp!
}

"""aggregate var_pop on columns"""
type authUserSecurityKeys_var_pop_fields {
  counter: Float
}

"""
order by var_pop() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_var_pop_order_by {
  counter: order_by
}

"""aggregate var_samp on columns"""
type authUserSecurityKeys_var_samp_fields {
  counter: Float
}

"""
order by var_samp() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_var_samp_order_by {
  counter: order_by
}

"""aggregate variance on columns"""
type authUserSecurityKeys_variance_fields {
  counter: Float
}

"""
order by variance() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_variance_order_by {
  counter: order_by
}

"""
columns and relationships of "bank_card"
"""
type bank_card {
  bank_card_cvc: String!
  bank_card_id: uuid!
  bank_card_name: String!
  bank_card_number: String!
  created_at: timestamptz!

  """An array relationship"""
  payment_dues(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): [payment_due!]!

  """An aggregate relationship"""
  payment_dues_aggregate(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): payment_due_aggregate!

  """An array relationship"""
  payment_investments(
    """distinct select on columns"""
    distinct_on: [payment_investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_investment_order_by!]

    """filter the rows returned"""
    where: payment_investment_bool_exp
  ): [payment_investment!]!

  """An aggregate relationship"""
  payment_investments_aggregate(
    """distinct select on columns"""
    distinct_on: [payment_investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_investment_order_by!]

    """filter the rows returned"""
    where: payment_investment_bool_exp
  ): payment_investment_aggregate!

  """An object relationship"""
  profile: profile!
  profile_id: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "bank_card"
"""
type bank_card_aggregate {
  aggregate: bank_card_aggregate_fields
  nodes: [bank_card!]!
}

input bank_card_aggregate_bool_exp {
  count: bank_card_aggregate_bool_exp_count
}

input bank_card_aggregate_bool_exp_count {
  arguments: [bank_card_select_column!]
  distinct: Boolean
  filter: bank_card_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "bank_card"
"""
type bank_card_aggregate_fields {
  avg: bank_card_avg_fields
  count(columns: [bank_card_select_column!], distinct: Boolean): Int!
  max: bank_card_max_fields
  min: bank_card_min_fields
  stddev: bank_card_stddev_fields
  stddev_pop: bank_card_stddev_pop_fields
  stddev_samp: bank_card_stddev_samp_fields
  sum: bank_card_sum_fields
  var_pop: bank_card_var_pop_fields
  var_samp: bank_card_var_samp_fields
  variance: bank_card_variance_fields
}

"""
order by aggregate values of table "bank_card"
"""
input bank_card_aggregate_order_by {
  avg: bank_card_avg_order_by
  count: order_by
  max: bank_card_max_order_by
  min: bank_card_min_order_by
  stddev: bank_card_stddev_order_by
  stddev_pop: bank_card_stddev_pop_order_by
  stddev_samp: bank_card_stddev_samp_order_by
  sum: bank_card_sum_order_by
  var_pop: bank_card_var_pop_order_by
  var_samp: bank_card_var_samp_order_by
  variance: bank_card_variance_order_by
}

"""
input type for inserting array relation for remote table "bank_card"
"""
input bank_card_arr_rel_insert_input {
  data: [bank_card_insert_input!]!

  """upsert condition"""
  on_conflict: bank_card_on_conflict
}

"""aggregate avg on columns"""
type bank_card_avg_fields {
  profile_id: Float
}

"""
order by avg() on columns of table "bank_card"
"""
input bank_card_avg_order_by {
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "bank_card". All fields are combined with a logical 'AND'.
"""
input bank_card_bool_exp {
  _and: [bank_card_bool_exp!]
  _not: bank_card_bool_exp
  _or: [bank_card_bool_exp!]
  bank_card_cvc: String_comparison_exp
  bank_card_id: uuid_comparison_exp
  bank_card_name: String_comparison_exp
  bank_card_number: String_comparison_exp
  created_at: timestamptz_comparison_exp
  payment_dues: payment_due_bool_exp
  payment_dues_aggregate: payment_due_aggregate_bool_exp
  payment_investments: payment_investment_bool_exp
  payment_investments_aggregate: payment_investment_aggregate_bool_exp
  profile: profile_bool_exp
  profile_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "bank_card"
"""
enum bank_card_constraint {
  """
  unique or primary key constraint on columns "bank_card_id"
  """
  bank_card_pkey
}

"""
input type for incrementing numeric columns in table "bank_card"
"""
input bank_card_inc_input {
  profile_id: Int
}

"""
input type for inserting data into table "bank_card"
"""
input bank_card_insert_input {
  bank_card_cvc: String
  bank_card_id: uuid
  bank_card_name: String
  bank_card_number: String
  created_at: timestamptz
  payment_dues: payment_due_arr_rel_insert_input
  payment_investments: payment_investment_arr_rel_insert_input
  profile: profile_obj_rel_insert_input
  profile_id: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type bank_card_max_fields {
  bank_card_cvc: String
  bank_card_id: uuid
  bank_card_name: String
  bank_card_number: String
  created_at: timestamptz
  profile_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "bank_card"
"""
input bank_card_max_order_by {
  bank_card_cvc: order_by
  bank_card_id: order_by
  bank_card_name: order_by
  bank_card_number: order_by
  created_at: order_by
  profile_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type bank_card_min_fields {
  bank_card_cvc: String
  bank_card_id: uuid
  bank_card_name: String
  bank_card_number: String
  created_at: timestamptz
  profile_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "bank_card"
"""
input bank_card_min_order_by {
  bank_card_cvc: order_by
  bank_card_id: order_by
  bank_card_name: order_by
  bank_card_number: order_by
  created_at: order_by
  profile_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "bank_card"
"""
type bank_card_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [bank_card!]!
}

"""
input type for inserting object relation for remote table "bank_card"
"""
input bank_card_obj_rel_insert_input {
  data: bank_card_insert_input!

  """upsert condition"""
  on_conflict: bank_card_on_conflict
}

"""
on_conflict condition type for table "bank_card"
"""
input bank_card_on_conflict {
  constraint: bank_card_constraint!
  update_columns: [bank_card_update_column!]! = []
  where: bank_card_bool_exp
}

"""Ordering options when selecting data from "bank_card"."""
input bank_card_order_by {
  bank_card_cvc: order_by
  bank_card_id: order_by
  bank_card_name: order_by
  bank_card_number: order_by
  created_at: order_by
  payment_dues_aggregate: payment_due_aggregate_order_by
  payment_investments_aggregate: payment_investment_aggregate_order_by
  profile: profile_order_by
  profile_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: bank_card"""
input bank_card_pk_columns_input {
  bank_card_id: uuid!
}

"""
select columns of table "bank_card"
"""
enum bank_card_select_column {
  """column name"""
  bank_card_cvc

  """column name"""
  bank_card_id

  """column name"""
  bank_card_name

  """column name"""
  bank_card_number

  """column name"""
  created_at

  """column name"""
  profile_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "bank_card"
"""
input bank_card_set_input {
  bank_card_cvc: String
  bank_card_id: uuid
  bank_card_name: String
  bank_card_number: String
  created_at: timestamptz
  profile_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type bank_card_stddev_fields {
  profile_id: Float
}

"""
order by stddev() on columns of table "bank_card"
"""
input bank_card_stddev_order_by {
  profile_id: order_by
}

"""aggregate stddev_pop on columns"""
type bank_card_stddev_pop_fields {
  profile_id: Float
}

"""
order by stddev_pop() on columns of table "bank_card"
"""
input bank_card_stddev_pop_order_by {
  profile_id: order_by
}

"""aggregate stddev_samp on columns"""
type bank_card_stddev_samp_fields {
  profile_id: Float
}

"""
order by stddev_samp() on columns of table "bank_card"
"""
input bank_card_stddev_samp_order_by {
  profile_id: order_by
}

"""
Streaming cursor of the table "bank_card"
"""
input bank_card_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: bank_card_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input bank_card_stream_cursor_value_input {
  bank_card_cvc: String
  bank_card_id: uuid
  bank_card_name: String
  bank_card_number: String
  created_at: timestamptz
  profile_id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type bank_card_sum_fields {
  profile_id: Int
}

"""
order by sum() on columns of table "bank_card"
"""
input bank_card_sum_order_by {
  profile_id: order_by
}

"""
update columns of table "bank_card"
"""
enum bank_card_update_column {
  """column name"""
  bank_card_cvc

  """column name"""
  bank_card_id

  """column name"""
  bank_card_name

  """column name"""
  bank_card_number

  """column name"""
  created_at

  """column name"""
  profile_id

  """column name"""
  updated_at
}

input bank_card_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: bank_card_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: bank_card_set_input
  where: bank_card_bool_exp!
}

"""aggregate var_pop on columns"""
type bank_card_var_pop_fields {
  profile_id: Float
}

"""
order by var_pop() on columns of table "bank_card"
"""
input bank_card_var_pop_order_by {
  profile_id: order_by
}

"""aggregate var_samp on columns"""
type bank_card_var_samp_fields {
  profile_id: Float
}

"""
order by var_samp() on columns of table "bank_card"
"""
input bank_card_var_samp_order_by {
  profile_id: order_by
}

"""aggregate variance on columns"""
type bank_card_variance_fields {
  profile_id: Float
}

"""
order by variance() on columns of table "bank_card"
"""
input bank_card_variance_order_by {
  profile_id: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "blog"
"""
type blog {
  blog_content: String!
  blog_date: date!
  blog_id: Int!
  blog_title: String!
  created_at: timestamptz
  updated_at: timestamptz
}

"""
aggregated selection of "blog"
"""
type blog_aggregate {
  aggregate: blog_aggregate_fields
  nodes: [blog!]!
}

"""
aggregate fields of "blog"
"""
type blog_aggregate_fields {
  avg: blog_avg_fields
  count(columns: [blog_select_column!], distinct: Boolean): Int!
  max: blog_max_fields
  min: blog_min_fields
  stddev: blog_stddev_fields
  stddev_pop: blog_stddev_pop_fields
  stddev_samp: blog_stddev_samp_fields
  sum: blog_sum_fields
  var_pop: blog_var_pop_fields
  var_samp: blog_var_samp_fields
  variance: blog_variance_fields
}

"""aggregate avg on columns"""
type blog_avg_fields {
  blog_id: Float
}

"""
Boolean expression to filter rows from the table "blog". All fields are combined with a logical 'AND'.
"""
input blog_bool_exp {
  _and: [blog_bool_exp!]
  _not: blog_bool_exp
  _or: [blog_bool_exp!]
  blog_content: String_comparison_exp
  blog_date: date_comparison_exp
  blog_id: Int_comparison_exp
  blog_title: String_comparison_exp
  created_at: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "blog"
"""
enum blog_constraint {
  """
  unique or primary key constraint on columns "blog_id"
  """
  blog_pkey
}

"""
input type for inserting data into table "blog"
"""
input blog_insert_input {
  blog_content: String
  blog_date: date
  blog_title: String
  created_at: timestamptz
  updated_at: timestamptz
}

"""aggregate max on columns"""
type blog_max_fields {
  blog_content: String
  blog_date: date
  blog_id: Int
  blog_title: String
  created_at: timestamptz
  updated_at: timestamptz
}

"""aggregate min on columns"""
type blog_min_fields {
  blog_content: String
  blog_date: date
  blog_id: Int
  blog_title: String
  created_at: timestamptz
  updated_at: timestamptz
}

"""
response of any mutation on the table "blog"
"""
type blog_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog!]!
}

"""
on_conflict condition type for table "blog"
"""
input blog_on_conflict {
  constraint: blog_constraint!
  update_columns: [blog_update_column!]! = []
  where: blog_bool_exp
}

"""Ordering options when selecting data from "blog"."""
input blog_order_by {
  blog_content: order_by
  blog_date: order_by
  blog_id: order_by
  blog_title: order_by
  created_at: order_by
  updated_at: order_by
}

"""primary key columns input for table: blog"""
input blog_pk_columns_input {
  blog_id: Int!
}

"""
select columns of table "blog"
"""
enum blog_select_column {
  """column name"""
  blog_content

  """column name"""
  blog_date

  """column name"""
  blog_id

  """column name"""
  blog_title

  """column name"""
  created_at

  """column name"""
  updated_at
}

"""
input type for updating data in table "blog"
"""
input blog_set_input {
  blog_content: String
  blog_date: date
  blog_title: String
  created_at: timestamptz
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type blog_stddev_fields {
  blog_id: Float
}

"""aggregate stddev_pop on columns"""
type blog_stddev_pop_fields {
  blog_id: Float
}

"""aggregate stddev_samp on columns"""
type blog_stddev_samp_fields {
  blog_id: Float
}

"""
Streaming cursor of the table "blog"
"""
input blog_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: blog_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input blog_stream_cursor_value_input {
  blog_content: String
  blog_date: date
  blog_id: Int
  blog_title: String
  created_at: timestamptz
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type blog_sum_fields {
  blog_id: Int
}

"""
update columns of table "blog"
"""
enum blog_update_column {
  """column name"""
  blog_content

  """column name"""
  blog_date

  """column name"""
  blog_title

  """column name"""
  created_at

  """column name"""
  updated_at
}

input blog_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: blog_set_input
  where: blog_bool_exp!
}

"""aggregate var_pop on columns"""
type blog_var_pop_fields {
  blog_id: Float
}

"""aggregate var_samp on columns"""
type blog_var_samp_fields {
  blog_id: Float
}

"""aggregate variance on columns"""
type blog_variance_fields {
  blog_id: Float
}

"""
columns and relationships of "storage.buckets"
"""
type buckets {
  cacheControl: String
  createdAt: timestamptz!
  downloadExpiration: Int!

  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """An aggregate relationship"""
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!
  id: String!
  maxUploadFileSize: Int!
  minUploadFileSize: Int!
  presignedUrlsEnabled: Boolean!
  updatedAt: timestamptz!
}

"""
aggregated selection of "storage.buckets"
"""
type buckets_aggregate {
  aggregate: buckets_aggregate_fields
  nodes: [buckets!]!
}

"""
aggregate fields of "storage.buckets"
"""
type buckets_aggregate_fields {
  avg: buckets_avg_fields
  count(columns: [buckets_select_column!], distinct: Boolean): Int!
  max: buckets_max_fields
  min: buckets_min_fields
  stddev: buckets_stddev_fields
  stddev_pop: buckets_stddev_pop_fields
  stddev_samp: buckets_stddev_samp_fields
  sum: buckets_sum_fields
  var_pop: buckets_var_pop_fields
  var_samp: buckets_var_samp_fields
  variance: buckets_variance_fields
}

"""aggregate avg on columns"""
type buckets_avg_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""
Boolean expression to filter rows from the table "storage.buckets". All fields are combined with a logical 'AND'.
"""
input buckets_bool_exp {
  _and: [buckets_bool_exp!]
  _not: buckets_bool_exp
  _or: [buckets_bool_exp!]
  cacheControl: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  downloadExpiration: Int_comparison_exp
  files: files_bool_exp
  files_aggregate: files_aggregate_bool_exp
  id: String_comparison_exp
  maxUploadFileSize: Int_comparison_exp
  minUploadFileSize: Int_comparison_exp
  presignedUrlsEnabled: Boolean_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "storage.buckets"
"""
enum buckets_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  buckets_pkey
}

"""
input type for incrementing numeric columns in table "storage.buckets"
"""
input buckets_inc_input {
  downloadExpiration: Int
  maxUploadFileSize: Int
  minUploadFileSize: Int
}

"""
input type for inserting data into table "storage.buckets"
"""
input buckets_insert_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  files: files_arr_rel_insert_input
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type buckets_max_fields {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type buckets_min_fields {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  updatedAt: timestamptz
}

"""
response of any mutation on the table "storage.buckets"
"""
type buckets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [buckets!]!
}

"""
input type for inserting object relation for remote table "storage.buckets"
"""
input buckets_obj_rel_insert_input {
  data: buckets_insert_input!

  """upsert condition"""
  on_conflict: buckets_on_conflict
}

"""
on_conflict condition type for table "storage.buckets"
"""
input buckets_on_conflict {
  constraint: buckets_constraint!
  update_columns: [buckets_update_column!]! = []
  where: buckets_bool_exp
}

"""Ordering options when selecting data from "storage.buckets"."""
input buckets_order_by {
  cacheControl: order_by
  createdAt: order_by
  downloadExpiration: order_by
  files_aggregate: files_aggregate_order_by
  id: order_by
  maxUploadFileSize: order_by
  minUploadFileSize: order_by
  presignedUrlsEnabled: order_by
  updatedAt: order_by
}

"""primary key columns input for table: storage.buckets"""
input buckets_pk_columns_input {
  id: String!
}

"""
select columns of table "storage.buckets"
"""
enum buckets_select_column {
  """column name"""
  cacheControl

  """column name"""
  createdAt

  """column name"""
  downloadExpiration

  """column name"""
  id

  """column name"""
  maxUploadFileSize

  """column name"""
  minUploadFileSize

  """column name"""
  presignedUrlsEnabled

  """column name"""
  updatedAt
}

"""
input type for updating data in table "storage.buckets"
"""
input buckets_set_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type buckets_stddev_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate stddev_pop on columns"""
type buckets_stddev_pop_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate stddev_samp on columns"""
type buckets_stddev_samp_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""
Streaming cursor of the table "buckets"
"""
input buckets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: buckets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input buckets_stream_cursor_value_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type buckets_sum_fields {
  downloadExpiration: Int
  maxUploadFileSize: Int
  minUploadFileSize: Int
}

"""
update columns of table "storage.buckets"
"""
enum buckets_update_column {
  """column name"""
  cacheControl

  """column name"""
  createdAt

  """column name"""
  downloadExpiration

  """column name"""
  id

  """column name"""
  maxUploadFileSize

  """column name"""
  minUploadFileSize

  """column name"""
  presignedUrlsEnabled

  """column name"""
  updatedAt
}

input buckets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: buckets_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: buckets_set_input
  where: buckets_bool_exp!
}

"""aggregate var_pop on columns"""
type buckets_var_pop_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate var_samp on columns"""
type buckets_var_samp_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate variance on columns"""
type buckets_variance_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """does the column match the given case-insensitive pattern"""
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """does the column NOT match the given pattern"""
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """does the column match the given SQL regular expression"""
  _similar: citext
}

"""
columns and relationships of "cs_message"
"""
type cs_message {
  created_at: timestamptz

  """An object relationship"""
  cs_agent: users
  cs_agent_user_id: uuid
  cs_message_content: String!
  cs_message_date: date!
  cs_message_id: Int!
  updated_at: timestamptz

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "cs_message"
"""
type cs_message_aggregate {
  aggregate: cs_message_aggregate_fields
  nodes: [cs_message!]!
}

input cs_message_aggregate_bool_exp {
  count: cs_message_aggregate_bool_exp_count
}

input cs_message_aggregate_bool_exp_count {
  arguments: [cs_message_select_column!]
  distinct: Boolean
  filter: cs_message_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "cs_message"
"""
type cs_message_aggregate_fields {
  avg: cs_message_avg_fields
  count(columns: [cs_message_select_column!], distinct: Boolean): Int!
  max: cs_message_max_fields
  min: cs_message_min_fields
  stddev: cs_message_stddev_fields
  stddev_pop: cs_message_stddev_pop_fields
  stddev_samp: cs_message_stddev_samp_fields
  sum: cs_message_sum_fields
  var_pop: cs_message_var_pop_fields
  var_samp: cs_message_var_samp_fields
  variance: cs_message_variance_fields
}

"""
order by aggregate values of table "cs_message"
"""
input cs_message_aggregate_order_by {
  avg: cs_message_avg_order_by
  count: order_by
  max: cs_message_max_order_by
  min: cs_message_min_order_by
  stddev: cs_message_stddev_order_by
  stddev_pop: cs_message_stddev_pop_order_by
  stddev_samp: cs_message_stddev_samp_order_by
  sum: cs_message_sum_order_by
  var_pop: cs_message_var_pop_order_by
  var_samp: cs_message_var_samp_order_by
  variance: cs_message_variance_order_by
}

"""
input type for inserting array relation for remote table "cs_message"
"""
input cs_message_arr_rel_insert_input {
  data: [cs_message_insert_input!]!

  """upsert condition"""
  on_conflict: cs_message_on_conflict
}

"""aggregate avg on columns"""
type cs_message_avg_fields {
  cs_message_id: Float
}

"""
order by avg() on columns of table "cs_message"
"""
input cs_message_avg_order_by {
  cs_message_id: order_by
}

"""
Boolean expression to filter rows from the table "cs_message". All fields are combined with a logical 'AND'.
"""
input cs_message_bool_exp {
  _and: [cs_message_bool_exp!]
  _not: cs_message_bool_exp
  _or: [cs_message_bool_exp!]
  created_at: timestamptz_comparison_exp
  cs_agent: users_bool_exp
  cs_agent_user_id: uuid_comparison_exp
  cs_message_content: String_comparison_exp
  cs_message_date: date_comparison_exp
  cs_message_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "cs_message"
"""
enum cs_message_constraint {
  """
  unique or primary key constraint on columns "cs_message_id"
  """
  cs_message_pkey
}

"""
input type for inserting data into table "cs_message"
"""
input cs_message_insert_input {
  created_at: timestamptz
  cs_agent: users_obj_rel_insert_input
  cs_agent_user_id: uuid
  cs_message_content: String
  cs_message_date: date
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type cs_message_max_fields {
  created_at: timestamptz
  cs_agent_user_id: uuid
  cs_message_content: String
  cs_message_date: date
  cs_message_id: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "cs_message"
"""
input cs_message_max_order_by {
  created_at: order_by
  cs_agent_user_id: order_by
  cs_message_content: order_by
  cs_message_date: order_by
  cs_message_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type cs_message_min_fields {
  created_at: timestamptz
  cs_agent_user_id: uuid
  cs_message_content: String
  cs_message_date: date
  cs_message_id: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "cs_message"
"""
input cs_message_min_order_by {
  created_at: order_by
  cs_agent_user_id: order_by
  cs_message_content: order_by
  cs_message_date: order_by
  cs_message_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "cs_message"
"""
type cs_message_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [cs_message!]!
}

"""
on_conflict condition type for table "cs_message"
"""
input cs_message_on_conflict {
  constraint: cs_message_constraint!
  update_columns: [cs_message_update_column!]! = []
  where: cs_message_bool_exp
}

"""Ordering options when selecting data from "cs_message"."""
input cs_message_order_by {
  created_at: order_by
  cs_agent: users_order_by
  cs_agent_user_id: order_by
  cs_message_content: order_by
  cs_message_date: order_by
  cs_message_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: cs_message"""
input cs_message_pk_columns_input {
  cs_message_id: Int!
}

"""
select columns of table "cs_message"
"""
enum cs_message_select_column {
  """column name"""
  created_at

  """column name"""
  cs_agent_user_id

  """column name"""
  cs_message_content

  """column name"""
  cs_message_date

  """column name"""
  cs_message_id

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "cs_message"
"""
input cs_message_set_input {
  created_at: timestamptz
  cs_agent_user_id: uuid
  cs_message_content: String
  cs_message_date: date
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate stddev on columns"""
type cs_message_stddev_fields {
  cs_message_id: Float
}

"""
order by stddev() on columns of table "cs_message"
"""
input cs_message_stddev_order_by {
  cs_message_id: order_by
}

"""aggregate stddev_pop on columns"""
type cs_message_stddev_pop_fields {
  cs_message_id: Float
}

"""
order by stddev_pop() on columns of table "cs_message"
"""
input cs_message_stddev_pop_order_by {
  cs_message_id: order_by
}

"""aggregate stddev_samp on columns"""
type cs_message_stddev_samp_fields {
  cs_message_id: Float
}

"""
order by stddev_samp() on columns of table "cs_message"
"""
input cs_message_stddev_samp_order_by {
  cs_message_id: order_by
}

"""
Streaming cursor of the table "cs_message"
"""
input cs_message_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: cs_message_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input cs_message_stream_cursor_value_input {
  created_at: timestamptz
  cs_agent_user_id: uuid
  cs_message_content: String
  cs_message_date: date
  cs_message_id: Int
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate sum on columns"""
type cs_message_sum_fields {
  cs_message_id: Int
}

"""
order by sum() on columns of table "cs_message"
"""
input cs_message_sum_order_by {
  cs_message_id: order_by
}

"""
update columns of table "cs_message"
"""
enum cs_message_update_column {
  """column name"""
  created_at

  """column name"""
  cs_agent_user_id

  """column name"""
  cs_message_content

  """column name"""
  cs_message_date

  """column name"""
  updated_at

  """column name"""
  user_id
}

input cs_message_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: cs_message_set_input
  where: cs_message_bool_exp!
}

"""aggregate var_pop on columns"""
type cs_message_var_pop_fields {
  cs_message_id: Float
}

"""
order by var_pop() on columns of table "cs_message"
"""
input cs_message_var_pop_order_by {
  cs_message_id: order_by
}

"""aggregate var_samp on columns"""
type cs_message_var_samp_fields {
  cs_message_id: Float
}

"""
order by var_samp() on columns of table "cs_message"
"""
input cs_message_var_samp_order_by {
  cs_message_id: order_by
}

"""aggregate variance on columns"""
type cs_message_variance_fields {
  cs_message_id: Float
}

"""
order by variance() on columns of table "cs_message"
"""
input cs_message_variance_order_by {
  cs_message_id: order_by
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "storage.files"
"""
type files {
  """An object relationship"""
  bucket: buckets!
  bucketId: String!
  createdAt: timestamptz!
  etag: String
  id: uuid!
  isUploaded: Boolean
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz!
  uploadedByUserId: uuid
}

"""
aggregated selection of "storage.files"
"""
type files_aggregate {
  aggregate: files_aggregate_fields
  nodes: [files!]!
}

input files_aggregate_bool_exp {
  bool_and: files_aggregate_bool_exp_bool_and
  bool_or: files_aggregate_bool_exp_bool_or
  count: files_aggregate_bool_exp_count
}

input files_aggregate_bool_exp_bool_and {
  arguments: files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: files_bool_exp
  predicate: Boolean_comparison_exp!
}

input files_aggregate_bool_exp_bool_or {
  arguments: files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: files_bool_exp
  predicate: Boolean_comparison_exp!
}

input files_aggregate_bool_exp_count {
  arguments: [files_select_column!]
  distinct: Boolean
  filter: files_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "storage.files"
"""
type files_aggregate_fields {
  avg: files_avg_fields
  count(columns: [files_select_column!], distinct: Boolean): Int!
  max: files_max_fields
  min: files_min_fields
  stddev: files_stddev_fields
  stddev_pop: files_stddev_pop_fields
  stddev_samp: files_stddev_samp_fields
  sum: files_sum_fields
  var_pop: files_var_pop_fields
  var_samp: files_var_samp_fields
  variance: files_variance_fields
}

"""
order by aggregate values of table "storage.files"
"""
input files_aggregate_order_by {
  avg: files_avg_order_by
  count: order_by
  max: files_max_order_by
  min: files_min_order_by
  stddev: files_stddev_order_by
  stddev_pop: files_stddev_pop_order_by
  stddev_samp: files_stddev_samp_order_by
  sum: files_sum_order_by
  var_pop: files_var_pop_order_by
  var_samp: files_var_samp_order_by
  variance: files_variance_order_by
}

"""
input type for inserting array relation for remote table "storage.files"
"""
input files_arr_rel_insert_input {
  data: [files_insert_input!]!

  """upsert condition"""
  on_conflict: files_on_conflict
}

"""aggregate avg on columns"""
type files_avg_fields {
  size: Float
}

"""
order by avg() on columns of table "storage.files"
"""
input files_avg_order_by {
  size: order_by
}

"""
Boolean expression to filter rows from the table "storage.files". All fields are combined with a logical 'AND'.
"""
input files_bool_exp {
  _and: [files_bool_exp!]
  _not: files_bool_exp
  _or: [files_bool_exp!]
  bucket: buckets_bool_exp
  bucketId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  etag: String_comparison_exp
  id: uuid_comparison_exp
  isUploaded: Boolean_comparison_exp
  mimeType: String_comparison_exp
  name: String_comparison_exp
  size: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
  uploadedByUserId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "storage.files"
"""
enum files_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  files_pkey
}

"""
input type for incrementing numeric columns in table "storage.files"
"""
input files_inc_input {
  size: Int
}

"""
input type for inserting data into table "storage.files"
"""
input files_insert_input {
  bucket: buckets_obj_rel_insert_input
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""aggregate max on columns"""
type files_max_fields {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""
order by max() on columns of table "storage.files"
"""
input files_max_order_by {
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

"""aggregate min on columns"""
type files_min_fields {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""
order by min() on columns of table "storage.files"
"""
input files_min_order_by {
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

"""
response of any mutation on the table "storage.files"
"""
type files_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [files!]!
}

"""
on_conflict condition type for table "storage.files"
"""
input files_on_conflict {
  constraint: files_constraint!
  update_columns: [files_update_column!]! = []
  where: files_bool_exp
}

"""Ordering options when selecting data from "storage.files"."""
input files_order_by {
  bucket: buckets_order_by
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  isUploaded: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

"""primary key columns input for table: storage.files"""
input files_pk_columns_input {
  id: uuid!
}

"""
select columns of table "storage.files"
"""
enum files_select_column {
  """column name"""
  bucketId

  """column name"""
  createdAt

  """column name"""
  etag

  """column name"""
  id

  """column name"""
  isUploaded

  """column name"""
  mimeType

  """column name"""
  name

  """column name"""
  size

  """column name"""
  updatedAt

  """column name"""
  uploadedByUserId
}

"""
select "files_aggregate_bool_exp_bool_and_arguments_columns" columns of table "storage.files"
"""
enum files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  isUploaded
}

"""
select "files_aggregate_bool_exp_bool_or_arguments_columns" columns of table "storage.files"
"""
enum files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  isUploaded
}

"""
input type for updating data in table "storage.files"
"""
input files_set_input {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""aggregate stddev on columns"""
type files_stddev_fields {
  size: Float
}

"""
order by stddev() on columns of table "storage.files"
"""
input files_stddev_order_by {
  size: order_by
}

"""aggregate stddev_pop on columns"""
type files_stddev_pop_fields {
  size: Float
}

"""
order by stddev_pop() on columns of table "storage.files"
"""
input files_stddev_pop_order_by {
  size: order_by
}

"""aggregate stddev_samp on columns"""
type files_stddev_samp_fields {
  size: Float
}

"""
order by stddev_samp() on columns of table "storage.files"
"""
input files_stddev_samp_order_by {
  size: order_by
}

"""
Streaming cursor of the table "files"
"""
input files_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: files_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input files_stream_cursor_value_input {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""aggregate sum on columns"""
type files_sum_fields {
  size: Int
}

"""
order by sum() on columns of table "storage.files"
"""
input files_sum_order_by {
  size: order_by
}

"""
update columns of table "storage.files"
"""
enum files_update_column {
  """column name"""
  bucketId

  """column name"""
  createdAt

  """column name"""
  etag

  """column name"""
  id

  """column name"""
  isUploaded

  """column name"""
  mimeType

  """column name"""
  name

  """column name"""
  size

  """column name"""
  updatedAt

  """column name"""
  uploadedByUserId
}

input files_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: files_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: files_set_input
  where: files_bool_exp!
}

"""aggregate var_pop on columns"""
type files_var_pop_fields {
  size: Float
}

"""
order by var_pop() on columns of table "storage.files"
"""
input files_var_pop_order_by {
  size: order_by
}

"""aggregate var_samp on columns"""
type files_var_samp_fields {
  size: Float
}

"""
order by var_samp() on columns of table "storage.files"
"""
input files_var_samp_order_by {
  size: order_by
}

"""aggregate variance on columns"""
type files_variance_fields {
  size: Float
}

"""
order by variance() on columns of table "storage.files"
"""
input files_variance_order_by {
  size: order_by
}

"""
columns and relationships of "investment"
"""
type investment {
  created_at: timestamptz
  investment_amount: Int!
  investment_id: Int!

  """An object relationship"""
  investor: investor!
  investor_id: Int!

  """An object relationship"""
  payment_investment: payment_investment

  """An object relationship"""
  proposal: proposal!
  proposal_id: Int!
  updated_at: timestamptz
}

"""
aggregated selection of "investment"
"""
type investment_aggregate {
  aggregate: investment_aggregate_fields
  nodes: [investment!]!
}

input investment_aggregate_bool_exp {
  count: investment_aggregate_bool_exp_count
}

input investment_aggregate_bool_exp_count {
  arguments: [investment_select_column!]
  distinct: Boolean
  filter: investment_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "investment"
"""
type investment_aggregate_fields {
  avg: investment_avg_fields
  count(columns: [investment_select_column!], distinct: Boolean): Int!
  max: investment_max_fields
  min: investment_min_fields
  stddev: investment_stddev_fields
  stddev_pop: investment_stddev_pop_fields
  stddev_samp: investment_stddev_samp_fields
  sum: investment_sum_fields
  var_pop: investment_var_pop_fields
  var_samp: investment_var_samp_fields
  variance: investment_variance_fields
}

"""
order by aggregate values of table "investment"
"""
input investment_aggregate_order_by {
  avg: investment_avg_order_by
  count: order_by
  max: investment_max_order_by
  min: investment_min_order_by
  stddev: investment_stddev_order_by
  stddev_pop: investment_stddev_pop_order_by
  stddev_samp: investment_stddev_samp_order_by
  sum: investment_sum_order_by
  var_pop: investment_var_pop_order_by
  var_samp: investment_var_samp_order_by
  variance: investment_variance_order_by
}

"""
input type for inserting array relation for remote table "investment"
"""
input investment_arr_rel_insert_input {
  data: [investment_insert_input!]!

  """upsert condition"""
  on_conflict: investment_on_conflict
}

"""aggregate avg on columns"""
type investment_avg_fields {
  investment_amount: Float
  investment_id: Float
  investor_id: Float
  proposal_id: Float
}

"""
order by avg() on columns of table "investment"
"""
input investment_avg_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""
Boolean expression to filter rows from the table "investment". All fields are combined with a logical 'AND'.
"""
input investment_bool_exp {
  _and: [investment_bool_exp!]
  _not: investment_bool_exp
  _or: [investment_bool_exp!]
  created_at: timestamptz_comparison_exp
  investment_amount: Int_comparison_exp
  investment_id: Int_comparison_exp
  investor: investor_bool_exp
  investor_id: Int_comparison_exp
  payment_investment: payment_investment_bool_exp
  proposal: proposal_bool_exp
  proposal_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "investment"
"""
enum investment_constraint {
  """
  unique or primary key constraint on columns "investment_id"
  """
  investment_pkey
}

"""
input type for incrementing numeric columns in table "investment"
"""
input investment_inc_input {
  investment_amount: Int
  investor_id: Int
  proposal_id: Int
}

"""
input type for inserting data into table "investment"
"""
input investment_insert_input {
  created_at: timestamptz
  investment_amount: Int
  investor: investor_obj_rel_insert_input
  investor_id: Int
  payment_investment: payment_investment_obj_rel_insert_input
  proposal: proposal_obj_rel_insert_input
  proposal_id: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type investment_max_fields {
  created_at: timestamptz
  investment_amount: Int
  investment_id: Int
  investor_id: Int
  proposal_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "investment"
"""
input investment_max_order_by {
  created_at: order_by
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type investment_min_fields {
  created_at: timestamptz
  investment_amount: Int
  investment_id: Int
  investor_id: Int
  proposal_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "investment"
"""
input investment_min_order_by {
  created_at: order_by
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "investment"
"""
type investment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [investment!]!
}

"""
input type for inserting object relation for remote table "investment"
"""
input investment_obj_rel_insert_input {
  data: investment_insert_input!

  """upsert condition"""
  on_conflict: investment_on_conflict
}

"""
on_conflict condition type for table "investment"
"""
input investment_on_conflict {
  constraint: investment_constraint!
  update_columns: [investment_update_column!]! = []
  where: investment_bool_exp
}

"""Ordering options when selecting data from "investment"."""
input investment_order_by {
  created_at: order_by
  investment_amount: order_by
  investment_id: order_by
  investor: investor_order_by
  investor_id: order_by
  payment_investment: payment_investment_order_by
  proposal: proposal_order_by
  proposal_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: investment"""
input investment_pk_columns_input {
  investment_id: Int!
}

"""
select columns of table "investment"
"""
enum investment_select_column {
  """column name"""
  created_at

  """column name"""
  investment_amount

  """column name"""
  investment_id

  """column name"""
  investor_id

  """column name"""
  proposal_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "investment"
"""
input investment_set_input {
  created_at: timestamptz
  investment_amount: Int
  investor_id: Int
  proposal_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type investment_stddev_fields {
  investment_amount: Float
  investment_id: Float
  investor_id: Float
  proposal_id: Float
}

"""
order by stddev() on columns of table "investment"
"""
input investment_stddev_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""aggregate stddev_pop on columns"""
type investment_stddev_pop_fields {
  investment_amount: Float
  investment_id: Float
  investor_id: Float
  proposal_id: Float
}

"""
order by stddev_pop() on columns of table "investment"
"""
input investment_stddev_pop_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""aggregate stddev_samp on columns"""
type investment_stddev_samp_fields {
  investment_amount: Float
  investment_id: Float
  investor_id: Float
  proposal_id: Float
}

"""
order by stddev_samp() on columns of table "investment"
"""
input investment_stddev_samp_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""
Streaming cursor of the table "investment"
"""
input investment_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: investment_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input investment_stream_cursor_value_input {
  created_at: timestamptz
  investment_amount: Int
  investment_id: Int
  investor_id: Int
  proposal_id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type investment_sum_fields {
  investment_amount: Int
  investment_id: Int
  investor_id: Int
  proposal_id: Int
}

"""
order by sum() on columns of table "investment"
"""
input investment_sum_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""
update columns of table "investment"
"""
enum investment_update_column {
  """column name"""
  created_at

  """column name"""
  investment_amount

  """column name"""
  investor_id

  """column name"""
  proposal_id

  """column name"""
  updated_at
}

input investment_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: investment_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: investment_set_input
  where: investment_bool_exp!
}

"""aggregate var_pop on columns"""
type investment_var_pop_fields {
  investment_amount: Float
  investment_id: Float
  investor_id: Float
  proposal_id: Float
}

"""
order by var_pop() on columns of table "investment"
"""
input investment_var_pop_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""aggregate var_samp on columns"""
type investment_var_samp_fields {
  investment_amount: Float
  investment_id: Float
  investor_id: Float
  proposal_id: Float
}

"""
order by var_samp() on columns of table "investment"
"""
input investment_var_samp_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""aggregate variance on columns"""
type investment_variance_fields {
  investment_amount: Float
  investment_id: Float
  investor_id: Float
  proposal_id: Float
}

"""
order by variance() on columns of table "investment"
"""
input investment_variance_order_by {
  investment_amount: order_by
  investment_id: order_by
  investor_id: order_by
  proposal_id: order_by
}

"""
columns and relationships of "investor"
"""
type investor {
  created_at: timestamptz

  """An array relationship"""
  investments(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): [investment!]!

  """An aggregate relationship"""
  investments_aggregate(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): investment_aggregate!
  investor_id: Int!
  investor_investment_amount: Int!
  investor_name: String!
  updated_at: timestamptz

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "investor"
"""
type investor_aggregate {
  aggregate: investor_aggregate_fields
  nodes: [investor!]!
}

"""
aggregate fields of "investor"
"""
type investor_aggregate_fields {
  avg: investor_avg_fields
  count(columns: [investor_select_column!], distinct: Boolean): Int!
  max: investor_max_fields
  min: investor_min_fields
  stddev: investor_stddev_fields
  stddev_pop: investor_stddev_pop_fields
  stddev_samp: investor_stddev_samp_fields
  sum: investor_sum_fields
  var_pop: investor_var_pop_fields
  var_samp: investor_var_samp_fields
  variance: investor_variance_fields
}

"""aggregate avg on columns"""
type investor_avg_fields {
  investor_id: Float
  investor_investment_amount: Float
}

"""
Boolean expression to filter rows from the table "investor". All fields are combined with a logical 'AND'.
"""
input investor_bool_exp {
  _and: [investor_bool_exp!]
  _not: investor_bool_exp
  _or: [investor_bool_exp!]
  created_at: timestamptz_comparison_exp
  investments: investment_bool_exp
  investments_aggregate: investment_aggregate_bool_exp
  investor_id: Int_comparison_exp
  investor_investment_amount: Int_comparison_exp
  investor_name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "investor"
"""
enum investor_constraint {
  """
  unique or primary key constraint on columns "investor_id"
  """
  investor_pkey

  """
  unique or primary key constraint on columns "user_id"
  """
  investor_user_id_key
}

"""
input type for incrementing numeric columns in table "investor"
"""
input investor_inc_input {
  investor_investment_amount: Int
}

"""
input type for inserting data into table "investor"
"""
input investor_insert_input {
  created_at: timestamptz
  investments: investment_arr_rel_insert_input
  investor_investment_amount: Int
  investor_name: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type investor_max_fields {
  created_at: timestamptz
  investor_id: Int
  investor_investment_amount: Int
  investor_name: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate min on columns"""
type investor_min_fields {
  created_at: timestamptz
  investor_id: Int
  investor_investment_amount: Int
  investor_name: String
  updated_at: timestamptz
  user_id: uuid
}

"""
response of any mutation on the table "investor"
"""
type investor_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [investor!]!
}

"""
input type for inserting object relation for remote table "investor"
"""
input investor_obj_rel_insert_input {
  data: investor_insert_input!

  """upsert condition"""
  on_conflict: investor_on_conflict
}

"""
on_conflict condition type for table "investor"
"""
input investor_on_conflict {
  constraint: investor_constraint!
  update_columns: [investor_update_column!]! = []
  where: investor_bool_exp
}

"""Ordering options when selecting data from "investor"."""
input investor_order_by {
  created_at: order_by
  investments_aggregate: investment_aggregate_order_by
  investor_id: order_by
  investor_investment_amount: order_by
  investor_name: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: investor"""
input investor_pk_columns_input {
  investor_id: Int!
}

"""
select columns of table "investor"
"""
enum investor_select_column {
  """column name"""
  created_at

  """column name"""
  investor_id

  """column name"""
  investor_investment_amount

  """column name"""
  investor_name

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "investor"
"""
input investor_set_input {
  created_at: timestamptz
  investor_investment_amount: Int
  investor_name: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate stddev on columns"""
type investor_stddev_fields {
  investor_id: Float
  investor_investment_amount: Float
}

"""aggregate stddev_pop on columns"""
type investor_stddev_pop_fields {
  investor_id: Float
  investor_investment_amount: Float
}

"""aggregate stddev_samp on columns"""
type investor_stddev_samp_fields {
  investor_id: Float
  investor_investment_amount: Float
}

"""
Streaming cursor of the table "investor"
"""
input investor_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: investor_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input investor_stream_cursor_value_input {
  created_at: timestamptz
  investor_id: Int
  investor_investment_amount: Int
  investor_name: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate sum on columns"""
type investor_sum_fields {
  investor_id: Int
  investor_investment_amount: Int
}

"""
update columns of table "investor"
"""
enum investor_update_column {
  """column name"""
  created_at

  """column name"""
  investor_investment_amount

  """column name"""
  investor_name

  """column name"""
  updated_at

  """column name"""
  user_id
}

input investor_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: investor_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: investor_set_input
  where: investor_bool_exp!
}

"""aggregate var_pop on columns"""
type investor_var_pop_fields {
  investor_id: Float
  investor_investment_amount: Float
}

"""aggregate var_samp on columns"""
type investor_var_samp_fields {
  investor_id: Float
  investor_investment_amount: Float
}

"""aggregate variance on columns"""
type investor_variance_fields {
  investor_id: Float
  investor_investment_amount: Float
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete single row from the table: "auth.providers"
  """
  deleteAuthProvider(id: String!): authProviders

  """
  delete single row from the table: "auth.provider_requests"
  """
  deleteAuthProviderRequest(id: uuid!): authProviderRequests

  """
  delete data from the table: "auth.provider_requests"
  """
  deleteAuthProviderRequests(
    """filter the rows which have to be deleted"""
    where: authProviderRequests_bool_exp!
  ): authProviderRequests_mutation_response

  """
  delete data from the table: "auth.providers"
  """
  deleteAuthProviders(
    """filter the rows which have to be deleted"""
    where: authProviders_bool_exp!
  ): authProviders_mutation_response

  """
  delete single row from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshToken(id: uuid!): authRefreshTokens

  """
  delete single row from the table: "auth.refresh_token_types"
  """
  deleteAuthRefreshTokenType(value: String!): authRefreshTokenTypes

  """
  delete data from the table: "auth.refresh_token_types"
  """
  deleteAuthRefreshTokenTypes(
    """filter the rows which have to be deleted"""
    where: authRefreshTokenTypes_bool_exp!
  ): authRefreshTokenTypes_mutation_response

  """
  delete data from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshTokens(
    """filter the rows which have to be deleted"""
    where: authRefreshTokens_bool_exp!
  ): authRefreshTokens_mutation_response

  """
  delete single row from the table: "auth.roles"
  """
  deleteAuthRole(role: String!): authRoles

  """
  delete data from the table: "auth.roles"
  """
  deleteAuthRoles(
    """filter the rows which have to be deleted"""
    where: authRoles_bool_exp!
  ): authRoles_mutation_response

  """
  delete single row from the table: "auth.user_providers"
  """
  deleteAuthUserProvider(id: uuid!): authUserProviders

  """
  delete data from the table: "auth.user_providers"
  """
  deleteAuthUserProviders(
    """filter the rows which have to be deleted"""
    where: authUserProviders_bool_exp!
  ): authUserProviders_mutation_response

  """
  delete single row from the table: "auth.user_roles"
  """
  deleteAuthUserRole(id: uuid!): authUserRoles

  """
  delete data from the table: "auth.user_roles"
  """
  deleteAuthUserRoles(
    """filter the rows which have to be deleted"""
    where: authUserRoles_bool_exp!
  ): authUserRoles_mutation_response

  """
  delete single row from the table: "auth.user_security_keys"
  """
  deleteAuthUserSecurityKey(id: uuid!): authUserSecurityKeys

  """
  delete data from the table: "auth.user_security_keys"
  """
  deleteAuthUserSecurityKeys(
    """filter the rows which have to be deleted"""
    where: authUserSecurityKeys_bool_exp!
  ): authUserSecurityKeys_mutation_response

  """
  delete single row from the table: "storage.buckets"
  """
  deleteBucket(id: String!): buckets

  """
  delete data from the table: "storage.buckets"
  """
  deleteBuckets(
    """filter the rows which have to be deleted"""
    where: buckets_bool_exp!
  ): buckets_mutation_response

  """
  delete single row from the table: "storage.files"
  """
  deleteFile(id: uuid!): files

  """
  delete data from the table: "storage.files"
  """
  deleteFiles(
    """filter the rows which have to be deleted"""
    where: files_bool_exp!
  ): files_mutation_response

  """
  delete single row from the table: "auth.users"
  """
  deleteUser(id: uuid!): users

  """
  delete data from the table: "auth.users"
  """
  deleteUsers(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete data from the table: "bank_card"
  """
  delete_bank_card(
    """filter the rows which have to be deleted"""
    where: bank_card_bool_exp!
  ): bank_card_mutation_response

  """
  delete single row from the table: "bank_card"
  """
  delete_bank_card_by_pk(bank_card_id: uuid!): bank_card

  """
  delete data from the table: "blog"
  """
  delete_blog(
    """filter the rows which have to be deleted"""
    where: blog_bool_exp!
  ): blog_mutation_response

  """
  delete single row from the table: "blog"
  """
  delete_blog_by_pk(blog_id: Int!): blog

  """
  delete data from the table: "cs_message"
  """
  delete_cs_message(
    """filter the rows which have to be deleted"""
    where: cs_message_bool_exp!
  ): cs_message_mutation_response

  """
  delete single row from the table: "cs_message"
  """
  delete_cs_message_by_pk(cs_message_id: Int!): cs_message

  """
  delete data from the table: "investment"
  """
  delete_investment(
    """filter the rows which have to be deleted"""
    where: investment_bool_exp!
  ): investment_mutation_response

  """
  delete single row from the table: "investment"
  """
  delete_investment_by_pk(investment_id: Int!): investment

  """
  delete data from the table: "investor"
  """
  delete_investor(
    """filter the rows which have to be deleted"""
    where: investor_bool_exp!
  ): investor_mutation_response

  """
  delete single row from the table: "investor"
  """
  delete_investor_by_pk(investor_id: Int!): investor

  """
  delete data from the table: "payment_due"
  """
  delete_payment_due(
    """filter the rows which have to be deleted"""
    where: payment_due_bool_exp!
  ): payment_due_mutation_response

  """
  delete single row from the table: "payment_due"
  """
  delete_payment_due_by_pk(payment_due_id: uuid!): payment_due

  """
  delete data from the table: "payment_investment"
  """
  delete_payment_investment(
    """filter the rows which have to be deleted"""
    where: payment_investment_bool_exp!
  ): payment_investment_mutation_response

  """
  delete single row from the table: "payment_investment"
  """
  delete_payment_investment_by_pk(payment_investment_id: uuid!): payment_investment

  """
  delete data from the table: "profile"
  """
  delete_profile(
    """filter the rows which have to be deleted"""
    where: profile_bool_exp!
  ): profile_mutation_response

  """
  delete single row from the table: "profile"
  """
  delete_profile_by_pk(profile_id: Int!): profile

  """
  delete data from the table: "proposal"
  """
  delete_proposal(
    """filter the rows which have to be deleted"""
    where: proposal_bool_exp!
  ): proposal_mutation_response

  """
  delete single row from the table: "proposal"
  """
  delete_proposal_by_pk(proposal_id: Int!): proposal

  """
  delete data from the table: "umkm"
  """
  delete_umkm(
    """filter the rows which have to be deleted"""
    where: umkm_bool_exp!
  ): umkm_mutation_response

  """
  delete single row from the table: "umkm"
  """
  delete_umkm_by_pk(umkm_id: Int!): umkm

  """
  insert a single row into the table: "auth.providers"
  """
  insertAuthProvider(
    """the row to be inserted"""
    object: authProviders_insert_input!

    """upsert condition"""
    on_conflict: authProviders_on_conflict
  ): authProviders

  """
  insert a single row into the table: "auth.provider_requests"
  """
  insertAuthProviderRequest(
    """the row to be inserted"""
    object: authProviderRequests_insert_input!

    """upsert condition"""
    on_conflict: authProviderRequests_on_conflict
  ): authProviderRequests

  """
  insert data into the table: "auth.provider_requests"
  """
  insertAuthProviderRequests(
    """the rows to be inserted"""
    objects: [authProviderRequests_insert_input!]!

    """upsert condition"""
    on_conflict: authProviderRequests_on_conflict
  ): authProviderRequests_mutation_response

  """
  insert data into the table: "auth.providers"
  """
  insertAuthProviders(
    """the rows to be inserted"""
    objects: [authProviders_insert_input!]!

    """upsert condition"""
    on_conflict: authProviders_on_conflict
  ): authProviders_mutation_response

  """
  insert a single row into the table: "auth.refresh_tokens"
  """
  insertAuthRefreshToken(
    """the row to be inserted"""
    object: authRefreshTokens_insert_input!

    """upsert condition"""
    on_conflict: authRefreshTokens_on_conflict
  ): authRefreshTokens

  """
  insert a single row into the table: "auth.refresh_token_types"
  """
  insertAuthRefreshTokenType(
    """the row to be inserted"""
    object: authRefreshTokenTypes_insert_input!

    """upsert condition"""
    on_conflict: authRefreshTokenTypes_on_conflict
  ): authRefreshTokenTypes

  """
  insert data into the table: "auth.refresh_token_types"
  """
  insertAuthRefreshTokenTypes(
    """the rows to be inserted"""
    objects: [authRefreshTokenTypes_insert_input!]!

    """upsert condition"""
    on_conflict: authRefreshTokenTypes_on_conflict
  ): authRefreshTokenTypes_mutation_response

  """
  insert data into the table: "auth.refresh_tokens"
  """
  insertAuthRefreshTokens(
    """the rows to be inserted"""
    objects: [authRefreshTokens_insert_input!]!

    """upsert condition"""
    on_conflict: authRefreshTokens_on_conflict
  ): authRefreshTokens_mutation_response

  """
  insert a single row into the table: "auth.roles"
  """
  insertAuthRole(
    """the row to be inserted"""
    object: authRoles_insert_input!

    """upsert condition"""
    on_conflict: authRoles_on_conflict
  ): authRoles

  """
  insert data into the table: "auth.roles"
  """
  insertAuthRoles(
    """the rows to be inserted"""
    objects: [authRoles_insert_input!]!

    """upsert condition"""
    on_conflict: authRoles_on_conflict
  ): authRoles_mutation_response

  """
  insert a single row into the table: "auth.user_providers"
  """
  insertAuthUserProvider(
    """the row to be inserted"""
    object: authUserProviders_insert_input!

    """upsert condition"""
    on_conflict: authUserProviders_on_conflict
  ): authUserProviders

  """
  insert data into the table: "auth.user_providers"
  """
  insertAuthUserProviders(
    """the rows to be inserted"""
    objects: [authUserProviders_insert_input!]!

    """upsert condition"""
    on_conflict: authUserProviders_on_conflict
  ): authUserProviders_mutation_response

  """
  insert a single row into the table: "auth.user_roles"
  """
  insertAuthUserRole(
    """the row to be inserted"""
    object: authUserRoles_insert_input!

    """upsert condition"""
    on_conflict: authUserRoles_on_conflict
  ): authUserRoles

  """
  insert data into the table: "auth.user_roles"
  """
  insertAuthUserRoles(
    """the rows to be inserted"""
    objects: [authUserRoles_insert_input!]!

    """upsert condition"""
    on_conflict: authUserRoles_on_conflict
  ): authUserRoles_mutation_response

  """
  insert a single row into the table: "auth.user_security_keys"
  """
  insertAuthUserSecurityKey(
    """the row to be inserted"""
    object: authUserSecurityKeys_insert_input!

    """upsert condition"""
    on_conflict: authUserSecurityKeys_on_conflict
  ): authUserSecurityKeys

  """
  insert data into the table: "auth.user_security_keys"
  """
  insertAuthUserSecurityKeys(
    """the rows to be inserted"""
    objects: [authUserSecurityKeys_insert_input!]!

    """upsert condition"""
    on_conflict: authUserSecurityKeys_on_conflict
  ): authUserSecurityKeys_mutation_response

  """
  insert a single row into the table: "storage.buckets"
  """
  insertBucket(
    """the row to be inserted"""
    object: buckets_insert_input!

    """upsert condition"""
    on_conflict: buckets_on_conflict
  ): buckets

  """
  insert data into the table: "storage.buckets"
  """
  insertBuckets(
    """the rows to be inserted"""
    objects: [buckets_insert_input!]!

    """upsert condition"""
    on_conflict: buckets_on_conflict
  ): buckets_mutation_response

  """
  insert a single row into the table: "storage.files"
  """
  insertFile(
    """the row to be inserted"""
    object: files_insert_input!

    """upsert condition"""
    on_conflict: files_on_conflict
  ): files

  """
  insert data into the table: "storage.files"
  """
  insertFiles(
    """the rows to be inserted"""
    objects: [files_insert_input!]!

    """upsert condition"""
    on_conflict: files_on_conflict
  ): files_mutation_response

  """
  insert a single row into the table: "auth.users"
  """
  insertUser(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "auth.users"
  """
  insertUsers(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert data into the table: "bank_card"
  """
  insert_bank_card(
    """the rows to be inserted"""
    objects: [bank_card_insert_input!]!

    """upsert condition"""
    on_conflict: bank_card_on_conflict
  ): bank_card_mutation_response

  """
  insert a single row into the table: "bank_card"
  """
  insert_bank_card_one(
    """the row to be inserted"""
    object: bank_card_insert_input!

    """upsert condition"""
    on_conflict: bank_card_on_conflict
  ): bank_card

  """
  insert data into the table: "blog"
  """
  insert_blog(
    """the rows to be inserted"""
    objects: [blog_insert_input!]!

    """upsert condition"""
    on_conflict: blog_on_conflict
  ): blog_mutation_response

  """
  insert a single row into the table: "blog"
  """
  insert_blog_one(
    """the row to be inserted"""
    object: blog_insert_input!

    """upsert condition"""
    on_conflict: blog_on_conflict
  ): blog

  """
  insert data into the table: "cs_message"
  """
  insert_cs_message(
    """the rows to be inserted"""
    objects: [cs_message_insert_input!]!

    """upsert condition"""
    on_conflict: cs_message_on_conflict
  ): cs_message_mutation_response

  """
  insert a single row into the table: "cs_message"
  """
  insert_cs_message_one(
    """the row to be inserted"""
    object: cs_message_insert_input!

    """upsert condition"""
    on_conflict: cs_message_on_conflict
  ): cs_message

  """
  insert data into the table: "investment"
  """
  insert_investment(
    """the rows to be inserted"""
    objects: [investment_insert_input!]!

    """upsert condition"""
    on_conflict: investment_on_conflict
  ): investment_mutation_response

  """
  insert a single row into the table: "investment"
  """
  insert_investment_one(
    """the row to be inserted"""
    object: investment_insert_input!

    """upsert condition"""
    on_conflict: investment_on_conflict
  ): investment

  """
  insert data into the table: "investor"
  """
  insert_investor(
    """the rows to be inserted"""
    objects: [investor_insert_input!]!

    """upsert condition"""
    on_conflict: investor_on_conflict
  ): investor_mutation_response

  """
  insert a single row into the table: "investor"
  """
  insert_investor_one(
    """the row to be inserted"""
    object: investor_insert_input!

    """upsert condition"""
    on_conflict: investor_on_conflict
  ): investor

  """
  insert data into the table: "payment_due"
  """
  insert_payment_due(
    """the rows to be inserted"""
    objects: [payment_due_insert_input!]!

    """upsert condition"""
    on_conflict: payment_due_on_conflict
  ): payment_due_mutation_response

  """
  insert a single row into the table: "payment_due"
  """
  insert_payment_due_one(
    """the row to be inserted"""
    object: payment_due_insert_input!

    """upsert condition"""
    on_conflict: payment_due_on_conflict
  ): payment_due

  """
  insert data into the table: "payment_investment"
  """
  insert_payment_investment(
    """the rows to be inserted"""
    objects: [payment_investment_insert_input!]!

    """upsert condition"""
    on_conflict: payment_investment_on_conflict
  ): payment_investment_mutation_response

  """
  insert a single row into the table: "payment_investment"
  """
  insert_payment_investment_one(
    """the row to be inserted"""
    object: payment_investment_insert_input!

    """upsert condition"""
    on_conflict: payment_investment_on_conflict
  ): payment_investment

  """
  insert data into the table: "profile"
  """
  insert_profile(
    """the rows to be inserted"""
    objects: [profile_insert_input!]!

    """upsert condition"""
    on_conflict: profile_on_conflict
  ): profile_mutation_response

  """
  insert a single row into the table: "profile"
  """
  insert_profile_one(
    """the row to be inserted"""
    object: profile_insert_input!

    """upsert condition"""
    on_conflict: profile_on_conflict
  ): profile

  """
  insert data into the table: "proposal"
  """
  insert_proposal(
    """the rows to be inserted"""
    objects: [proposal_insert_input!]!

    """upsert condition"""
    on_conflict: proposal_on_conflict
  ): proposal_mutation_response

  """
  insert a single row into the table: "proposal"
  """
  insert_proposal_one(
    """the row to be inserted"""
    object: proposal_insert_input!

    """upsert condition"""
    on_conflict: proposal_on_conflict
  ): proposal

  """
  insert data into the table: "umkm"
  """
  insert_umkm(
    """the rows to be inserted"""
    objects: [umkm_insert_input!]!

    """upsert condition"""
    on_conflict: umkm_on_conflict
  ): umkm_mutation_response

  """
  insert a single row into the table: "umkm"
  """
  insert_umkm_one(
    """the row to be inserted"""
    object: umkm_insert_input!

    """upsert condition"""
    on_conflict: umkm_on_conflict
  ): umkm

  """
  update single row of the table: "auth.providers"
  """
  updateAuthProvider(
    """sets the columns of the filtered rows to the given values"""
    _set: authProviders_set_input
    pk_columns: authProviders_pk_columns_input!
  ): authProviders

  """
  update single row of the table: "auth.provider_requests"
  """
  updateAuthProviderRequest(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authProviderRequests_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authProviderRequests_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authProviderRequests_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authProviderRequests_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authProviderRequests_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: authProviderRequests_set_input
    pk_columns: authProviderRequests_pk_columns_input!
  ): authProviderRequests

  """
  update data of the table: "auth.provider_requests"
  """
  updateAuthProviderRequests(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authProviderRequests_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authProviderRequests_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authProviderRequests_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authProviderRequests_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authProviderRequests_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: authProviderRequests_set_input

    """filter the rows which have to be updated"""
    where: authProviderRequests_bool_exp!
  ): authProviderRequests_mutation_response

  """
  update data of the table: "auth.providers"
  """
  updateAuthProviders(
    """sets the columns of the filtered rows to the given values"""
    _set: authProviders_set_input

    """filter the rows which have to be updated"""
    where: authProviders_bool_exp!
  ): authProviders_mutation_response

  """
  update single row of the table: "auth.refresh_tokens"
  """
  updateAuthRefreshToken(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authRefreshTokens_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authRefreshTokens_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authRefreshTokens_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authRefreshTokens_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authRefreshTokens_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokens_set_input
    pk_columns: authRefreshTokens_pk_columns_input!
  ): authRefreshTokens

  """
  update single row of the table: "auth.refresh_token_types"
  """
  updateAuthRefreshTokenType(
    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokenTypes_set_input
    pk_columns: authRefreshTokenTypes_pk_columns_input!
  ): authRefreshTokenTypes

  """
  update data of the table: "auth.refresh_token_types"
  """
  updateAuthRefreshTokenTypes(
    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokenTypes_set_input

    """filter the rows which have to be updated"""
    where: authRefreshTokenTypes_bool_exp!
  ): authRefreshTokenTypes_mutation_response

  """
  update data of the table: "auth.refresh_tokens"
  """
  updateAuthRefreshTokens(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authRefreshTokens_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authRefreshTokens_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authRefreshTokens_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authRefreshTokens_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authRefreshTokens_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokens_set_input

    """filter the rows which have to be updated"""
    where: authRefreshTokens_bool_exp!
  ): authRefreshTokens_mutation_response

  """
  update single row of the table: "auth.roles"
  """
  updateAuthRole(
    """sets the columns of the filtered rows to the given values"""
    _set: authRoles_set_input
    pk_columns: authRoles_pk_columns_input!
  ): authRoles

  """
  update data of the table: "auth.roles"
  """
  updateAuthRoles(
    """sets the columns of the filtered rows to the given values"""
    _set: authRoles_set_input

    """filter the rows which have to be updated"""
    where: authRoles_bool_exp!
  ): authRoles_mutation_response

  """
  update single row of the table: "auth.user_providers"
  """
  updateAuthUserProvider(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserProviders_set_input
    pk_columns: authUserProviders_pk_columns_input!
  ): authUserProviders

  """
  update data of the table: "auth.user_providers"
  """
  updateAuthUserProviders(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserProviders_set_input

    """filter the rows which have to be updated"""
    where: authUserProviders_bool_exp!
  ): authUserProviders_mutation_response

  """
  update single row of the table: "auth.user_roles"
  """
  updateAuthUserRole(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserRoles_set_input
    pk_columns: authUserRoles_pk_columns_input!
  ): authUserRoles

  """
  update data of the table: "auth.user_roles"
  """
  updateAuthUserRoles(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserRoles_set_input

    """filter the rows which have to be updated"""
    where: authUserRoles_bool_exp!
  ): authUserRoles_mutation_response

  """
  update single row of the table: "auth.user_security_keys"
  """
  updateAuthUserSecurityKey(
    """increments the numeric columns with given value of the filtered values"""
    _inc: authUserSecurityKeys_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: authUserSecurityKeys_set_input
    pk_columns: authUserSecurityKeys_pk_columns_input!
  ): authUserSecurityKeys

  """
  update data of the table: "auth.user_security_keys"
  """
  updateAuthUserSecurityKeys(
    """increments the numeric columns with given value of the filtered values"""
    _inc: authUserSecurityKeys_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: authUserSecurityKeys_set_input

    """filter the rows which have to be updated"""
    where: authUserSecurityKeys_bool_exp!
  ): authUserSecurityKeys_mutation_response

  """
  update single row of the table: "storage.buckets"
  """
  updateBucket(
    """increments the numeric columns with given value of the filtered values"""
    _inc: buckets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: buckets_set_input
    pk_columns: buckets_pk_columns_input!
  ): buckets

  """
  update data of the table: "storage.buckets"
  """
  updateBuckets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: buckets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: buckets_set_input

    """filter the rows which have to be updated"""
    where: buckets_bool_exp!
  ): buckets_mutation_response

  """
  update single row of the table: "storage.files"
  """
  updateFile(
    """increments the numeric columns with given value of the filtered values"""
    _inc: files_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: files_set_input
    pk_columns: files_pk_columns_input!
  ): files

  """
  update data of the table: "storage.files"
  """
  updateFiles(
    """increments the numeric columns with given value of the filtered values"""
    _inc: files_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: files_set_input

    """filter the rows which have to be updated"""
    where: files_bool_exp!
  ): files_mutation_response

  """
  update single row of the table: "auth.users"
  """
  updateUser(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "auth.users"
  """
  updateUsers(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update multiples rows of table: "auth.provider_requests"
  """
  update_authProviderRequests_many(
    """updates to execute, in order"""
    updates: [authProviderRequests_updates!]!
  ): [authProviderRequests_mutation_response]

  """
  update multiples rows of table: "auth.providers"
  """
  update_authProviders_many(
    """updates to execute, in order"""
    updates: [authProviders_updates!]!
  ): [authProviders_mutation_response]

  """
  update multiples rows of table: "auth.refresh_token_types"
  """
  update_authRefreshTokenTypes_many(
    """updates to execute, in order"""
    updates: [authRefreshTokenTypes_updates!]!
  ): [authRefreshTokenTypes_mutation_response]

  """
  update multiples rows of table: "auth.refresh_tokens"
  """
  update_authRefreshTokens_many(
    """updates to execute, in order"""
    updates: [authRefreshTokens_updates!]!
  ): [authRefreshTokens_mutation_response]

  """
  update multiples rows of table: "auth.roles"
  """
  update_authRoles_many(
    """updates to execute, in order"""
    updates: [authRoles_updates!]!
  ): [authRoles_mutation_response]

  """
  update multiples rows of table: "auth.user_providers"
  """
  update_authUserProviders_many(
    """updates to execute, in order"""
    updates: [authUserProviders_updates!]!
  ): [authUserProviders_mutation_response]

  """
  update multiples rows of table: "auth.user_roles"
  """
  update_authUserRoles_many(
    """updates to execute, in order"""
    updates: [authUserRoles_updates!]!
  ): [authUserRoles_mutation_response]

  """
  update multiples rows of table: "auth.user_security_keys"
  """
  update_authUserSecurityKeys_many(
    """updates to execute, in order"""
    updates: [authUserSecurityKeys_updates!]!
  ): [authUserSecurityKeys_mutation_response]

  """
  update data of the table: "bank_card"
  """
  update_bank_card(
    """increments the numeric columns with given value of the filtered values"""
    _inc: bank_card_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bank_card_set_input

    """filter the rows which have to be updated"""
    where: bank_card_bool_exp!
  ): bank_card_mutation_response

  """
  update single row of the table: "bank_card"
  """
  update_bank_card_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: bank_card_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bank_card_set_input
    pk_columns: bank_card_pk_columns_input!
  ): bank_card

  """
  update multiples rows of table: "bank_card"
  """
  update_bank_card_many(
    """updates to execute, in order"""
    updates: [bank_card_updates!]!
  ): [bank_card_mutation_response]

  """
  update data of the table: "blog"
  """
  update_blog(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_set_input

    """filter the rows which have to be updated"""
    where: blog_bool_exp!
  ): blog_mutation_response

  """
  update single row of the table: "blog"
  """
  update_blog_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_set_input
    pk_columns: blog_pk_columns_input!
  ): blog

  """
  update multiples rows of table: "blog"
  """
  update_blog_many(
    """updates to execute, in order"""
    updates: [blog_updates!]!
  ): [blog_mutation_response]

  """
  update multiples rows of table: "storage.buckets"
  """
  update_buckets_many(
    """updates to execute, in order"""
    updates: [buckets_updates!]!
  ): [buckets_mutation_response]

  """
  update data of the table: "cs_message"
  """
  update_cs_message(
    """sets the columns of the filtered rows to the given values"""
    _set: cs_message_set_input

    """filter the rows which have to be updated"""
    where: cs_message_bool_exp!
  ): cs_message_mutation_response

  """
  update single row of the table: "cs_message"
  """
  update_cs_message_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: cs_message_set_input
    pk_columns: cs_message_pk_columns_input!
  ): cs_message

  """
  update multiples rows of table: "cs_message"
  """
  update_cs_message_many(
    """updates to execute, in order"""
    updates: [cs_message_updates!]!
  ): [cs_message_mutation_response]

  """
  update multiples rows of table: "storage.files"
  """
  update_files_many(
    """updates to execute, in order"""
    updates: [files_updates!]!
  ): [files_mutation_response]

  """
  update data of the table: "investment"
  """
  update_investment(
    """increments the numeric columns with given value of the filtered values"""
    _inc: investment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: investment_set_input

    """filter the rows which have to be updated"""
    where: investment_bool_exp!
  ): investment_mutation_response

  """
  update single row of the table: "investment"
  """
  update_investment_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: investment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: investment_set_input
    pk_columns: investment_pk_columns_input!
  ): investment

  """
  update multiples rows of table: "investment"
  """
  update_investment_many(
    """updates to execute, in order"""
    updates: [investment_updates!]!
  ): [investment_mutation_response]

  """
  update data of the table: "investor"
  """
  update_investor(
    """increments the numeric columns with given value of the filtered values"""
    _inc: investor_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: investor_set_input

    """filter the rows which have to be updated"""
    where: investor_bool_exp!
  ): investor_mutation_response

  """
  update single row of the table: "investor"
  """
  update_investor_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: investor_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: investor_set_input
    pk_columns: investor_pk_columns_input!
  ): investor

  """
  update multiples rows of table: "investor"
  """
  update_investor_many(
    """updates to execute, in order"""
    updates: [investor_updates!]!
  ): [investor_mutation_response]

  """
  update data of the table: "payment_due"
  """
  update_payment_due(
    """increments the numeric columns with given value of the filtered values"""
    _inc: payment_due_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: payment_due_set_input

    """filter the rows which have to be updated"""
    where: payment_due_bool_exp!
  ): payment_due_mutation_response

  """
  update single row of the table: "payment_due"
  """
  update_payment_due_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: payment_due_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: payment_due_set_input
    pk_columns: payment_due_pk_columns_input!
  ): payment_due

  """
  update multiples rows of table: "payment_due"
  """
  update_payment_due_many(
    """updates to execute, in order"""
    updates: [payment_due_updates!]!
  ): [payment_due_mutation_response]

  """
  update data of the table: "payment_investment"
  """
  update_payment_investment(
    """increments the numeric columns with given value of the filtered values"""
    _inc: payment_investment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: payment_investment_set_input

    """filter the rows which have to be updated"""
    where: payment_investment_bool_exp!
  ): payment_investment_mutation_response

  """
  update single row of the table: "payment_investment"
  """
  update_payment_investment_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: payment_investment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: payment_investment_set_input
    pk_columns: payment_investment_pk_columns_input!
  ): payment_investment

  """
  update multiples rows of table: "payment_investment"
  """
  update_payment_investment_many(
    """updates to execute, in order"""
    updates: [payment_investment_updates!]!
  ): [payment_investment_mutation_response]

  """
  update data of the table: "profile"
  """
  update_profile(
    """sets the columns of the filtered rows to the given values"""
    _set: profile_set_input

    """filter the rows which have to be updated"""
    where: profile_bool_exp!
  ): profile_mutation_response

  """
  update single row of the table: "profile"
  """
  update_profile_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: profile_set_input
    pk_columns: profile_pk_columns_input!
  ): profile

  """
  update multiples rows of table: "profile"
  """
  update_profile_many(
    """updates to execute, in order"""
    updates: [profile_updates!]!
  ): [profile_mutation_response]

  """
  update data of the table: "proposal"
  """
  update_proposal(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_set_input

    """filter the rows which have to be updated"""
    where: proposal_bool_exp!
  ): proposal_mutation_response

  """
  update single row of the table: "proposal"
  """
  update_proposal_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: proposal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: proposal_set_input
    pk_columns: proposal_pk_columns_input!
  ): proposal

  """
  update multiples rows of table: "proposal"
  """
  update_proposal_many(
    """updates to execute, in order"""
    updates: [proposal_updates!]!
  ): [proposal_mutation_response]

  """
  update data of the table: "umkm"
  """
  update_umkm(
    """increments the numeric columns with given value of the filtered values"""
    _inc: umkm_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: umkm_set_input

    """filter the rows which have to be updated"""
    where: umkm_bool_exp!
  ): umkm_mutation_response

  """
  update single row of the table: "umkm"
  """
  update_umkm_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: umkm_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: umkm_set_input
    pk_columns: umkm_pk_columns_input!
  ): umkm

  """
  update multiples rows of table: "umkm"
  """
  update_umkm_many(
    """updates to execute, in order"""
    updates: [umkm_updates!]!
  ): [umkm_mutation_response]

  """
  update multiples rows of table: "auth.users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "payment_due"
"""
type payment_due {
  bank_card_id: uuid

  """An object relationship"""
  bank_card_used: bank_card
  created_at: timestamptz!
  deadline: timestamptz!
  fulfilled: Boolean!
  payment_due: Int!
  payment_due_id: uuid!

  """An object relationship"""
  umkm: umkm!
  umkm_id: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "payment_due"
"""
type payment_due_aggregate {
  aggregate: payment_due_aggregate_fields
  nodes: [payment_due!]!
}

input payment_due_aggregate_bool_exp {
  bool_and: payment_due_aggregate_bool_exp_bool_and
  bool_or: payment_due_aggregate_bool_exp_bool_or
  count: payment_due_aggregate_bool_exp_count
}

input payment_due_aggregate_bool_exp_bool_and {
  arguments: payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: payment_due_bool_exp
  predicate: Boolean_comparison_exp!
}

input payment_due_aggregate_bool_exp_bool_or {
  arguments: payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: payment_due_bool_exp
  predicate: Boolean_comparison_exp!
}

input payment_due_aggregate_bool_exp_count {
  arguments: [payment_due_select_column!]
  distinct: Boolean
  filter: payment_due_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "payment_due"
"""
type payment_due_aggregate_fields {
  avg: payment_due_avg_fields
  count(columns: [payment_due_select_column!], distinct: Boolean): Int!
  max: payment_due_max_fields
  min: payment_due_min_fields
  stddev: payment_due_stddev_fields
  stddev_pop: payment_due_stddev_pop_fields
  stddev_samp: payment_due_stddev_samp_fields
  sum: payment_due_sum_fields
  var_pop: payment_due_var_pop_fields
  var_samp: payment_due_var_samp_fields
  variance: payment_due_variance_fields
}

"""
order by aggregate values of table "payment_due"
"""
input payment_due_aggregate_order_by {
  avg: payment_due_avg_order_by
  count: order_by
  max: payment_due_max_order_by
  min: payment_due_min_order_by
  stddev: payment_due_stddev_order_by
  stddev_pop: payment_due_stddev_pop_order_by
  stddev_samp: payment_due_stddev_samp_order_by
  sum: payment_due_sum_order_by
  var_pop: payment_due_var_pop_order_by
  var_samp: payment_due_var_samp_order_by
  variance: payment_due_variance_order_by
}

"""
input type for inserting array relation for remote table "payment_due"
"""
input payment_due_arr_rel_insert_input {
  data: [payment_due_insert_input!]!

  """upsert condition"""
  on_conflict: payment_due_on_conflict
}

"""aggregate avg on columns"""
type payment_due_avg_fields {
  payment_due: Float
  umkm_id: Float
}

"""
order by avg() on columns of table "payment_due"
"""
input payment_due_avg_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""
Boolean expression to filter rows from the table "payment_due". All fields are combined with a logical 'AND'.
"""
input payment_due_bool_exp {
  _and: [payment_due_bool_exp!]
  _not: payment_due_bool_exp
  _or: [payment_due_bool_exp!]
  bank_card_id: uuid_comparison_exp
  bank_card_used: bank_card_bool_exp
  created_at: timestamptz_comparison_exp
  deadline: timestamptz_comparison_exp
  fulfilled: Boolean_comparison_exp
  payment_due: Int_comparison_exp
  payment_due_id: uuid_comparison_exp
  umkm: umkm_bool_exp
  umkm_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "payment_due"
"""
enum payment_due_constraint {
  """
  unique or primary key constraint on columns "payment_due_id"
  """
  payment_due_pkey
}

"""
input type for incrementing numeric columns in table "payment_due"
"""
input payment_due_inc_input {
  payment_due: Int
  umkm_id: Int
}

"""
input type for inserting data into table "payment_due"
"""
input payment_due_insert_input {
  bank_card_id: uuid
  bank_card_used: bank_card_obj_rel_insert_input
  created_at: timestamptz
  deadline: timestamptz
  fulfilled: Boolean
  payment_due: Int
  payment_due_id: uuid
  umkm: umkm_obj_rel_insert_input
  umkm_id: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type payment_due_max_fields {
  bank_card_id: uuid
  created_at: timestamptz
  deadline: timestamptz
  payment_due: Int
  payment_due_id: uuid
  umkm_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "payment_due"
"""
input payment_due_max_order_by {
  bank_card_id: order_by
  created_at: order_by
  deadline: order_by
  payment_due: order_by
  payment_due_id: order_by
  umkm_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type payment_due_min_fields {
  bank_card_id: uuid
  created_at: timestamptz
  deadline: timestamptz
  payment_due: Int
  payment_due_id: uuid
  umkm_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "payment_due"
"""
input payment_due_min_order_by {
  bank_card_id: order_by
  created_at: order_by
  deadline: order_by
  payment_due: order_by
  payment_due_id: order_by
  umkm_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "payment_due"
"""
type payment_due_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [payment_due!]!
}

"""
on_conflict condition type for table "payment_due"
"""
input payment_due_on_conflict {
  constraint: payment_due_constraint!
  update_columns: [payment_due_update_column!]! = []
  where: payment_due_bool_exp
}

"""Ordering options when selecting data from "payment_due"."""
input payment_due_order_by {
  bank_card_id: order_by
  bank_card_used: bank_card_order_by
  created_at: order_by
  deadline: order_by
  fulfilled: order_by
  payment_due: order_by
  payment_due_id: order_by
  umkm: umkm_order_by
  umkm_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: payment_due"""
input payment_due_pk_columns_input {
  payment_due_id: uuid!
}

"""
select columns of table "payment_due"
"""
enum payment_due_select_column {
  """column name"""
  bank_card_id

  """column name"""
  created_at

  """column name"""
  deadline

  """column name"""
  fulfilled

  """column name"""
  payment_due

  """column name"""
  payment_due_id

  """column name"""
  umkm_id

  """column name"""
  updated_at
}

"""
select "payment_due_aggregate_bool_exp_bool_and_arguments_columns" columns of table "payment_due"
"""
enum payment_due_select_column_payment_due_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  fulfilled
}

"""
select "payment_due_aggregate_bool_exp_bool_or_arguments_columns" columns of table "payment_due"
"""
enum payment_due_select_column_payment_due_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  fulfilled
}

"""
input type for updating data in table "payment_due"
"""
input payment_due_set_input {
  bank_card_id: uuid
  created_at: timestamptz
  deadline: timestamptz
  fulfilled: Boolean
  payment_due: Int
  payment_due_id: uuid
  umkm_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type payment_due_stddev_fields {
  payment_due: Float
  umkm_id: Float
}

"""
order by stddev() on columns of table "payment_due"
"""
input payment_due_stddev_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""aggregate stddev_pop on columns"""
type payment_due_stddev_pop_fields {
  payment_due: Float
  umkm_id: Float
}

"""
order by stddev_pop() on columns of table "payment_due"
"""
input payment_due_stddev_pop_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""aggregate stddev_samp on columns"""
type payment_due_stddev_samp_fields {
  payment_due: Float
  umkm_id: Float
}

"""
order by stddev_samp() on columns of table "payment_due"
"""
input payment_due_stddev_samp_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""
Streaming cursor of the table "payment_due"
"""
input payment_due_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: payment_due_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input payment_due_stream_cursor_value_input {
  bank_card_id: uuid
  created_at: timestamptz
  deadline: timestamptz
  fulfilled: Boolean
  payment_due: Int
  payment_due_id: uuid
  umkm_id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type payment_due_sum_fields {
  payment_due: Int
  umkm_id: Int
}

"""
order by sum() on columns of table "payment_due"
"""
input payment_due_sum_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""
update columns of table "payment_due"
"""
enum payment_due_update_column {
  """column name"""
  bank_card_id

  """column name"""
  created_at

  """column name"""
  deadline

  """column name"""
  fulfilled

  """column name"""
  payment_due

  """column name"""
  payment_due_id

  """column name"""
  umkm_id

  """column name"""
  updated_at
}

input payment_due_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: payment_due_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: payment_due_set_input
  where: payment_due_bool_exp!
}

"""aggregate var_pop on columns"""
type payment_due_var_pop_fields {
  payment_due: Float
  umkm_id: Float
}

"""
order by var_pop() on columns of table "payment_due"
"""
input payment_due_var_pop_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""aggregate var_samp on columns"""
type payment_due_var_samp_fields {
  payment_due: Float
  umkm_id: Float
}

"""
order by var_samp() on columns of table "payment_due"
"""
input payment_due_var_samp_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""aggregate variance on columns"""
type payment_due_variance_fields {
  payment_due: Float
  umkm_id: Float
}

"""
order by variance() on columns of table "payment_due"
"""
input payment_due_variance_order_by {
  payment_due: order_by
  umkm_id: order_by
}

"""
columns and relationships of "payment_investment"
"""
type payment_investment {
  bank_card_id: uuid

  """An object relationship"""
  bank_card_used: bank_card
  created_at: timestamptz!

  """An object relationship"""
  investment: investment!
  investment_id: Int!
  payment_investment_fulfilled: Boolean!
  payment_investment_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "payment_investment"
"""
type payment_investment_aggregate {
  aggregate: payment_investment_aggregate_fields
  nodes: [payment_investment!]!
}

input payment_investment_aggregate_bool_exp {
  bool_and: payment_investment_aggregate_bool_exp_bool_and
  bool_or: payment_investment_aggregate_bool_exp_bool_or
  count: payment_investment_aggregate_bool_exp_count
}

input payment_investment_aggregate_bool_exp_bool_and {
  arguments: payment_investment_select_column_payment_investment_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: payment_investment_bool_exp
  predicate: Boolean_comparison_exp!
}

input payment_investment_aggregate_bool_exp_bool_or {
  arguments: payment_investment_select_column_payment_investment_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: payment_investment_bool_exp
  predicate: Boolean_comparison_exp!
}

input payment_investment_aggregate_bool_exp_count {
  arguments: [payment_investment_select_column!]
  distinct: Boolean
  filter: payment_investment_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "payment_investment"
"""
type payment_investment_aggregate_fields {
  avg: payment_investment_avg_fields
  count(columns: [payment_investment_select_column!], distinct: Boolean): Int!
  max: payment_investment_max_fields
  min: payment_investment_min_fields
  stddev: payment_investment_stddev_fields
  stddev_pop: payment_investment_stddev_pop_fields
  stddev_samp: payment_investment_stddev_samp_fields
  sum: payment_investment_sum_fields
  var_pop: payment_investment_var_pop_fields
  var_samp: payment_investment_var_samp_fields
  variance: payment_investment_variance_fields
}

"""
order by aggregate values of table "payment_investment"
"""
input payment_investment_aggregate_order_by {
  avg: payment_investment_avg_order_by
  count: order_by
  max: payment_investment_max_order_by
  min: payment_investment_min_order_by
  stddev: payment_investment_stddev_order_by
  stddev_pop: payment_investment_stddev_pop_order_by
  stddev_samp: payment_investment_stddev_samp_order_by
  sum: payment_investment_sum_order_by
  var_pop: payment_investment_var_pop_order_by
  var_samp: payment_investment_var_samp_order_by
  variance: payment_investment_variance_order_by
}

"""
input type for inserting array relation for remote table "payment_investment"
"""
input payment_investment_arr_rel_insert_input {
  data: [payment_investment_insert_input!]!

  """upsert condition"""
  on_conflict: payment_investment_on_conflict
}

"""aggregate avg on columns"""
type payment_investment_avg_fields {
  investment_id: Float
}

"""
order by avg() on columns of table "payment_investment"
"""
input payment_investment_avg_order_by {
  investment_id: order_by
}

"""
Boolean expression to filter rows from the table "payment_investment". All fields are combined with a logical 'AND'.
"""
input payment_investment_bool_exp {
  _and: [payment_investment_bool_exp!]
  _not: payment_investment_bool_exp
  _or: [payment_investment_bool_exp!]
  bank_card_id: uuid_comparison_exp
  bank_card_used: bank_card_bool_exp
  created_at: timestamptz_comparison_exp
  investment: investment_bool_exp
  investment_id: Int_comparison_exp
  payment_investment_fulfilled: Boolean_comparison_exp
  payment_investment_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "payment_investment"
"""
enum payment_investment_constraint {
  """
  unique or primary key constraint on columns "payment_investment_id"
  """
  payment_investment_pkey
}

"""
input type for incrementing numeric columns in table "payment_investment"
"""
input payment_investment_inc_input {
  investment_id: Int
}

"""
input type for inserting data into table "payment_investment"
"""
input payment_investment_insert_input {
  bank_card_id: uuid
  bank_card_used: bank_card_obj_rel_insert_input
  created_at: timestamptz
  investment: investment_obj_rel_insert_input
  investment_id: Int
  payment_investment_fulfilled: Boolean
  payment_investment_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type payment_investment_max_fields {
  bank_card_id: uuid
  created_at: timestamptz
  investment_id: Int
  payment_investment_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "payment_investment"
"""
input payment_investment_max_order_by {
  bank_card_id: order_by
  created_at: order_by
  investment_id: order_by
  payment_investment_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type payment_investment_min_fields {
  bank_card_id: uuid
  created_at: timestamptz
  investment_id: Int
  payment_investment_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "payment_investment"
"""
input payment_investment_min_order_by {
  bank_card_id: order_by
  created_at: order_by
  investment_id: order_by
  payment_investment_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "payment_investment"
"""
type payment_investment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [payment_investment!]!
}

"""
input type for inserting object relation for remote table "payment_investment"
"""
input payment_investment_obj_rel_insert_input {
  data: payment_investment_insert_input!

  """upsert condition"""
  on_conflict: payment_investment_on_conflict
}

"""
on_conflict condition type for table "payment_investment"
"""
input payment_investment_on_conflict {
  constraint: payment_investment_constraint!
  update_columns: [payment_investment_update_column!]! = []
  where: payment_investment_bool_exp
}

"""Ordering options when selecting data from "payment_investment"."""
input payment_investment_order_by {
  bank_card_id: order_by
  bank_card_used: bank_card_order_by
  created_at: order_by
  investment: investment_order_by
  investment_id: order_by
  payment_investment_fulfilled: order_by
  payment_investment_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: payment_investment"""
input payment_investment_pk_columns_input {
  payment_investment_id: uuid!
}

"""
select columns of table "payment_investment"
"""
enum payment_investment_select_column {
  """column name"""
  bank_card_id

  """column name"""
  created_at

  """column name"""
  investment_id

  """column name"""
  payment_investment_fulfilled

  """column name"""
  payment_investment_id

  """column name"""
  updated_at
}

"""
select "payment_investment_aggregate_bool_exp_bool_and_arguments_columns" columns of table "payment_investment"
"""
enum payment_investment_select_column_payment_investment_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  payment_investment_fulfilled
}

"""
select "payment_investment_aggregate_bool_exp_bool_or_arguments_columns" columns of table "payment_investment"
"""
enum payment_investment_select_column_payment_investment_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  payment_investment_fulfilled
}

"""
input type for updating data in table "payment_investment"
"""
input payment_investment_set_input {
  bank_card_id: uuid
  created_at: timestamptz
  investment_id: Int
  payment_investment_fulfilled: Boolean
  payment_investment_id: uuid
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type payment_investment_stddev_fields {
  investment_id: Float
}

"""
order by stddev() on columns of table "payment_investment"
"""
input payment_investment_stddev_order_by {
  investment_id: order_by
}

"""aggregate stddev_pop on columns"""
type payment_investment_stddev_pop_fields {
  investment_id: Float
}

"""
order by stddev_pop() on columns of table "payment_investment"
"""
input payment_investment_stddev_pop_order_by {
  investment_id: order_by
}

"""aggregate stddev_samp on columns"""
type payment_investment_stddev_samp_fields {
  investment_id: Float
}

"""
order by stddev_samp() on columns of table "payment_investment"
"""
input payment_investment_stddev_samp_order_by {
  investment_id: order_by
}

"""
Streaming cursor of the table "payment_investment"
"""
input payment_investment_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: payment_investment_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input payment_investment_stream_cursor_value_input {
  bank_card_id: uuid
  created_at: timestamptz
  investment_id: Int
  payment_investment_fulfilled: Boolean
  payment_investment_id: uuid
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type payment_investment_sum_fields {
  investment_id: Int
}

"""
order by sum() on columns of table "payment_investment"
"""
input payment_investment_sum_order_by {
  investment_id: order_by
}

"""
update columns of table "payment_investment"
"""
enum payment_investment_update_column {
  """column name"""
  bank_card_id

  """column name"""
  created_at

  """column name"""
  investment_id

  """column name"""
  payment_investment_fulfilled

  """column name"""
  payment_investment_id

  """column name"""
  updated_at
}

input payment_investment_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: payment_investment_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: payment_investment_set_input
  where: payment_investment_bool_exp!
}

"""aggregate var_pop on columns"""
type payment_investment_var_pop_fields {
  investment_id: Float
}

"""
order by var_pop() on columns of table "payment_investment"
"""
input payment_investment_var_pop_order_by {
  investment_id: order_by
}

"""aggregate var_samp on columns"""
type payment_investment_var_samp_fields {
  investment_id: Float
}

"""
order by var_samp() on columns of table "payment_investment"
"""
input payment_investment_var_samp_order_by {
  investment_id: order_by
}

"""aggregate variance on columns"""
type payment_investment_variance_fields {
  investment_id: Float
}

"""
order by variance() on columns of table "payment_investment"
"""
input payment_investment_variance_order_by {
  investment_id: order_by
}

"""
columns and relationships of "profile"
"""
type profile {
  """An array relationship"""
  bank_cards(
    """distinct select on columns"""
    distinct_on: [bank_card_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bank_card_order_by!]

    """filter the rows returned"""
    where: bank_card_bool_exp
  ): [bank_card!]!

  """An aggregate relationship"""
  bank_cards_aggregate(
    """distinct select on columns"""
    distinct_on: [bank_card_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bank_card_order_by!]

    """filter the rows returned"""
    where: bank_card_bool_exp
  ): bank_card_aggregate!
  created_at: timestamptz
  profile_address: String!
  profile_first_name: String!
  profile_id: Int!
  profile_ktp_no: String!
  profile_last_name: String
  profile_npwp_no: String
  profile_phone: String!
  updated_at: timestamptz

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "profile"
"""
type profile_aggregate {
  aggregate: profile_aggregate_fields
  nodes: [profile!]!
}

"""
aggregate fields of "profile"
"""
type profile_aggregate_fields {
  avg: profile_avg_fields
  count(columns: [profile_select_column!], distinct: Boolean): Int!
  max: profile_max_fields
  min: profile_min_fields
  stddev: profile_stddev_fields
  stddev_pop: profile_stddev_pop_fields
  stddev_samp: profile_stddev_samp_fields
  sum: profile_sum_fields
  var_pop: profile_var_pop_fields
  var_samp: profile_var_samp_fields
  variance: profile_variance_fields
}

"""aggregate avg on columns"""
type profile_avg_fields {
  profile_id: Float
}

"""
Boolean expression to filter rows from the table "profile". All fields are combined with a logical 'AND'.
"""
input profile_bool_exp {
  _and: [profile_bool_exp!]
  _not: profile_bool_exp
  _or: [profile_bool_exp!]
  bank_cards: bank_card_bool_exp
  bank_cards_aggregate: bank_card_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  profile_address: String_comparison_exp
  profile_first_name: String_comparison_exp
  profile_id: Int_comparison_exp
  profile_ktp_no: String_comparison_exp
  profile_last_name: String_comparison_exp
  profile_npwp_no: String_comparison_exp
  profile_phone: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "profile"
"""
enum profile_constraint {
  """
  unique or primary key constraint on columns "profile_id"
  """
  profile_pkey

  """
  unique or primary key constraint on columns "user_id"
  """
  profile_user_id_key
}

"""
input type for inserting data into table "profile"
"""
input profile_insert_input {
  bank_cards: bank_card_arr_rel_insert_input
  created_at: timestamptz
  profile_address: String
  profile_first_name: String
  profile_ktp_no: String
  profile_last_name: String
  profile_npwp_no: String
  profile_phone: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type profile_max_fields {
  created_at: timestamptz
  profile_address: String
  profile_first_name: String
  profile_id: Int
  profile_ktp_no: String
  profile_last_name: String
  profile_npwp_no: String
  profile_phone: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate min on columns"""
type profile_min_fields {
  created_at: timestamptz
  profile_address: String
  profile_first_name: String
  profile_id: Int
  profile_ktp_no: String
  profile_last_name: String
  profile_npwp_no: String
  profile_phone: String
  updated_at: timestamptz
  user_id: uuid
}

"""
response of any mutation on the table "profile"
"""
type profile_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [profile!]!
}

"""
input type for inserting object relation for remote table "profile"
"""
input profile_obj_rel_insert_input {
  data: profile_insert_input!

  """upsert condition"""
  on_conflict: profile_on_conflict
}

"""
on_conflict condition type for table "profile"
"""
input profile_on_conflict {
  constraint: profile_constraint!
  update_columns: [profile_update_column!]! = []
  where: profile_bool_exp
}

"""Ordering options when selecting data from "profile"."""
input profile_order_by {
  bank_cards_aggregate: bank_card_aggregate_order_by
  created_at: order_by
  profile_address: order_by
  profile_first_name: order_by
  profile_id: order_by
  profile_ktp_no: order_by
  profile_last_name: order_by
  profile_npwp_no: order_by
  profile_phone: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: profile"""
input profile_pk_columns_input {
  profile_id: Int!
}

"""
select columns of table "profile"
"""
enum profile_select_column {
  """column name"""
  created_at

  """column name"""
  profile_address

  """column name"""
  profile_first_name

  """column name"""
  profile_id

  """column name"""
  profile_ktp_no

  """column name"""
  profile_last_name

  """column name"""
  profile_npwp_no

  """column name"""
  profile_phone

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "profile"
"""
input profile_set_input {
  created_at: timestamptz
  profile_address: String
  profile_first_name: String
  profile_ktp_no: String
  profile_last_name: String
  profile_npwp_no: String
  profile_phone: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate stddev on columns"""
type profile_stddev_fields {
  profile_id: Float
}

"""aggregate stddev_pop on columns"""
type profile_stddev_pop_fields {
  profile_id: Float
}

"""aggregate stddev_samp on columns"""
type profile_stddev_samp_fields {
  profile_id: Float
}

"""
Streaming cursor of the table "profile"
"""
input profile_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: profile_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input profile_stream_cursor_value_input {
  created_at: timestamptz
  profile_address: String
  profile_first_name: String
  profile_id: Int
  profile_ktp_no: String
  profile_last_name: String
  profile_npwp_no: String
  profile_phone: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate sum on columns"""
type profile_sum_fields {
  profile_id: Int
}

"""
update columns of table "profile"
"""
enum profile_update_column {
  """column name"""
  created_at

  """column name"""
  profile_address

  """column name"""
  profile_first_name

  """column name"""
  profile_ktp_no

  """column name"""
  profile_last_name

  """column name"""
  profile_npwp_no

  """column name"""
  profile_phone

  """column name"""
  updated_at

  """column name"""
  user_id
}

input profile_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: profile_set_input
  where: profile_bool_exp!
}

"""aggregate var_pop on columns"""
type profile_var_pop_fields {
  profile_id: Float
}

"""aggregate var_samp on columns"""
type profile_var_samp_fields {
  profile_id: Float
}

"""aggregate variance on columns"""
type profile_variance_fields {
  profile_id: Float
}

"""
columns and relationships of "proposal"
"""
type proposal {
  created_at: timestamptz

  """An array relationship"""
  investments(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): [investment!]!

  """An aggregate relationship"""
  investments_aggregate(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): investment_aggregate!
  proposal_amount: bigint!
  proposal_approved: Boolean!
  proposal_content: String!
  proposal_date: date!
  proposal_id: Int!
  proposal_title: String!

  """An object relationship"""
  umkm: umkm!
  umkm_id: Int!
  updated_at: timestamptz
}

"""
aggregated selection of "proposal"
"""
type proposal_aggregate {
  aggregate: proposal_aggregate_fields
  nodes: [proposal!]!
}

input proposal_aggregate_bool_exp {
  bool_and: proposal_aggregate_bool_exp_bool_and
  bool_or: proposal_aggregate_bool_exp_bool_or
  count: proposal_aggregate_bool_exp_count
}

input proposal_aggregate_bool_exp_bool_and {
  arguments: proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: proposal_bool_exp
  predicate: Boolean_comparison_exp!
}

input proposal_aggregate_bool_exp_bool_or {
  arguments: proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: proposal_bool_exp
  predicate: Boolean_comparison_exp!
}

input proposal_aggregate_bool_exp_count {
  arguments: [proposal_select_column!]
  distinct: Boolean
  filter: proposal_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "proposal"
"""
type proposal_aggregate_fields {
  avg: proposal_avg_fields
  count(columns: [proposal_select_column!], distinct: Boolean): Int!
  max: proposal_max_fields
  min: proposal_min_fields
  stddev: proposal_stddev_fields
  stddev_pop: proposal_stddev_pop_fields
  stddev_samp: proposal_stddev_samp_fields
  sum: proposal_sum_fields
  var_pop: proposal_var_pop_fields
  var_samp: proposal_var_samp_fields
  variance: proposal_variance_fields
}

"""
order by aggregate values of table "proposal"
"""
input proposal_aggregate_order_by {
  avg: proposal_avg_order_by
  count: order_by
  max: proposal_max_order_by
  min: proposal_min_order_by
  stddev: proposal_stddev_order_by
  stddev_pop: proposal_stddev_pop_order_by
  stddev_samp: proposal_stddev_samp_order_by
  sum: proposal_sum_order_by
  var_pop: proposal_var_pop_order_by
  var_samp: proposal_var_samp_order_by
  variance: proposal_variance_order_by
}

"""
input type for inserting array relation for remote table "proposal"
"""
input proposal_arr_rel_insert_input {
  data: [proposal_insert_input!]!

  """upsert condition"""
  on_conflict: proposal_on_conflict
}

"""aggregate avg on columns"""
type proposal_avg_fields {
  proposal_amount: Float
  proposal_id: Float
  umkm_id: Float
}

"""
order by avg() on columns of table "proposal"
"""
input proposal_avg_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

"""
Boolean expression to filter rows from the table "proposal". All fields are combined with a logical 'AND'.
"""
input proposal_bool_exp {
  _and: [proposal_bool_exp!]
  _not: proposal_bool_exp
  _or: [proposal_bool_exp!]
  created_at: timestamptz_comparison_exp
  investments: investment_bool_exp
  investments_aggregate: investment_aggregate_bool_exp
  proposal_amount: bigint_comparison_exp
  proposal_approved: Boolean_comparison_exp
  proposal_content: String_comparison_exp
  proposal_date: date_comparison_exp
  proposal_id: Int_comparison_exp
  proposal_title: String_comparison_exp
  umkm: umkm_bool_exp
  umkm_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "proposal"
"""
enum proposal_constraint {
  """
  unique or primary key constraint on columns "proposal_id"
  """
  proposal_pkey
}

"""
input type for incrementing numeric columns in table "proposal"
"""
input proposal_inc_input {
  proposal_amount: bigint
  umkm_id: Int
}

"""
input type for inserting data into table "proposal"
"""
input proposal_insert_input {
  created_at: timestamptz
  investments: investment_arr_rel_insert_input
  proposal_amount: bigint
  proposal_approved: Boolean
  proposal_content: String
  proposal_date: date
  proposal_title: String
  umkm: umkm_obj_rel_insert_input
  umkm_id: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type proposal_max_fields {
  created_at: timestamptz
  proposal_amount: bigint
  proposal_content: String
  proposal_date: date
  proposal_id: Int
  proposal_title: String
  umkm_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "proposal"
"""
input proposal_max_order_by {
  created_at: order_by
  proposal_amount: order_by
  proposal_content: order_by
  proposal_date: order_by
  proposal_id: order_by
  proposal_title: order_by
  umkm_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type proposal_min_fields {
  created_at: timestamptz
  proposal_amount: bigint
  proposal_content: String
  proposal_date: date
  proposal_id: Int
  proposal_title: String
  umkm_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "proposal"
"""
input proposal_min_order_by {
  created_at: order_by
  proposal_amount: order_by
  proposal_content: order_by
  proposal_date: order_by
  proposal_id: order_by
  proposal_title: order_by
  umkm_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "proposal"
"""
type proposal_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [proposal!]!
}

"""
input type for inserting object relation for remote table "proposal"
"""
input proposal_obj_rel_insert_input {
  data: proposal_insert_input!

  """upsert condition"""
  on_conflict: proposal_on_conflict
}

"""
on_conflict condition type for table "proposal"
"""
input proposal_on_conflict {
  constraint: proposal_constraint!
  update_columns: [proposal_update_column!]! = []
  where: proposal_bool_exp
}

"""Ordering options when selecting data from "proposal"."""
input proposal_order_by {
  created_at: order_by
  investments_aggregate: investment_aggregate_order_by
  proposal_amount: order_by
  proposal_approved: order_by
  proposal_content: order_by
  proposal_date: order_by
  proposal_id: order_by
  proposal_title: order_by
  umkm: umkm_order_by
  umkm_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: proposal"""
input proposal_pk_columns_input {
  proposal_id: Int!
}

"""
select columns of table "proposal"
"""
enum proposal_select_column {
  """column name"""
  created_at

  """column name"""
  proposal_amount

  """column name"""
  proposal_approved

  """column name"""
  proposal_content

  """column name"""
  proposal_date

  """column name"""
  proposal_id

  """column name"""
  proposal_title

  """column name"""
  umkm_id

  """column name"""
  updated_at
}

"""
select "proposal_aggregate_bool_exp_bool_and_arguments_columns" columns of table "proposal"
"""
enum proposal_select_column_proposal_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  proposal_approved
}

"""
select "proposal_aggregate_bool_exp_bool_or_arguments_columns" columns of table "proposal"
"""
enum proposal_select_column_proposal_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  proposal_approved
}

"""
input type for updating data in table "proposal"
"""
input proposal_set_input {
  created_at: timestamptz
  proposal_amount: bigint
  proposal_approved: Boolean
  proposal_content: String
  proposal_date: date
  proposal_title: String
  umkm_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type proposal_stddev_fields {
  proposal_amount: Float
  proposal_id: Float
  umkm_id: Float
}

"""
order by stddev() on columns of table "proposal"
"""
input proposal_stddev_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

"""aggregate stddev_pop on columns"""
type proposal_stddev_pop_fields {
  proposal_amount: Float
  proposal_id: Float
  umkm_id: Float
}

"""
order by stddev_pop() on columns of table "proposal"
"""
input proposal_stddev_pop_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

"""aggregate stddev_samp on columns"""
type proposal_stddev_samp_fields {
  proposal_amount: Float
  proposal_id: Float
  umkm_id: Float
}

"""
order by stddev_samp() on columns of table "proposal"
"""
input proposal_stddev_samp_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

"""
Streaming cursor of the table "proposal"
"""
input proposal_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: proposal_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input proposal_stream_cursor_value_input {
  created_at: timestamptz
  proposal_amount: bigint
  proposal_approved: Boolean
  proposal_content: String
  proposal_date: date
  proposal_id: Int
  proposal_title: String
  umkm_id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type proposal_sum_fields {
  proposal_amount: bigint
  proposal_id: Int
  umkm_id: Int
}

"""
order by sum() on columns of table "proposal"
"""
input proposal_sum_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

"""
update columns of table "proposal"
"""
enum proposal_update_column {
  """column name"""
  created_at

  """column name"""
  proposal_amount

  """column name"""
  proposal_approved

  """column name"""
  proposal_content

  """column name"""
  proposal_date

  """column name"""
  proposal_title

  """column name"""
  umkm_id

  """column name"""
  updated_at
}

input proposal_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: proposal_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: proposal_set_input
  where: proposal_bool_exp!
}

"""aggregate var_pop on columns"""
type proposal_var_pop_fields {
  proposal_amount: Float
  proposal_id: Float
  umkm_id: Float
}

"""
order by var_pop() on columns of table "proposal"
"""
input proposal_var_pop_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

"""aggregate var_samp on columns"""
type proposal_var_samp_fields {
  proposal_amount: Float
  proposal_id: Float
  umkm_id: Float
}

"""
order by var_samp() on columns of table "proposal"
"""
input proposal_var_samp_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

"""aggregate variance on columns"""
type proposal_variance_fields {
  proposal_amount: Float
  proposal_id: Float
  umkm_id: Float
}

"""
order by variance() on columns of table "proposal"
"""
input proposal_variance_order_by {
  proposal_amount: order_by
  proposal_id: order_by
  umkm_id: order_by
}

type query_root {
  """fetch data from the table: "auth.providers" using primary key columns"""
  authProvider(id: String!): authProviders

  """
  fetch data from the table: "auth.provider_requests" using primary key columns
  """
  authProviderRequest(id: uuid!): authProviderRequests

  """
  fetch data from the table: "auth.provider_requests"
  """
  authProviderRequests(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]

    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): [authProviderRequests!]!

  """
  fetch aggregated fields from the table: "auth.provider_requests"
  """
  authProviderRequestsAggregate(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]

    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): authProviderRequests_aggregate!

  """
  fetch data from the table: "auth.providers"
  """
  authProviders(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]

    """filter the rows returned"""
    where: authProviders_bool_exp
  ): [authProviders!]!

  """
  fetch aggregated fields from the table: "auth.providers"
  """
  authProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]

    """filter the rows returned"""
    where: authProviders_bool_exp
  ): authProviders_aggregate!

  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens

  """
  fetch data from the table: "auth.refresh_token_types" using primary key columns
  """
  authRefreshTokenType(value: String!): authRefreshTokenTypes

  """
  fetch data from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypes(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]

    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): [authRefreshTokenTypes!]!

  """
  fetch aggregated fields from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypesAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]

    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): authRefreshTokenTypes_aggregate!

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  authRefreshTokensAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!

  """fetch data from the table: "auth.roles" using primary key columns"""
  authRole(role: String!): authRoles

  """
  fetch data from the table: "auth.roles"
  """
  authRoles(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]

    """filter the rows returned"""
    where: authRoles_bool_exp
  ): [authRoles!]!

  """
  fetch aggregated fields from the table: "auth.roles"
  """
  authRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]

    """filter the rows returned"""
    where: authRoles_bool_exp
  ): authRoles_aggregate!

  """
  fetch data from the table: "auth.user_providers" using primary key columns
  """
  authUserProvider(id: uuid!): authUserProviders

  """
  fetch data from the table: "auth.user_providers"
  """
  authUserProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """
  fetch aggregated fields from the table: "auth.user_providers"
  """
  authUserProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!

  """fetch data from the table: "auth.user_roles" using primary key columns"""
  authUserRole(id: uuid!): authUserRoles

  """
  fetch data from the table: "auth.user_roles"
  """
  authUserRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """
  fetch aggregated fields from the table: "auth.user_roles"
  """
  authUserRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!

  """
  fetch data from the table: "auth.user_security_keys" using primary key columns
  """
  authUserSecurityKey(id: uuid!): authUserSecurityKeys

  """
  fetch data from the table: "auth.user_security_keys"
  """
  authUserSecurityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """
  fetch aggregated fields from the table: "auth.user_security_keys"
  """
  authUserSecurityKeysAggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!

  """
  fetch data from the table: "bank_card"
  """
  bank_card(
    """distinct select on columns"""
    distinct_on: [bank_card_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bank_card_order_by!]

    """filter the rows returned"""
    where: bank_card_bool_exp
  ): [bank_card!]!

  """
  fetch aggregated fields from the table: "bank_card"
  """
  bank_card_aggregate(
    """distinct select on columns"""
    distinct_on: [bank_card_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bank_card_order_by!]

    """filter the rows returned"""
    where: bank_card_bool_exp
  ): bank_card_aggregate!

  """fetch data from the table: "bank_card" using primary key columns"""
  bank_card_by_pk(bank_card_id: uuid!): bank_card

  """
  fetch data from the table: "blog"
  """
  blog(
    """distinct select on columns"""
    distinct_on: [blog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_order_by!]

    """filter the rows returned"""
    where: blog_bool_exp
  ): [blog!]!

  """
  fetch aggregated fields from the table: "blog"
  """
  blog_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_order_by!]

    """filter the rows returned"""
    where: blog_bool_exp
  ): blog_aggregate!

  """fetch data from the table: "blog" using primary key columns"""
  blog_by_pk(blog_id: Int!): blog

  """fetch data from the table: "storage.buckets" using primary key columns"""
  bucket(id: String!): buckets

  """
  fetch data from the table: "storage.buckets"
  """
  buckets(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]

    """filter the rows returned"""
    where: buckets_bool_exp
  ): [buckets!]!

  """
  fetch aggregated fields from the table: "storage.buckets"
  """
  bucketsAggregate(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]

    """filter the rows returned"""
    where: buckets_bool_exp
  ): buckets_aggregate!

  """
  fetch data from the table: "cs_message"
  """
  cs_message(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): [cs_message!]!

  """
  fetch aggregated fields from the table: "cs_message"
  """
  cs_message_aggregate(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): cs_message_aggregate!

  """fetch data from the table: "cs_message" using primary key columns"""
  cs_message_by_pk(cs_message_id: Int!): cs_message

  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files

  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "storage.files"
  """
  filesAggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """
  fetch data from the table: "investment"
  """
  investment(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): [investment!]!

  """
  fetch aggregated fields from the table: "investment"
  """
  investment_aggregate(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): investment_aggregate!

  """fetch data from the table: "investment" using primary key columns"""
  investment_by_pk(investment_id: Int!): investment

  """
  fetch data from the table: "investor"
  """
  investor(
    """distinct select on columns"""
    distinct_on: [investor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investor_order_by!]

    """filter the rows returned"""
    where: investor_bool_exp
  ): [investor!]!

  """
  fetch aggregated fields from the table: "investor"
  """
  investor_aggregate(
    """distinct select on columns"""
    distinct_on: [investor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investor_order_by!]

    """filter the rows returned"""
    where: investor_bool_exp
  ): investor_aggregate!

  """fetch data from the table: "investor" using primary key columns"""
  investor_by_pk(investor_id: Int!): investor

  """
  fetch data from the table: "payment_due"
  """
  payment_due(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): [payment_due!]!

  """
  fetch aggregated fields from the table: "payment_due"
  """
  payment_due_aggregate(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): payment_due_aggregate!

  """fetch data from the table: "payment_due" using primary key columns"""
  payment_due_by_pk(payment_due_id: uuid!): payment_due

  """
  fetch data from the table: "payment_investment"
  """
  payment_investment(
    """distinct select on columns"""
    distinct_on: [payment_investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_investment_order_by!]

    """filter the rows returned"""
    where: payment_investment_bool_exp
  ): [payment_investment!]!

  """
  fetch aggregated fields from the table: "payment_investment"
  """
  payment_investment_aggregate(
    """distinct select on columns"""
    distinct_on: [payment_investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_investment_order_by!]

    """filter the rows returned"""
    where: payment_investment_bool_exp
  ): payment_investment_aggregate!

  """
  fetch data from the table: "payment_investment" using primary key columns
  """
  payment_investment_by_pk(payment_investment_id: uuid!): payment_investment

  """
  fetch data from the table: "profile"
  """
  profile(
    """distinct select on columns"""
    distinct_on: [profile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [profile_order_by!]

    """filter the rows returned"""
    where: profile_bool_exp
  ): [profile!]!

  """
  fetch aggregated fields from the table: "profile"
  """
  profile_aggregate(
    """distinct select on columns"""
    distinct_on: [profile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [profile_order_by!]

    """filter the rows returned"""
    where: profile_bool_exp
  ): profile_aggregate!

  """fetch data from the table: "profile" using primary key columns"""
  profile_by_pk(profile_id: Int!): profile

  """
  fetch data from the table: "proposal"
  """
  proposal(
    """distinct select on columns"""
    distinct_on: [proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_order_by!]

    """filter the rows returned"""
    where: proposal_bool_exp
  ): [proposal!]!

  """
  fetch aggregated fields from the table: "proposal"
  """
  proposal_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_order_by!]

    """filter the rows returned"""
    where: proposal_bool_exp
  ): proposal_aggregate!

  """fetch data from the table: "proposal" using primary key columns"""
  proposal_by_pk(proposal_id: Int!): proposal

  """
  fetch data from the table: "umkm"
  """
  umkm(
    """distinct select on columns"""
    distinct_on: [umkm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [umkm_order_by!]

    """filter the rows returned"""
    where: umkm_bool_exp
  ): [umkm!]!

  """
  fetch aggregated fields from the table: "umkm"
  """
  umkm_aggregate(
    """distinct select on columns"""
    distinct_on: [umkm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [umkm_order_by!]

    """filter the rows returned"""
    where: umkm_bool_exp
  ): umkm_aggregate!

  """fetch data from the table: "umkm" using primary key columns"""
  umkm_by_pk(umkm_id: Int!): umkm

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "auth.users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
}

type subscription_root {
  """fetch data from the table: "auth.providers" using primary key columns"""
  authProvider(id: String!): authProviders

  """
  fetch data from the table: "auth.provider_requests" using primary key columns
  """
  authProviderRequest(id: uuid!): authProviderRequests

  """
  fetch data from the table: "auth.provider_requests"
  """
  authProviderRequests(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]

    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): [authProviderRequests!]!

  """
  fetch aggregated fields from the table: "auth.provider_requests"
  """
  authProviderRequestsAggregate(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]

    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): authProviderRequests_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.provider_requests"
  """
  authProviderRequests_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authProviderRequests_stream_cursor_input]!

    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): [authProviderRequests!]!

  """
  fetch data from the table: "auth.providers"
  """
  authProviders(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]

    """filter the rows returned"""
    where: authProviders_bool_exp
  ): [authProviders!]!

  """
  fetch aggregated fields from the table: "auth.providers"
  """
  authProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]

    """filter the rows returned"""
    where: authProviders_bool_exp
  ): authProviders_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.providers"
  """
  authProviders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authProviders_stream_cursor_input]!

    """filter the rows returned"""
    where: authProviders_bool_exp
  ): [authProviders!]!

  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens

  """
  fetch data from the table: "auth.refresh_token_types" using primary key columns
  """
  authRefreshTokenType(value: String!): authRefreshTokenTypes

  """
  fetch data from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypes(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]

    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): [authRefreshTokenTypes!]!

  """
  fetch aggregated fields from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypesAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]

    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): authRefreshTokenTypes_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.refresh_token_types"
  """
  authRefreshTokenTypes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authRefreshTokenTypes_stream_cursor_input]!

    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): [authRefreshTokenTypes!]!

  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  authRefreshTokensAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.refresh_tokens"
  """
  authRefreshTokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authRefreshTokens_stream_cursor_input]!

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """fetch data from the table: "auth.roles" using primary key columns"""
  authRole(role: String!): authRoles

  """
  fetch data from the table: "auth.roles"
  """
  authRoles(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]

    """filter the rows returned"""
    where: authRoles_bool_exp
  ): [authRoles!]!

  """
  fetch aggregated fields from the table: "auth.roles"
  """
  authRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]

    """filter the rows returned"""
    where: authRoles_bool_exp
  ): authRoles_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.roles"
  """
  authRoles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authRoles_stream_cursor_input]!

    """filter the rows returned"""
    where: authRoles_bool_exp
  ): [authRoles!]!

  """
  fetch data from the table: "auth.user_providers" using primary key columns
  """
  authUserProvider(id: uuid!): authUserProviders

  """
  fetch data from the table: "auth.user_providers"
  """
  authUserProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """
  fetch aggregated fields from the table: "auth.user_providers"
  """
  authUserProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.user_providers"
  """
  authUserProviders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authUserProviders_stream_cursor_input]!

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """fetch data from the table: "auth.user_roles" using primary key columns"""
  authUserRole(id: uuid!): authUserRoles

  """
  fetch data from the table: "auth.user_roles"
  """
  authUserRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """
  fetch aggregated fields from the table: "auth.user_roles"
  """
  authUserRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.user_roles"
  """
  authUserRoles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authUserRoles_stream_cursor_input]!

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """
  fetch data from the table: "auth.user_security_keys" using primary key columns
  """
  authUserSecurityKey(id: uuid!): authUserSecurityKeys

  """
  fetch data from the table: "auth.user_security_keys"
  """
  authUserSecurityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """
  fetch aggregated fields from the table: "auth.user_security_keys"
  """
  authUserSecurityKeysAggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.user_security_keys"
  """
  authUserSecurityKeys_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [authUserSecurityKeys_stream_cursor_input]!

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """
  fetch data from the table: "bank_card"
  """
  bank_card(
    """distinct select on columns"""
    distinct_on: [bank_card_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bank_card_order_by!]

    """filter the rows returned"""
    where: bank_card_bool_exp
  ): [bank_card!]!

  """
  fetch aggregated fields from the table: "bank_card"
  """
  bank_card_aggregate(
    """distinct select on columns"""
    distinct_on: [bank_card_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bank_card_order_by!]

    """filter the rows returned"""
    where: bank_card_bool_exp
  ): bank_card_aggregate!

  """fetch data from the table: "bank_card" using primary key columns"""
  bank_card_by_pk(bank_card_id: uuid!): bank_card

  """
  fetch data from the table in a streaming manner: "bank_card"
  """
  bank_card_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [bank_card_stream_cursor_input]!

    """filter the rows returned"""
    where: bank_card_bool_exp
  ): [bank_card!]!

  """
  fetch data from the table: "blog"
  """
  blog(
    """distinct select on columns"""
    distinct_on: [blog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_order_by!]

    """filter the rows returned"""
    where: blog_bool_exp
  ): [blog!]!

  """
  fetch aggregated fields from the table: "blog"
  """
  blog_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_order_by!]

    """filter the rows returned"""
    where: blog_bool_exp
  ): blog_aggregate!

  """fetch data from the table: "blog" using primary key columns"""
  blog_by_pk(blog_id: Int!): blog

  """
  fetch data from the table in a streaming manner: "blog"
  """
  blog_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [blog_stream_cursor_input]!

    """filter the rows returned"""
    where: blog_bool_exp
  ): [blog!]!

  """fetch data from the table: "storage.buckets" using primary key columns"""
  bucket(id: String!): buckets

  """
  fetch data from the table: "storage.buckets"
  """
  buckets(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]

    """filter the rows returned"""
    where: buckets_bool_exp
  ): [buckets!]!

  """
  fetch aggregated fields from the table: "storage.buckets"
  """
  bucketsAggregate(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]

    """filter the rows returned"""
    where: buckets_bool_exp
  ): buckets_aggregate!

  """
  fetch data from the table in a streaming manner: "storage.buckets"
  """
  buckets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [buckets_stream_cursor_input]!

    """filter the rows returned"""
    where: buckets_bool_exp
  ): [buckets!]!

  """
  fetch data from the table: "cs_message"
  """
  cs_message(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): [cs_message!]!

  """
  fetch aggregated fields from the table: "cs_message"
  """
  cs_message_aggregate(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): cs_message_aggregate!

  """fetch data from the table: "cs_message" using primary key columns"""
  cs_message_by_pk(cs_message_id: Int!): cs_message

  """
  fetch data from the table in a streaming manner: "cs_message"
  """
  cs_message_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [cs_message_stream_cursor_input]!

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): [cs_message!]!

  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files

  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "storage.files"
  """
  filesAggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """
  fetch data from the table in a streaming manner: "storage.files"
  """
  files_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [files_stream_cursor_input]!

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table: "investment"
  """
  investment(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): [investment!]!

  """
  fetch aggregated fields from the table: "investment"
  """
  investment_aggregate(
    """distinct select on columns"""
    distinct_on: [investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investment_order_by!]

    """filter the rows returned"""
    where: investment_bool_exp
  ): investment_aggregate!

  """fetch data from the table: "investment" using primary key columns"""
  investment_by_pk(investment_id: Int!): investment

  """
  fetch data from the table in a streaming manner: "investment"
  """
  investment_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [investment_stream_cursor_input]!

    """filter the rows returned"""
    where: investment_bool_exp
  ): [investment!]!

  """
  fetch data from the table: "investor"
  """
  investor(
    """distinct select on columns"""
    distinct_on: [investor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investor_order_by!]

    """filter the rows returned"""
    where: investor_bool_exp
  ): [investor!]!

  """
  fetch aggregated fields from the table: "investor"
  """
  investor_aggregate(
    """distinct select on columns"""
    distinct_on: [investor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [investor_order_by!]

    """filter the rows returned"""
    where: investor_bool_exp
  ): investor_aggregate!

  """fetch data from the table: "investor" using primary key columns"""
  investor_by_pk(investor_id: Int!): investor

  """
  fetch data from the table in a streaming manner: "investor"
  """
  investor_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [investor_stream_cursor_input]!

    """filter the rows returned"""
    where: investor_bool_exp
  ): [investor!]!

  """
  fetch data from the table: "payment_due"
  """
  payment_due(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): [payment_due!]!

  """
  fetch aggregated fields from the table: "payment_due"
  """
  payment_due_aggregate(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): payment_due_aggregate!

  """fetch data from the table: "payment_due" using primary key columns"""
  payment_due_by_pk(payment_due_id: uuid!): payment_due

  """
  fetch data from the table in a streaming manner: "payment_due"
  """
  payment_due_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [payment_due_stream_cursor_input]!

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): [payment_due!]!

  """
  fetch data from the table: "payment_investment"
  """
  payment_investment(
    """distinct select on columns"""
    distinct_on: [payment_investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_investment_order_by!]

    """filter the rows returned"""
    where: payment_investment_bool_exp
  ): [payment_investment!]!

  """
  fetch aggregated fields from the table: "payment_investment"
  """
  payment_investment_aggregate(
    """distinct select on columns"""
    distinct_on: [payment_investment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_investment_order_by!]

    """filter the rows returned"""
    where: payment_investment_bool_exp
  ): payment_investment_aggregate!

  """
  fetch data from the table: "payment_investment" using primary key columns
  """
  payment_investment_by_pk(payment_investment_id: uuid!): payment_investment

  """
  fetch data from the table in a streaming manner: "payment_investment"
  """
  payment_investment_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [payment_investment_stream_cursor_input]!

    """filter the rows returned"""
    where: payment_investment_bool_exp
  ): [payment_investment!]!

  """
  fetch data from the table: "profile"
  """
  profile(
    """distinct select on columns"""
    distinct_on: [profile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [profile_order_by!]

    """filter the rows returned"""
    where: profile_bool_exp
  ): [profile!]!

  """
  fetch aggregated fields from the table: "profile"
  """
  profile_aggregate(
    """distinct select on columns"""
    distinct_on: [profile_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [profile_order_by!]

    """filter the rows returned"""
    where: profile_bool_exp
  ): profile_aggregate!

  """fetch data from the table: "profile" using primary key columns"""
  profile_by_pk(profile_id: Int!): profile

  """
  fetch data from the table in a streaming manner: "profile"
  """
  profile_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [profile_stream_cursor_input]!

    """filter the rows returned"""
    where: profile_bool_exp
  ): [profile!]!

  """
  fetch data from the table: "proposal"
  """
  proposal(
    """distinct select on columns"""
    distinct_on: [proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_order_by!]

    """filter the rows returned"""
    where: proposal_bool_exp
  ): [proposal!]!

  """
  fetch aggregated fields from the table: "proposal"
  """
  proposal_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_order_by!]

    """filter the rows returned"""
    where: proposal_bool_exp
  ): proposal_aggregate!

  """fetch data from the table: "proposal" using primary key columns"""
  proposal_by_pk(proposal_id: Int!): proposal

  """
  fetch data from the table in a streaming manner: "proposal"
  """
  proposal_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [proposal_stream_cursor_input]!

    """filter the rows returned"""
    where: proposal_bool_exp
  ): [proposal!]!

  """
  fetch data from the table: "umkm"
  """
  umkm(
    """distinct select on columns"""
    distinct_on: [umkm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [umkm_order_by!]

    """filter the rows returned"""
    where: umkm_bool_exp
  ): [umkm!]!

  """
  fetch aggregated fields from the table: "umkm"
  """
  umkm_aggregate(
    """distinct select on columns"""
    distinct_on: [umkm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [umkm_order_by!]

    """filter the rows returned"""
    where: umkm_bool_exp
  ): umkm_aggregate!

  """fetch data from the table: "umkm" using primary key columns"""
  umkm_by_pk(umkm_id: Int!): umkm

  """
  fetch data from the table in a streaming manner: "umkm"
  """
  umkm_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [umkm_stream_cursor_input]!

    """filter the rows returned"""
    where: umkm_bool_exp
  ): [umkm!]!

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "auth.users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table in a streaming manner: "auth.users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "umkm"
"""
type umkm {
  created_at: timestamptz

  """An array relationship"""
  payment_dues(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): [payment_due!]!

  """An aggregate relationship"""
  payment_dues_aggregate(
    """distinct select on columns"""
    distinct_on: [payment_due_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [payment_due_order_by!]

    """filter the rows returned"""
    where: payment_due_bool_exp
  ): payment_due_aggregate!

  """An array relationship"""
  proposals(
    """distinct select on columns"""
    distinct_on: [proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_order_by!]

    """filter the rows returned"""
    where: proposal_bool_exp
  ): [proposal!]!

  """An aggregate relationship"""
  proposals_aggregate(
    """distinct select on columns"""
    distinct_on: [proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [proposal_order_by!]

    """filter the rows returned"""
    where: proposal_bool_exp
  ): proposal_aggregate!
  umkm_desc: String!
  umkm_id: Int!
  umkm_name: String!
  umkm_performance: String!
  umkm_shares: Int!
  updated_at: timestamptz

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "umkm"
"""
type umkm_aggregate {
  aggregate: umkm_aggregate_fields
  nodes: [umkm!]!
}

"""
aggregate fields of "umkm"
"""
type umkm_aggregate_fields {
  avg: umkm_avg_fields
  count(columns: [umkm_select_column!], distinct: Boolean): Int!
  max: umkm_max_fields
  min: umkm_min_fields
  stddev: umkm_stddev_fields
  stddev_pop: umkm_stddev_pop_fields
  stddev_samp: umkm_stddev_samp_fields
  sum: umkm_sum_fields
  var_pop: umkm_var_pop_fields
  var_samp: umkm_var_samp_fields
  variance: umkm_variance_fields
}

"""aggregate avg on columns"""
type umkm_avg_fields {
  umkm_id: Float
  umkm_shares: Float
}

"""
Boolean expression to filter rows from the table "umkm". All fields are combined with a logical 'AND'.
"""
input umkm_bool_exp {
  _and: [umkm_bool_exp!]
  _not: umkm_bool_exp
  _or: [umkm_bool_exp!]
  created_at: timestamptz_comparison_exp
  payment_dues: payment_due_bool_exp
  payment_dues_aggregate: payment_due_aggregate_bool_exp
  proposals: proposal_bool_exp
  proposals_aggregate: proposal_aggregate_bool_exp
  umkm_desc: String_comparison_exp
  umkm_id: Int_comparison_exp
  umkm_name: String_comparison_exp
  umkm_performance: String_comparison_exp
  umkm_shares: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "umkm"
"""
enum umkm_constraint {
  """
  unique or primary key constraint on columns "umkm_id"
  """
  umkm_pkey

  """
  unique or primary key constraint on columns "user_id"
  """
  umkm_user_id_key
}

"""
input type for incrementing numeric columns in table "umkm"
"""
input umkm_inc_input {
  umkm_shares: Int
}

"""
input type for inserting data into table "umkm"
"""
input umkm_insert_input {
  created_at: timestamptz
  payment_dues: payment_due_arr_rel_insert_input
  proposals: proposal_arr_rel_insert_input
  umkm_desc: String
  umkm_name: String
  umkm_performance: String
  umkm_shares: Int
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type umkm_max_fields {
  created_at: timestamptz
  umkm_desc: String
  umkm_id: Int
  umkm_name: String
  umkm_performance: String
  umkm_shares: Int
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate min on columns"""
type umkm_min_fields {
  created_at: timestamptz
  umkm_desc: String
  umkm_id: Int
  umkm_name: String
  umkm_performance: String
  umkm_shares: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
response of any mutation on the table "umkm"
"""
type umkm_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [umkm!]!
}

"""
input type for inserting object relation for remote table "umkm"
"""
input umkm_obj_rel_insert_input {
  data: umkm_insert_input!

  """upsert condition"""
  on_conflict: umkm_on_conflict
}

"""
on_conflict condition type for table "umkm"
"""
input umkm_on_conflict {
  constraint: umkm_constraint!
  update_columns: [umkm_update_column!]! = []
  where: umkm_bool_exp
}

"""Ordering options when selecting data from "umkm"."""
input umkm_order_by {
  created_at: order_by
  payment_dues_aggregate: payment_due_aggregate_order_by
  proposals_aggregate: proposal_aggregate_order_by
  umkm_desc: order_by
  umkm_id: order_by
  umkm_name: order_by
  umkm_performance: order_by
  umkm_shares: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: umkm"""
input umkm_pk_columns_input {
  umkm_id: Int!
}

"""
select columns of table "umkm"
"""
enum umkm_select_column {
  """column name"""
  created_at

  """column name"""
  umkm_desc

  """column name"""
  umkm_id

  """column name"""
  umkm_name

  """column name"""
  umkm_performance

  """column name"""
  umkm_shares

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "umkm"
"""
input umkm_set_input {
  created_at: timestamptz
  umkm_desc: String
  umkm_name: String
  umkm_performance: String
  umkm_shares: Int
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate stddev on columns"""
type umkm_stddev_fields {
  umkm_id: Float
  umkm_shares: Float
}

"""aggregate stddev_pop on columns"""
type umkm_stddev_pop_fields {
  umkm_id: Float
  umkm_shares: Float
}

"""aggregate stddev_samp on columns"""
type umkm_stddev_samp_fields {
  umkm_id: Float
  umkm_shares: Float
}

"""
Streaming cursor of the table "umkm"
"""
input umkm_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: umkm_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input umkm_stream_cursor_value_input {
  created_at: timestamptz
  umkm_desc: String
  umkm_id: Int
  umkm_name: String
  umkm_performance: String
  umkm_shares: Int
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate sum on columns"""
type umkm_sum_fields {
  umkm_id: Int
  umkm_shares: Int
}

"""
update columns of table "umkm"
"""
enum umkm_update_column {
  """column name"""
  created_at

  """column name"""
  umkm_desc

  """column name"""
  umkm_name

  """column name"""
  umkm_performance

  """column name"""
  umkm_shares

  """column name"""
  updated_at

  """column name"""
  user_id
}

input umkm_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: umkm_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: umkm_set_input
  where: umkm_bool_exp!
}

"""aggregate var_pop on columns"""
type umkm_var_pop_fields {
  umkm_id: Float
  umkm_shares: Float
}

"""aggregate var_samp on columns"""
type umkm_var_samp_fields {
  umkm_id: Float
  umkm_shares: Float
}

"""aggregate variance on columns"""
type umkm_variance_fields {
  umkm_id: Float
  umkm_shares: Float
}

"""
User account information. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type users {
  """An object relationship"""
  UMKMById: umkm
  activeMfaType: String

  """An array relationship"""
  agent_cs_messages(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): [cs_message!]!

  """An aggregate relationship"""
  agent_cs_messages_aggregate(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): cs_message_aggregate!
  avatarUrl: String!
  createdAt: timestamptz!

  """An array relationship"""
  cs_messages(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): [cs_message!]!

  """An aggregate relationship"""
  cs_messages_aggregate(
    """distinct select on columns"""
    distinct_on: [cs_message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cs_message_order_by!]

    """filter the rows returned"""
    where: cs_message_bool_exp
  ): cs_message_aggregate!
  currentChallenge: String
  defaultRole: String!

  """An object relationship"""
  defaultRoleByRole: authRoles!
  disabled: Boolean!
  displayName: String!
  email: citext
  emailVerified: Boolean!
  id: uuid!

  """An object relationship"""
  investorById: investor
  isAnonymous: Boolean!
  lastSeen: timestamptz
  locale: String!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz!
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean!

  """An object relationship"""
  profile: profile

  """An array relationship"""
  refreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!

  """An aggregate relationship"""
  refreshTokens_aggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]

    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!

  """An aggregate relationship"""
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]

    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!

  """An array relationship"""
  securityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!

  """An aggregate relationship"""
  securityKeys_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]

    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!
  ticket: String
  ticketExpiresAt: timestamptz!
  totpSecret: String
  updatedAt: timestamptz!

  """An array relationship"""
  userProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!

  """An aggregate relationship"""
  userProviders_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]

    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!
}

"""
aggregated selection of "auth.users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

input users_aggregate_bool_exp {
  bool_and: users_aggregate_bool_exp_bool_and
  bool_or: users_aggregate_bool_exp_bool_or
  count: users_aggregate_bool_exp_count
}

input users_aggregate_bool_exp_bool_and {
  arguments: users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: users_bool_exp
  predicate: Boolean_comparison_exp!
}

input users_aggregate_bool_exp_bool_or {
  arguments: users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: users_bool_exp
  predicate: Boolean_comparison_exp!
}

input users_aggregate_bool_exp_count {
  arguments: [users_select_column!]
  distinct: Boolean
  filter: users_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "auth.users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input users_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "auth.users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  UMKMById: umkm_bool_exp
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  activeMfaType: String_comparison_exp
  agent_cs_messages: cs_message_bool_exp
  agent_cs_messages_aggregate: cs_message_aggregate_bool_exp
  avatarUrl: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  cs_messages: cs_message_bool_exp
  cs_messages_aggregate: cs_message_aggregate_bool_exp
  currentChallenge: String_comparison_exp
  defaultRole: String_comparison_exp
  defaultRoleByRole: authRoles_bool_exp
  disabled: Boolean_comparison_exp
  displayName: String_comparison_exp
  email: citext_comparison_exp
  emailVerified: Boolean_comparison_exp
  id: uuid_comparison_exp
  investorById: investor_bool_exp
  isAnonymous: Boolean_comparison_exp
  lastSeen: timestamptz_comparison_exp
  locale: String_comparison_exp
  metadata: jsonb_comparison_exp
  newEmail: citext_comparison_exp
  otpHash: String_comparison_exp
  otpHashExpiresAt: timestamptz_comparison_exp
  otpMethodLastUsed: String_comparison_exp
  passwordHash: String_comparison_exp
  phoneNumber: String_comparison_exp
  phoneNumberVerified: Boolean_comparison_exp
  profile: profile_bool_exp
  refreshTokens: authRefreshTokens_bool_exp
  refreshTokens_aggregate: authRefreshTokens_aggregate_bool_exp
  roles: authUserRoles_bool_exp
  roles_aggregate: authUserRoles_aggregate_bool_exp
  securityKeys: authUserSecurityKeys_bool_exp
  securityKeys_aggregate: authUserSecurityKeys_aggregate_bool_exp
  ticket: String_comparison_exp
  ticketExpiresAt: timestamptz_comparison_exp
  totpSecret: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  userProviders: authUserProviders_bool_exp
  userProviders_aggregate: authUserProviders_aggregate_bool_exp
}

"""
unique or primary key constraints on table "auth.users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key

  """
  unique or primary key constraint on columns "phone_number"
  """
  users_phone_number_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input users_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input users_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input users_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "auth.users"
"""
input users_insert_input {
  UMKMById: umkm_obj_rel_insert_input
  activeMfaType: String
  agent_cs_messages: cs_message_arr_rel_insert_input
  avatarUrl: String
  createdAt: timestamptz
  cs_messages: cs_message_arr_rel_insert_input
  currentChallenge: String
  defaultRole: String
  defaultRoleByRole: authRoles_obj_rel_insert_input
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  investorById: investor_obj_rel_insert_input
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean
  profile: profile_obj_rel_insert_input
  refreshTokens: authRefreshTokens_arr_rel_insert_input
  roles: authUserRoles_arr_rel_insert_input
  securityKeys: authUserSecurityKeys_arr_rel_insert_input
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
  userProviders: authUserProviders_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
order by max() on columns of table "auth.users"
"""
input users_max_order_by {
  activeMfaType: order_by
  avatarUrl: order_by
  createdAt: order_by
  currentChallenge: order_by
  defaultRole: order_by
  displayName: order_by
  email: order_by
  id: order_by
  lastSeen: order_by
  locale: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
order by min() on columns of table "auth.users"
"""
input users_min_order_by {
  activeMfaType: order_by
  avatarUrl: order_by
  createdAt: order_by
  currentChallenge: order_by
  defaultRole: order_by
  displayName: order_by
  email: order_by
  id: order_by
  lastSeen: order_by
  locale: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "auth.users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "auth.users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "auth.users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "auth.users"."""
input users_order_by {
  UMKMById: umkm_order_by
  activeMfaType: order_by
  agent_cs_messages_aggregate: cs_message_aggregate_order_by
  avatarUrl: order_by
  createdAt: order_by
  cs_messages_aggregate: cs_message_aggregate_order_by
  currentChallenge: order_by
  defaultRole: order_by
  defaultRoleByRole: authRoles_order_by
  disabled: order_by
  displayName: order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  investorById: investor_order_by
  isAnonymous: order_by
  lastSeen: order_by
  locale: order_by
  metadata: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  phoneNumberVerified: order_by
  profile: profile_order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
  roles_aggregate: authUserRoles_aggregate_order_by
  securityKeys_aggregate: authUserSecurityKeys_aggregate_order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
  userProviders_aggregate: authUserProviders_aggregate_order_by
}

"""primary key columns input for table: auth.users"""
input users_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input users_prepend_input {
  metadata: jsonb
}

"""
select columns of table "auth.users"
"""
enum users_select_column {
  """column name"""
  activeMfaType

  """column name"""
  avatarUrl

  """column name"""
  createdAt

  """column name"""
  currentChallenge

  """column name"""
  defaultRole

  """column name"""
  disabled

  """column name"""
  displayName

  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  isAnonymous

  """column name"""
  lastSeen

  """column name"""
  locale

  """column name"""
  metadata

  """column name"""
  newEmail

  """column name"""
  otpHash

  """column name"""
  otpHashExpiresAt

  """column name"""
  otpMethodLastUsed

  """column name"""
  passwordHash

  """column name"""
  phoneNumber

  """column name"""
  phoneNumberVerified

  """column name"""
  ticket

  """column name"""
  ticketExpiresAt

  """column name"""
  totpSecret

  """column name"""
  updatedAt
}

"""
select "users_aggregate_bool_exp_bool_and_arguments_columns" columns of table "auth.users"
"""
enum users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  disabled

  """column name"""
  emailVerified

  """column name"""
  isAnonymous

  """column name"""
  phoneNumberVerified
}

"""
select "users_aggregate_bool_exp_bool_or_arguments_columns" columns of table "auth.users"
"""
enum users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  disabled

  """column name"""
  emailVerified

  """column name"""
  isAnonymous

  """column name"""
  phoneNumberVerified
}

"""
input type for updating data in table "auth.users"
"""
input users_set_input {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
update columns of table "auth.users"
"""
enum users_update_column {
  """column name"""
  activeMfaType

  """column name"""
  avatarUrl

  """column name"""
  createdAt

  """column name"""
  currentChallenge

  """column name"""
  defaultRole

  """column name"""
  disabled

  """column name"""
  displayName

  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  isAnonymous

  """column name"""
  lastSeen

  """column name"""
  locale

  """column name"""
  metadata

  """column name"""
  newEmail

  """column name"""
  otpHash

  """column name"""
  otpHashExpiresAt

  """column name"""
  otpMethodLastUsed

  """column name"""
  passwordHash

  """column name"""
  phoneNumber

  """column name"""
  phoneNumberVerified

  """column name"""
  ticket

  """column name"""
  ticketExpiresAt

  """column name"""
  totpSecret

  """column name"""
  updatedAt
}

input users_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: users_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: users_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: users_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: users_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: users_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

